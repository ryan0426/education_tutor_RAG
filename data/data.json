[
  {
    "document": "C++ Tutorial Learn C++ C++ is a popular programming language. C++ is used to create computer programs, and is one of the most used language in game development. C++ was developed as an extension of C, and both languages have almost the same syntax. Examples in Each Chapter Our \"Try it Yourself\" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser. Example Click on the \"Run example\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. C++ is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed. C++ Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all C++ Exercises C++ Quiz Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++. Start C++ Quiz Learn by Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All C++ Examples Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. C++ Reference You will also find references for different libraries, keywords and functions: C++ Keywords C++ <iostream> objects C++ <fstream> classes C++ <cmath> functions C++ <string> functions C++ <cstring> functions C++ <ctime> functions C++ <vector> functions C++ <algorithm> functions Kickstart your career Get certified by completing the course"
  },
  {
    "document": "C++ Introduction What is C++? C++ is a cross-platform language that can be used to create high-performance applications. C++ was developed by Bjarne Stroustrup, as an extension to the C language. C++ gives programmers a high level of control over system resources and memory. The language was updated 5 major times in 2011, 2014, 2017, 2020, and 2023 to C++11, C++14, C++17, C++20, and C++23. Why Use C++ C++ is one of the world's most popular programming languages. C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems. C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs. C++ is portable and can be used to develop applications that can be adapted to multiple platforms. C++ is fun and easy to learn! As C++ is close to C, C# and Java, it makes it easy for programmers to switch to C++ or vice versa. Difference between C and C++ C++ was developed as an extension of C, and both languages have almost the same syntax. The main difference between C and C++ is that C++ supports classes and objects, while C does not. Get Started This tutorial will teach you the basics of C++. When you are finished with this tutorial, you will be able to write C++ programs and create real-life examples. It is not necessary to have any prior programming experience."
  },
  {
    "document": "C++ Getting Started C++ Get Started To start using C++, you need two things: There are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below). C++ Install IDE An IDE (Integrated Development Environment) is used to edit AND compile the code. Popular IDE's include Code::Blocks, Eclipse, and Visual Studio. These are all free, and they can be used to both edit and debug C++ code. Note: Web-based IDE's can work as well, but functionality is limited. We will use Code::Blocks in our tutorial, which we believe is a good place to start. You can find the latest version of Codeblocks at http://www.codeblocks.org/. Download the mingw-setup.exe file, which will install the text editor with a compiler. mingw-setup.exe C++ Quickstart Let's create our first C++ file. Open Codeblocks and go to File > New > Empty File. Write the following C++ code and save the file as myfirstprogram.cpp (File > Save File as): myfirstprogram.cpp Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code. In Codeblocks, it should look like this: Then, go to Build > Build and Run to run (execute) the program. The result will look something to this: Hello World!Process returned 0 (0x0) execution time : 0.011 sPress any key to continue. Congratulations! You have now written and executed your first C++ program. Learning C++ At W3Schools When learning C++ at W3Schools.com, you can use our \"Try it Yourself\" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward: myfirstprogram.cpp Code: Result: Hello World!"
  },
  {
    "document": "C++ Syntax C++ Syntax Let's break up the following code to understand it better: Example Example explained Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs. #include <iostream> cout Line 2: using namespace std means that we can use names for objects and variables from the standard library. using namespace std Don't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program. #include <iostream> using namespace std Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable. Line 4: Another thing that always appear in a C++ program is int main(). This is called a function. Any code inside its curly brackets {} will be executed. int main() {} Line 5: cout (pronounced \"see-out\") is an object used together with the insertion operator (<<) to output/print text. In our example, it will output \"Hello World!\". cout << Note: C++ is case-sensitive: \"cout\" and \"Cout\" has different meaning. Note: Every C++ statement ends with a semicolon ;. ; Note: The body of int main() could also been written as: int main () { cout << \"Hello World! \"; return 0; } int main() int main () { cout << \"Hello World! \"; return 0; } Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable. Line 6: return 0; ends the main function. return 0; Line 7: Do not forget to add the closing curly bracket } to actually end the main function. } Omitting Namespace You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects: using namespace std std :: Example It is up to you if you want to include the standard namespace library or not."
  },
  {
    "document": "C++ Syntax C++ Syntax Let's break up the following code to understand it better: Example Example explained Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs. #include <iostream> cout Line 2: using namespace std means that we can use names for objects and variables from the standard library. using namespace std Don't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program. #include <iostream> using namespace std Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable. Line 4: Another thing that always appear in a C++ program is int main(). This is called a function. Any code inside its curly brackets {} will be executed. int main() {} Line 5: cout (pronounced \"see-out\") is an object used together with the insertion operator (<<) to output/print text. In our example, it will output \"Hello World!\". cout << Note: C++ is case-sensitive: \"cout\" and \"Cout\" has different meaning. Note: Every C++ statement ends with a semicolon ;. ; Note: The body of int main() could also been written as: int main () { cout << \"Hello World! \"; return 0; } int main() int main () { cout << \"Hello World! \"; return 0; } Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable. Line 6: return 0; ends the main function. return 0; Line 7: Do not forget to add the closing curly bracket } to actually end the main function. } Omitting Namespace You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects: using namespace std std :: Example It is up to you if you want to include the standard namespace library or not."
  },
  {
    "document": "C++ Statements C++ Statements A computer program is a list of \"instructions\" to be \"executed\" by a computer. In a programming language, these programming instructions are called statements. The following statement \"instructs\" the compiler to print the text \"Hello World\" to the screen: Example It is important that you end the statement with a semicolon ; ; If you forget the semicolon (;), an error will occur and the program will not run: ; Example error: expected ';' before 'return' Try it Yourself Â» Many Statements Most C++ programs contain many statements. The statements are executed, one by one, in the same order as they are written: Example From the example above, we have three statements: cout << \"Hello World! \"; cout << \"Have a good day! \"; return 0; The first statement is executed first (print \"Hello World!\" to the screen). Then the second statement is executed (print \"Have a good day!\" to the screen). And at last, the third statement is executed (end the C++ program successfully). You will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors. Coming up: The next chapter will teach you how to control the output and how to insert new lines to make it more readable."
  },
  {
    "document": "C++ Output (Print Text) C++ Output (Print Text) The cout object, together with the << operator, is used to output values and print text. cout << Just remember to surround the text with double quotes (\"\"): \"\" Example You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output: cout Example Tip: You will learn how to add new lines in the C++ New Lines chapter."
  },
  {
    "document": "C++ Output (Print Text) C++ Output (Print Text) The cout object, together with the << operator, is used to output values and print text. cout << Just remember to surround the text with double quotes (\"\"): \"\" Example You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output: cout Example Tip: You will learn how to add new lines in the C++ New Lines chapter."
  },
  {
    "document": "C++ Output Numbers C++ Print Numbers You can also use cout() to print numbers. cout() However, unlike text, we don't put numbers inside double quotes: Example You can also perform mathematical calculations: Example Example"
  },
  {
    "document": "C++ New Lines New Lines To insert a new line in your output, you can use the \\n character: \\n Example You can also use another << operator and place the \\n character after the text, like this: << \\n Example Tip: Two \\n characters after each other will create a blank line: \\n Example Another way to insert a new line, is with the endl manipulator: endl Example Both \\n and endl are used to break lines. However, \\n is most used. \\n endl \\n \\n The newline character (\\n) is called an escape sequence, and it forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line. \\n Examples of other valid escape sequences are:"
  },
  {
    "document": "C++ Comments C++ Comments Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined. Single-line Comments Single-line comments start with two forward slashes (//). // Any text between // and the end of the line is ignored by the compiler (will not be executed). // This example uses a single-line comment before a line of code: Example This example uses a single-line comment at the end of a line of code: Example C++ Multi-line Comments Multi-line comments start with /* and ends with */. /* */ Any text between /* and */ will be ignored by the compiler: /* */ Example It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer. // /* */"
  },
  {
    "document": "C++ Variables C++ Variables Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example: int double char string bool Declaring (Creating) Variables To create a variable, specify the type and assign it a value: Syntax Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable. int To create a variable that should store a number, look at the following example: Example Create a variable called myNum of type int and assign it the value 15: int You can also declare a variable without assigning the value, and assign the value later: Example Note that if you assign a new value to an existing variable, it will overwrite the previous value: Example Other Types A demonstration of other data types: Example You will learn more about the individual types in the Data Types chapter. Display Variables The cout object is used together with the << operator to display variables. cout << To combine both text and a variable, separate them with the << operator: << Example Add Variables Together To add a variable to another variable, you can use the + operator: + Example"
  },
  {
    "document": "C++ Variables C++ Variables Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example: int double char string bool Declaring (Creating) Variables To create a variable, specify the type and assign it a value: Syntax Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable. int To create a variable that should store a number, look at the following example: Example Create a variable called myNum of type int and assign it the value 15: int You can also declare a variable without assigning the value, and assign the value later: Example Note that if you assign a new value to an existing variable, it will overwrite the previous value: Example Other Types A demonstration of other data types: Example You will learn more about the individual types in the Data Types chapter. Display Variables The cout object is used together with the << operator to display variables. cout << To combine both text and a variable, separate them with the << operator: << Example Add Variables Together To add a variable to another variable, you can use the + operator: + Example"
  },
  {
    "document": "C++ Declare Multiple Variables Declare Many Variables To declare more than one variable of the same type, use a comma-separated list: Example One Value to Multiple Variables You can also assign the same value to multiple variables in one line: Example"
  },
  {
    "document": "C++ Identifiers C++ Identifiers All C++ variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). Note: It is recommended to use descriptive names in order to create understandable and maintainable code: Example The general rules for naming variables are: myVar myvar int"
  },
  {
    "document": "C++ Constants Constants When you do not want others (or yourself) to change existing variable values, use the const keyword (this will declare the variable as \"constant\", which means unchangeable and read-only): const Example You should always declare the variable as constant when you have values that are unlikely to change: Example Notes On Constants When you declare a constant variable, it must be assigned with a value: Example Like this: This however, will not work:"
  },
  {
    "document": "C++ Variables Examples Real-Life Examples Let's get a bit more practical! Often in our examples, we simplify variable names to match their data type (myInt or myNum for int types, myChar for char types, and so on). This is done to avoid confusion. int char However, for a practical example of using variables, we have created a program that stores different data about a college student: Example Calculate the Area of a Rectangle In this real-life example, we create a program to calculate the area of a rectangle (by multiplying the length and width): Example"
  },
  {
    "document": "C++ User Input C++ User Input You have already learned that cout is used to output (print) values. Now we will use cin to get user input. cout cin cin is a predefined variable that reads data from the keyboard with the extraction operator (>>). cin >> In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x: x x Example cout is pronounced \"see-out\". Used for output, and uses the insertion operator (<<) cout << cin is pronounced \"see-in\". Used for input, and uses the extraction operator (>>) cin >> Creating a Simple Calculator In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers: Example There you go! You just built a basic calculator! Complete <iostream> Reference Tip: Both cin and cout belongs to the <iostream> library, which is short for standard input / output streams. For a complete reference of <iostream> objects along with detailed information, go to our C++ iostream Reference. cin cout <iostream>"
  },
  {
    "document": "C++ Data Types C++ Data Types As explained in the Variables chapter, a variable in C++ must be a specified data type: Example Basic Data Types The data type specifies the size and type of information the variable will store: boolean char int float double You will learn more about the individual data types in the next chapters."
  },
  {
    "document": "C++ Data Types C++ Data Types As explained in the Variables chapter, a variable in C++ must be a specified data type: Example Basic Data Types The data type specifies the size and type of information the variable will store: boolean char int float double You will learn more about the individual data types in the next chapters."
  },
  {
    "document": "C++ Numeric Data Types Numeric Types Use int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a floating point number (with decimals), like 9.99 or 3.14515. int float double int float double float vs. double float double The precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations. float double double Scientific Numbers A floating point number can also be a scientific number with an \"e\" to indicate the power of 10: Example"
  },
  {
    "document": "C++ Boolean Data Types Boolean Types A boolean data type is declared with the bool keyword and can only take the values true or false. bool true false When the value is returned, true = 1 and false = 0. true 1 false 0 Example Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter."
  },
  {
    "document": "C++ Character Data Types Character Types The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c': char Example Alternatively, if you are familiar with ASCII, you can use ASCII values to display certain characters: Example Tip: A list of all ASCII values can be found in our ASCII Table Reference."
  },
  {
    "document": "C++ String Data Types String Types The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes: string Example To use strings, you must include an additional header file in the source code, the <string> library: <string> Example You will learn much more about strings in our C++ Strings Chapter."
  },
  {
    "document": "C++ Data Types Examples Real-Life Examples Here's a real-life example of using different data types, to calculate and output the total cost of a number of items: Example"
  },
  {
    "document": "C++ Operators C++ Operators Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: + Example Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable: + Example C++ divides the operators into the following groups: Arithmetic Operators Arithmetic operators are used to perform common mathematical operations."
  },
  {
    "document": "C++ Operators C++ Operators Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: + Example Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable: + Example C++ divides the operators into the following groups: Arithmetic Operators Arithmetic operators are used to perform common mathematical operations."
  },
  {
    "document": "C++ Assignment Operators Assignment Operators Assignment operators are used to assign values to variables. In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x: = Example The addition assignment operator (+=) adds a value to a variable: += Example A list of all assignment operators:"
  },
  {
    "document": "C++ Comparison Operators Comparison Operators Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions. The return value of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter. 1 0 In the following example, we use the greater than operator (>) to find out if 5 is greater than 3: > Example A list of all comparison operators: You will learn much more about comparison operators and how to use them in a later chapter."
  },
  {
    "document": "C++ Logical Operators Logical Operators As with comparison operators, you can also test for true (1) or false (0) values with logical operators. 1 0 Logical operators are used to determine the logic between variables or values: You will learn much more about true and false values in a later chapter."
  },
  {
    "document": "C++ Strings C++ Strings Strings are used for storing text/characters. For example, \"Hello World\" is a string. A string variable contains a collection of characters surrounded by double quotes: string Example Create a variable of type string and assign it a value: string To use strings, you must include an additional header file in the source code, the <string> library: <string> Example"
  },
  {
    "document": "C++ Strings C++ Strings Strings are used for storing text/characters. For example, \"Hello World\" is a string. A string variable contains a collection of characters surrounded by double quotes: string Example Create a variable of type string and assign it a value: string To use strings, you must include an additional header file in the source code, the <string> library: <string> Example"
  },
  {
    "document": "C++ String Concatenation String Concatenation The + operator can be used between strings to add them together to make a new string. This is called concatenation: + Example In the example above, we added a space after firstName to create a space between John and Doe on output. However, you could also add a space with quotes (\" \" or ' '): \" \" ' ' Example Append A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the append() function: append() Example Tip: A list of other useful string functions, can be found in our String Functions Reference."
  },
  {
    "document": "C++ Numbers and Strings Adding Numbers and Strings WARNING! C++ uses the + operator for both addition and concatenation. + Numbers are added. Strings are concatenated. If you add two numbers, the result will be a number: Example If you add two strings, the result will be a string concatenation: Example If you try to add a number to a string, an error occurs: Example"
  },
  {
    "document": "C++ String Length String Length To get the length of a string, use the length() function: length() Example Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length(). It is completely up to you if you want to use length() or size(): size() length() length() size() Example"
  },
  {
    "document": "C++ Access Strings Access Strings You can access the characters in a string by referring to its index number inside square brackets []. [] This example prints the first character in myString: Example Note: String indexes start with 0: [0] is the first character. [1] is the second character, etc. This example prints the second character in myString: Example To print the last character of a string, you can use the following code: Example Change String Characters To change the value of a specific character in a string, refer to the index number, and use single quotes: Example The at() function The <string> library also has an at() function that can be used to access characters in a string: <string> at() Example Tip: A list of other useful string functions, can be found in our String Functions Reference."
  },
  {
    "document": "C++ Special Characters Strings - Special Characters Because strings must be written within quotes, C++ will misunderstand this string, and generate an error: The solution to avoid this problem, is to use the backslash escape character. The backslash (\\) escape character turns special characters into string characters: \\ The sequence \\\" inserts a double quote in a string: Example string txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» The sequence \\' inserts a single quote in a string: Example string txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up \\\" Example string txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» The sequence \\' inserts a single quote in a string: Example string txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example The sequence \\' inserts a single quote in a string: Example string txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up \\' Example string txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example The sequence \\\\ inserts a single backslash in a string: Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up \\\\ Example string txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other popular escape characters in C++ are: Escape Character Result Try it \\n New Line Try it Â» \\t Tab Try it Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Other popular escape characters in C++ are:"
  },
  {
    "document": "C++ User Input Strings User Input Strings It is possible to use the extraction operator >> on cin to store a string entered by a user: >> cin Example However, cin considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only store a single word (even if you type many words): cin Example From the example above, you would expect the program to print \"John Doe\", but it only prints \"John\". That's why, when working with strings, we often use the getline() function to read a line of text. It takes cin as the first parameter, and the string variable as second: getline() cin Example"
  },
  {
    "document": "C++ String Namespace Omitting Namespace You might see some C++ programs that run without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for string (and cout) objects: using namespace std std :: string cout Example It is up to you if you want to include the standard namespace library or not. In our tutorial, we will continue to include the library."
  },
  {
    "document": "C++ C-Style Strings C-Style Strings C-style strings are created with the char type instead of string. char string The name comes from the C language, which, unlike many other programming languages, does not have a string type for easily creating string variables. Instead, you must use the char type and create an array of characters to make a \"string\" in C. string char As C++ was developed as an extension of C, it continued to support this way of creating strings in C++: Example Note: It is more convenient to work with the standard string type, rather than C-style strings. However, one reason some users continue to use C-style strings is that they have access to functions from the C standard library. string A list of all C-style string functions, can be found in our CString Functions Reference."
  },
  {
    "document": "C++ Math C++ Math C++ has many functions that allows you to perform mathematical tasks on numbers. Max and min The max(x,y) function can be used to find the highest value of x and y: max(x,y) Example And the min(x,y) function can be used to find the lowest value of x and y: min(x,y) Example C++ <cmath> Library Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file: sqrt round log <cmath> Example Complete Math Reference For a complete reference of Math functions, go to our C++ Math Reference."
  },
  {
    "document": "C++ Booleans C++ Booleans Very often, in programming, you will need a data type that can only have one of two values, like: For this, C++ has a bool data type, which can take the values true (1) or false (0). bool true false Boolean Values A boolean variable is declared with the bool keyword and can take the values true or false: bool true false Example From the example above, you can read that a true value returns 1, and false returns 0. true 1 false 0 However, it is more common to return a boolean value by comparing values and variables (see next page)."
  },
  {
    "document": "C++ Booleans C++ Booleans Very often, in programming, you will need a data type that can only have one of two values, like: For this, C++ has a bool data type, which can take the values true (1) or false (0). bool true false Boolean Values A boolean variable is declared with the bool keyword and can take the values true or false: bool true false Example From the example above, you can read that a true value returns 1, and false returns 0. true 1 false 0 However, it is more common to return a boolean value by comparing values and variables (see next page)."
  },
  {
    "document": "C++ Boolean Expressions Boolean Expression A Boolean expression returns a boolean value, which is either 1 (true) or 0 (false). 1 0 This is useful for building logic and finding answers. You can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or variable) is true or false: > Example Or even easier: Example In the examples below, we use the equal to (==) operator to evaluate an expression: == Example Example"
  },
  {
    "document": "C++ Boolean Examples Real Life Example Let's think of a \"real life example\" where we need to find out if a person is old enough to vote. In the example below, we use the >= comparison operator to find out if the age (25) is greater than OR equal to the voting age limit, which is set to 18: >= 25 18 Example Cool, right? An even better approach (since we are on a roll now), would be to wrap the code above in an if...else statement, so we can perform different actions depending on the result: if...else Example Output \"Old enough to vote!\" if myAge is greater than or equal to 18. Otherwise output \"Not old enough to vote. \": myAge 18 Booleans are the basis for all C++ comparisons and conditions. You will learn more about conditions (if...else) in the next chapter. if...else"
  },
  {
    "document": "C++ If ... Else C++ Conditions and If Statements You already know that C++ supports the usual logical conditions from mathematics: You can use these conditions to perform different actions for different decisions. C++ has the following conditional statements: if else else if switch The if Statement Use the if statement to specify a block of C++ code to be executed if a condition is true. if true Syntax Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error. if In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text: true Example We can also test variables: Example In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\". >"
  },
  {
    "document": "C++ If ... Else C++ Conditions and If Statements You already know that C++ supports the usual logical conditions from mathematics: You can use these conditions to perform different actions for different decisions. C++ has the following conditional statements: if else else if switch The if Statement Use the if statement to specify a block of C++ code to be executed if a condition is true. if true Syntax Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error. if In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text: true Example We can also test variables: Example In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\". >"
  },
  {
    "document": "C++ Else The else Statement Use the else statement to specify a block of code to be executed if the condition is false. else false Syntax Example In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\". false else"
  },
  {
    "document": "C++ Else If The else if Statement Use the else if statement to specify a new condition if the first condition is false. else if false Syntax Example In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\". false else if false else false However, if the time was 14, our program would print \"Good day.\""
  },
  {
    "document": "C++ Short Hand If Else Short Hand If...Else (Ternary Operator) There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line, and is often used to replace simple if else statements: Syntax Instead of writing: Example You can simply write: Example"
  },
  {
    "document": "C++ If ... Else Examples Real Life Example This example shows how you can use if..else to \"open a door\" if the user enters the correct code: if..else Example This example shows how you can use if..else to find out if a number is positive or negative: if..else Example Find out if a person is old enough to vote: Example Find out if a number is even or odd: Example"
  },
  {
    "document": "C++ Switch C++ Switch Statements Use the switch statement to select one of many code blocks to be executed. switch Syntax This is how it works: switch case break default The example below uses the weekday number to calculate the weekday name: Example The break Keyword When C++ reaches a break keyword, it breaks out of the switch block. break This will stop the execution of more code and case testing inside the block. When a match is found, and the job is done, it's time for a break. There is no need for more testing. A break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block. The default Keyword The default keyword specifies some code to run if there is no case match: default Example"
  },
  {
    "document": "C++ While Loop C++ Loops Loops can execute a block of code as long as a specified condition is reached. Loops are handy because they save time, reduce errors, and they make code more readable. C++ While Loop The while loop loops through a block of code as long as a specified condition is true: while true Syntax In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: i Example Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "C++ While Loop C++ Loops Loops can execute a block of code as long as a specified condition is reached. Loops are handy because they save time, reduce errors, and they make code more readable. C++ While Loop The while loop loops through a block of code as long as a specified condition is true: while true Syntax In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: i Example Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "C++ Do/While Loop The Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. do/while while Syntax The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: do/while Example Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "C++ While Loop Examples Real Life Example To demonstrate a practical example of the while loop, we have created a simple \"countdown\" program: Example In this example, we create a program that only print even numbers between 0 and 10 (inclusive): Example In this example we use a while loop to reverse some numbers: Example To demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy: Example If the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy! \"."
  },
  {
    "document": "C++ For Loop C++ For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop: for while Syntax Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: Example Statement 1 sets a variable before the loop starts (int i = 0). Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end. Statement 3 increases a value (i++) each time the code block in the loop has been executed. Another Example This example will only print even values between 0 and 10: Example"
  },
  {
    "document": "C++ For Loop C++ For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop: for while Syntax Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: Example Statement 1 sets a variable before the loop starts (int i = 0). Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end. Statement 3 increases a value (i++) each time the code block in the loop has been executed. Another Example This example will only print even values between 0 and 10: Example"
  },
  {
    "document": "C++ Nested Loops Nested Loops It is also possible to place a loop inside another loop. This is called a nested loop. The \"inner loop\" will be executed one time for each iteration of the \"outer loop\": Example"
  },
  {
    "document": "C++ The foreach Loop The foreach Loop There is also a \"for-each loop\" (also known as ranged-based for loop), which is used exclusively to loop through elements in an array (or other data structures): Syntax The following example outputs all elements in an array, using a \"for-each loop\": Example Note: Don't worry if you don't understand the example above. You will learn more about arrays in the C++ Arrays chapter. Good to know: The for-each loop was introduced in C++ version 11 (2011). Good to know: The for-each loop was introduced in C++ version 11 (2011)."
  },
  {
    "document": "C++ For Loop Examples Real Life Example To demonstrate a practical example of the for loop, let's create a program that counts to 100 by tens: Example In this example, we create a program that only print even numbers between 0 and 10 (inclusive): Example Here we only print odd numbers: Example In this example we print the powers of 2 up to 512: Example And in this example, we create a program that prints the multiplication table for a specified number: Example"
  },
  {
    "document": "C++ Break and Continue C++ Break You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement. break switch The break statement can also be used to jump out of a loop. break This example jumps out of the loop when i is equal to 4: i Example C++ Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. continue This example skips the value of 4: Example Break and Continue in While Loop You can also use break and continue in while loops: break continue Break Example Continue Example"
  },
  {
    "document": "C++ Arrays C++ Arrays Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store: We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces: To create an array of three integers, you could write: Access the Elements of an Array You access an array element by referring to the index number inside square brackets []. [] This statement accesses the value of the first element in cars: Example Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change an Array Element To change the value of a specific element, refer to the index number: Example"
  },
  {
    "document": "C++ Arrays C++ Arrays Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store: We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces: To create an array of three integers, you could write: Access the Elements of an Array You access an array element by referring to the index number inside square brackets []. [] This statement accesses the value of the first element in cars: Example Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change an Array Element To change the value of a specific element, refer to the index number: Example"
  },
  {
    "document": "C++ Arrays and Loops Loop Through an Array You can loop through the array elements with the for loop. for The following example outputs all elements in the cars array: Example This example outputs the index of each element together with its value: Example And this example shows how to loop through an array of integers: Example The foreach Loop There is also a \"for-each loop\" (introduced in C++ version 11 (2011)), which is used exclusively to loop through elements in an array (and other data structures, like vectors and lists): Syntax The following examples output all elements in an array using a \"for-each loop\": Example Loop through integers: Example Loop through strings:"
  },
  {
    "document": "C++ Omit Array Size Omit Array Size In C++, you don't have to specify the size of the array. The compiler is smart enough to determine the size of the array based on the number of inserted values: The example above is equal to: However, the last approach is considered as \"good practice\", because it will reduce the chance of errors in your program. Omit Elements on Declaration It is also possible to declare an array without specifying the elements on declaration, and add them later: Example Note: The example above only works when you have specified the size of the array. If you don't specify the array size, an error occurs: Example Fixed Size (Arrays) vs. Dynamic Size (Vectors) You will often hear the terms \"fixed size\" and \"dynamic size\" when discussing arrays in C++. This is because the size of an array in C++ is fixed, meaning you cannot add or remove elements after it is created. Vectors For operations that require adding and removing array elements, C++ provides vectors, which are resizable arrays. The size of a vector is dynamic, meaning it can grow and shrink as needed. Vectors are found in the <vector> library, and they come with many useful functions to add, remove and modify elements: <vector> This was just an introduction to vectors to let you know that \"resizable arrays\" exist. Don't worry if you don't understand the syntax above. You will learn much more about vectors and other data structures in a later chapter."
  },
  {
    "document": "C++ Array Size Get the Size of an Array To get the size of an array, you can use the sizeof() operator: sizeof() Example Result: 20 Why did the result show 20 instead of 5, when the array contains 5 elements? 20 5 It is because the sizeof() operator returns the size of a type in bytes. sizeof() You learned from the Data Types chapter that an int type is usually 4 bytes, so from the example above, 4 x 5 (4 bytes x 5 elements) = 20 bytes. int To find out how many elements an array has, you have to divide the size of the array by the size of the first element in the array: Example Result: 5 Loop Through an Array with sizeof() In the Arrays and Loops Chapter, we wrote the size of the array in the loop condition (i < 5). This is not ideal, since it will only work for arrays of a specified size. i < 5 However, by using the sizeof() approach from the example above, we can now make loops that work for arrays of any size, which is more sustainable. sizeof() Instead of writing: It is better to write: Example Note that, in C++ version 11 (2011), you can also use the \"for-each\" loop, which is even cleaner and simpler: Example It is good to know the different ways to loop through an array, since you may encounter them all in different programs."
  },
  {
    "document": "C++ Arrays Real-Life Examples Real Life Example To demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages: Example And in this example, we create a program that finds the lowest age among different ages: Example"
  },
  {
    "document": "C++ Multi-Dimensional Arrays Multi-Dimensional Arrays A multi-dimensional array is an array of arrays. To declare a multi-dimensional array, define the variable type, specify the name of the array followed by square brackets which specify how many elements the main array has, followed by another set of square brackets which indicates how many elements the sub-arrays have: As with ordinary arrays, you can insert values with an array literal - a comma-separated list inside curly braces. In a multi-dimensional array, each element in an array literal is another array literal. Each set of square brackets in an array declaration adds another dimension to an array. An array like the one above is said to have two dimensions. Arrays can have any number of dimensions. The more dimensions an array has, the more complex the code becomes. The following array has three dimensions: Access the Elements of a Multi-Dimensional Array To access an element of a multi-dimensional array, specify an index number in each of the array's dimensions. This statement accesses the value of the element in the first row (0) and third column (2) of the letters array. Example Remember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change Elements in a Multi-Dimensional Array To change the value of an element, refer to the index number of the element in each of the dimensions: Example Loop Through a Multi-Dimensional Array To loop through a multi-dimensional array, you need one loop for each of the array's dimensions. The following example outputs all elements in the letters array: Example This example shows how to loop through a three-dimensional array: Example Why Multi-Dimensional Arrays? Multi-dimensional arrays are great at representing grids. This example shows a practical use for them. In the following example we use a multi-dimensional array to represent a small game of Battleship: Example"
  },
  {
    "document": "C++ Structures (struct) C++ Structures Structures (also called structs) are a way to group several related variables into one place. Each variable in the structure is known as a member of the structure. Unlike an array, a structure can contain many different data types (int, string, bool, etc.). Create a Structure To create a structure, use the struct keyword and declare each of its members inside curly braces. struct After the declaration, specify the name of the structure variable (myStructure in the example below): Access Structure Members To access members of a structure, use the dot syntax (. ): . Example Assign data to members of a structure and print it: One Structure in Multiple Variables You can use a comma (,) to use one structure in many variables: , This example shows how to use a structure in two different variables: Example Use one structure to represent two cars: Named Structures By giving a name to the structure, you can treat it as a data type. This means that you can create variables with this structure anywhere in the program at any time. To create a named structure, put the name of the structure right after the struct keyword: struct To declare a variable that uses the structure, use the name of the structure as the data type of the variable: Example Use one structure to represent two cars:"
  },
  {
    "document": "C++ Enumeration (enum) C++ Enums An enum is a special type that represents a group of constants (unchangeable values). To create an enum, use the enum keyword, followed by the name of the enum, and separate the enum items with a comma: enum Note that the last item does not need a comma. It is not required to use uppercase, but often considered as good practice. Enum is short for \"enumerations\", which means \"specifically listed\". To access the enum, you must create a variable of it. Inside the main() method, specify the enum keyword, followed by the name of the enum (Level) and then the name of the enum variable (myVar in this example): main() enum Level myVar Now that you have created an enum variable (myVar), you can assign a value to it. myVar The assigned value must be one of the items inside the enum (LOW, MEDIUM or HIGH): LOW MEDIUM HIGH By default, the first item (LOW) has the value 0, the second (MEDIUM) has the value 1, etc. LOW 0 MEDIUM 1 If you now try to print myVar, it will output 1, which represents MEDIUM: 1 MEDIUM Change Values As you know, the first item of an enum has the value 0. The second has the value 1, and so on. To make more sense of the values, you can easily change them: Note that if you assign a value to one specific item, the next items will update their numbers accordingly: Enum in a Switch Statement Enums are often used in switch statements to check for corresponding values: Enums are used to give names to constants, which makes the code easier to read and maintain. Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc."
  },
  {
    "document": "C++ References Creating References A reference variable is a \"reference\" to an existing variable, and it is created with the & operator: & Now, we can use either the variable name food or the reference name meal to refer to the food variable: food meal food Example"
  },
  {
    "document": "C++ References Creating References A reference variable is a \"reference\" to an existing variable, and it is created with the & operator: & Now, we can use either the variable name food or the reference name meal to refer to the food variable: food meal food Example"
  },
  {
    "document": "C++ Memory Address Memory Address In the example from the previous page, the & operator was used to create a reference variable. But it can also be used to get the memory address of a variable; which is the location of where the variable is stored on the computer. & When a variable is created in C++, a memory address is assigned to the variable. And when we assign a value to the variable, it is stored in this memory address. To access it, use the & operator, and the result will represent where the variable is stored: & Example Note: The memory address is in hexadecimal form (0x..). Note that you may not get the same result in your program. References and Pointers (which you will learn about in the next chapter) are important in C++, because they give you the ability to manipulate the data in the computer's memory - which can reduce the code and improve the performance. These two features are one of the things that make C++ stand out from other programming languages, like Python and Java."
  },
  {
    "document": "C++ Pointers Creating Pointers You learned from the previous chapter, that we can get the memory address of a variable by using the & operator: & Example A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same type, and is created with the * operator. The address of the variable you're working with is assigned to the pointer: int string * Example Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign * (string* ptr). Note that the type of the pointer has to match the type of the variable you're working with. ptr string * string* ptr Use the & operator to store the memory address of the variable called food, and assign it to the pointer. & food Now, ptr holds the value of food's memory address. ptr food Tip: There are three ways to declare pointer variables, but the first way is preferred:"
  },
  {
    "document": "C++ Pointers Creating Pointers You learned from the previous chapter, that we can get the memory address of a variable by using the & operator: & Example A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same type, and is created with the * operator. The address of the variable you're working with is assigned to the pointer: int string * Example Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign * (string* ptr). Note that the type of the pointer has to match the type of the variable you're working with. ptr string * string* ptr Use the & operator to store the memory address of the variable called food, and assign it to the pointer. & food Now, ptr holds the value of food's memory address. ptr food Tip: There are three ways to declare pointer variables, but the first way is preferred:"
  },
  {
    "document": "C++ Dereference Get Memory Address and Value In the example from the previous page, we used the pointer variable to get the memory address of a variable (used together with the & reference operator). However, you can also use the pointer to get the value of the variable, by using the * operator (the dereference operator): & * Example Note that the * sign can be confusing here, as it does two different things in our code: *"
  },
  {
    "document": "C++ Modify Pointers Modify the Pointer Value You can also change the pointer's value. But note that this will also change the value of the original variable: Example"
  },
  {
    "document": "C++ Functions A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. Functions are used to perform certain actions, and they are important for reusing code: Define the code once, and use it many times. Create a Function C++ provides some pre-defined functions, such as main(), which is used to execute code. But you can also create your own functions to perform certain actions. main() To create (often referred to as declare) a function, specify the name of the function, followed by parentheses (): Syntax myFunction() void Call a Function Declared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are called. To call a function, write the function's name followed by two parentheses () and a semicolon ; () ; In the following example, myFunction() is used to print a text (the action), when it is called: myFunction() Example Inside main, call myFunction(): main myFunction() A function can be called multiple times: Example Function Declaration and Definition A C++ function consist of two parts: Note: If a user-defined function, such as myFunction() is declared after the main() function, an error will occur: myFunction() main() Example However, it is possible to separate the declaration and the definition of the function - for code optimization. You will often see C++ programs that have function declaration above main(), and function definition below main(). This will make the code better organized and easier to read: main() main() Example"
  },
  {
    "document": "C++ Function Parameters Parameters and Arguments Information can be passed to functions as a parameter. Parameters act as variables inside the function. Parameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma: Syntax The following example has a function that takes a string called fname as parameter. When the function is called, we pass along a first name, which is used inside the function to print the full name: string Example When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments. fname Liam Jenny Anja"
  },
  {
    "document": "C++ Function Parameters Parameters and Arguments Information can be passed to functions as a parameter. Parameters act as variables inside the function. Parameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma: Syntax The following example has a function that takes a string called fname as parameter. When the function is called, we pass along a first name, which is used inside the function to print the full name: string Example When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments. fname Liam Jenny Anja"
  },
  {
    "document": "C++ Default Parameters Default Parameter Value You can also use a default parameter value, by using the equals sign (=). = If we call the function without an argument, it uses the default value (\"Norway\"): Example A parameter with a default value, is often known as an \"optional parameter\". From the example above, country is an optional parameter and \"Norway\" is the default value. country \"Norway\""
  },
  {
    "document": "C++ Multiple Parameters Multiple Parameters Inside the function, you can add as many parameters as you want: Example Note that when you are working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order."
  },
  {
    "document": "C++ The Return Keyword Return Values The void keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as int, string, etc.) instead of void, and use the return keyword inside the function: void int string void return Example This example returns the sum of a function with two parameters: Example You can also store the result in a variable: Example"
  },
  {
    "document": "C++ Functions - Pass By Reference Pass By Reference In the examples from the previous page, we used normal variables when we passed parameters to a function. You can also pass a reference to the function. This can be useful when you need to change the value of the arguments: Example Pass integers by reference: Example Pass a string by reference:"
  },
  {
    "document": "C++ Pass Array to a Function Pass Arrays as Function Parameters You can also pass arrays to a function: Example The function (myFunction) takes an array as its parameter (int myNumbers[5]), and loops through the array elements with the for loop. myFunction int myNumbers[5] for When the function is called inside main(), we pass along the myNumbers array, which outputs the array elements. main() myNumbers Note that when you call the function, you only need to use the name of the array when passing it as an argument myFunction(myNumbers). However, the full declaration of the array is needed in the function parameter (int myNumbers[5]). myFunction(myNumbers) int myNumbers[5]"
  },
  {
    "document": "C++ Function Examples Real Life Example To demonstrate a practical example of using functions, let's create a program that converts a value from fahrenheit to celsius: Example"
  },
  {
    "document": "C++ Function Overloading Function Overloading With function overloading, multiple functions can have the same name with different parameters: Example Consider the following example, which have two functions that add numbers of different type: Example Instead of defining two functions that should do the same thing, it is better to overload one. In the example below, we overload the plusFunc function to work for both int and double: plusFunc int double Example Note: Multiple functions can have the same name as long as the number and/or type of parameters are different."
  },
  {
    "document": "C++ Variable Scope Now that you understand how functions work, it is important to learn how variables act inside and outside of functions. In C++, variables are only accessible inside the region they are created. This is called scope. Local Scope A variable created inside a function belongs to the local scope of that function, and can only be used inside that function: Example A local variable cannot be used outside the function it belongs to. If you try to access it outside the function, an error occurs: Example Global Scope A variable created outside of a function, is called a global variable and belongs to the global scope. Global variables are available from within any scope, global and local: Example A variable created outside of a function is global and can therefore be used by anyone: // Global variable xint x = 5;void myFunction() { // We can use x here cout << x << \"\\n\";}int main() { myFunction(); // We can also use x here cout << x; return 0;} Try it Yourself Â» Naming Variables If you operate with the same variable name inside and outside of a function, C++ will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function): Example The function will print the local x, and then the code will print the global x: // Global variable xint x = 5;void myFunction() { // Local variable with the same name as the global variable (x) int x = 22; cout << x << \"\\n\"; // Refers to the local variable x}int main() { myFunction(); cout << x; // Refers to the global variable x return 0;} Try it Yourself Â» However, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion. In general, you should be careful with global variables, since they can be accessed and modified from any function: Example Change the value of x from myFunction: // Global variable xint x = 5;void myFunction() { cout << ++x << \"\\n\"; // Increment the value of x by 1 and print it}int main() { myFunction(); cout << x; // Print the global variable x return 0;}// The value of x is now 6 (no longer 5) Try it Yourself Â» Conclusion To sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and better to understand. However, you may find global variables when working on existing C++ programs or while collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up A variable created outside of a function, is called a global variable and belongs to the global scope."
  },
  {
    "document": "Global variables are available from within any scope, global and local: Example A variable created outside of a function is global and can therefore be used by anyone: Naming Variables If you operate with the same variable name inside and outside of a function, C++ will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function): Example The function will print the local x, and then the code will print the global x: x x However, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion. In general, you should be careful with global variables, since they can be accessed and modified from any function: Example Change the value of x from myFunction: x myFunction Conclusion To sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and better to understand. However, you may find global variables when working on existing C++ programs or while collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional."
  },
  {
    "document": "C++ Recursion Recursion Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve. Recursion may be a bit difficult to understand. The best way to figure out how it works is to experiment with it. Recursion Example Adding two numbers together is easy to do, but adding a range of numbers is more complicated. In the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers: Example Example Explained When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. When running, the program follows these steps: sum() k k Since the function does not call itself when k is 0, the program stops there and returns the result. k The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming."
  },
  {
    "document": "C++ OOP C++ What is OOP? OOP stands for Object-Oriented Programming. Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions. Object-oriented programming has several advantages over procedural programming: Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it. C++ What are Classes and Objects? Classes and objects are the two main aspects of object-oriented programming. Look at the following illustration to see the difference between class and objects: class Fruit objects Apple Banana Mango Another example: class Car objects Volvo Audi Toyota So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and functions from the class. You will learn much more about classes and objects in the next chapter."
  },
  {
    "document": "C++ Classes and Objects C++ Classes/Objects C++ is an object-oriented programming language. Everything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. Attributes and methods are basically variables and functions that belongs to the class. These are often referred to as \"class members\". A class is a user-defined data type that we can use in our program, and it works as an object constructor, or a \"blueprint\" for creating objects. Create a Class To create a class, use the class keyword: class Example Create a class called \"MyClass\": MyClass Example explained class MyClass public myNum myString ; Create an Object In C++, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects. MyClass To create an object of MyClass, specify the class name, followed by the object name. MyClass To access the class attributes (myNum and myString), use the dot syntax (.) on the object: myNum myString . Example Create an object called \"myObj\" and access the attributes: myObj Multiple Objects You can create multiple objects of one class: Example"
  },
  {
    "document": "C++ Class Methods Class Methods Methods are functions that belongs to the class. There are two ways to define functions that belongs to a class: In the following example, we define a function inside the class, and we name it \"myMethod\". myMethod Note: You access methods just like you access attributes; by creating an object of the class and using the dot syntax (. ): . Inside Example To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function: :: Outside Example Parameters You can also add parameters: Example"
  },
  {
    "document": "C++ Constructors Constructors A constructor in C++ is a special method that is automatically called when an object of a class is created. To create a constructor, use the same name as the class, followed by parentheses (): () Example Note: The constructor has the same name as the class, it is always public, and it does not have any return value. public Constructor Parameters Constructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes. The following class have brand, model and year attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the constructor parameters (brand=x, etc). When we call the constructor (by creating an object of the class), we pass parameters to the constructor, which will set the value of the corresponding attributes to the same: brand model year brand=x Example Just like functions, constructors can also be defined outside the class. First, declare the constructor inside the class, and then define it outside of the class by specifying the name of the class, followed by the scope resolution :: operator, followed by the name of the constructor (which is the same as the class): :: Example"
  },
  {
    "document": "C++ Access Specifiers Access Specifiers By now, you are quite familiar with the public keyword that appears in all of our class examples: public Example The public keyword is an access specifier. Access specifiers define how the members (attributes and methods) of a class can be accessed. In the example above, the members are public - which means that they can be accessed and modified from outside the code. public public However, what if we want members to be private and hidden from the outside world? In C++, there are three access specifiers: public private protected In the following example, we demonstrate the differences between public and private members: public private Example If you try to access a private member, an error occurs: error: y is private Note: It is possible to access private members of a class using a public method inside the same class. See the next chapter (Encapsulation) on how to do this. Tip: It is considered good practice to declare your class attributes as private (as often as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the main ingredient of the Encapsulation concept, which you will learn more about in the next chapter. Note: By default, all members of a class are private if you don't specify an access specifier: private Example"
  },
  {
    "document": "C++ Encapsulation Encapsulation The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes as private (cannot be accessed from outside the class). If you want others to read or modify the value of a private member, you can provide public get and set methods. Access Private Members To access a private attribute, use public \"get\" and \"set\" methods: Example #include <iostream>using namespace std;class Employee { private: // Private attribute int salary; public: // Setter void setSalary(int s) { salary = s; } // Getter int getSalary() { return salary; }};int main() { Employee myObj; myObj.setSalary(50000); cout << myObj.getSalary(); return 0;} Try it Yourself Â» Example explained The salary attribute is private, which have restricted access. The public setSalary() method takes a parameter (s) and assigns it to the salary attribute (salary = s). The public getSalary() method returns the value of the private salary attribute. Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to set the value of the private attribute to 50000. Then we call the getSalary() method on the object to return the value. Why Encapsulation? It is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, because you (or others) can change one part of the code without affecting other parts Increased security of data â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up private Access Private Members To access a private attribute, use public \"get\" and \"set\" methods: Example The salary attribute is private, which have restricted access. salary private The public setSalary() method takes a parameter (s) and assigns it to the salary attribute (salary = s). setSalary() s salary The public getSalary() method returns the value of the private salary attribute. getSalary() salary Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to set the value of the private attribute to 50000. Then we call the getSalary() method on the object to return the value. main() Employee setSalary() 50000 getSalary() Why Encapsulation?"
  },
  {
    "document": "C++ Inheritance Inheritance In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories: To inherit from a class, use the : symbol. : In the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent): Car Vehicle Example - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
  },
  {
    "document": "C++ Inheritance Inheritance In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories: To inherit from a class, use the : symbol. : In the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent): Car Vehicle Example - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
  },
  {
    "document": "C++ Multilevel Inheritance Multilevel Inheritance A class can also be derived from one class, which is already derived from another class. In the following example, MyGrandChild is derived from class MyChild (which is derived from MyClass). MyGrandChild MyChild MyClass Example"
  },
  {
    "document": "C++ Multiple Inheritance Multiple Inheritance A class can also be derived from more than one base class, using a comma-separated list: Example"
  },
  {
    "document": "C++ Inheritance Access Access Specifiers You learned from the Access Specifiers chapter that there are three specifiers available in C++. Until now, we have only used public (members of a class are accessible from outside the class) and private (members can only be accessed within the class). The third specifier, protected, is similar to private, but it can also be accessed in the inherited class: public private protected private Example"
  },
  {
    "document": "C++ Polymorphism Polymorphism Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance. Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways. For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc. ): Animal animalSound() Example Remember from the Inheritance chapter that we use the : symbol to inherit from a class. : Now we can create Pig and Dog objects and override the animalSound() method: Pig Dog animalSound() Example - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
  },
  {
    "document": "C++ Files C++ Files The fstream library allows us to work with files. fstream To use the fstream library, include both the standard <iostream> AND the <fstream> header file: fstream <iostream> <fstream> Example There are three classes included in the fstream library, which are used to create, write or read files: fstream ofstream ifstream fstream Create and Write To a File To create a file, use either the ofstream or fstream class, and specify the name of the file. ofstream fstream To write to the file, use the insertion operator (<<). << Example It is considered good practice, and it can clean up unnecessary memory space. Read a File To read from a file, use either the ifstream or fstream class, and the name of the file. ifstream fstream Note that we also use a while loop together with the getline() function (which belongs to the ifstream class) to read the file line by line, and to print the content of the file: while getline() ifstream Example Complete <fstream> Reference For a complete reference of <fstream> classes and functions, go to our C++ fstream Reference."
  },
  {
    "document": "C++ Exceptions C++ Exceptions When executing C++ code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things. When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an exception (throw an error). C++ try and catch Exception handling in C++ consist of three keywords: try, throw and catch: try throw catch The try statement allows you to define a block of code to be tested for errors while it is being executed. try The throw keyword throws an exception when a problem is detected, which lets us create a custom error. throw The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. catch The try and catch keywords come in pairs: try catch Example Consider the following example: Example We use the try block to test some code: If the age variable is less than 18, we will throw an exception, and handle it in our catch block. try age 18 throw catch In the catch block, we catch the error and do something about it. The catch statement takes a parameter: in our example we use an int variable (myNum) (because we are throwing an exception of int type in the try block (age)), to output the value of age. catch catch int myNum int try age age If no error occurs (e.g. if age is 20 instead of 15, meaning it will be be greater than 18), the catch block is skipped: age 20 15 catch Example You can also use the throw keyword to output a reference number, like a custom error number/code for organizing purposes (505 in our example): throw 505 Example Handle Any Type of Exceptions (...) If you do not know the throw type used in the try block, you can use the \"three dots\" syntax (...) inside the catch block, which will handle any type of exception: throw try ... catch Example"
  },
  {
    "document": "C++ Date and Time Date and Time The <ctime> library allows us to work with dates and times. <ctime> To use it, you must import the <ctime> header file: <ctime> Example #include <ctime> // Import the ctime library #include <ctime> // Import the ctime library Display Current Date and Time The <ctime> library has a variety of functions to measure dates and times. <ctime> The time() function gives us a timestamp representing the current date and time. We can use the ctime() function to show the date and time that a timestamp represents: time() ctime() Example Display the current date: // Get the timestamp for the current date and time time_t timestamp; time(&timestamp); // Display the date and time represented by the timestamp cout << ctime(&timestamp); // Get the timestamp for the current date and time time_t timestamp; time(&timestamp); // Display the date and time represented by the timestamp cout << ctime(&timestamp); Two ways to use the time() function The time() function writes a timestamp to the memory location given by the parameter, but it also returns the timestamp's value. time() An alternative way to use the time() function is to pass in a NULL pointer and use the return value instead. time() time_t timestamp = time(NULL); time_t timestamp = time(NULL); Data Types There are two different data types used to store the date and time: time_t for timestamps and struct tm for datetime structures. time_t struct tm Timestamps represent a moment in time as a single number, which makes it easier for the computer to do calculations. Datetime structures are structures that represent different components of the date and time as members. This makes it easier for us to specify dates. Datetime structures have the following members: tm_sec tm_min tm_hour tm_mday tm_mon tm_year tm_wday tm_yday tm_isdst Always keep in mind the way that date components are represented: Creating Timestamps The time() function can only create a timestamp for the current date, but we can create a timestamp for any date by using the mktime() function. time() mktime() The mktime() function converts a datetime structure into a timestamp. mktime() Example Create a timestamp using the mktime() function: mktime() struct tm datetime; time_t timestamp; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 12; datetime.tm_min = 30; datetime.tm_sec = 1; // Daylight Savings must be specified // -1 uses the computer's timezone setting datetime.tm_isdst = -1; timestamp = mktime(&datetime); cout << ctime(&timestamp); struct tm datetime; time_t timestamp; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 12; datetime.tm_min = 30; datetime.tm_sec = 1; // Daylight Savings must be specified // -1 uses the computer's timezone setting datetime.tm_isdst = -1; timestamp = mktime(&datetime); cout << ctime(&timestamp); Note: The mktime() function needs these members to have a value: tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec and tm_isdst."
  },
  {
    "document": "mktime() tm_year tm_mon tm_mday tm_hour tm_min tm_sec tm_isdst Creating Datetime Structures The mktime() function also fills in the tm_wday and tm_yday members of the datetime structure with the correct values, which completes the structure and gives a valid datetime. It can be used, for example, to find the weekday of a given date: mktime() tm_wday tm_yday Example Find the weekday of a specified date: // Create the datetime structure and use mktime to fill in the missing members struct tm datetime; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); string weekdays[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}; cout << \"The date is on a \" << weekdays[datetime.tm_wday]; // Create the datetime structure and use mktime to fill in the missing members struct tm datetime; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); string weekdays[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}; cout << \"The date is on a \" << weekdays[datetime.tm_wday]; The localtime() and gmtime() functions can convert timestamps into datetime structures. localtime() gmtime() The localtime() function returns a pointer to a structure representing the time in the computer's time zone. localtime() The gmtime() function returns a pointer to a structure representing the time in the GMT time zone. gmtime() These functions return a pointer to a datetime structure. If we want to make sure its value does not change unexpectedly we should make a copy of it by dereferencing the pointer. To learn about dereferencing, see the C++ Dereference tutorial. Example Get a datetime structure and output the current hour: time_t timestamp = time(&timestamp); struct tm datetime = *localtime(&timestamp); cout << datetime.tm_hour; time_t timestamp = time(&timestamp); struct tm datetime = *localtime(&timestamp); cout << datetime.tm_hour; Display Dates So far we have been using the ctime() function to display the date contained in a timestamp. To display dates from a datetime structure we can use the asctime() function. ctime() asctime() Example Display the date represented by a datetime structure: time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); cout << asctime(&datetime); time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); cout << asctime(&datetime); Note: The asctime() function does not correct invalid dates. For example, if you set the day of the month to 32 it will display 32."
  },
  {
    "document": "The mktime() function can correct these kinds of errors: asctime() mktime() Example Correct a date before displaying it: // Create the datetime structure and use mktime to correct mistakes struct tm datetime; datetime.tm_year = 2022 - 1900; // Number of years since 1900 datetime.tm_mon = 0; // 0 is January datetime.tm_mday = 32; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); cout << asctime(&datetime); // Create the datetime structure and use mktime to correct mistakes struct tm datetime; datetime.tm_year = 2022 - 1900; // Number of years since 1900 datetime.tm_mon = 0; // 0 is January datetime.tm_mday = 32; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); cout << asctime(&datetime); The ctime() and asctime() functions allow us to display the date but they do not allow us to choose how it is displayed. ctime() asctime() To choose how a date is displayed we can use the strftime() function. strftime() Example Represent the current date in different ways: time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); char output[50]; strftime(output, 50, \"%B %e, %Y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%I:%M:%S %p\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%m/%d/%y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%a %b %e %H:%M:%S %Y\", &datetime); cout << output << \"\\n\"; time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); char output[50]; strftime(output, 50, \"%B %e, %Y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%I:%M:%S %p\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%m/%d/%y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%a %b %e %H:%M:%S %Y\", &datetime); cout << output << \"\\n\"; The strftime() function formats a date and writes it as a C-style string into a char array. It has four parameters: strftime() char The following table has some useful format specifiers. For a more complete list, look at the strftime() reference page. %a Fri %b Dec %B December %d 09 %e 9 %H 14 %I 02 %M 30 %p PM %S 01 %y 23 %Y 2023 Measuring Time There are two different functions that can be used to measure differences in time. The difftime() function measures the number of seconds that passed between two different time stamps. This is useful when measuring time differences between dates."
  },
  {
    "document": "difftime() Example Measure the time difference between two timestamps time_t now; time_t nextyear; struct tm datetime; now = time(NULL); datetime = *localtime(&now); datetime.tm_year = datetime.tm_year + 1; datetime.tm_mon = 0; datetime.tm_mday = 1; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; nextyear = mktime(&datetime); int diff = difftime(nextyear, now); cout << diff << \" seconds until next year\"; time_t now; time_t nextyear; struct tm datetime; now = time(NULL); datetime = *localtime(&now); datetime.tm_year = datetime.tm_year + 1; datetime.tm_mon = 0; datetime.tm_mday = 1; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; nextyear = mktime(&datetime); int diff = difftime(nextyear, now); cout << diff << \" seconds until next year\"; The clock() function is useful for measuring short intervals of time while the program is running. It is more precise than the difftime() function. clock() difftime() Each call to the clock function returns a special kind of timestamp measured in clocks (a unit of time that depends on how the library was implemented) which has a data type clock_t. To measure a time difference, store a timestamp at two different moments in time and then subtract them. The time difference is measured in clocks, but you can convert it into seconds by dividing it by the CLOCKS_PER_SEC constant. clock_t CLOCKS_PER_SEC Example Measure how long it takes for the program to run: clock_t before = clock(); int k = 0; for(int i = 0; i < 100000; i++) { k += i; } clock_t duration = clock() - before; cout << \"Duration: \" << (float)duration / CLOCKS_PER_SEC << \" seconds\"; clock_t before = clock(); int k = 0; for(int i = 0; i < 100000; i++) { k += i; } clock_t duration = clock() - before; cout << \"Duration: \" << (float)duration / CLOCKS_PER_SEC << \" seconds\"; Note: Make sure to cast the value to a float or double type before dividing, otherwise it may result in an integer division which would cause the decimal part to be cut off. float double Complete <ctime> Reference For a complete reference of <ctime> functions, go to our C++ ctime Reference."
  },
  {
    "document": "C++ Data Structures and STL Data Structures Data structures are used to store and organize data. An array is an example of a data structure, which allows multiple elements to be stored in a single variable. C++ includes many other data structures as well, each is used to handle data in different ways. These are part of the C++ STL, which stands for The Standard Template Library. C++ STL STL is a library that consist of different data structures and algorithms to effectively store and manipulate data. If we say that data structures store data, we can say that algorithms are used to solve different problems, often by searching through and manipulating those data structures. Using the right data structure and algorithm makes your program run faster, especially when working with lots of data. The most common data structures are: Which one to use depends on your specific needs. One thing they all have in common is that you must include the appropriate header file to use them: Example Here is an example of using vectors, after we have included the <vector> library: <vector> Example The next chapters will explain how each data structure works and how to use them. Key Concepts of the STL The key components of the STL consist of containers, iterators, and algorithms, and the relationship betweem them: sort() find() In Computer Science, data structures and algorithms go hand in hand. A data structure is not worth much if you cannot search through it or manipulate it efficiently using algorithms, and algorithms are not worth much without a data structure to work on. In the following chapters, you will see how everything is connected."
  },
  {
    "document": "C++ Vectors C++ Vector A vector in C++ is like a resizable array. Both vectors and arrays are data structures used to store multiple elements of the same data type. The difference between an array and a vector, is that the size of an array cannot be modified (you cannot add or remove elements from an array). A vector however, can grow or shrink in size as needed. To use a vector, you have to include the <vector> header file: <vector> Create a Vector To create a vector, use the vector keyword, and specify the type of values it should store within angle brackets <> and then the name of the vector, like: vector<type> vectorName. vector <> vector<type> vectorName Example If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}, just like with arrays: {} Example Note: The type of the vector (string in our example) cannot be changed after its been declared. string Access a Vector You can access a vector element by referring to the index number inside square brackets []. [] Vectors, like arrays, are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on: [0] [1] Example One advantage of using the vector library, is that it includes many useful functions. For example, you can access the first or the last element of a vector with the .front() and .back() functions: .front() .back() Example To access an element at a specified index, you can use the .at() function and specify the index number: .at() Example Note: The .at() function is often preferred over square brackets [] because it lets you know if an error occurs. .at() [] For example if the element is out of range: Example Change a Vector Element To change the value of a specific element, you can refer to the index number: Example However, it is safer to use the .at() function: .at() Example Add Vector Elements The biggest difference between a vector and an array is that vectors can grow dynamically. That means you can add or remove elements from the vector. To add an element to the vector, you can use the .push_back() function, which will add an element at the end of the vector: .push_back() Example You can add as many elements as you want: Example Remove Vector Elements To remove an element from the vector, you can use the .pop_back() function, which removes an element from the end of the vector: .pop_back() Example Note: Elements are usually only added and removed from the end of the vector. If you need to add or remove elements from both ends, it is often better to use a deque instead of a vector. Vector Size To find out how many elements a vector has, use the .size() function: .size() Example Check if a Vector is Empty There is also a function to find out whether a vector is empty or not."
  },
  {
    "document": "The .empty() function returns 1 (true) if the vector is empty and 0 (false) if it contains one or more elements: .empty() 1 0 Example Example Loop Through a Vector You can loop through the vector elements by using a for loop combined with the .size() function: for .size() Example You can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable: Example Tip: It is also possible to loop through vectors with an iterator, which you will learn more about in a later chapter. Complete Vector Reference For a complete reference of Vector functions, go to our C++ Vector Reference."
  },
  {
    "document": "C++ List C++ List A list is similar to a vector in that it can store multiple elements of the same type and dynamically grow in size. However, two major differences between lists and vectors are: To use a list, you have to include the <list> header file: // Include the list library#include <list> Create a List To create a list, use the list keyword, and specify the type of values it should store within angle brackets <> and then the name of the list, like: list<type> listName. Example // Create a list called cars that will store stringslist<string> cars; If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: Example // Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Print list elements for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Note: The type of the list (string in our example) cannot be changed after its been declared. Access a List You cannot access list elements by referring to index numbers, like with arrays and vectors. However, you can access the first or the last element with the .front() and .back() functions, respectively: Example // Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the first element cout << cars.front(); // Outputs Volvo// Get the last element cout << cars.back(); // Outputs Mazda Try it Yourself Â» Change a List Element You can also change the value of the first or the last element with the .front() and .back() functions Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars.front() = \"Opel\";// Change the value of the last elementcars.back() = \"Toyota\";cout << cars.front(); // Now outputs Opel instead of Volvocout << cars.back(); // Now outputs Toyota instead of Mazda Try it Yourself Â» Add List Elements To add elements to a list, you can use .push_front() to insert an element at the beginning of the list and .push_back() to add an element at the end: Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an element at the beginningcars.push_front(\"Tesla\");// Add an element at the endcars.push_back(\"VW\"); Try it Yourself Â» Remove List Elements To remove elements from a list, use .pop_front() to remove an element from the beginning of the list and .pop_back() to remove an element at the end: Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the first elementcars.pop_front();// Remove the last elementcars.pop_back(); Try it Yourself Â» List Size To find out how many elements a list has, use the .size() function: Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size(); // Outputs 4 Try it Yourself Â» Check if a List is Empty Use the .empty() function to find out if a list is empty or not."
  },
  {
    "document": "The .empty() function returns 1 (true) if the list is empty and 0 (false) otherwise: Example list<string> cars;cout << cars.empty(); // Outputs 1 (The list is empty) Try it Yourself Â» Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Loop Through a List You cannot loop through the list elements with a traditional for loop combined with the .size() function, since it is not possible to access elements in a list by index: Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = 0; i < cars.size(); i++) { cout << cars[i] << \"\\n\";} The simplest way to loop through a list is with the for-each loop: Example list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Tip: It is also possible to loop through lists with an iterator, which you will learn more about in a later chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up <list> Create a List To create a list, use the list keyword, and specify the type of values it should store within angle brackets <> and then the name of the list, like: list<type> listName. list <> list<type> listName Example If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: {} Example Note: The type of the list (string in our example) cannot be changed after its been declared. string Access a List You cannot access list elements by referring to index numbers, like with arrays and vectors. However, you can access the first or the last element with the .front() and .back() functions, respectively: .front() .back() Example Change a List Element You can also change the value of the first or the last element with the .front() and .back() functions .front() .back() Example Add List Elements To add elements to a list, you can use .push_front() to insert an element at the beginning of the list and .push_back() to add an element at the end: .push_front() .push_back() Example Remove List Elements To remove elements from a list, use .pop_front() to remove an element from the beginning of the list and .pop_back() to remove an element at the end: .pop_front() .pop_back() Example List Size To find out how many elements a list has, use the .size() function: .size() Example Check if a List is Empty Use the .empty() function to find out if a list is empty or not."
  },
  {
    "document": ".empty() The .empty() function returns 1 (true) if the list is empty and 0 (false) otherwise: .empty() 1 0 Example Example Loop Through a List You cannot loop through the list elements with a traditional for loop combined with the .size() function, since it is not possible to access elements in a list by index: for .size() Example The simplest way to loop through a list is with the for-each loop: Example Tip: It is also possible to loop through lists with an iterator, which you will learn more about in a later chapter."
  },
  {
    "document": "C++ Stacks C++ Stack A stack stores multiple elements in a specific order, called LIFO. LIFO stands for Last in, First Out. To vizualise LIFO, think of a pile of pancakes, where pancakes are both added and removed from the top. So when removing a pancake, it will always be the last one you added. This way of organizing elements is called LIFO in computer science and programming. Unlike vectors, elements in the stack are not accessed by index numbers. Since elements are added and removed from the top, you can only access the element at the top of the stack. To use a stack, you have to include the <stack> header file: // Include the stack library#include <stack> Create a Stack To create a stack, use the stack keyword, and specify the type of values it should store within angle brackets <> and then the name of the stack, like: stack<type> stackName. // Create a stack of strings called cars stack<string> cars; Note: The type of the stack (string in our example) cannot be changed after its been declared. Note: You cannot add elements to the stack at the time of declaration, like you can with vectors: stack<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; Add Elements To add elements to the stack, use the .push() function, after declaring the stack: Example // Create a stack of strings called carsstack<string> cars;// Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\"); The stack will look like this (remember that the last element added is the top element): Mazda (top element) Ford BMW Volvo Access Stack Elements You cannot access stack elements by referring to index numbers, like you would with arrays and vectors. In a stack, you can only access the top element, which is done using the .top() function: Example // Access the top elementcout << cars.top(); // Outputs \"Mazda\" Try it Yourself Â» Change the Top Element You can also use the .top function to change the value of the top element: Example // Change the value of the top elementcars.top() = \"Tesla\"; // Access the top elementcout << cars.top(); // Now outputs \"Tesla\" instead of \"Mazda\" Try it Yourself Â» Remove Elements You can use the .pop() function to remove an element from the stack. This will remove the last element that was added to the stack: Example // Create a stack of strings called carsstack<string> cars;// Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the last added element (Mazda)cars.pop();// Access the top element (Now Ford) cout << cars.top(); Try it Yourself Â» Get the Size of the Stack To find out how many elements a stack has, use the .size() function: Example cout << cars.size(); Try it Yourself Â» Check if the Stack is Empty Use the .empty() function to find out if the stack is empty or not."
  },
  {
    "document": "The .empty() function returns 1 (true) if the stack is empty and 0 (false) otherwise: Example stack<string> cars;cout << cars.empty(); // Outputs 1 (The stack is empty) Try it Yourself Â» Example stack<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\");cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Stacks and Queues Stacks are often mentioned together with Queues, which is a similar data structure described on the next page. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up <stack> Create a Stack To create a stack, use the stack keyword, and specify the type of values it should store within angle brackets <> and then the name of the stack, like: stack<type> stackName. stack <> stack<type> stackName Note: The type of the stack (string in our example) cannot be changed after its been declared. Note: You cannot add elements to the stack at the time of declaration, like you can with vectors: Add Elements To add elements to the stack, use the .push() function, after declaring the stack: .push() Example The stack will look like this (remember that the last element added is the top element): Mazda (top element) Ford BMW Volvo Access Stack Elements You cannot access stack elements by referring to index numbers, like you would with arrays and vectors. In a stack, you can only access the top element, which is done using the .top() function: .top() Example Change the Top Element You can also use the .top function to change the value of the top element: .top Example Remove Elements You can use the .pop() function to remove an element from the stack. .pop() This will remove the last element that was added to the stack: Example Get the Size of the Stack To find out how many elements a stack has, use the .size() function: .size() Example Check if the Stack is Empty Use the .empty() function to find out if the stack is empty or not. .empty() The .empty() function returns 1 (true) if the stack is empty and 0 (false) otherwise: .empty() 1 0 Example Example Stacks and Queues Stacks are often mentioned together with Queues, which is a similar data structure described on the next page."
  },
  {
    "document": "C++ Queues C++ Queue A queue stores multiple elements in a specific order, called FIFO. FIFO stands for First in, First Out. To visualize FIFO, think of a queue as people standing in line in a supermarket. The first person to stand in line is also the first who can pay and leave the supermarket. This way of organizing elements is called FIFO in computer science and programming. Unlike vectors, elements in the queue are not accessed by index numbers. Since queue elements are added at the end and removed from the front, you can only access an element at the front or the back. To use a queue, you have to include the <queue> header file: // Include the queue library#include <queue> Create a Queue To create a queue, use the queue keyword, and specify the type of values it should store within angle brackets <> and then the name of the queue, like: queue<type> queueName. // Create a queue of strings called cars queue<string> cars; Note: The type of the queue (string in our example) cannot be changed after its been declared. Note: You cannot add elements to the queue at the time of declaration, like you can with vectors: queue<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; Add Elements To add elements to the queue, you can use the .push() function after declaring the queue. The .push() function adds an element at the end of the queue: Example // Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\"); The queue will look like this: Volvo (front (first) element) BMW Ford Mazda (back (last) element) Access Queue Elements You cannot access queue elements by referring to index numbers, like you would with arrays and vectors. In a queue, you can only access the element at the front or the back, using .front() and .back() respectively: Example // Access the front element (first and oldest)cout << cars.front(); // Outputs \"Volvo\"// Access the back element (last and newest)cout << cars.back(); // Outputs \"Mazda\" Try it Yourself Â» Change Front and Back Elements You can also use .front and .back to change the value of the front and back elements: Example // Change the value of the front elementcars.front() = \"Tesla\"; // Change the value of the back elementcars.back() = \"VW\";// Access the front elementcout << cars.front(); // Now outputs \"Tesla\" instead of \"Volvo\"// Access the back elementcout << cars.back(); // Now outputs \"VW\" instead of \"Mazda\" Try it Yourself Â» Remove Elements You can use the .pop() function to remove an element from the queue."
  },
  {
    "document": "This will remove the front element (the first and oldest element that was added to the queue): Example // Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the front element (Volvo)cars.pop();// Access the front element (Now BMW) cout << cars.front(); Try it Yourself Â» Get the Size of a Queue To find out how many elements there are in a queue, use the .size() function: Example cout << cars.size(); Try it Yourself Â» Check if the Queue is Empty Use the .empty() function to find out if the queue is empty or not. The .empty() function returns 1 (true) if the queue is empty and 0 (false) otherwise: Example queue<string> cars;cout << cars.empty(); // Outputs 1 (The queue is empty) Try it Yourself Â» Example queue<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\"); cars.push(\"Ford\");cars.push(\"Mazda\");cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Stacks and Queues Queues are often mentioned together with Stacks, which is a similar data structure described in the previous page. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up <queue> Create a Queue To create a queue, use the queue keyword, and specify the type of values it should store within angle brackets <> and then the name of the queue, like: queue<type> queueName. queue <> queue<type> queueName Note: The type of the queue (string in our example) cannot be changed after its been declared. Note: You cannot add elements to the queue at the time of declaration, like you can with vectors: Add Elements To add elements to the queue, you can use the .push() function after declaring the queue. .push() The .push() function adds an element at the end of the queue: .push() Example The queue will look like this: Volvo (front (first) element) BMW Ford Mazda (back (last) element) Access Queue Elements You cannot access queue elements by referring to index numbers, like you would with arrays and vectors. In a queue, you can only access the element at the front or the back, using .front() and .back() respectively: .front() .back() Example Change Front and Back Elements You can also use .front and .back to change the value of the front and back elements: .front .back Example Remove Elements You can use the .pop() function to remove an element from the queue. .pop() This will remove the front element (the first and oldest element that was added to the queue): Example Get the Size of a Queue To find out how many elements there are in a queue, use the .size() function: .size() Example Check if the Queue is Empty Use the .empty() function to find out if the queue is empty or not. .empty() The .empty() function returns 1 (true) if the queue is empty and 0 (false) otherwise: .empty() 1 0 Example Example Stacks and Queues Queues are often mentioned together with Stacks, which is a similar data structure described in the previous page."
  },
  {
    "document": "C++ Deque C++ Deque In the previous page, your learned that elements in a queue are added at the end and removed from the front.A deque (stands for double-ended queue) however, is more flexible, as elements can be added and removed from both ends (at the front and the back). You can also access elements by index numbers. To use a deque, you have to include the <deque> header file: // Include the deque library#include <deque> Create a Deque To create a deque, use the deque keyword, and specify the type of values it should store within angle brackets <> and then the name of the deque, like: deque<type> dequeName. Example // Create a deque called cars that will store strings deque<string> cars; If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Print deque elements for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Note: The type of the deque (string in our example) cannot be changed after its been declared. Access a Deque You can access a deque element by referring to the index number inside square brackets []."
  },
  {
    "document": "Deques are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the first element cout << cars[0]; // Outputs Volvo// Get the second element cout << cars[1]; // Outputs BMW Try it Yourself Â» You can also access the first or the last element of a deque with the .front() and .back() functions: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the first element cout << cars.front();// Get the last element cout << cars.back(); Try it Yourself Â» To access an element at a specified index, you can use the .at() function and specify the index number: Example // Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the second element cout << cars.at(1);// Get the third element cout << cars.at(2); Try it Yourself Â» Note: The .at() function is often preferred over square brackets [] because it throws an error message if the element is out of range: Example // Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Try to access an element that does not exist (will throw an exception)cout << cars.at(6); Try it Yourself Â» Change a Deque Element To change the value of a specific element, you can refer to the index number: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Change the value of the first elementcars[0] = \"Opel\"; cout << cars[0]; // Now outputs Opel instead of Volvo Try it Yourself Â» However, it is safer to use the .at() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Change the value of the first element cars.at(0) = \"Opel\"; cout << cars.at(0); // Now outputs Opel instead of Volvo Try it Yourself Â» Add Deque Elements To add elements to a deque, you can use .push_front() to insert an element at the beginning of the deque and .push_back() to add an element at the end: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an element at the beginningcars.push_front(\"Tesla\");// Add an element at the endcars.push_back(\"VW\"); Try it Yourself Â» Remove Deque Elements To remove elements from a deque, use .pop_front() to remove an element from the beginning of the deque and .pop_back() to remove an element at the end: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the first elementcars.pop_front();// Remove the last elementcars.pop_back(); Try it Yourself Â» Deque Size To find out how many elements a deque has, use the .size() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size(); // Outputs 4 Try it Yourself Â» Check if a Deque is Empty Use the .empty() function to find out if a deque is empty or not."
  },
  {
    "document": "The .empty() function returns 1 (true) if the deque is empty and 0 (false) otherwise: Example deque<string> cars;cout << cars.empty(); // Outputs 1 (The deque is empty) Try it Yourself Â» Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Loop Through a Deque You can loop through the deque elements by using a for loop combined with the .size() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = 0; i < cars.size(); i++) { cout << cars[i] << \"\\n\";} Try it Yourself Â» You can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Tip: It is also possible to loop through deques with an iterator, which you will learn more about in a later chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up A deque (stands for double-ended queue) however, is more flexible, as elements can be added and removed from both ends (at the front and the back). You can also access elements by index numbers. To use a deque, you have to include the <deque> header file: // Include the deque library#include <deque> Create a Deque To create a deque, use the deque keyword, and specify the type of values it should store within angle brackets <> and then the name of the deque, like: deque<type> dequeName. Example // Create a deque called cars that will store strings deque<string> cars; If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Print deque elements for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Note: The type of the deque (string in our example) cannot be changed after its been declared. Access a Deque You can access a deque element by referring to the index number inside square brackets []."
  },
  {
    "document": "Deques are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the first element cout << cars[0]; // Outputs Volvo// Get the second element cout << cars[1]; // Outputs BMW Try it Yourself Â» You can also access the first or the last element of a deque with the .front() and .back() functions: Example // Create a deque called cars that will store strings deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the first element cout << cars.front();// Get the last element cout << cars.back(); Try it Yourself Â» To access an element at a specified index, you can use the .at() function and specify the index number: Example // Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Get the second element cout << cars.at(1);// Get the third element cout << cars.at(2); Try it Yourself Â» Note: The .at() function is often preferred over square brackets [] because it throws an error message if the element is out of range: Example // Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Try to access an element that does not exist (will throw an exception)cout << cars.at(6); Try it Yourself Â» Change a Deque Element To change the value of a specific element, you can refer to the index number: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Change the value of the first elementcars[0] = \"Opel\"; cout << cars[0]; // Now outputs Opel instead of Volvo Try it Yourself Â» However, it is safer to use the .at() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Change the value of the first element cars.at(0) = \"Opel\"; cout << cars.at(0); // Now outputs Opel instead of Volvo Try it Yourself Â» Add Deque Elements To add elements to a deque, you can use .push_front() to insert an element at the beginning of the deque and .push_back() to add an element at the end: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an element at the beginningcars.push_front(\"Tesla\");// Add an element at the endcars.push_back(\"VW\"); Try it Yourself Â» Remove Deque Elements To remove elements from a deque, use .pop_front() to remove an element from the beginning of the deque and .pop_back() to remove an element at the end: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the first elementcars.pop_front();// Remove the last elementcars.pop_back(); Try it Yourself Â» Deque Size To find out how many elements a deque has, use the .size() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size(); // Outputs 4 Try it Yourself Â» Check if a Deque is Empty Use the .empty() function to find out if a deque is empty or not."
  },
  {
    "document": "The .empty() function returns 1 (true) if the deque is empty and 0 (false) otherwise: Example deque<string> cars;cout << cars.empty(); // Outputs 1 (The deque is empty) Try it Yourself Â» Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Loop Through a Deque You can loop through the deque elements by using a for loop combined with the .size() function: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = 0; i < cars.size(); i++) { cout << cars[i] << \"\\n\";} Try it Yourself Â» You can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable: Example deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Tip: It is also possible to loop through deques with an iterator, which you will learn more about in a later chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up <deque> Create a Deque To create a deque, use the deque keyword, and specify the type of values it should store within angle brackets <> and then the name of the deque, like: deque<type> dequeName. deque <> deque<type> dequeName Example If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: {} Example Note: The type of the deque (string in our example) cannot be changed after its been declared. string Access a Deque You can access a deque element by referring to the index number inside square brackets []."
  },
  {
    "document": "[] Deques are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on: [0] [1] Example You can also access the first or the last element of a deque with the .front() and .back() functions: .front() .back() Example To access an element at a specified index, you can use the .at() function and specify the index number: .at() Example Note: The .at() function is often preferred over square brackets [] because it throws an error message if the element is out of range: .at() [] Example Change a Deque Element To change the value of a specific element, you can refer to the index number: Example However, it is safer to use the .at() function: .at() Example Add Deque Elements To add elements to a deque, you can use .push_front() to insert an element at the beginning of the deque and .push_back() to add an element at the end: .push_front() .push_back() Example Remove Deque Elements To remove elements from a deque, use .pop_front() to remove an element from the beginning of the deque and .pop_back() to remove an element at the end: .pop_front() .pop_back() Example Deque Size To find out how many elements a deque has, use the .size() function: .size() Example Check if a Deque is Empty Use the .empty() function to find out if a deque is empty or not. .empty() The .empty() function returns 1 (true) if the deque is empty and 0 (false) otherwise: .empty() 1 0 Example Example Loop Through a Deque You can loop through the deque elements by using a for loop combined with the .size() function: for .size() Example You can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable: Example Tip: It is also possible to loop through deques with an iterator, which you will learn more about in a later chapter."
  },
  {
    "document": "C++ Sets C++ Set A set stores unique elements where they: To use a set, you have to include the <set> header file: // Include the set library#include <set> Create a Set To create a set, use the set keyword, and specify the type of values it should store within angle brackets <> and then the name of the set, like: set<type> setName. Example // Create a set called cars that will store strings set<string> cars; If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: Example // Create a set called cars that will store strings set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Print set elements for (string car : cars) { cout << car << \"\\n\";} The output will be: BMW Ford Mazda Volvo Try it Yourself Â» As you can see from the result above, the elements in the set are sorted automatically. In this case, alphabetically, as we are working with strings. If you store integers in the set, the returned values are sorted numerically: Example // Create a set called numbers that will store integers set<int> numbers = {1, 7, 3, 2, 5, 9};// Print set elements for (int num : numbers) { cout << num << \"\\n\";} The output will be: 1 2 3 5 7 9 Try it Yourself Â» Note: The type of the set (e.g. string and int in the examples above) cannot be changed after its been declared. Sort a Set in Descending Order By default, the elements in a set are sorted in ascending order. If you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this: Example // Sort elements in a set in descending order set<int, greater<int>> numbers = {1, 7, 3, 2, 5, 9};// Print the elements for (int num : numbers) { cout << num << \"\\n\";} The output will be: 9 7 5 3 2 1 Try it Yourself Â» Note: The type specified in greater<type> must match the type of elements in the set (int in our example). Unique Elements Elements in a set are unique, which means they cannot be duplicated or equal."
  },
  {
    "document": "For example, if we try to add \"BMW\" two times in the set, the duplicate element is ignored: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"BMW\", \"Mazda\"};// Print set elements for (string car : cars) { cout << car << \"\\n\";} The output will be: BMW Ford Mazda Volvo Try it Yourself Â» Add Elements To add elements to a set, you can use the .insert() function: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add new elementscars.insert(\"Tesla\");cars.insert(\"VW\");cars.insert(\"Toyota\");cars.insert(\"Audi\"); Try it Yourself Â» Remove Elements To remove specific elements from a set, you can use the .erase() function: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Remove elements cars.erase(\"Volvo\");cars.erase(\"Mazda\"); Try it Yourself Â» To remove all elements from a set, you can use the .clear() function: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Remove all elements cars.clear(); Try it Yourself Â» Find the Size of a Set To find out how many elements a set has, use the .size() function: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size(); // Outputs 4 Try it Yourself Â» Check if a Set is Empty Use the .empty() function to find out if a set is empty or not. The .empty() function returns 1 (true) if the set is empty and 0 (false) otherwise: Example set<string> cars;cout << cars.empty(); // Outputs 1 (The set is empty) Try it Yourself Â» Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty(); // Outputs 0 (not empty) Try it Yourself Â» Loop Through a Set You can loop through a set with the for-each loop: Example set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (string car : cars) { cout << car << \"\\n\";} Try it Yourself Â» Tip: It is also possible to loop through sets with an iterator, which you will learn more about in a later chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up <set> Create a Set To create a set, use the set keyword, and specify the type of values it should store within angle brackets <> and then the name of the set, like: set<type> setName. set <> set<type> setName Example If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: {} Example The output will be: BMW Ford Mazda Volvo As you can see from the result above, the elements in the set are sorted automatically. In this case, alphabetically, as we are working with strings. If you store integers in the set, the returned values are sorted numerically: Example The output will be: 1 2 3 5 7 9 Note: The type of the set (e.g. string and int in the examples above) cannot be changed after its been declared. string int Sort a Set in Descending Order By default, the elements in a set are sorted in ascending order."
  },
  {
    "document": "If you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this: greater<type> Example The output will be: 9 7 5 3 2 1 Note: The type specified in greater<type> must match the type of elements in the set (int in our example). int Unique Elements Elements in a set are unique, which means they cannot be duplicated or equal. For example, if we try to add \"BMW\" two times in the set, the duplicate element is ignored: Example The output will be: BMW Ford Mazda Volvo Add Elements To add elements to a set, you can use the .insert() function: .insert() Example Remove Elements To remove specific elements from a set, you can use the .erase() function: .erase() Example To remove all elements from a set, you can use the .clear() function: .clear() Example Find the Size of a Set To find out how many elements a set has, use the .size() function: .size() Example Check if a Set is Empty Use the .empty() function to find out if a set is empty or not. .empty() The .empty() function returns 1 (true) if the set is empty and 0 (false) otherwise: .empty() 1 0 Example Example Loop Through a Set You can loop through a set with the for-each loop: Example Tip: It is also possible to loop through sets with an iterator, which you will learn more about in a later chapter."
  },
  {
    "document": "C++ Maps C++ Map A map stores elements in \"key/value\" pairs. Elements in a map are: To use a map, you have to include the <map> header file: // Include the map library#include <map> Create a Map To create a map, use the map keyword, and specify the type of both the key and the value it should store within angle brackets <>. At last, specify the name of the map, like: map<keytype, valuetype> mapName: Example // Create a map called people that will store strings as keys and integers as values map<string, int> people If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: Example // Create a map that will store the name and age of different people map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; Access a Map You cannot access map elements by referring to index numbers, like you would with arrays and vectors."
  },
  {
    "document": "Instead, you can access a map element by referring to its key inside square brackets []: Example // Create a map that will store the name and age of different people map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Get the value associated with the key \"John\"cout << \"John is: \" << people[\"John\"] << \"\\n\"; // Get the value associated with the key \"Adele\"cout << \"Adele is: \" << people[\"Adele\"] << \"\\n\"; Try it Yourself Â» You can also access elements with the .at() function: Example // Create a map that will store the name and age of different people map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Get the value associated with the key \"Adele\"cout << \"Adele is: \" << people.at(\"Adele\") << \"\\n\"; // Get the value associated with the key \"Bo\"cout << \"Bo is: \" << people.at(\"Bo\") << \"\\n\"; Try it Yourself Â» Note: The .at() function is often preferred over square brackets [] because it throws an error message if the element does not exist: Example // Create a map that will store the name and age of different people map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Try to access an element that does not exist (will throw an exception)cout << people.at(\"Jenny\"); Try it Yourself Â» Change Values You can also change the value associated with a key: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Change John's value to 50 instead of 32people[\"John\"] = 50; cout << \"John is: \" << people[\"John\"]; // Now outputs John is: 50 Try it Yourself Â» However, it is safer to use the .at() function: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Change John's value to 50 instead of 32people.at(\"John\") = 50; cout << \"John is: \" << people.at(\"John\"); // Now outputs John is: 50 Try it Yourself Â» Add Elements To add elements to a map, it is ok to use square brackets []: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Add new elements people[\"Jenny\"] = 22;people[\"Liam\"] = 24; people[\"Kasper\"] = 20;people[\"Anja\"] = 30; Try it Yourself Â» But you can also use the .insert() function: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Add new elementspeople.insert({\"Jenny\", 22}); people.insert({\"Liam\", 24});people.insert({\"Kasper\", 20}); people.insert({\"Anja\", 30}); Try it Yourself Â» Elements with Equal Keys A map cannot have elements with equal keys. For example, if we try to add \"Jenny\" two times to the map, it will only keep the first one: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Trying to add two elements with equal keyspeople.insert({\"Jenny\", 22}); people.insert({\"Jenny\", 30}); Try it Yourself Â» To sum up; values can be equal, but keys must be unique."
  },
  {
    "document": "Remove Elements To remove specific elements from a map, you can use the .erase() function: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Remove an element by key people.erase(\"John\"); Try it Yourself Â» To remove all elements from a map, you can use the .clear() function: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; // Remove all elements people.clear(); Find the Size of a Map To find out how many elements a map has, use the .size() function: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout << people.size(); // Outputs 3 Try it Yourself Â» Check if a Map is Empty Use the .empty() function to find out if a map is empty or not. The .empty() function returns 1 (true) if the map is empty and 0 (false) otherwise: Example map<string, int> people;cout << people.empty(); // Outputs 1 (The map is empty) Try it Yourself Â» Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout << people.empty(); // Outputs 0 (not empty) Try it Yourself Â» Note: You can also check if a specific element exists, by using the .count(key) function. It returns 1 (true) if the element exists and 0 (false) otherwise: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout << people.count(\"John\"); // Outputs 1 (John exists) Try it Yourself Â» Loop Through a Map You can loop through a map with the for-each loop. However, there are a couple of things to be aware of: You should use the auto keyword (introduced in C++ version 11) inside the for loop. This allows the compiler to automatically determine the correct data type for each key-value pair. Since map elements consist of both keys and values, you have to include .first to access the keys, and .second to access values in the loop. Elements in the map are sorted automatically in ascending order by their keys: Example map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; for (auto person : people) { cout << person.first << \" is: \" << person.second << \"\\n\";} The output will be: Adele is: 45Bo is: 29John is: 32 Try it Yourself Â» If you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this: Example map<string, int, greater<string>> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} }; for (auto person : people) { cout << person.first << \" is: \" << person.second << \"\\n\";} The output will be: John is: 32 Bo is: 29 Adele is: 45 Try it Yourself Â» Tip: It is also possible to loop through maps with an iterator, which you will learn more about in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up <map> Create a Map To create a map, use the map keyword, and specify the type of both the key and the value it should store within angle brackets <>. At last, specify the name of the map, like: map<keytype, valuetype> mapName: map <> map<keytype, valuetype> mapName Example If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}: {} Example Access a Map You cannot access map elements by referring to index numbers, like you would with arrays and vectors. Instead, you can access a map element by referring to its key inside square brackets []: [] Example You can also access elements with the .at() function: .at() Example Note: The .at() function is often preferred over square brackets [] because it throws an error message if the element does not exist: .at() [] Example Change Values You can also change the value associated with a key: Example However, it is safer to use the .at() function: .at() Example Add Elements To add elements to a map, it is ok to use square brackets []: [] Example But you can also use the .insert() function: .insert() Example Elements with Equal Keys A map cannot have elements with equal keys. For example, if we try to add \"Jenny\" two times to the map, it will only keep the first one: Example To sum up; values can be equal, but keys must be unique. Remove Elements To remove specific elements from a map, you can use the .erase() function: .erase() Example To remove all elements from a map, you can use the .clear() function: .clear() Example Find the Size of a Map To find out how many elements a map has, use the .size() function: .size() Example Check if a Map is Empty Use the .empty() function to find out if a map is empty or not. .empty() The .empty() function returns 1 (true) if the map is empty and 0 (false) otherwise: .empty() 1 0 Example Example Note: You can also check if a specific element exists, by using the .count(key) function. .count(key) It returns 1 (true) if the element exists and 0 (false) otherwise: 1 0 Example Loop Through a Map You can loop through a map with the for-each loop. However, there are a couple of things to be aware of: auto for .first .second Example The output will be: Adele is: 45Bo is: 29John is: 32 If you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this: greater<type> Example The output will be: John is: 32 Bo is: 29 Adele is: 45 Tip: It is also possible to loop through maps with an iterator, which you will learn more about in the next chapter."
  },
  {
    "document": "C++ Iterator C++ Iterators Iterators are used to access and iterate through elements of data structures (vectors, sets, etc. ), by \"pointing\" to them. It is called an \"iterator\" because \"iterating\" is the technical term for looping. To iterate through a vector, look at the following example: Example it for it cars.begin() it cars.end() ++it *it Note: The type of the iterator must match the type of the data structure it should iterate through (string in our example) string What is begin() and end()? begin() end() begin() and end() are functions that belong to data structures, such as vectors and lists. They do not belong to the iterator itself. Instead, they are used with iterators to access and iterate through the elements of these data structures. begin() end() begin() end() To understand how they work, let's continue to use vectors as an example: Begin Examples begin() points to the first element in the vector (index 0, which is \"Volvo\"): begin() Example To point to the second element (BMW), you can write cars.begin() + 1: cars.begin() + 1 Example And of course, that also means you can point to the third element with cars.begin() + 2: cars.begin() + 2 Example End Example end() points to one position after the last element in the vector (meaning it doesn't point to an actual element, but rather indicates that this is the end of the vector). end() So, to use end() to point to the last element in the cars vector (Mazda), you can use cars.end() - 1: end() cars.end() - 1 Example Why do we say \"point\"? Iterators are like \"pointers\" in that they \"point\" to elements in a data structure rather than returning values from them. They refer to a specific position, providing a way to access and modify the value when needed, without making a copy of it. For example: Example The auto Keyword auto In C++ 11 and later versions, you can use the auto keyword instead of explicitly declaring and specifying the type of the iterator. auto The auto keyword allows the compiler to automatically determine the correct data type, which simplifies the code and makes it more readable: auto Instead of this: You can simply write this: In the example above, the compiler knows the type of it based on the return type of cars.begin(), which is vector<string>::iterator. it cars.begin() vector<string>::iterator The auto keyword works in for loops as well: auto for For-Each Loop vs. Iterators You can use a for-each loop to just loop through elements of a data structure, like this: Example When you are just reading the elements, and don't need to modify them, the for-each loop is much simpler and cleaner than iterators."
  },
  {
    "document": "However, when you need to add, modify, or remove elements during iteration, iterate in reverse, or skip elements, you should use iterators: Example Iterate in Reverse To iterate in reverse order, you can use rbegin() and rend() instead of begin() and end(): rbegin() rend() begin() end() Example Iterate Through other Data Structures Iterators are great for code reusability since you can use the same syntax for iterating through vectors, lists, deques, sets and maps: List Example Deque Example Set Example Map Example The examples above shows how to iterate through different data structures that support iterators (vector, list, deque, map and set support iterators, while stacks and queues do not). Algorithms Another important feature of iterators is that they are used with different algorithm functions, such as sort() and find() (found in the <algorithm> library), to sort and search for elements in a data structure. sort() find() <algorithm> For example, the sort() function takes iterators (typically returned by begin() and end()) as parameters to sort elements in a data structure from the beginning to the end. sort() begin() end() In this example, the elements are sorted alphabetically since they are strings: Example And in this example, the elements are sorted numerically since they are integers: Example To reverse the order, you can use rbegin() and rend() instead of begin() and end(): rbegin() rend() begin() end() Example"
  },
  {
    "document": "C++ Algorithm C++ Algorithms In the previous chapters, you learned that data structures (like vectors, lists, etc) are used to store and organize data. Algorithms are used to solve problems by sorting, searching, and manipulating data structures. The <algorithm> library provides many useful functions to perform these tasks with iterators. <algorithm> To use these functions, you must include the <algorithm> header file: <algorithm> Sorting Algorithms To sort elements in a data structure, you can use the sort() function. sort() The sort() function takes iterators (typically a start iterator returned by begin() and an end iterator returned by end()) as parameters: sort() begin() end() Example By default, the elements are sorted in ascending order. In the example above, the elements are sorted alphabetically since they are strings. If we had a vector of integers, they would be sorted numerically: Example To reverse the order, you can use rbegin() and rend() instead of begin() and end(): rbegin() rend() begin() end() Example To only sort specific elements, you could write: Example Searching Algorithms To search for specific elements in a vector, you can use the find() function. find() It takes three parameters: start_iterator, end_iterator, value, where value is the value to search for: start_iterator, end_iterator, value Example Seach for the number 3 in \"numbers\": To search for the first element that is greater than a specific value, you can use the upper_bound() function: upper_bound() Example Find the first value greater than 5 in \"numbers\": The upper_bound() function is typically used on sorted data structures. That's why we first sort the vector in the example above. upper_bound() To find the smallest element in a vector, use the min_element() function: min_element() Example To find the largest element, use the max_element() function: max_element() Example Modifying Algorithms To copy elements from one vector to another, you can use the copy() function: copy() Example Copy elements from one vector to another: To fill all elements in a vector with a value, you can use the fill() function: fill() Example Fill all elements in the numbers vector with the value 35: Complete Algorithm Reference For a complete reference of algorithm functions, go to our C++ Algorithm Reference."
  },
  {
    "document": "C++ How To Add Two Numbers Add Two Numbers Learn how to add two numbers in C++: Example Add Two Numbers with User Input In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers: Example"
  },
  {
    "document": "C++ How To Generate Random Numbers Random Number You can use the rand() function, found in the <cstdlib> library, to generate a random number: rand() <cstdlib> Example To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula: Example Note: The examples above just outputs a random number once. They don't output different random numbers each time the program runs. To fix this, you can use the srand() function and add the time() function from the <ctime> library. srand() time() <ctime> This will generate a random number from 0 to 100 each time the program runs: Example"
  },
  {
    "document": "C++ Reference Documentation This section contains a C++ reference documentation. C++ Reference A list of C++ keywords and popular libraries can be found here:"
  },
  {
    "document": "C++ Keywords C++ Keywords A list of useful keywords in C++ can be found in the table below. && &= & | ~ ! != || |= int char int char ^ ^="
  },
  {
    "document": "C++ iostream Library (Standard Input / Output Streams) C++ iostream objects The <iostream> library provides objects which can read user input and output data to the console or to a file. <iostream> A list of all iostream objects can be found in the table below. wchar_t char wchar_t char wchar_t wchar_t char"
  },
  {
    "document": "C++ fstream Library (File Streams) C++ fstream classes The <fstream> library provides classes for reading and writing into files or data streams. <fstream> A list of useful fstream classes can be found in the table below. fstream ifstream ofstream Learn more about files in our C++ Files Tutorial."
  },
  {
    "document": "C++ cmath Library C++ Math Functions The <cmath> library has many functions that allow you to perform mathematical tasks on numbers. <cmath> A list of all math functions can be found in the table below: Learn more about math in our C++ Math Tutorial."
  },
  {
    "document": "C++ string Library C++ string Functions The <string> library has many functions that allow you to perform tasks on strings. <string> A list of popular string functions can be found in the table below. Learn more about strings in our C++ Strings Tutorial."
  },
  {
    "document": "C++ cstring Library C++ cstring Functions The <cstring> library has many functions that allow you to perform tasks on arrays and C-style strings. <cstring> Note that C-style strings are different than regular strings. A C-style string is an array of characters, created with the char type. To learn more about C-style strings, read our C Strings Tutorial. char A list of all cstring functions can be found in the table below. Learn more about c-style strings in our C-Style Strings Tutorial."
  },
  {
    "document": "C++ ctime Library C++ ctime Functions The <ctime> library has a variety of functions that allow you to measure dates and times. <ctime> tm tm tm tm tm"
  },
  {
    "document": "C++ vector Library C++ vector Library The <vector> library has many functions that allow you to perform tasks on vectors. <vector> A list of popular vector functions can be found in the table below. Learn more about vectors in our C++ Vector Tutorial."
  },
  {
    "document": "C++ algorithm Library C++ algorithm Library The <algorithm> library has many functions that allow you to modify ranges of data from data structures. <algorithm> A list of useful functions in the algorithm library can be found below. Learn more about algorithms in our C++ Algorithm Tutorial."
  },
  {
    "document": "C++ Examples C++ Syntax C++ Output/Print C++ Comments C++ Variables C++ User Input C++ Data Types C++ Operators C++ Strings C++ Math C++ Booleans C++ If...Else (Conditions) C++ Switch C++ Loops C++ Arrays C++ References C++ Pointers C++ Files C++ Functions C++ Classes/Objects"
  },
  {
    "document": "C++ Real-Life Examples Practical Examples This page contains a list of practical examples used in real world projects. Variables and Data Types Example Use variables to store different data of a college student: Example Calculate the area of a rectangle (by multiplying the length and width): Example Use different data types to calculate and output the total cost of a number of items: For a tutorial about variables and data types in C++, visit our Variables Chapter and Data Types Chapter. Strings Example Use strings to create a simple welcome message: For a tutorial about strings in C++, visit our Strings Chapter. Booleans Example Find out if a person is old enough to vote: For a tutorial about booleans in C++, visit our Booleans Chapter. Conditions (If..Else) Example Check whether the user enters the correct code: Example Find out if a number is positive or negative: Example Find out if a person is old enough to vote: Example Find out if a number is even or odd: For a tutorial about conditions in C++, visit our If..Else Chapter. Switch Example Use the weekday number to calculate and output the weekday name: For a tutorial about switch in C++, visit our Switch Chapter. While Loops Example Create a simple \"countdown\" program: Example Create a program that only print even numbers between 0 and 10 (inclusive): Example Use a while loop to reverse some numbers: Example Use a while loop together with an if else statement to play a game of Yatzy: For a tutorial about while loops in C++, visit our While Loops Chapter. For Loops Example Use a for loop to create a program that counts to 100 by tens: Example Use a for loop to create a program that only print even values between 0 and 10: Example Use a for loop to create a program that only prints odd numbers: Example Use a for loop to print the powers of 2 up to 512: Example Use a for loop to create a program that prints the multiplication table of a specified number (2 in this example): For a tutorial about for loops in C++, visit our For Loops Chapter. Arrays Example Create a program that calculates the average of different ages: Example Create a program that finds the lowest age among different ages: For a tutorial about arrays in C++, visit our Arrays Chapter. Structs Example Use a structure to store and output different information about Cars: For a tutorial about structs in C++, visit our Structures Chapter. Functions Example Create a program that converts a value from fahrenheit to celsius: For a tutorial about functions in C++, visit our Functions Chapter."
  },
  {
    "document": "C++ Online Compiler C++ Compiler (Editor) With our online C++ compiler, you can edit C++ code, and view the result in your browser. Example Hello World! Click on the \"Try it Yourself\" button to see how it works. C++ Compiler Explained The window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window. The icons are explained in the table below: If you don't know C++, we suggest that you read our C++ Tutorial from scratch."
  },
  {
    "document": "C++ Exercises Exercises Test your C++ skills with exercises from all categories: Syntax Statements Output Text Output Numbers New Lines Comments Variables Multiple Variables Identifiers Constants User Input Data Types Numeric Data Types Boolean Data Types Character Data Types String Data Types Arithmetic Operators Assignment Operators Comparison Operators Logical Operators Strings String Concatenation Numbers and Strings String Length Access Strings Special Characters User Input Strings String Namespace C-Style Strings Math Booleans Boolean Expressions If Else Else If Short Hand If Else Switch While Loop Do/While Loop For Loop Nested Loops The foreach Loop Break and Continue Arrays Arrays and Loops Omit Array Size Get Array Size Multi-Dimensional Arrays Structures Enums References Memory Address Pointers Dereference Modify Pointers Functions Function Parameters Default Parameters Multiple Parameters Return Values Pass By Reference Pass Arrays Function Overloading Scope Recursion OOP Classes and Objects Class Methods Constructors Access Specifiers Encapsulation Inheritance Multilevel Inheritance Multiple Inheritance Inheritance Access Polymorphism Files Exceptions Date Data Structures and STL Vectors List Stacks Queues Deque Sets Maps Iterators Algorithms Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "C++ Quiz You can test your C++ skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about C++. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the C++ Quiz â¯ If you don't know C++, we suggest that you read our C++ Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "C++ Syllabus Introduction The W3Schools C++ Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of C++. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn C++ step by step, from the introduction to creating your first application with C++. Get Started With C++ Â» Learning Outcomes Note: Are you a teacher teaching C++ programming? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are C++ Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn C++ for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment C++, like any other coding language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit C++ code and view the result: Example C++ Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The C++ exam is a test that summarizes the W3Schools C++ syllabus. After passing the exam you get the \"Certified C++ Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach C++? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "C++ Study Plan Introduction The C++ study plan helps you teach your students C++ step-by-step. Creating a study plan for C++ is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of C++ to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach C++. The C++ training materials is available for you to include and use in your study plan: C++ Syllabus With the C++ Syllabus, your students will start with the basics, like understanding variables, data types, and simple input/output, and move to more advanced topics, like object-oriented programming, working with classes, and managing memory using pointers. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about C++ Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 5-week C++ study plan could look like: Image of Sample C++ study plan: Ready to get started? Start with C++ Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach C++ programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "C++ Certification W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "CSS Tutorial Learn CSS CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed. This tutorial will teach you CSS from basic to advanced. Examples in Each Chapter This CSS tutorial contains hundreds of CSS examples. With our online editor, you can edit the CSS, and click on a button to view the result. CSS Example Click on the \"Try it Yourself\" button to see how it works. CSS Examples Learn from over 300 examples! With our editor, you can edit the CSS, and click on a button to view the result. Go to CSS Examples! Use the Menu We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign â°. CSS Templates We have created some responsive W3.CSS templates for you to use. You are free to modify, save, share, and use them in all your projects. Free CSS Templates! CSS Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all CSS Exercises CSS Quiz Test your CSS skills with a quiz. Start CSS Quiz! Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. CSS References At W3Schools you will find complete CSS references of all properties and selectors with syntax, examples, browser support, and more. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "CSS Introduction CSS is the language we use to style a Web page. What is CSS? CSS Demo - One HTML Page - Multiple Styles! Here we will show one HTML page displayed with four different stylesheets. Click on the \"Stylesheet 1\", \"Stylesheet 2\", \"Stylesheet 3\", \"Stylesheet 4\" links below to see the different styles: Why Use CSS? CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes. CSS Example CSS Solved a Big Problem HTML was NEVER intended to contain tags for formatting a web page! HTML was created to describe the content of a web page, like: <h1>This is a heading</h1> <p>This is a paragraph.</p> When tags like <font>, and color attributes were added to the HTML 3.2 specification, it started a nightmare for web developers. Development of large websites, where fonts and color information were added to every single page, became a long and expensive process. To solve this problem, the World Wide Web Consortium (W3C) created CSS. CSS removed the style formatting from the HTML page! If you don't know what HTML is, we suggest that you read our HTML Tutorial. CSS Saves a Lot of Work! The style definitions are normally saved in external .css files. With an external stylesheet file, you can change the look of an entire website by changing just one file! Video: CSS Introduction"
  },
  {
    "document": "CSS Syntax A CSS rule consists of a selector and a declaration block. CSS Syntax  The selector points to the HTML element you want to style. The declaration block contains one or more declarations separated by semicolons. Each declaration includes a CSS property name and a value, separated by a colon. Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces. Example In this example all <p> elements will be center-aligned, with a red text color: p color red text-align center You will learn much more about CSS selectors and CSS properties in the next chapters! Video: CSS Syntax"
  },
  {
    "document": "CSS Selectors A CSS selector selects the HTML element(s) you want to style. CSS Selectors CSS selectors are used to \"find\" (or select) the HTML elements you want to style. We can divide CSS selectors into five categories: This page will explain the most basic CSS selectors. The CSS element Selector The element selector selects HTML elements based on the element name. Example Here, all <p> elements on the page will be center-aligned, with a red text color: The CSS id Selector The id selector uses the id attribute of an HTML element to select a specific element. The id of an element is unique within a page, so the id selector is used to select one unique element! To select an element with a specific id, write a hash (#) character, followed by the id of the element. Example The CSS rule below will be applied to the HTML element with id=\"para1\": Note: An id name cannot start with a number! The CSS class Selector The class selector selects HTML elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the class name. Example In this example all HTML elements with class=\"center\" will be red and center-aligned: You can also specify that only specific HTML elements should be affected by a class. Example In this example only <p> elements with class=\"center\" will be red and center-aligned: HTML elements can also refer to more than one class. Example In this example the <p> element will be styled according to class=\"center\" and to class=\"large\": Note: A class name cannot start with a number! The CSS Universal Selector The universal selector (*) selects all HTML elements on the page. Example The CSS rule below will affect every HTML element on the page: The CSS Grouping Selector The grouping selector selects all the HTML elements with the same style definitions. Look at the following CSS code (the h1, h2, and p elements have the same style definitions): It will be better to group the selectors, to minimize the code. To group selectors, separate each selector with a comma. Example In this example we have grouped the selectors from the code above: All CSS Simple Selectors Video: CSS Simple Selectors"
  },
  {
    "document": "How To Add CSS When a browser reads a style sheet, it will format the HTML document according to the information in the style sheet. Three Ways to Insert CSS There are three ways of inserting a style sheet: External CSS With an external style sheet, you can change the look of an entire website by changing just one file! Each HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section. Example External styles are defined within the <link> element, inside the <head> section of an HTML page: An external style sheet can be written in any text editor, and must be saved with a .css extension. The external .css file should not contain any HTML tags. Here is how the \"mystyle.css\" file looks: \"mystyle.css\" Note: Do not add a space between the property value (20) and the unit (px): Incorrect (space): margin-left: 20 px; Correct (no space): margin-left: 20px; margin-left: 20 px; margin-left: 20px; Internal CSS An internal style sheet may be used if one single HTML page has a unique style. The internal style is defined inside the <style> element, inside the head section. Example Internal styles are defined within the <style> element, inside the <head> section of an HTML page: Inline CSS An inline style may be used to apply a unique style for a single element. To use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property. Example Inline styles are defined within the \"style\" attribute of the relevant element: Tip: An inline style loses many of the advantages of a style sheet (by mixing content with presentation). Use this method sparingly. Multiple Style Sheets If some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used. Assume that an external style sheet has the following style for the <h1> element: Then, assume that an internal style sheet also has the following style for the <h1> element: Example If the internal style is defined after the link to the external style sheet, the <h1> elements will be \"orange\": Example However, if the internal style is defined before the link to the external style sheet, the <h1> elements will be \"navy\": Cascading Order What style will be used when there is more than one style specified for an HTML element? All the styles in a page will \"cascade\" into a new \"virtual\" style sheet by the following rules, where number one has the highest priority: So, an inline style has the highest priority, and will override external and internal styles and browser defaults. Try it Yourself Â» Ever heard about W3Schools Spaces? Here you can create your own website, or save code snippets for later use, for free. * no credit card required Video: How to add CSS to HTML"
  },
  {
    "document": "CSS Comments CSS comments are not displayed in the browser, but they can help document your source code. CSS Comments Comments are used to explain the code, and may help when you edit the source code at a later date. Comments are ignored by browsers. A CSS comment is placed inside the <style> element, and starts with /* and ends with */: <style> /* */ Example You can add comments wherever you want in the code: Example Even in the middle of a code line: Example Comments can also span multiple lines: Example HTML and CSS Comments From the HTML tutorial, you learned that you can add comments to your HTML source by using the <!--...--> syntax. <!--...--> In the following example, we use a combination of HTML and CSS comments: Example Video: CSS Comments"
  },
  {
    "document": "CSS Colors Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values. CSS Color Names In CSS, a color can be specified by using a predefined color name: Try it Yourself Â» CSS/HTML support 140 standard color names. CSS Background Color You can set the background color for HTML elements: Example CSS Text Color You can set the color of text: Hello World Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Example CSS Border Color You can set the color of borders: Hello World Hello World Hello World Example CSS Color Values In CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values: Same as color name \"Tomato\": Same as color name \"Tomato\", but 50% transparent: Example Learn more about Color Values You will learn more about RGB, HEX and HSL in the next chapters. Video: CSS Colors Introduction"
  },
  {
    "document": "CSS Colors Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values. CSS Color Names In CSS, a color can be specified by using a predefined color name: Try it Yourself Â» CSS/HTML support 140 standard color names. CSS Background Color You can set the background color for HTML elements: Example CSS Text Color You can set the color of text: Hello World Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Example CSS Border Color You can set the color of borders: Hello World Hello World Hello World Example CSS Color Values In CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values: Same as color name \"Tomato\": Same as color name \"Tomato\", but 50% transparent: Example Learn more about Color Values You will learn more about RGB, HEX and HSL in the next chapters. Video: CSS Colors Introduction"
  },
  {
    "document": "CSS RGB Colors An RGB color value represents RED, GREEN, and BLUE light sources. RGB Value In CSS, a color can be specified as an RGB value, using this formula: rgb(red, green, blue) Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255. For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. To display black, set all color parameters to 0, like this: rgb(0, 0, 0). To display white, set all color parameters to 255, like this: rgb(255, 255, 255). Experiment by mixing the RGB values below:  RED GREEN BLUE Example Shades of gray are often defined using equal values for all the 3 light sources: Example RGBA Value RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha) The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all): Experiment by mixing the RGBA values below:  RED GREEN BLUE ALPHA Example Video: CSS Colors RGB & RGBA"
  },
  {
    "document": "CSS HEX Colors A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. HEX Value In CSS, a color can be specified using a hexadecimal value in the form: #rrggbb Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255). For example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to the lowest value (00). To display black, set all values to 00, like this: #000000. To display white, set all values to ff, like this: #ffffff. Experiment by mixing the HEX values below:  RED GREEN BLUE Example Shades of gray are often defined using equal values for all the 3 light sources: Example 3 Digit HEX Value Sometimes you will see a 3-digit hex code in the CSS source. The 3-digit hex code is a shorthand for some 6-digit hex codes. The 3-digit hex code has the following form: #rgb Where r, g, and b represent the red, green, and blue components with values between 0 and f. The 3-digit hex code can only be used when both the values (RR, GG, and BB) are the same for each component. So, if we have #ff00cc, it can be written like this: #f0c. Here is an example: Example Video: CSS Colors Hex"
  },
  {
    "document": "CSS HSL Colors HSL stands for hue, saturation, and lightness. HSL Value In CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form: hsl(hue, saturation, lightness) Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue. Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color. Lightness is also a percentage. 0% is black, 50% is neither light or dark, 100% is white Experiment by mixing the HSL values below:  HUE SATURATION LIGHTNESS Example Saturation Saturation can be described as the intensity of a color. 100% is pure color, no shades of gray. 50% is 50% gray, but you can still see the color. 0% is completely gray; you can no longer see the color. Example Lightness The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) and 100% means full lightness (white). Example Shades of Gray Shades of gray are often defined by setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades: Example HSLA Value HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color. An HSLA color value is specified with: hsla(hue, saturation, lightness, alpha) The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all): Experiment by mixing the HSLA values below:  HUE SATURATION LIGHTNESS ALPHA Example Video: CSS Colors HSL"
  },
  {
    "document": "CSS Backgrounds The CSS background properties are used to add background effects for elements. In these chapters, you will learn about the following CSS background properties: background-color background-image background-repeat background-attachment background-position background CSS background-color The background-color property specifies the background color of an element. background-color Example The background color of a page is set like this: With CSS, a color is most often specified by: Look at CSS Color Values for a complete list of possible color values. Other Elements You can set the background color for any HTML elements: Example Here, the <h1>, <p>, and <div> elements will have different background colors: Opacity / Transparency The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent: opacity opacity 1 opacity 0.6 opacity 0.3 opacity 0.1 Example Note: When using the opacity property to add transparency to the background of an element, all of its child elements inherit the same transparency. This can make the text inside a fully transparent element hard to read. opacity Transparency using RGBA If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text: 100% opacity 60% opacity 30% opacity 10% opacity You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). Tip: You will learn more about RGBA Colors in our CSS Colors Chapter. Example The CSS Background Color Property Video: CSS Background Color"
  },
  {
    "document": "CSS Backgrounds The CSS background properties are used to add background effects for elements. In these chapters, you will learn about the following CSS background properties: background-color background-image background-repeat background-attachment background-position background CSS background-color The background-color property specifies the background color of an element. background-color Example The background color of a page is set like this: With CSS, a color is most often specified by: Look at CSS Color Values for a complete list of possible color values. Other Elements You can set the background color for any HTML elements: Example Here, the <h1>, <p>, and <div> elements will have different background colors: Opacity / Transparency The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent: opacity opacity 1 opacity 0.6 opacity 0.3 opacity 0.1 Example Note: When using the opacity property to add transparency to the background of an element, all of its child elements inherit the same transparency. This can make the text inside a fully transparent element hard to read. opacity Transparency using RGBA If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text: 100% opacity 60% opacity 30% opacity 10% opacity You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). Tip: You will learn more about RGBA Colors in our CSS Colors Chapter. Example The CSS Background Color Property Video: CSS Background Color"
  },
  {
    "document": "CSS Background Image CSS background-image The background-image property specifies an image to use as the background of an element. background-image By default, the image is repeated so it covers the entire element. Example Set the background image for a page: Example This example shows a bad combination of text and background image. The text is hardly readable: Note: When using a background image, use an image that does not disturb the text. The background image can also be set for specific elements, like the <p> element: Example The CSS Background Image Property Video: CSS Background Images"
  },
  {
    "document": "CSS Background Image Repeat CSS background-repeat By default, the background-image property repeats an image both horizontally and vertically. background-image Some images should be repeated only horizontally or vertically, or they will look strange, like this: Example If the image above is repeated only horizontally (background-repeat: repeat-x;), the background will look better: background-repeat: repeat-x; Example Tip: To repeat an image vertically, set background-repeat: repeat-y; background-repeat: repeat-y; CSS background-repeat: no-repeat Showing the background image only once is also specified by the background-repeat property: background-repeat Example Show the background image only once: In the example above, the background image is placed in the same place as the text. We want to change the position of the image, so that it does not disturb the text too much. CSS background-position The background-position property is used to specify the position of the background image. background-position Example Position the background image in the top-right corner: The CSS Background Repeat and Position Properties Video: CSS Background Repeat and Position"
  },
  {
    "document": "CSS Background Attachment CSS background-attachment The background-attachment property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page): background-attachment Example Specify that the background image should be fixed: Example Specify that the background image should scroll with the rest of the page: The CSS Background Attachment Property Video: CSS Background Attachment"
  },
  {
    "document": "CSS Background Shorthand CSS background - Shorthand property To shorten the code, it is also possible to specify all the background properties in one single property. This is called a shorthand property. Instead of writing: You can use the shorthand property background: background Example Use the shorthand property to set the background properties in one declaration: When using the shorthand property the order of the property values is: background-color background-image background-repeat background-attachment background-position It does not matter if one of the property values is missing, as long as the other ones are in this order. Note that we do not use the background-attachment property in the examples above, as it does not have a value. All CSS Background Properties Video: CSS Background Shorthand"
  },
  {
    "document": "CSS Borders The CSS border properties allow you to specify the style, width, and color of an element's border. I have borders on all sides. I have a red bottom border. I have rounded borders. I have a blue left border. CSS Border Style The border-style property specifies what kind of border to display. border-style The following values are allowed: dotted dashed solid double groove ridge inset outset none hidden The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border). border-style Example Demonstration of the different border styles: Result: A dotted border. A dashed border. A solid border. A double border. A groove border. The effect depends on the border-color value. A ridge border. The effect depends on the border-color value. An inset border. The effect depends on the border-color value. An outset border. The effect depends on the border-color value. No border. A hidden border. A mixed border. Note: None of the OTHER CSS border properties (which you will learn more about in the next chapters) will have ANY effect unless the border-style property is set! border-style"
  },
  {
    "document": "CSS Borders The CSS border properties allow you to specify the style, width, and color of an element's border. I have borders on all sides. I have a red bottom border. I have rounded borders. I have a blue left border. CSS Border Style The border-style property specifies what kind of border to display. border-style The following values are allowed: dotted dashed solid double groove ridge inset outset none hidden The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border). border-style Example Demonstration of the different border styles: Result: A dotted border. A dashed border. A solid border. A double border. A groove border. The effect depends on the border-color value. A ridge border. The effect depends on the border-color value. An inset border. The effect depends on the border-color value. An outset border. The effect depends on the border-color value. No border. A hidden border. A mixed border. Note: None of the OTHER CSS border properties (which you will learn more about in the next chapters) will have ANY effect unless the border-style property is set! border-style"
  },
  {
    "document": "CSS Border Width CSS Border Width The border-width property specifies the width of the four borders. border-width The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick: Example Demonstration of the different border widths: Result: Specific Side Widths The border-width property can have from one to four values (for the top border, right border, bottom border, and the left border): border-width Example"
  },
  {
    "document": "CSS Border Color CSS Border Color The border-color property is used to set the color of the four borders. border-color The color can be set by: Note: If border-color is not set, it inherits the color of the element. border-color Example Demonstration of the different border colors: Result: Specific Side Colors The border-color property can have from one to four values (for the top border, right border, bottom border, and the left border). border-color Example HEX Values The color of the border can also be specified using a hexadecimal value (HEX): Example RGB Values Or by using RGB values: Example HSL Values You can also use HSL values: Example You can learn more about HEX, RGB and HSL values in our CSS Colors chapters."
  },
  {
    "document": "CSS Border Sides CSS Border - Individual Sides From the examples on the previous pages, you have seen that it is possible to specify a different border for each side. In CSS, there are also properties for specifying each of the borders (top, right, bottom, and left): Example Result: The example above gives the same result as this: Example So, here is how it works: If the border-style property has four values: border-style If the border-style property has three values: border-style If the border-style property has two values: border-style If the border-style property has one value: border-style Example The border-style property is used in the example above. However, it also works with border-width and border-color. border-style border-width border-color"
  },
  {
    "document": "CSS Shorthand Border Property CSS Border - Shorthand Property Like you saw in the previous page, there are many properties to consider when dealing with borders. To shorten the code, it is also possible to specify all the individual border properties in one property. The border property is a shorthand property for the following individual border properties: border border-width border-style border-color Example Result: Some text You can also specify all the individual border properties for just one side: Left Border Result: Some text Bottom Border Result: Some text"
  },
  {
    "document": "CSS Rounded Borders CSS Rounded Borders The border-radius property is used to add rounded borders to an element: border-radius Normal border Round border Rounder border Roundest border Example More Examples All the top border properties in one declaration This example demonstrates a shorthand property for setting all of the properties for the top border in one declaration. Set the style of the bottom border This example demonstrates how to set the style of the bottom border. Set the width of the left border This example demonstrates how to set the width of the left border. Set the color of the four borders This example demonstrates how to set the color of the four borders. It can have from one to four colors. Set the color of the right border This example demonstrates how to set the color of the right border. All CSS Border Properties"
  },
  {
    "document": "CSS Margins Margins are used to create space around elements, outside of any defined borders. CSS Margins The CSS margin properties are used to create space around elements, outside of any defined borders. margin With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left). Margin - Individual Sides CSS has properties for specifying the margin for each side of an element: margin-top margin-right margin-bottom margin-left All the margin properties can have the following values: Tip: Negative values are allowed. Example Set different margins for all four sides of a <p> element: Margin - Shorthand Property To shorten the code, it is possible to specify all the margin properties in one property. The margin property is a shorthand property for the following individual margin properties: margin margin-top margin-right margin-bottom margin-left So, here is how it works: If the margin property has four values: margin Example Use the margin shorthand property with four values: If the margin property has three values: margin Example Use the margin shorthand property with three values: If the margin property has two values: margin Example Use the margin shorthand property with two values: If the margin property has one value: margin Example Use the margin shorthand property with one value: The auto Value You can set the margin property to auto to horizontally center the element within its container. auto The element will then take up the specified width, and the remaining space will be split equally between the left and right margins. Example Use margin: auto: The inherit Value This example lets the left margin of the <p class=\"ex1\"> element be inherited from the parent element (<div>): Example Use of the inherit value: All CSS Margin Properties"
  },
  {
    "document": "CSS Margins Margins are used to create space around elements, outside of any defined borders. CSS Margins The CSS margin properties are used to create space around elements, outside of any defined borders. margin With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left). Margin - Individual Sides CSS has properties for specifying the margin for each side of an element: margin-top margin-right margin-bottom margin-left All the margin properties can have the following values: Tip: Negative values are allowed. Example Set different margins for all four sides of a <p> element: Margin - Shorthand Property To shorten the code, it is possible to specify all the margin properties in one property. The margin property is a shorthand property for the following individual margin properties: margin margin-top margin-right margin-bottom margin-left So, here is how it works: If the margin property has four values: margin Example Use the margin shorthand property with four values: If the margin property has three values: margin Example Use the margin shorthand property with three values: If the margin property has two values: margin Example Use the margin shorthand property with two values: If the margin property has one value: margin Example Use the margin shorthand property with one value: The auto Value You can set the margin property to auto to horizontally center the element within its container. auto The element will then take up the specified width, and the remaining space will be split equally between the left and right margins. Example Use margin: auto: The inherit Value This example lets the left margin of the <p class=\"ex1\"> element be inherited from the parent element (<div>): Example Use of the inherit value: All CSS Margin Properties"
  },
  {
    "document": "CSS Margin Collapse Sometimes two margins collapse into a single margin. Margin Collapse Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins. This does not happen on left and right margins! Only top and bottom margins! Look at the following example: Example Demonstration of margin collapse: In the example above, the <h1> element has a bottom margin of 50px and the <h2> element has a top margin set to 20px. Common sense would seem to suggest that the vertical margin between the <h1> and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, the actual margin ends up being 50px. All CSS Margin Properties"
  },
  {
    "document": "CSS Padding Padding is used to create space around an element's content, inside of any defined borders. CSS Padding The CSS padding properties are used to generate space around an element's content, inside of any defined borders. padding With CSS, you have full control over the padding. There are properties for setting the padding for each side of an element (top, right, bottom, and left). Padding - Individual Sides CSS has properties for specifying the padding for each side of an element: padding-top padding-right padding-bottom padding-left All the padding properties can have the following values: Note: Negative values are not allowed. Example Set different padding for all four sides of a <div> element: Padding - Shorthand Property To shorten the code, it is possible to specify all the padding properties in one property. The padding property is a shorthand property for the following individual padding properties: padding padding-top padding-right padding-bottom padding-left So, here is how it works: If the padding property has four values: padding Example Use the padding shorthand property with four values: If the padding property has three values: padding Example Use the padding shorthand property with three values: If the padding property has two values: padding Example Use the padding shorthand property with two values: If the padding property has one value: padding Example Use the padding shorthand property with one value: Padding and Element Width The CSS width property specifies the width of the element's content area. The content area is the portion inside the padding, border, and margin of an element (the box model). width So, if an element has a specified width, the padding added to that element will be added to the total width of the element. This is often an undesirable result. Example Here, the <div> element is given a width of 300px. However, the actual width of the <div> element will be 350px (300px + 25px of left padding + 25px of right padding): To keep the width at 300px, no matter the amount of padding, you can use the box-sizing property. This causes the element to maintain its actual width; if you increase the padding, the available content space will decrease. box-sizing Example Use the box-sizing property to keep the width at 300px, no matter the amount of padding: More Examples Set the left padding This example demonstrates how to set the left padding of a <p> element. Set the right padding This example demonstrates how to set the right padding of a <p> element. Set the top padding This example demonstrates how to set the top padding of a <p> element. Set the bottom padding This example demonstrates how to set the bottom padding of a <p> element. All CSS Padding Properties"
  },
  {
    "document": "CSS Height, Width and Max-width The CSS height and width properties are used to set the height and width of an element. height width The CSS max-width property is used to set the maximum width of an element. max-width CSS Setting height and width The height and width properties are used to set the height and width of an element. height width The height and width properties do not include padding, borders, or margins. It sets the height/width of the area inside the padding, border, and margin of the element. CSS height and width Values The height and width properties may have the following values: height width auto length % initial inherit CSS height and width Examples Example Set the height and width of a <div> element: Try it Yourself Â» Example Set the height and width of another <div> element: Try it Yourself Â» Note: Remember that the height and width properties do not include padding, borders, or margins! They set the height/width of the area inside the padding, border, and margin of the element! height width Setting max-width The max-width property is used to set the maximum width of an element. max-width The max-width can be specified in length values, like px, cm, etc., or in percent (%) of the containing block, or set to none (this is default. Means that there is no maximum width). max-width The problem with the <div> above occurs when the browser window is smaller than the width of the element (500px). The browser then adds a horizontal scrollbar to the page. <div> In this situation, using max-width will improve the browser's handling of small windows. max-width Tip: Drag the browser window to smaller than 500px wide, to see the difference between the two divs! Note: If you for some reason use both the width property and the max-width property on the same element, and the value of the width property is larger than the max-width property; the max-width property will be used (and the width property will be ignored). width max-width width max-width max-width width Example This <div> element has a height of 100 pixels and a max-width of 500 pixels: Try it Yourself Â» Try it Yourself - Examples Set the height and width of elements This example demonstrates how to set the height and width of different elements. Set the height and width of an image using percent This example demonstrates how to set the height and width of an image using a percent value. Set min-width and max-width of an element This example demonstrates how to set a minimum width and a maximum width of an element using a pixel value. Set min-height and max-height of an element This example demonstrates how to set a minimum height and a maximum height of an element using a pixel value. All CSS Dimension Properties"
  },
  {
    "document": "CSS Box Model All HTML elements can be considered as boxes. The CSS Box Model In CSS, the term \"box model\" is used when talking about design and layout. The CSS box model is essentially a box that wraps around every HTML element. It consists of: content, padding, borders and margins. The image below illustrates the box model: Explanation of the different parts: The box model allows us to add a border around elements, and to define space between elements. Example Demonstration of the box model: Width and Height of an Element In order to set the width and height of an element correctly in all browsers, you need to know how the box model works. Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the total width and height of an element, you must also include the padding and borders. Example This <div> element will have a total width of 350px and a total height of 80px: Here is the calculation: 320px (width of content area) + 20px (left padding + right padding) + 10px (left border + right border) = 350px (total width) 50px (height of content area) + 20px (top padding + bottom padding) + 10px (top border + bottom border) = 80px (total height) The total width of an element should be calculated like this: Total element width = width + left padding + right padding + left border + right border The total height of an element should be calculated like this: Total element height = height + top padding + bottom padding + top border + bottom border Note: The margin property also affects the total space that the box will take up on the page, but the margin is not included in the actual size of the box. The box's total width and height stops at the border. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up The total width of an element should be calculated like this: Total element width = width + left padding + right padding + left border + right border The total height of an element should be calculated like this: Total element height = height + top padding + bottom padding + top border + bottom border Note: The margin property also affects the total space that the box will take up on the page, but the margin is not included in the actual size of the box. The box's total width and height stops at the border."
  },
  {
    "document": "CSS Outline An outline is a line drawn outside the element's border. CSS Outline An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element \"stand out\". CSS has the following outline properties: outline-style outline-color outline-width outline-offset outline Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline. CSS Outline Style The outline-style property specifies the style of the outline, and can have one of the following values: outline-style dotted dashed solid double groove ridge inset outset none hidden The following example shows the different outline-style values: outline-style Example Demonstration of the different outline styles: Result: A dotted outline. A dashed outline. A solid outline. A double outline. A groove outline. The effect depends on the outline-color value. A ridge outline. The effect depends on the outline-color value. An inset outline. The effect depends on the outline-color value. An outset outline. The effect depends on the outline-color value. Note: None of the other outline properties (which you will learn more about in the next chapters) will have ANY effect unless the outline-style property is set! outline-style"
  },
  {
    "document": "CSS Outline An outline is a line drawn outside the element's border. CSS Outline An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element \"stand out\". CSS has the following outline properties: outline-style outline-color outline-width outline-offset outline Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline. CSS Outline Style The outline-style property specifies the style of the outline, and can have one of the following values: outline-style dotted dashed solid double groove ridge inset outset none hidden The following example shows the different outline-style values: outline-style Example Demonstration of the different outline styles: Result: A dotted outline. A dashed outline. A solid outline. A double outline. A groove outline. The effect depends on the outline-color value. A ridge outline. The effect depends on the outline-color value. An inset outline. The effect depends on the outline-color value. An outset outline. The effect depends on the outline-color value. Note: None of the other outline properties (which you will learn more about in the next chapters) will have ANY effect unless the outline-style property is set! outline-style"
  },
  {
    "document": "CSS Outline Width CSS Outline Width The outline-width property specifies the width of the outline, and can have one of the following values: outline-width The following example shows some outlines with different widths: A thin outline. A medium outline. A thick outline. A 4px thick outline. Example"
  },
  {
    "document": "CSS Outline Color CSS Outline Color The outline-color property is used to set the color of the outline. outline-color The color can be set by: The following example shows some different outlines with different colors. Also notice that these elements also have a thin black border inside the outline: A solid red outline. A dotted blue outline. An outset grey outline. Example HEX Values The outline color can also be specified using a hexadecimal value (HEX): Example RGB Values Or by using RGB values: Example HSL Values You can also use HSL values: Example You can learn more about HEX, RGB and HSL values in our CSS Colors chapters."
  },
  {
    "document": "CSS Outline Shorthand CSS Outline - Shorthand property The outline property is a shorthand property for setting the following individual outline properties: outline outline-width outline-style outline-color The outline property is specified as one, two, or three values from the list above. The order of the values does not matter. outline The following example shows some outlines specified with the shorthand outline property: outline A dashed outline. A dotted red outline. A 5px solid yellow outline. A thick ridge pink outline. Example"
  },
  {
    "document": "CSS Outline Offset CSS Outline Offset The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent. outline-offset The following example specifies an outline 15px outside the border edge: This paragraph has an outline 15px outside the border edge. Example The following example shows that the space between an element and its outline is transparent: This paragraph has an outline of 15px outside the border edge. Example All CSS Outline Properties"
  },
  {
    "document": "CSS Text CSS has a lot of properties for formatting text. text formatting This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored \"Try it Yourself\" link. Text Color The color property is used to set the color of the text. The color is specified by: color Look at CSS Color Values for a complete list of possible color values. The default text color for a page is defined in the body selector. Example Text Color and Background Color In this example, we define both the background-color property and the color property: background-color color Example Important: High contrast is very important for people with vision problems. So, always ensure that the contrast between the text color and the background color (or background image) is good! The CSS Text Color Property"
  },
  {
    "document": "CSS Text CSS has a lot of properties for formatting text. text formatting This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored \"Try it Yourself\" link. Text Color The color property is used to set the color of the text. The color is specified by: color Look at CSS Color Values for a complete list of possible color values. The default text color for a page is defined in the body selector. Example Text Color and Background Color In this example, we define both the background-color property and the color property: background-color color Example Important: High contrast is very important for people with vision problems. So, always ensure that the contrast between the text color and the background color (or background image) is good! The CSS Text Color Property"
  },
  {
    "document": "CSS Text Alignment Text Alignment and Text Direction In this chapter you will learn about the following properties: text-align text-align-last direction unicode-bidi vertical-align Text Alignment The text-align property is used to set the horizontal alignment of a text. text-align A text can be left or right aligned, centered, or justified. The following example shows center aligned, and left and right aligned text (left alignment is default if text direction is left-to-right, and right alignment is default if text direction is right-to-left): Example When the text-align property is set to \"justify\", each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers): text-align Example Text Align Last The text-align-last property specifies how to align the last line of a text. text-align-last Example Align the last line of text in three <p> elements: Text Direction The direction and unicode-bidi properties can be used to change the text direction of an element: direction unicode-bidi Example Vertical Alignment The vertical-align property sets the vertical alignment of an element. vertical-align Example Set the vertical alignment of an image in a text: The CSS Text Alignment/Direction Properties"
  },
  {
    "document": "CSS Text Decoration Text Decoration In this chapter you will learn about the following properties: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness text-decoration Add a Decoration Line to Text The text-decoration-line property is used to add a decoration line to text. text-decoration-line Tip: You can combine more than one value, like overline and underline to display lines both over and under a text. Example Note: It is not recommended to underline text that is not a link, as this often confuses the reader. Specify a Color for the Decoration Line The text-decoration-color property is used to set the color of the decoration line. text-decoration-color Example Specify a Style for the Decoration Line The text-decoration-style property is used to set the style of the decoration line. text-decoration-style Example Specify the Thickness for the Decoration Line The text-decoration-thickness property is used to set the thickness of the decoration line. text-decoration-thickness Example The Shorthand Property The text-decoration property is a shorthand property for: text-decoration text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness Example A Small Tip All links in HTML are underlined by default. Sometimes you see that links are styled with no underline. The text-decoration: none; is used to remove the underline from links, like this: text-decoration: none; Example All CSS text-decoration Properties"
  },
  {
    "document": "CSS Text Transformation Text Transformation The text-transform property is used to specify uppercase and lowercase letters in a text. text-transform It can be used to turn everything into uppercase or lowercase letters, or capitalize the first letter of each word: Example The CSS Text Transformation Property"
  },
  {
    "document": "CSS Text Spacing Text Spacing In this chapter you will learn about the following properties: text-indent letter-spacing line-height word-spacing white-space Text Indentation The text-indent property is used to specify the indentation of the first line of a text: text-indent Example Letter Spacing The letter-spacing property is used to specify the space between the characters in a text. letter-spacing The following example demonstrates how to increase or decrease the space between characters: Example Line Height The line-height property is used to specify the space between lines: line-height Example Word Spacing The word-spacing property is used to specify the space between the words in a text. word-spacing The following example demonstrates how to increase or decrease the space between words: Example White Space The white-space property specifies how white-space inside an element is handled. white-space This example demonstrates how to disable text wrapping inside an element: Example The CSS Text Spacing Properties"
  },
  {
    "document": "CSS Text Shadow Text Shadow The text-shadow property adds shadow to text. text-shadow In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px): Text shadow effect! Example Next, add a color (red) to the shadow: Text shadow effect! Example Then, add a blur effect (5px) to the shadow: Text shadow effect! Example More Text Shadow Examples Example 1 Text-shadow on a white text: Example 2 Text-shadow with red neon glow: Example 3 Text-shadow with red and blue neon glow: Example 4 Tip: Go to our CSS Fonts chapter to learn about how to change fonts, text size and the style of a text. Tip: Go to our CSS Text Effects chapter to learn about different text effects. The CSS Text Shadow Property"
  },
  {
    "document": "CSS Fonts Choosing the right font for your website is important! Font Selection is Important Choosing the right font has a huge impact on how the readers experience a website. The right font can create a strong identity for your brand. Using a font that is easy to read is important. The font adds value to your text. It is also important to choose the correct color and text size for the font. Generic Font Families In CSS there are five generic font families: All the different font names belong to one of the generic font families. Difference Between Serif and Sans-serif Fonts Note: On computer screens, sans-serif fonts are considered easier to read than serif fonts. Some Font Examples The CSS font-family Property In CSS, we use the font-family property to specify the font of a text. font-family Note: If the font name is more than one word, it must be in quotation marks, like: \"Times New Roman\". Tip: The font-family property should hold several font names as a \"fallback\" system, to ensure maximum compatibility between browsers/operating systems. Start with the font you want, and end with a generic family (to let the browser pick a similar font in the generic family, if no other fonts are available). The font names should be separated with a comma. Read more about fallback fonts in the next chapter. font-family Example Specify some different fonts for three paragraphs:"
  },
  {
    "document": "CSS Fonts Choosing the right font for your website is important! Font Selection is Important Choosing the right font has a huge impact on how the readers experience a website. The right font can create a strong identity for your brand. Using a font that is easy to read is important. The font adds value to your text. It is also important to choose the correct color and text size for the font. Generic Font Families In CSS there are five generic font families: All the different font names belong to one of the generic font families. Difference Between Serif and Sans-serif Fonts Note: On computer screens, sans-serif fonts are considered easier to read than serif fonts. Some Font Examples The CSS font-family Property In CSS, we use the font-family property to specify the font of a text. font-family Note: If the font name is more than one word, it must be in quotation marks, like: \"Times New Roman\". Tip: The font-family property should hold several font names as a \"fallback\" system, to ensure maximum compatibility between browsers/operating systems. Start with the font you want, and end with a generic family (to let the browser pick a similar font in the generic family, if no other fonts are available). The font names should be separated with a comma. Read more about fallback fonts in the next chapter. font-family Example Specify some different fonts for three paragraphs:"
  },
  {
    "document": "CSS Web Safe Fonts What are Web Safe Fonts? Web safe fonts are fonts that are universally installed across all browsers and devices. Fallback Fonts However, there are no 100% completely web safe fonts. There is always a chance that a font is not found or is not installed properly. Therefore, it is very important to always use fallback fonts. This means that you should add a list of similar \"backup fonts\" in the font-family property. If the first font does not work, the browser will try the next one, and the next one, and so on. Always end the list with a generic font family name. font-family Example Here, there are three font types: Tahoma, Verdana, and sans-serif. The second and third fonts are backups, in case the first one is not found. Best Web Safe Fonts for HTML and CSS The following list are the best web safe fonts for HTML and CSS: Note: Before you publish your website, always check how your fonts appear on different browsers and devices, and always use fallback fonts! Arial (sans-serif) Arial is the most widely used font for both online and printed media. Arial is also the default font in Google Docs. Arial is one of the safest web fonts, and it is available on all major operating systems. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Verdana (sans-serif) Verdana is a very popular font. Verdana is easily readable even for small font sizes. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Tahoma (sans-serif) The Tahoma font has less space between the characters. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Trebuchet MS (sans-serif) Trebuchet MS was designed by Microsoft in 1996. Use this font carefully. Not supported by all mobile operating systems. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Times New Roman (serif) Times New Roman is one of the most recognizable fonts in the world. It looks professional and is used in many newspapers and \"news\" websites. It is also the primary font for Windows devices and applications. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Georgia (serif) Georgia is an elegant serif font. It is very readable at different font sizes, so it is a good candidate for mobile-responsive design. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Garamond (serif) Garamond is a classical font used for many printed books. It has a timeless look and good readability. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet."
  },
  {
    "document": "0 1 2 3 4 5 6 7 8 9 Courier New (monospace) Courier New is the most widely used monospace serif font. Courier New is often used with coding displays, and many email providers use it as their default font. Courier New is also the standard font for movie screenplays. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Brush Script MT (cursive) The Brush Script MT font was designed to mimic handwriting. It is elegant and sophisticated, but can be hard to read. Use it carefully. Example Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet. 0 1 2 3 4 5 6 7 8 9 Tip: Also check out all available Google Fonts and how to use them."
  },
  {
    "document": "CSS Font Fallbacks Commonly Used Font Fallbacks Below are some commonly used font fallbacks, organized by the 5 generic font families: Serif Fonts This is a Heading This is a paragraph. This is a Heading This is a paragraph. This is a Heading This is a paragraph. Sans-Serif Fonts This is a Heading This is a paragraph. This is a Heading This is a paragraph. This is a Heading This is a paragraph. This is a Heading This is a paragraph. Monospace Fonts This is a Heading This is a paragraph. Cursive Fonts This is a Heading This is a paragraph. Fantasy Fonts This is a Heading This is a paragraph. Tip: Also check out all available Google Fonts and how to use them."
  },
  {
    "document": "CSS Font Style Font Style The font-style property is mostly used to specify italic text. font-style This property has three values: Example Font Weight The font-weight property specifies the weight of a font: font-weight Example Font Variant The font-variant property specifies whether or not a text should be displayed in a small-caps font. font-variant In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text. Example"
  },
  {
    "document": "CSS Font Size Font Size The font-size property sets the size of the text. font-size Being able to manage the text size is important in web design. However, you should not use font size adjustments to make paragraphs look like headings, or headings look like paragraphs. Always use the proper HTML tags, like <h1> - <h6> for headings and <p> for paragraphs. The font-size value can be an absolute, or relative size. Absolute size: Relative size: Note: If you do not specify a font size, the default size for normal text, like paragraphs, is 16px (16px=1em). Set Font Size With Pixels Setting the text size with pixels gives you full control over the text size: Example Tip: If you use pixels, you can still use the zoom tool to resize the entire page. Set Font Size With Em To allow users to resize the text (in the browser menu), many developers use em instead of pixels. 1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px. The size can be calculated from pixels to em using this formula: pixels/16=em Example In the example above, the text size in em is the same as the previous example in pixels. However, with the em size, it is possible to adjust the text size in all browsers.Unfortunately, there is still a problem with older versions of Internet Explorer. The text becomes larger than it should when made larger, and smaller than it should when made smaller. Use a Combination of Percent and Em The solution that works in all browsers, is to set a default font-size in percent for the <body> element: Example body { font-size: 100%;} h1 { font-size: 2.5em;} h2 { font-size: 1.875em;} p { font-size: 0.875em;} Try it Yourself Â» Our code now works great! It shows the same text size in all browsers, and allows all browsers to zoom or resize the text! Responsive Font Size The text size can be set with a vw unit, which means the \"viewport width\". That way the text size will follow the size of the browser window: Hello World Resize the browser window to see how the font size scales. Example <h1 style=\"font-size:10vw\">Hello World</h1> Try it Yourself Â» Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Unfortunately, there is still a problem with older versions of Internet Explorer. The text becomes larger than it should when made larger, and smaller than it should when made smaller. Use a Combination of Percent and Em The solution that works in all browsers, is to set a default font-size in percent for the <body> element: Example Our code now works great! It shows the same text size in all browsers, and allows all browsers to zoom or resize the text!"
  },
  {
    "document": "Responsive Font Size The text size can be set with a vw unit, which means the \"viewport width\". vw That way the text size will follow the size of the browser window: Hello World Resize the browser window to see how the font size scales. Example Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm."
  },
  {
    "document": "CSS Google Fonts Google Fonts If you do not want to use any of the standard fonts in HTML, you can use Google Fonts. Google Fonts are free to use, and have more than 1000 fonts to choose from. How To Use Google Fonts Just add a special style sheet link in the <head> section and then refer to the font in the CSS. Example Here, we want to use a font named \"Sofia\" from Google Fonts: Result: Sofia Font Lorem ipsum dolor sit amet. 123456790 Example Here, we want to use a font named \"Trirong\" from Google Fonts: Result: Trirong Font Lorem ipsum dolor sit amet. 123456790 Example Here, we want to use a font named \"Audiowide\" from Google Fonts: Result: Audiowide Font Lorem ipsum dolor sit amet. 123456790 Note: When specifying a font in CSS, always list at minimum one fallback font (to avoid unexpected behaviors). So, also here you should add a generic font family (like serif or sans-serif) to the end of the list. For a list of all available Google Fonts, visit our How To - Google Fonts Tutorial. Use Multiple Google Fonts To use multiple Google fonts, just separate the font names with a pipe character (|), like this: | Example Request multiple fonts: Result: Audiowide Font Sofia Font Trirong Font Note: Requesting multiple fonts may slow down your web pages! So be careful about that. Styling Google Fonts Of course you can style Google Fonts as you like, with CSS! Example Style the \"Sofia\" font: Result: Sofia Font Lorem ipsum dolor sit amet. 123456790 Enabling Font Effects Google has also enabled different font effects that you can use. First add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always starts with font-effect- and ends with the effectname. effect=effectname font-effect- effectname Example Add the fire effect to the \"Sofia\" font: Result: Sofia on Fire To request multiple font effects, just separate the effect names with a pipe character (|), like this: | Example Add multiple effects to the \"Sofia\" font: Result: Neon Effect Outline Effect Emboss Effect Multiple Shadow Effect"
  },
  {
    "document": "CSS Great Font Pairings Great font pairings are essential to great design. Font Pairing Rules Here are some basic rules to create great font pairings: 1. Complement It is always safe to find font pairings that complement one another. A great font combination should harmonize, without being too similar or too different. 2. Use Font Superfamilies A font superfamily is a set of fonts designed to work well together. So, using different fonts within the same superfamily is safe. For example, the Lucida superfamily contains the following fonts: Lucida Sans, Lucida Serif, Lucida Typewriter Sans, Lucida Typewriter Serif and Lucida Math. 3. Contrast is King Two fonts that are too similar will often conflict. However, contrasts, done the right way, brings out the best in each font. Example: Combining serif with sans serif is a well known combination. A strong superfamily includes both serif and sans serif variations of the same font (e.g. Lucida and Lucida Sans). 4. Choose Only One Boss One font should be the boss. This establishes a hierarchy for the fonts on your page. This can be achieved by varying the size, weight and color. Example No doubt \"Georgia\" is the boss here: Below, we have shown some popular font pairings that will suit many brands and contexts. Georgia and Verdana Georgia and Verdana is a classic combination. It also sticks to the web safe font standards: Example Use the \"Georgia\" font for headings, and \"Verdana\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Helvetica and Garamond Helvetica and Garamond is another classic combination that uses web safe fonts: Example Use the \"Helvetica\" font for headings, and \"Garamond\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Popular Google Font Pairings If you do not want to use standard fonts in HTML, you can use Google Fonts. Google Fonts are free to use, and have more than 1000 fonts to choose from. Below are some popular Google Web Font Pairings."
  },
  {
    "document": "Merriweather and Open Sans Example Use the \"Merriweather\" font for headings, and \"Open Sans\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Ubuntu and Lora Example Use the \"Ubuntu\" font for headings, and \"Lora\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Abril Fatface and Poppins Example Use the \"Abril Fatface\" font for headings, and \"Poppins\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Cinzel and Fauna One Example Use the \"Cinzel\" font for headings, and \"Fauna One\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Fjalla One and Libre Baskerville Example Use the \"Fjalla One\" font for headings, and \"Libre Baskerville\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing."
  },
  {
    "document": "Space Mono and Muli Example Use the \"Space Mono\" font for headings, and \"Muli\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Spectral and Rubik Example Use the \"Spectral\" font for headings, and \"Rubik\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. Oswald and Noto Sans Example Use the \"Oswald\" font for headings, and \"Noto Sans\" for text: Beautiful Norway Norway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side. Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing. For a list of all free Google Fonts, visit our How To - Google Fonts Tutorial."
  },
  {
    "document": "CSS Font Property The CSS Font Property To shorten the code, it is also possible to specify all the individual font properties in one property. The font property is a shorthand property for: font font-style font-variant font-weight font-size/line-height font-family Note: The font-size and font-family values are required. If one of the other values is missing, their default value are used. font-size font-family Example Use font to set several font properties in one declaration: font All CSS Font Properties"
  },
  {
    "document": "CSS Icons Icons can easily be added to your HTML page, by using an icon library. How To Add Icons The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome. Add the name of the specified icon class to any inline HTML element (like <i> or <span>). <i> <span> All the icons in the icon libraries below, are scalable vectors that can be customized with CSS (size, color, shadow, etc.) Font Awesome Icons To use the Font Awesome icons, go to fontawesome.com, sign in, and get a code to add in the <head> section of your HTML page: <head> <script src=\"https://kit.fontawesome.com/yourcode.js\" crossorigin=\"anonymous\"></script> <script src=\"https://kit.fontawesome.com/yourcode.js\" crossorigin=\"anonymous\"></script> Read more about how to get started with Font Awesome in our Font Awesome 5 tutorial. Note: No downloading or installation is required! Example Result: For a complete reference of all Font Awesome icons, visit our Icon Reference. Bootstrap Icons To use the Bootstrap glyphicons, add the following line inside the <head> section of your HTML page: <head> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> Note: No downloading or installation is required! Example Result: Google Icons To use the Google icons, add the following line inside the <head> section of your HTML page: <head> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"> Note: No downloading or installation is required! Example Result: For a complete list of all icons, visit our Icon Tutorial."
  },
  {
    "document": "CSS Links With CSS, links can be styled in many different ways. Styling Links Links can be styled with any CSS property (e.g. color, font-family, background, etc.). color font-family background Example In addition, links can be styled differently depending on what state they are in. The four links states are: a:link a:visited a:hover a:active Example When setting the style for several link states, there are some order rules: Text Decoration The text-decoration property is mostly used to remove underlines from links: text-decoration Example Background Color The background-color property can be used to specify a background color for links: background-color Example Link Buttons This example demonstrates a more advanced example where we combine several CSS properties to display links as boxes/buttons: Example More Examples Example This example demonstrates how to add other styles to hyperlinks: Example Another example of how to create link boxes/buttons: Example This example demonstrates the different types of cursors (can be useful for links):"
  },
  {
    "document": "CSS Lists Unordered Lists: Ordered Lists: HTML Lists and CSS List Properties In HTML, there are two main types of lists: The CSS list properties allow you to: Different List Item Markers The list-style-type property specifies the type of list item marker. list-style-type The following example shows some of the available list item markers: Example Note: Some of the values are for unordered lists, and some for ordered lists. An Image as The List Item Marker The list-style-image property specifies an image as the list item marker: list-style-image Example Position The List Item Markers The list-style-position property specifies the position of the list-item markers (bullet points). list-style-position \"list-style-position: outside;\" means that the bullet points will be outside the list item. The start of each line of a list item will be aligned vertically. This is default: \"list-style-position: inside;\" means that the bullet points will be inside the list item. As it is part of the list item, it will be part of the text and push the text at the start: Example Remove Default Settings The list-style-type:none property can also be used to remove the markers/bullets. Note that the list also has default margin and padding. To remove this, add margin:0 and padding:0 to <ul> or <ol>: list-style-type:none margin:0 padding:0 Example List - Shorthand property The list-style property is a shorthand property. It is used to set all the list properties in one declaration: list-style Example When using the shorthand property, the order of the property values are: list-style-type list-style-position list-style-image If one of the property values above is missing, the default value for the missing property will be inserted, if any. Styling List With Colors We can also style lists with colors, to make them look a little more interesting. Anything added to the <ol> or <ul> tag, affects the entire list, while properties added to the <li> tag will affect the individual list items: Example Result: More Examples Customized list with a red left border This example demonstrates how to create a list with a red left border. Full-width bordered list This example demonstrates how to create a bordered list without bullets. All the different list-item markers for lists This example demonstrates all the different list-item markers in CSS. All CSS List Properties"
  },
  {
    "document": "CSS Tables The look of an HTML table can be greatly improved with CSS: Table Borders To specify table borders in CSS, use the border property. border The example below specifies a solid border for <table>, <th>, and <td> elements: Example Full-Width Table The table above might seem small in some cases. If you need a table that should span the entire screen (full-width), add width: 100% to the <table> element: width: 100% Example Double Borders Notice that the table in the examples above have double borders. This is because both the table and the <th> and <td> elements have separate borders. To remove double borders, take a look at the example below. Collapse Table Borders The border-collapse property sets whether the table borders should be collapsed into a single border: border-collapse Example If you only want a border around the table, only specify the border property for <table>: border Example"
  },
  {
    "document": "CSS Tables The look of an HTML table can be greatly improved with CSS: Table Borders To specify table borders in CSS, use the border property. border The example below specifies a solid border for <table>, <th>, and <td> elements: Example Full-Width Table The table above might seem small in some cases. If you need a table that should span the entire screen (full-width), add width: 100% to the <table> element: width: 100% Example Double Borders Notice that the table in the examples above have double borders. This is because both the table and the <th> and <td> elements have separate borders. To remove double borders, take a look at the example below. Collapse Table Borders The border-collapse property sets whether the table borders should be collapsed into a single border: border-collapse Example If you only want a border around the table, only specify the border property for <table>: border Example"
  },
  {
    "document": "CSS Table Size Table Width and Height The width and height of a table are defined by the width and height properties. width height The example below sets the width of the table to 100%, and the height of the <th> elements to 70px: Example To create a table that should only span half the page, use width: 50%: width: 50% Example"
  },
  {
    "document": "CSS Table Alignment Horizontal Alignment The text-align property sets the horizontal alignment (like left, right, or center) of the content in <th> or <td>. text-align By default, the content of <th> elements are center-aligned and the content of <td> elements are left-aligned. To center-align the content of <td> elements as well, use text-align: center: text-align: center Example To left-align the content, force the alignment of <th> elements to be left-aligned, with the text-align: left property: text-align: left Example Vertical Alignment The vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>. vertical-align By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements). The following example sets the vertical text alignment to bottom for <td> elements: Example"
  },
  {
    "document": "CSS Table Style Table Padding To control the space between the border and the content in a table, use the padding property on <td> and <th> elements: padding Example Horizontal Dividers Add the border-bottom property to <th> and <td> for horizontal dividers: border-bottom Example Hoverable Table Use the :hover selector on <tr> to highlight table rows on mouse over: :hover Example Striped Tables For zebra-striped tables, use the nth-child() selector and add a background-color to all even (or odd) table rows: nth-child() background-color Example Table Color The example below specifies the background color and text color of <th> elements: Example"
  },
  {
    "document": "CSS Responsive Table Responsive Table A responsive table will display a horizontal scroll bar if the screen is too small to display the full content: Add a container element (like <div>) with overflow-x:auto around the <table> element to make it responsive: overflow-x:auto Example Note: In OS X Lion (on Mac), scrollbars are hidden by default and only shown when being used (even though \"overflow:scroll\" is set). More Examples Make a fancy table This example demonstrates how to create a fancy table. Set the position of the table caption This example demonstrates how to position the table caption. CSS Table Properties"
  },
  {
    "document": "CSS Layout - The display Property The display property is the most important CSS property for controlling layout. display The display Property The display property is used to specify how an element is shown on a web page. display Every HTML element has a default display value, depending on what type of element it is. The default display value for most elements is block or inline. block inline The display property is used to change the default display behavior of HTML elements. display Block-level Elements A block-level element ALWAYS starts on a new line and takes up the full width available (stretches out to the left and right as far as it can). Examples of block-level elements: Inline Elements An inline element DOES NOT start on a new line and only takes up as much width as necessary. This is an inline <span> element inside a paragraph. Examples of inline elements: The display Property Values The display property has many values: display Display: none; display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you want to know how this can be achieved. display: none; The <script> element uses display: none; as default. <script> display: none; Click to show panel This panel contains a <div> element, which is hidden by default (display: none;). display: none; It is styled with CSS, and we use JavaScript to show it (change it to (display: block;). display: block; Override The Default Display Value As mentioned, every element has a default display value. However, you can override this. Changing an inline element to a block element, or vice versa, can be useful for making the page look a specific way, and still follow the web standards. A common example is making inline <li> elements for horizontal menus: <li> Example Note: Setting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it. display: block; The following example displays <span> elements as block elements: Example The following example displays <a> elements as block elements: Example Hide an Element - display:none or visibility:hidden? display:none display:none Remove visibility:hidden visibility:hidden Hide Reset Reset All Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there: display none Example visibility:hidden; also hides an element. visibility:hidden; However, the element will still take up the same space as before. The element will be hidden, but still affect the layout: Example More Examples Differences between display: none; and visibility: hidden; This example demonstrates display: none; versus visibility: hidden; Showing more display types This example demonstrates some more display types."
  },
  {
    "document": "Using CSS together with JavaScript to show content This example demonstrates how to use CSS and JavaScript to show an element on click. CSS Display/Visibility Properties"
  },
  {
    "document": "CSS Layout - width and max-width Using width, max-width and margin: auto; As mentioned in the previous chapter; a block-level element always takes up the full width available (stretches out to the left and right as far as it can). Setting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins: width Note: The problem with the <div> above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page. <div> Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices: max-width Tip: Resize the browser window to less than 500px wide, to see the difference between the two divs! Here is an example of the two divs above: Example CSS Properties"
  },
  {
    "document": "CSS Layout - The position Property The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky). position The position Property The position property specifies the type of positioning method used for an element. position There are five different position values: static relative fixed absolute sticky Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value. position position: static; HTML elements are positioned static by default. Static positioned elements are not affected by the top, bottom, left, and right properties. An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page: position: static; Here is the CSS that is used: Example position: relative; An element with position: relative; is positioned relative to its normal position. position: relative; Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element. Here is the CSS that is used: Example position: fixed; An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. position: fixed; A fixed element does not leave a gap in the page where it would normally have been located. Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used: Example position: fixed; position: absolute; An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). position: absolute; However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling. Note: Absolute positioned elements are removed from the normal flow, and can overlap elements. Here is a simple example: Here is the CSS that is used: Example position: sticky; An element with position: sticky; is positioned based on the user's scroll position. position: sticky; A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed). relative fixed Note: You must specify at least one of top, right, bottom or left for sticky positioning to work. top right bottom left In this example, the sticky element sticks to the top of the page (top: 0), when you reach its scroll position. top: 0 Example Positioning Text In an Image How to position text over an image: Example Try it Yourself: More Examples Set the shape of an element This example demonstrates how to set the shape of an element."
  },
  {
    "document": "The element is clipped into this shape, and displayed. All CSS Positioning Properties"
  },
  {
    "document": "CSS Layout - The z-index Property The z-index property specifies the stack order of an element. z-index The z-index Property When elements are positioned, they can overlap other elements. The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others). z-index An element can have a positive or negative stack order: This is a heading Because the image has a z-index of -1, it will be placed behind the text. Example Note: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display: flex elements). z-index Another z-index Example Example Here we see that an element with greater stack order is always above an element with a lower stack order: Without z-index If two positioned elements overlap each other without a z-index specified, the element defined last in the HTML code will be shown on top. z-index Example Same example as above, but here with no z-index specified: CSS Property"
  },
  {
    "document": "CSS Layout - Overflow The CSS overflow property controls what happens to content that is too big to fit into an area. overflow CSS Overflow The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area. overflow The overflow property has the following values: overflow visible hidden scroll auto scroll Note: The overflow property only works for block elements with a specified height. overflow Note: In OS X Lion (on Mac), scrollbars are hidden by default and only shown when being used (even though \"overflow:scroll\" is set). overflow: visible By default, the overflow is visible, meaning that it is not clipped and it renders outside the element's box: visible Example overflow: hidden With the hidden value, the overflow is clipped, and the rest of the content is hidden: hidden Example overflow: scroll Setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it): scroll Example overflow: auto The auto value is similar to scroll, but it adds scrollbars only when necessary: auto scroll Example overflow-x and overflow-y The overflow-x and overflow-y properties specifies whether to change the overflow of content just horizontally or vertically (or both): overflow-x overflow-y overflow-x specifies what to do with the left/right edges of the content. overflow-y specifies what to do with the top/bottom edges of the content. overflow-x overflow-y Example All CSS Overflow Properties"
  },
  {
    "document": "CSS Layout - float and clear The CSS float property specifies how an element should float. float The CSS clear property specifies what elements can float beside the cleared element and on which side. clear The float Property The float property is used for positioning and formatting content e.g. let an image float left to the text in a container. float The float property can have one of the following values: float left right none inherit In its simplest use, the float property can be used to wrap text around images. float Example - float: right; The following example specifies that an image should float to the right in a text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - float: left; The following example specifies that an image should float to the left in a text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - No float In the following example the image will be displayed just where it occurs in the text (float: none;): Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - Float Next To Each Other Normally div elements will be displayed on top of each other. However, if we use float: left we can let elements float next to each other: float: left Example CSS Properties"
  },
  {
    "document": "CSS Layout - float and clear The CSS float property specifies how an element should float. float The CSS clear property specifies what elements can float beside the cleared element and on which side. clear The float Property The float property is used for positioning and formatting content e.g. let an image float left to the text in a container. float The float property can have one of the following values: float left right none inherit In its simplest use, the float property can be used to wrap text around images. float Example - float: right; The following example specifies that an image should float to the right in a text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - float: left; The following example specifies that an image should float to the left in a text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - No float In the following example the image will be displayed just where it occurs in the text (float: none;): Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac... Example Example - Float Next To Each Other Normally div elements will be displayed on top of each other. However, if we use float: left we can let elements float next to each other: float: left Example CSS Properties"
  },
  {
    "document": "CSS Layout - clear and clearfix The clear Property When we use the float property, and we want the next element below (not on right or left), we will have to use the clear property. float clear The clear property specifies what should happen with the element that is next to a floating element. clear The clear property can have one of the following values: clear none left right both inherit When clearing floats, you should match the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page. Example This example clears the float to the left. Here, it means that the <div2> element is pushed below the left floated <div1> element: The clearfix Hack If a floated element is taller than the containing element, it will \"overflow\" outside of its container. We can then add a clearfix hack to solve this problem: Without Clearfix With Clearfix Example The overflow: auto clearfix works well as long as you are able to keep control of your margins and padding (else you might see scrollbars). The new, modern clearfix hack however, is safer to use, and the following code is used for most webpages: overflow: auto Example You will learn more about the ::after pseudo-element in a later chapter. ::after CSS Properties"
  },
  {
    "document": "CSS Layout - Float Examples This page contains common float examples. Grid of Boxes / Equal Width Boxes Box 1 Box 2 Box 1 Box 2 Box 3 With the float property, it is easy to float boxes of content side by side: float Example What is box-sizing? You can easily create three floating boxes side by side. However, when you add something that enlarges the width of each box (e.g. padding or borders), the box will break. The box-sizing property allows us to include the padding and border in the box's total width (and height), making sure that the padding stays inside of the box and that it does not break. box-sizing You can read more about the box-sizing property in our CSS Box Sizing Chapter. Images Side By Side The grid of boxes can also be used to display images side by side: Example Equal Height Boxes In the previous example, you learned how to float boxes side by side with an equal width. However, it is not easy to create floating boxes with equal heights. A quick fix however, is to set a fixed height, like in the example below: Box 1 Some content, some content, some content Box 2 Some content, some content, some content Some content, some content, some content Some content, some content, some content Example However, this is not very flexible. It is ok if you can guarantee that the boxes will always have the same amount of content in them. But many times, the content is not the same. If you try the example above on a mobile phone, you will see that the second box's content will be displayed outside of the box. This is where CSS3 Flexbox comes in handy - as it can automatically stretch boxes to be as long as the longest box: Example Using Flexbox to create flexible boxes: Tip: You can read more about the Flexbox Layout Module in our CSS Flexbox Chapter. Navigation Menu You can also use float with a list of hyperlinks to create a horizontal menu: float Example Web Layout Example It is also common to do entire web layouts using the float property: float Example More Examples An image with border and margins that floats to the right in a paragraph Let an image float to the right in a paragraph. Add border and margins to the image. An image with a caption that floats to the right Let an image with a caption float to the right. Let the first letter of a paragraph float to the left Let the first letter of a paragraph float to the left and style the letter. Creating a website with float Use float to create a homepage with a navbar, header, footer, left content and main content. All CSS Float Properties"
  },
  {
    "document": "CSS Layout - display: inline-block The display: inline-block Value Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. display: inline display: inline-block Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements. display: block display: inline-block The following example shows the different behavior of display: inline, display: inline-block and display: block: display: inline display: inline-block display: block Example Using inline-block to Create Navigation Links One common use for display: inline-block is to display list items horizontally instead of vertically. The following example creates horizontal navigation links: display: inline-block Example CSS Property"
  },
  {
    "document": "CSS Layout - Horizontal & Vertical Align Center elementshorizontally and vertically Center Align Elements To horizontally center a block element (like <div>), use margin: auto; margin: auto; Setting the width of the element will prevent it from stretching out to the edges of its container. The element will then take up the specified width, and the remaining space will be split equally between the two margins: This div element is centered. Example Note: Center aligning has no effect if the width property is not set (or set to 100%). width Center Align Text To just center the text inside an element, use text-align: center; text-align: center; This text is centered. Example Tip: For more examples on how to align text, see the CSS Text chapter. Center an Image To center an image, set left and right margin to auto and make it into a block element: auto block Example Left and Right Align - Using position One method for aligning elements is to use position: absolute;: position: absolute; In my younger and more vulnerable years my father gave me some advice that I've been turning over in my mind ever since. Example Note: Absolute positioned elements are removed from the normal flow, and can overlap elements. Left and Right Align - Using float Another method for aligning elements is to use the float property: float Example The clearfix Hack Note: If an element is taller than the element containing it, and it is floated, it will overflow outside of its container. You can use the \"clearfix hack\" to fix this (see example below). Without Clearfix With Clearfix Then we can add the clearfix hack to the containing element to fix this problem: Example Center Vertically - Using padding There are many ways to center an element vertically in CSS. A simple solution is to use top and bottom padding: padding I am vertically centered. Example To center both vertically and horizontally, use padding and text-align: center: padding text-align: center I am vertically and horizontally centered. Example Center Vertically - Using line-height Another trick is to use the line-height property with a value that is equal to the height property: line-height height I am vertically and horizontally centered. Example Center Vertically - Using position & transform If padding and line-height are not options, another solution is to use positioning and the transform property: padding line-height transform I am vertically and horizontally centered. Example Tip: You will learn more about the transform property in our 2D Transforms Chapter. Center Vertically - Using Flexbox You can also use flexbox to center things. Just note that flexbox is not supported in IE10 and earlier versions: Example"
  },
  {
    "document": "CSS Combinators CSS Combinators A combinator is something that explains the relationship between the selectors. A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator. There are four different combinators in CSS: Descendant Combinator The descendant combinator matches all elements that are descendants of a specified element. The following example selects all <p> elements inside <div> elements: Example Child Combinator (>) The child combinator selects all elements that are the children of a specified element. The following example selects all <p> elements that are children of a <div> element: Example Next Sibling Combinator (+) The next sibling combinator is used to select an element that is directly after another specific element. Sibling elements must have the same parent element, and \"adjacent\" means \"immediately following\". The following example selects the first <p> element that are placed immediately after <div> elements: Example Subsequent-sibling Combinator (~) The subsequent-sibling combinator selects all elements that are next siblings of a specified element. The following example selects all <p> elements that are next siblings of <div> elements: Example CSS Combinators Reference For a complete list of all CSS combinators, visit our CSS Combinators Reference."
  },
  {
    "document": "CSS Pseudo-classes What are Pseudo-classes? A pseudo-class is used to define a special state of an element. For example, it can be used to: Mouse Over Me  Syntax The syntax of pseudo-classes: Anchor Pseudo-classes Links can be displayed in different ways: Example Note: a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive. a:hover a:link a:visited a:active a:hover Pseudo-classes and HTML Classes Pseudo-classes can be combined with HTML classes: When you hover over the link in the example, it will change color: Example Hover on <div> An example of using the :hover pseudo-class on a <div> element: :hover Example Simple Tooltip Hover Hover over a <div> element to show a <p> element (like a tooltip): Tada! Here I am! Example CSS - The :first-child Pseudo-class The :first-child pseudo-class matches a specified element that is the first child of another element. :first-child Match the first <p> element In the following example, the selector matches any <p> element that is the first child of any element: Example Match the first <i> element in all <p> elements In the following example, the selector matches the first <i> element in all <p> elements: Example Match all <i> elements in all first child <p> elements In the following example, the selector matches all <i> elements in <p> elements that are the first child of another element: Example CSS - The :lang Pseudo-class The :lang pseudo-class allows you to define special rules for different languages. :lang In the example below, :lang defines the quotation marks for <q> elements with lang=\"no\": :lang Example More Examples Add different styles to hyperlinks This example demonstrates how to add other styles to hyperlinks. Use of :focus This example demonstrates how to use the :focus pseudo-class. CSS Pseudo-classes Reference For a complete list of all CSS Pseudo-classes, visit our CSS Pseuodo-classes Reference."
  },
  {
    "document": "CSS Pseudo-elements What are Pseudo-Elements? A CSS pseudo-element is used to style specific parts of an element. For example, it can be used to: Syntax The syntax of pseudo-elements: The ::first-line Pseudo-element The ::first-line pseudo-element is used to add a special style to the first line of a text. ::first-line The following example formats the first line of the text in all <p> elements: Example Note: The ::first-line pseudo-element can only be applied to block-level elements. ::first-line The following properties apply to the ::first-line pseudo-element: ::first-line Notice the double colon notation - ::first-line versus :first-lineThe double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements. ::first-line :first-line The ::first-letter Pseudo-element The ::first-letter pseudo-element is used to add a special style to the first letter of a text. ::first-letter The following example formats the first letter of the text in all <p> elements: Example Note: The ::first-letter pseudo-element can only be applied to block-level elements. ::first-letter The following properties apply to the ::first-letter pseudo- element: Pseudo-elements and HTML Classes Pseudo-elements can be combined with HTML classes: Example The example above will display the first letter of paragraphs with class=\"intro\", in red and in a larger size. Multiple Pseudo-elements Several pseudo-elements can also be combined. In the following example, the first letter of a paragraph will be red, in an xx-large font size. The rest of the first line will be blue, and in small-caps. The rest of the paragraph will be the default font size and color: Example CSS - The ::before Pseudo-element The ::before pseudo-element can be used to insert some content before the content of an element. ::before The following example inserts an image before the content of each <h1> element: Example CSS - The ::after Pseudo-element The ::after pseudo-element can be used to insert some content after the content of an element. ::after The following example inserts an image after the content of each <h1> element: Example CSS - The ::marker Pseudo-element The ::marker pseudo-element selects the markers of list items. ::marker The following example styles the markers of list items: Example CSS - The ::selection Pseudo-element The ::selection pseudo-element matches the portion of an element that is selected by a user. ::selection The following CSS properties can be applied to ::selection: color, background, cursor, and outline. ::selection color background cursor outline The following example makes the selected text red on a yellow background: Example CSS Pseudo-elements Reference For a complete list of all CSS Pseudo-elements, visit our CSS Pseuodo-elements Reference."
  },
  {
    "document": "CSS Opacity / Transparency The opacity property specifies the opacity/transparency of an element. opacity Transparent Image The opacity property can take a value from 0.0 - 1.0. The lower the value, the more transparent: opacity opacity 0.2 opacity 0.5 opacity 1(default) Example Transparent Hover Effect The opacity property is often used together with the :hover selector to change the opacity on mouse-over: opacity :hover Example Example explained The first CSS block is similar to the code in Example 1. In addition, we have added what should happen when a user hovers over one of the images. In this case we want the image to NOT be transparent when the user hovers over it. The CSS for this is opacity:1;. opacity:1; When the mouse pointer moves away from the image, the image will be transparent again. An example of reversed hover effect: Example Transparent Box When using the opacity property to add transparency to the background of an element, all of its child elements inherit the same transparency. This can make the text inside a fully transparent element hard to read: opacity opacity 1 opacity 0.6 opacity 0.3 opacity 0.1 Example Transparency using RGBA If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text: 100% opacity 60% opacity 30% opacity 10% opacity You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). Tip: You will learn more about RGBA Colors in our CSS Colors Chapter. Example Text in Transparent Box This is some text that is placed in the transparent box. Example Example explained First, we create a <div> element (class=\"background\") with a background image, and a border. Then we create another <div> (class=\"transbox\") inside the first <div>. The <div class=\"transbox\"> have a background color, and a border - the div is transparent. Inside the transparent <div>, we add some text inside a <p> element. CSS Property"
  },
  {
    "document": "CSS Navigation Bar Demo: Navigation Bars Vertical Horizontal Navigation Bars Having easy-to-use navigation is important for any web site. With CSS you can transform boring HTML menus into good-looking navigation bars. Navigation Bar = List of Links A navigation bar needs standard HTML as a base. In our examples we will build the navigation bar from a standard HTML list. A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense: Example Now let's remove the bullets and the margins and padding from the list: Example Example explained: list-style-type: none; margin: 0; padding: 0; The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters."
  },
  {
    "document": "CSS Navigation Bar Demo: Navigation Bars Vertical Horizontal Navigation Bars Having easy-to-use navigation is important for any web site. With CSS you can transform boring HTML menus into good-looking navigation bars. Navigation Bar = List of Links A navigation bar needs standard HTML as a base. In our examples we will build the navigation bar from a standard HTML list. A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense: Example Now let's remove the bullets and the margins and padding from the list: Example Example explained: list-style-type: none; margin: 0; padding: 0; The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters."
  },
  {
    "document": "CSS Vertical Navigation Bar Vertical Navigation Bar To build a vertical navigation bar, you can style the <a> elements inside the list, in addition to the code from the previous page: Example Example explained: display: block; width: 60px; You can also set the width of <ul>, and remove the width of <a>, as they will take up the full width available when displayed as block elements. This will produce the same result as our previous example: Example Vertical Navigation Bar Examples Create a basic vertical navigation bar with a gray background color and change the background color of the links when the user moves the mouse over them: Example Active/Current Navigation Link Add an \"active\" class to the current link to let the user know which page he/she is on: Example Center Links & Add Borders Add text-align:center to <li> or <a> to center the links. text-align:center Add the border property to <ul> to add a border around the navbar. If you also want borders inside the navbar, add a border-bottom to all <li> elements, except for the last one: border border-bottom Example Full-height Fixed Vertical Navbar Create a full-height, \"sticky\" side navigation: Example Note: This example might not work properly on mobile devices."
  },
  {
    "document": "CSS Horizontal Navigation Bar Horizontal Navigation Bar There are two ways to create a horizontal navigation bar. Using inline or floating list items. Inline List Items One way to build a horizontal navigation bar is to specify the <li> elements as inline, in addition to the \"standard\" code from the previous page: Example Example explained: display: inline; Floating List Items Another way of creating a horizontal navigation bar is to float the <li> elements, and specify a layout for the navigation links: Example Example explained: float: left; display: block; padding: 8px; background-color: #dddddd; Tip: Add the background-color to <ul> instead of each <a> element if you want a full-width background color: Example Horizontal Navigation Bar Examples Create a basic horizontal navigation bar with a dark background color and change the background color of the links when the user moves the mouse over them: Example Active/Current Navigation Link Add an \"active\" class to the current link to let the user know which page he/she is on: Example Right-Align Links Right-align links by floating the list items to the right (float:right;): float:right; Example Border Dividers Add the border-right property to <li> to create link dividers: border-right Example Fixed Navigation Bar Make the navigation bar stay at the top or the bottom of the page, even when the user scrolls the page: Fixed Top Fixed Bottom Note: Fixed position might not work properly on mobile devices. Gray Horizontal Navbar An example of a gray horizontal navigation bar with a thin gray border: Example Sticky Navbar Add position: sticky; to <ul> to create a sticky navbar. position: sticky; A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed). Example Note: Internet Explorer does not support sticky positioning. Safari requires the -webkit- prefix (see example above). You must also specify at least one of top, right, bottom or left for sticky positioning to work. top right bottom left More Examples Responsive Topnav How to use CSS media queries to create responsive top navigation. Responsive Sidenav How to use CSS media queries to create responsive side navigation. Dropdown Navbar How to add a dropdown menu inside a navigation bar. Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free. * no credit card required"
  },
  {
    "document": "CSS Dropdowns Create a hoverable dropdown with CSS. Demo: Dropdown Examples Move the mouse over the examples below: Hello World! Basic Dropdown Create a dropdown box that appears when the user moves the mouse over an element. Example Example Explained HTML) Use any element to open the dropdown content, e.g. a <span>, or a <button> element. Use a container element (like <div>) to create the dropdown content and add whatever you want inside of it. Wrap a <div> element around the elements to position the dropdown content correctly with CSS. CSS) The .dropdown class uses position:relative, which is needed when we want the dropdown content to be placed right below the dropdown button (using position:absolute). .dropdown position:relative position:absolute The .dropdown-content class holds the actual dropdown content. It is hidden by default, and will be displayed on hover (see below). Note the min-width is set to 160px. Feel free to change this. Tip: If you want the width of the dropdown content to be as wide as the dropdown button, set the width to 100% (and overflow:auto to enable scroll on small screens). .dropdown-content min-width width overflow:auto Instead of using a border, we have used the CSS box-shadow property to make the dropdown menu look like a \"card\". box-shadow The :hover selector is used to show the dropdown menu when the user moves the mouse over the dropdown button. :hover Dropdown Menu Create a dropdown menu that allows the user to choose an option from a list: This example is similar to the previous one, except that we add links inside the dropdown box and style them to fit a styled dropdown button: Example Right-aligned Dropdown Content  If you want the dropdown menu to go from right to left, instead of left to right, add right: 0; right: 0; Example More Examples Dropdown Image How to add an image and other content inside the dropdown box. Hover over the image: Dropdown Navbar How to add a dropdown menu inside a navigation bar."
  },
  {
    "document": "CSS Image Gallery CSS can be used to create an image gallery. Image Gallery The following image gallery is created with CSS: Example More Examples Responsive Image Gallery How to use CSS media queries to create a responsive image gallery that will look good on desktops, tablets and smart phones."
  },
  {
    "document": "CSS Image Sprites Image Sprites An image sprite is a collection of images put into a single image. A web page with many images can take a long time to load and generates multiple server requests. Using image sprites will reduce the number of server requests and save bandwidth. Image Sprites - Simple Example Instead of using three separate images, we use this single image (\"img_navsprites.gif\"):  With CSS, we can show just the part of the image we need. In the following example the CSS specifies which part of the \"img_navsprites.gif\" image to show: Example Example explained: <img id=\"home\" src=\"img_trans.gif\"> width: 46px; height: 44px; background: url(img_navsprites.gif) 0 0; This is the easiest way to use image sprites, now we want to expand it by using links and hover effects. Image Sprites - Create a Navigation List We want to use the sprite image (\"img_navsprites.gif\") to create a navigation list. We will use an HTML list, because it can be a link and also supports a background image: Example Example explained: #navlist {position:relative;} #navlist li {margin:0;padding:0;list-style:none;position:absolute;top:0;} #navlist li, #navlist a {height:44px;display:block;} Now start to position and style for each specific part: #home {left:0px;width:46px;} #home {background:url(img_navsprites.gif) 0 0;} #prev {left:63px;width:43px;} #prev {background:url('img_navsprites.gif') -47px 0;} #next {left:129px;width:43px;} #next {background:url('img_navsprites.gif') -91px 0;} Image Sprites - Hover Effect Now we want to add a hover effect to our navigation list. Tip: The :hover selector can be used on all elements, not only on links. :hover Our new image (\"img_navsprites_hover.gif\") contains three navigation images and three images to use for hover effects:  Because this is one single image, and not six separate files, there will be no loading delay when a user hovers over the image. We only add three lines of code to add the hover effect: Example Example explained: #home a:hover {background: url('img_navsprites_hover.gif') 0 -45px;}"
  },
  {
    "document": "CSS Attribute Selectors Style HTML Elements With Specific Attributes It is possible to style HTML elements that have specific attributes or attribute values. CSS [attribute] Selector The [attribute] selector is used to select elements with a specified attribute. [attribute] The following example selects all <a> elements with a target attribute: Example CSS [attribute=\"value\"] Selector The [attribute=\"value\"] selector is used to select elements with a specified attribute and value. [attribute=\"value\"] The following example selects all <a> elements with a target=\"_blank\" attribute: Example CSS [attribute~=\"value\"] Selector The [attribute~=\"value\"] selector is used to select elements with an attribute value containing a specified word. [attribute~=\"value\"] The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is \"flower\": Example The example above will match elements with title=\"flower\", title=\"summer flower\", and title=\"flower new\", but not title=\"my-flower\" or title=\"flowers\". CSS [attribute|=\"value\"] Selector The [attribute|=\"value\"] selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-). [attribute|=\"value\"] Note: The value has to be a whole word, either alone, like class=\"top\", or followed by a hyphen( - ), like class=\"top-text\". Example CSS [attribute^=\"value\"] Selector The [attribute^=\"value\"] selector is used to select elements with the specified attribute, whose value starts with the specified value. [attribute^=\"value\"] The following example selects all elements with a class attribute value that starts with \"top\": Note: The value does not have to be a whole word! Example CSS [attribute$=\"value\"] Selector The [attribute$=\"value\"] selector is used to select elements whose attribute value ends with a specified value. [attribute$=\"value\"] The following example selects all elements with a class attribute value that ends with \"test\": Note: The value does not have to be a whole word! Example CSS [attribute*=\"value\"] Selector The [attribute*=\"value\"] selector is used to select elements whose attribute value contains a specified value. [attribute*=\"value\"] The following example selects all elements with a class attribute value that contains \"te\": Note: The value does not have to be a whole word! Example Styling Forms The attribute selectors can be useful for styling forms without class or ID: Example Tip: Visit our CSS Forms Tutorial for more examples on how to style forms with CSS. All CSS Attribute Selectors"
  },
  {
    "document": "CSS Forms The look of an HTML form can be greatly improved with CSS: Styling Input Fields Use the width property to determine the width of the input field: width Example The example above applies to all <input> elements. If you only want to style a specific input type, you can use attribute selectors: input[type=text] input[type=password] input[type=number] Padded Inputs Use the padding property to add space inside the text field. padding Tip: When you have many inputs after each other, you might also want to add some margin, to add more space outside of them: margin Example Note that we have set the box-sizing property to border-box. This makes sure that the padding and eventually borders are included in the total width and height of the elements. Read more about the box-sizing property in our CSS Box Sizing chapter. box-sizing border-box box-sizing Bordered Inputs Use the border property to change the border size and color, and use the border-radius property to add rounded corners: border border-radius Example If you only want a bottom border, use the border-bottom property: border-bottom Example Colored Inputs Use the background-color property to add a background color to the input, and the color property to change the text color: background-color color Example Focused Inputs By default, some browsers will add a blue outline around the input when it gets focus (clicked on). You can remove this behavior by adding outline: none; to the input. outline: none; Use the :focus selector to do something with the input field when it gets focus: :focus Example Example Input with icon/image If you want an icon inside the input, use the background-image property and position it with the background-position property. Also notice that we add a large left padding to reserve the space of the icon: background-image background-position Example Animated Search Input In this example we use the CSS transition property to animate the width of the search input when it gets focus. You will learn more about the transition property later, in our CSS Transitions chapter. transition transition Example Styling Textareas Tip: Use the resize property to prevent textareas from being resized (disable the \"grabber\" in the bottom right corner): resize Example Styling Select Menus Example Styling Input Buttons Example For more information about how to style buttons with CSS, read our CSS Buttons Tutorial. Responsive Form Resize the browser window to see the effect. When the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other. Advanced: The following example uses media queries to create a responsive form. You will learn more about this in a later chapter."
  },
  {
    "document": "CSS Counters Pizza Hamburger Hotdogs CSS counters are \"variables\" maintained by CSS whose values can be incremented by CSS rules (to track how many times they are used). Counters let you adjust the appearance of content based on its placement in the document. Automatic Numbering With Counters CSS counters are like \"variables\". The variable values can be incremented by CSS rules (which will track how many times they are used). To work with CSS counters we will use the following properties: counter-reset counter-increment content counter() counters() To use a CSS counter, it must first be created with counter-reset. counter-reset The following example creates a counter for the page (in the body selector), then increments the counter value for each <h2> element and adds \"Section <value of the counter>:\" to the beginning of each <h2> element: Example Nesting Counters The following example creates one counter for the page (section) and one counter for each <h1> element (subsection). The \"section\" counter will be counted for each <h1> element with \"Section <value of the section counter>. \", and the \"subsection\" counter will be counted for each <h2> element with \"<value of the section counter>.<value of the subsection counter>\": Example A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements. Here we use the counters() function to insert a string between different levels of nested counters: counters() Example CSS Counter Properties"
  },
  {
    "document": "CSS Website Layout Website Layout A website is often divided into headers, menus, content and a footer: There are tons of different layout designs to choose from. However, the structure above, is one of the most common, and we will take a closer look at it in this tutorial. Header A header is usually located at the top of the website (or right below a top navigation menu). It often contains a logo or the website name: Example Result Header Navigation Bar A navigation bar contains a list of links to help visitors navigating through your website: Example Result Content The layout in this section, often depends on the target users. The most common layout is one (or combining them) of the following: 1-column:  2-column:  3-column: We will create a 3-column layout, and change it to a 1-column layout on smaller screens: Example Result Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique. Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique. Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique. Tip: To create a 2-column layout, change the width to 50%. To create a 4-column layout, use 25%, etc. Tip: Do you wonder how the @media rule works? Read more about it in our CSS Media Queries chapter. Tip: A more modern way of creating column layouts, is to use CSS Flexbox. However, it is not supported in Internet Explorer 10 and earlier versions. If you require IE6-10 support, use floats (as shown above). To learn more about the Flexible Box Layout Module, read our CSS Flexbox chapter. Unequal Columns The main content is the biggest and the most important part of your site. It is common with unequal column widths, so that most of the space is reserved for the main content. The side content (if any) is often used as an alternative navigation or to specify information relevant to the main content. Change the widths as you like, only remember that it should add up to 100% in total: Example Result Side Lorem ipsum dolor sit amet, consectetur adipiscing elit... Main Content Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique. Quisque vehicula, risus eget aliquam placerat, purus leo tincidunt eros, eget luctus quam orci in velit. Praesent scelerisque tortor sed accumsan convallis. Side Lorem ipsum dolor sit amet, consectetur adipiscing elit... Footer The footer is placed at the bottom of your page."
  },
  {
    "document": "It often contains information like copyright and contact info: Example Result Responsive Website Layout By using some of the CSS code above, we have created a responsive website layout, which varies between two columns and full-width columns depending on screen width: Try it Yourself Â» Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free. * no credit card required"
  },
  {
    "document": "CSS Units CSS Units CSS has several different units for expressing a length. Many CSS properties take \"length\" values, such as width, margin, padding, font-size, etc. width margin padding font-size Length is a number followed by a length unit, such as 10px, 2em, etc. 10px 2em Example Set different length values, using px (pixels): Try it Yourself Â» Note: A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted. 0 For some CSS properties, negative lengths are allowed. There are two types of length units: absolute and relative. Absolute Lengths The absolute length units are fixed and a length expressed in any of these will appear as exactly that size. Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout. * Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels. Relative Lengths Relative length units specify a length relative to another length property. Relative length units scale better between different rendering mediums. Tip: The em and rem units are practical in creating perfectly scalable layout! * Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm. Browser Support The numbers in the table specify the first browser version that fully supports the length unit."
  },
  {
    "document": "CSS Specificity What is Specificity? If there are two or more CSS rules that point to the same element, the selector with the highest specificity will \"win\", and its style declaration will be applied to that HTML element. Think of specificity as a hierarchy that determines which style declaration is ultimately applied to an element. Look at the following examples: Example 1 Here, we have used the \"p\" element as selector, and specified a red color for this element. Result: The text will be red: Try it Yourself Â» Now, look at example 2: Example 2 Here, we have added a class selector (named \"test\"), and specified a green color for this class. Result: The text will be green (even though we have specified a red color for the element selector \"p\"). This is because the class selector has higher priority: Try it Yourself Â» Now, look at example 3: Example 3 Here, we have added the id selector (named \"demo\"). Result: The text will be blue, because the id selector has higher priority: Try it Yourself Â» Now, look at example 4: Example 4 Here, we have added an inline style for the \"p\" element. Result: The text will be pink, because the inline style has highest priority: Try it Yourself Â» Specificity Hierarchy Every CSS selector has a position in the specificity hierarchy. More Specificity Rules Examples Equal specificity: the latest rule wins - If the same rule is written twice into the external style sheet, then the latest rule wins: Example Try it Yourself Â» ID selectors have a higher specificity than attribute selectors - Look at the following three code lines: Example Try it Yourself Â» the first rule is more specific than the other two, and will therefore be applied. Contextual selectors are more specific than a single element selector - The embedded style sheet is closer to the element to be styled. So in the following situation Example the last rule will be applied. A class selector beats any number of element selectors - a class selector such as .intro beats h1, p, div, etc: Example Try it Yourself Â» The universal selector (*) and inherited values - The universal selector (*) and inherited values do not impact the specificity weight value: Example Try it Yourself Â»"
  },
  {
    "document": "CSS The !important Rule What is !important? The !important rule in CSS is used to add more importance to a property/value than normal. !important In fact, if you use the !important rule, it will override ALL previous styling rules for that specific property on that element! !important Let us look at an example: Example Try it Yourself Â» Example Explained In the example above, all three paragraphs will get a red background color, even though the ID selector and the class selector have a higher specificity. The !important rule overrides the background-color property in both cases. !important background-color Important About !important The only way to override an !important rule is to include another !important rule on a declaration with the same (or higher) specificity in the source code - and here the problem starts! This makes the CSS code confusing and the debugging will be hard, especially if you have a large style sheet! !important !important Here we have created a simple example. It is not very clear, when you look at the CSS source code, which color is considered most important: Example Try it Yourself Â» Tip: It is good to know about the !important rule. You might see it in some CSS source code. However, do not use it unless you absolutely have to. !important Maybe One or Two Fair Uses of !important One way to use !important is if you have to override a style that cannot be overridden in any other way. This could be if you are working on a Content Management System (CMS) and cannot edit the CSS code. Then you can set some custom styles to override some of the CMS styles. !important Another way to use !important is: Assume you want a special look for all buttons on a page. Here, buttons are styled with a gray background color, white text, and some padding and border: !important Example Try it Yourself Â» The look of a button can sometimes change if we put it inside another element with higher specificity, and the properties get in conflict. Here is an example of this: Example Try it Yourself Â» To \"force\" all buttons to have the same look, no matter what, we can add the !important rule to the properties of the button, like this: !important Example Try it Yourself Â»"
  },
  {
    "document": "CSS Math Functions The CSS math functions allow mathematical expressions to be used as property values. Here, we will explain the calc(), max() and min() functions. calc() max() min() The calc() Function The calc() function performs a calculation to be used as the property value. calc() CSS Syntax Let us look at an example: Example Use calc() to calculate the width of a <div> element: The max() Function The max() function uses the largest value, from a comma-separated list of values, as the property value. max() CSS Syntax Let us look at an example: Example Use max() to set the width of #div1 to whichever value is largest, 50% or 300px: The min() Function The min() function uses the smallest value, from a comma-separated list of values, as the property value. min() CSS Syntax Let us look at an example: Example Use min() to set the width of #div1 to whichever value is smallest, 50% or 300px: CSS Functions Reference For a complete list of all CSS functions, visit our CSS Functions Reference."
  },
  {
    "document": "CSS Rounded Corners CSS Rounded Corners With the CSS border-radius property, you can give any element \"rounded corners\". border-radius CSS border-radius Property The CSS border-radius property defines the radius of an element's corners. border-radius Tip: This property allows you to add rounded corners to elements! Here are three examples: 1. Rounded corners for an element with a specified background color: Rounded corners! 2. Rounded corners for an element with a border: Rounded corners! 3. Rounded corners for an element with a background image: Rounded corners! Here is the code: Example Tip: The border-radius property is actually a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties. border-radius border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius CSS border-radius - Specify Each Corner The border-radius property can have from one to four values. Here are the rules: border-radius Four values - border-radius: 15px 50px 30px 5px; (first value applies to top-left corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner):  Three values - border-radius: 15px 50px 30px; (first value applies to top-left corner, second value applies to top-right and bottom-left corners, and third value applies to bottom-right corner):  Two values - border-radius: 15px 50px; (first value applies to top-left and bottom-right corners, and the second value applies to top-right and bottom-left corners):  One value - border-radius: 15px; (the value applies to all four corners, which are rounded equally:  Here is the code: Example You could also create elliptical corners: Example CSS Rounded Corners Properties"
  },
  {
    "document": "CSS Border Images CSS Border Images With the CSS border-image property, you can set an image to be used as the border around an element. border-image CSS border-image Property The CSS border-image property allows you to specify an image to be used instead of the normal border around an element. border-image The property has three parts: We will use the following image (called \"border.png\"):  The border-image property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify. border-image Note: For border-image to work, the element also needs the border property set! border-image border Here, the middle sections of the image are repeated to create the border: An image as a border! Here is the code: Example Here, the middle sections of the image are stretched to create the border: An image as a border! Here is the code: Example Tip: The border-image property is actually a shorthand property for the border-image-source, border-image-slice, border-image-width, border-image-outset and border-image-repeat properties. border-image border-image-source border-image-slice border-image-width border-image-outset border-image-repeat CSS border-image - Different Slice Values Different slice values completely changes the look of the border: Example 1: border-image: url(border.png) 50 round; Example 2: border-image: url(border.png) 20% round; Example 3: border-image: url(border.png) 30% round; Here is the code: Example CSS Border Image Properties"
  },
  {
    "document": "CSS Multiple Backgrounds In this chapter you will learn how to add multiple background images to one element. You will also learn about the following properties: background-size background-origin background-clip CSS Multiple Backgrounds CSS allows you to add multiple background images for an element, through the background-image property. background-image The different background images are separated by commas, and the images are stacked on top of each other, where the first image is closest to the viewer. The following example has two background images, the first image is a flower (aligned to the bottom and right) and the second image is a paper background (aligned to the top-left corner): Example Multiple background images can be specified using either the individual background properties (as above) or the background shorthand property. background The following example uses the background shorthand property (same result as example above): background Example CSS Background Size The CSS background-size property allows you to specify the size of background images. background-size The size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover. The following example resizes a background image to much smaller than the original image (using pixels): Lorem Ipsum Dolor Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Here is the code: Example The two other possible values for background-size are contain and cover. background-size contain cover The contain keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image. contain The cover keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area. cover The following example illustrates the use of contain and cover: contain cover Example Define Sizes of Multiple Background Images The background-size property also accepts multiple values for background size (using a comma-separated list), when working with multiple backgrounds. background-size The following example has three background images specified, with different background-size value for each image: Example Full Size Background Image Now we want to have a background image on a website that covers the entire browser window at all times. The requirements are as follows: The following example shows how to do it; Use the <html> element (the <html> element is always at least the height of the browser window). Then set a fixed and centered background on it."
  },
  {
    "document": "Then adjust its size with the background-size property: Example Hero Image You could also use different background properties on a <div> to create a hero image (a large image with text), and place it where you want. Example CSS background-origin Property The CSS background-origin property specifies where the background image is positioned. background-origin The property takes three different values: The following example illustrates the background-origin property: background-origin Example CSS background-clip Property The CSS background-clip property specifies the painting area of the background. background-clip The property takes three different values: The following example illustrates the background-clip property: background-clip Example CSS Advanced Background Properties"
  },
  {
    "document": "CSS Colors CSS supports 140+ color names, HEX values, RGB values, RGBA values, HSL values, HSLA values, and opacity. RGBA Colors RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). The following example defines different RGBA colors: Example HSL Colors HSL stands for Hue, Saturation and Lightness. An HSL color value is specified with: hsl(hue, saturation, lightness). The following example defines different HSL colors: Example HSLA Colors HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color. An HSLA color value is specified with: hsla(hue, saturation, lightness, alpha), where the alpha parameter defines the opacity. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). The following example defines different HSLA colors: Example Opacity The CSS opacity property sets the opacity for the whole element (both background color and text will be opaque/transparent). opacity The opacity property value must be a number between 0.0 (fully transparent) and 1.0 (fully opaque). opacity Notice that the text above will also be transparent/opaque! The following example shows different elements with opacity: Example"
  },
  {
    "document": "CSS Color Keywords This page will explain the transparent, currentcolor, and inherit keywords. transparent currentcolor inherit The transparent Keyword The transparent keyword is used to make a color transparent. This is often used to make a transparent background color for an element. transparent Example Here, the background color of the <div> element will be fully transparent, and the background image will show through: Note: The transparent keyword is equivalent to rgba(0,0,0,0). RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color. Read more in our CSS RGB chapter and in our CSS Colors chapter. transparent The currentcolor Keyword The currentcolor keyword is like a variable that holds the current value of the color property of an element. currentcolor This keyword can be useful if you want a specific color to be consistent in an element or a page. Example In this example the border color of the <div> element will be blue, because the text color of the <div> element is blue: Example In this example the <div>'s background color is set to the current color value of the body element: Example In this example the <div>'s border color and shadow color is set to the current color value of the body element: The inherit Keyword The inherit keyword specifies that a property should inherit its value from its parent element. inherit The inherit keyword can be used for any CSS property, and on any HTML element. inherit Example In this example the <span>'s border settings will be inherited from the parent element:"
  },
  {
    "document": "CSS Gradients CSS gradients let you display smooth transitions between two or more specified colors. CSS defines three types of gradients: CSS Linear Gradients To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect. Syntax Direction - Top to Bottom (this is default) The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow: Example Direction - Left to Right The following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow: Example Direction - Diagonal You can make a gradient diagonally by specifying both the horizontal and vertical starting positions. The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow: Example Using Angles If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to \"to top\". A value of 90deg is equivalent to \"to right\". A value of 180deg is equivalent to \"to bottom\". Syntax The following example shows how to use angles on linear gradients: Example Using Multiple Color Stops The following example shows a linear gradient (from top to bottom) with multiple color stops: Example The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text: Example Using Transparency CSS gradients also support transparency, which can be used to create fading effects. To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency). The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red: Example Repeating a linear-gradient The repeating-linear-gradient() function is used to repeat linear gradients: Example A repeating linear gradient:"
  },
  {
    "document": "CSS Gradients CSS gradients let you display smooth transitions between two or more specified colors. CSS defines three types of gradients: CSS Linear Gradients To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect. Syntax Direction - Top to Bottom (this is default) The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow: Example Direction - Left to Right The following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow: Example Direction - Diagonal You can make a gradient diagonally by specifying both the horizontal and vertical starting positions. The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow: Example Using Angles If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to \"to top\". A value of 90deg is equivalent to \"to right\". A value of 180deg is equivalent to \"to bottom\". Syntax The following example shows how to use angles on linear gradients: Example Using Multiple Color Stops The following example shows a linear gradient (from top to bottom) with multiple color stops: Example The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text: Example Using Transparency CSS gradients also support transparency, which can be used to create fading effects. To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency). The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red: Example Repeating a linear-gradient The repeating-linear-gradient() function is used to repeat linear gradients: Example A repeating linear gradient:"
  },
  {
    "document": "CSS Radial Gradients CSS Radial Gradients A radial gradient is defined by its center. To create a radial gradient you must also define at least two color stops. Syntax By default, shape is ellipse, size is farthest-corner, and position is center. Radial Gradient - Evenly Spaced Color Stops (this is default) The following example shows a radial gradient with evenly spaced color stops: Example Radial Gradient - Differently Spaced Color Stops The following example shows a radial gradient with differently spaced color stops: Example Set Shape The shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse. The following example shows a radial gradient with the shape of a circle: Example Use of Different Size Keywords The size parameter defines the size of the gradient. It can take four values: Example A radial gradient with different size keywords: Repeating a radial-gradient The repeating-radial-gradient() function is used to repeat radial gradients: Example A repeating radial gradient:"
  },
  {
    "document": "CSS Conic Gradients CSS Conic Gradients A conic gradient is a gradient with color transitions rotated around a center point. To create a conic gradient you must define at least two colors. Syntax By default, angle is 0deg and position is center. If no degree is specified, the colors will be spread equally around the center point. Conic Gradient: Three Colors The following example shows a conic gradient with three colors: Example A conic gradient with three colors: Conic Gradient: Five Colors The following example shows a conic gradient with five colors: Example A conic gradient with five colors: Conic Gradient: Three Colors and Degrees The following example shows a conic gradient with three colors and a degree for each color: Example A conic gradient with three colors and a degree for each color: Create Pie Charts Just add border-radius: 50% to make the conic gradient look like a pie: border-radius: 50% Example Here is another pie chart with defined degrees for all the colors: Example Conic Gradient With Specified From Angle The [from angle] specifies an angle that the entire conic gradient is rotated by. The following example shows a conic gradient with a from angle of 90deg: Example A conic gradient with a from angle: Conic Gradient With Specified Center Position The [at position] specifies the center of the conic gradient. The following example shows a conic gradient with a center position of 60% 45%: Example A conic gradient with a specified center position: Repeating a Conic Gradient The repeating-conic-gradient() function is used to repeat conic gradients: repeating-conic-gradient() Example A repeating conic gradient: Here is a repeating conic gradient with defined color-starts and color-stops: Example A repeating conic gradient with defined color-starts and color-stops: CSS Gradient Functions The following table lists the CSS gradient functions:"
  },
  {
    "document": "CSS Shadow Effects Shadows With CSS you can create shadow effects! CSS Shadow Effects With CSS you can add shadow to text and to elements. In these chapters you will learn about the following properties: text-shadow box-shadow CSS Text Shadow The CSS text-shadow property applies shadow to text. text-shadow In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px): Text shadow effect! Example Next, add a color to the shadow: Text shadow effect! Example Then, add a blur effect to the shadow: Text shadow effect! Example The following example shows a white text with black shadow: Text shadow effect! Example The following example shows a red neon glow shadow: Text shadow effect! Example Multiple Shadows To add more than one shadow to the text, you can add a comma-separated list of shadows. The following example shows a red and blue neon glow shadow: Text shadow effect! Example The following example shows a white text with black, blue, and darkblue shadow: Text shadow effect! Example You can also use the text-shadow property to create a plain border around some text (without shadows): Border around text! Example"
  },
  {
    "document": "CSS Shadow Effects Shadows With CSS you can create shadow effects! CSS Shadow Effects With CSS you can add shadow to text and to elements. In these chapters you will learn about the following properties: text-shadow box-shadow CSS Text Shadow The CSS text-shadow property applies shadow to text. text-shadow In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px): Text shadow effect! Example Next, add a color to the shadow: Text shadow effect! Example Then, add a blur effect to the shadow: Text shadow effect! Example The following example shows a white text with black shadow: Text shadow effect! Example The following example shows a red neon glow shadow: Text shadow effect! Example Multiple Shadows To add more than one shadow to the text, you can add a comma-separated list of shadows. The following example shows a red and blue neon glow shadow: Text shadow effect! Example The following example shows a white text with black, blue, and darkblue shadow: Text shadow effect! Example You can also use the text-shadow property to create a plain border around some text (without shadows): Border around text! Example"
  },
  {
    "document": "CSS Box Shadow CSS box-shadow Property The CSS box-shadow property is used to apply one or more shadows to an element. box-shadow Specify a Horizontal and a Vertical Shadow In its simplest use, you only specify a horizontal and a vertical shadow. The default color of the shadow is the current text-color. Example Specify a horizontal and a vertical shadow: Specify a Color for the Shadow The color parameter defines the color of the shadow. color Example Specify a color for the shadow: Add a Blur Effect to the Shadow The blur parameter defines the blur radius. The higher the number, the more blurred the shadow will be. blur Example Add a blur effect to the shadow: Set the Spread Radius of the Shadow The spread parameter defines the spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow. spread Example Set the spread radius of the shadow: Set the inset Parameter The inset parameter changes the shadow from an outer shadow (outset) to an inner shadow. inset Example Add the inset parameter: Add Multiple Shadows An element can also have multiple shadows: Example Cards You can also use the box-shadow property to create paper-like cards: box-shadow 1 January 1, 2021 Hardanger, Norway Example CSS Shadow Properties The following table lists the CSS shadow properties:"
  },
  {
    "document": "CSS Text Effects CSS Text Overflow, Word Wrap, Line Breaking Rules, and Writing Modes In this chapter you will learn about the following properties: text-overflow word-wrap word-break writing-mode CSS Text Overflow The CSS text-overflow property specifies how overflowed content that is not displayed should be signaled to the user. text-overflow It can be clipped: This is some long text that will not fit in the box or it can be rendered as an ellipsis (...): This is some long text that will not fit in the box The CSS code is as follows: Example The following example shows how you can display the overflowed content when hovering over the element: Example CSS Word Wrapping The CSS word-wrap property allows long words to be able to be broken and wrap onto the next line. word-wrap If a word is too long to fit within an area, it expands outside: This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line. The word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word: This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line. The CSS code is as follows: Example Allow long words to be able to be broken and wrap onto the next line: CSS Word Breaking The CSS word-break property specifies line breaking rules. word-break This paragraph contains some text. This line will-break-at-hyphens. This paragraph contains some text. The lines will break at any character. The CSS code is as follows: Example CSS Writing Mode The CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically. writing-mode Some text with a span element with a vertical-rl writing-mode. The following example shows some different writing modes: Example CSS Text Effect Properties The following table lists the CSS text effect properties:"
  },
  {
    "document": "CSS Web Fonts The CSS @font-face Rule Web fonts allow Web designers to use fonts that are not installed on the user's computer. When you have found/bought the font you wish to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed. Your \"own\" fonts are defined within the CSS @font-face rule. @font-face Different Font Formats TrueType Fonts (TTF) TrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft Windows operating systems. OpenType Fonts (OTF) OpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. OpenType fonts are used commonly today on the major computer platforms. The Web Open Font Format (WOFF) WOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF is essentially OpenType or TrueType with compression and additional metadata. The goal is to support font distribution from a server to a client over a network with bandwidth constraints. The Web Open Font Format (WOFF 2.0) TrueType/OpenType font that provides better compression than WOFF 1.0. SVG Fonts/Shapes SVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 specification define a font module that allows the creation of fonts within an SVG document. You can also apply CSS to SVG documents, and the @font-face rule can be applied to text in SVG documents. Embedded OpenType Fonts (EOT) EOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages. Browser Support for Font Formats The numbers in the table specifies the first browser version that fully supports the font format. *IE: The font format only works when set to be \"installable\". Using The Font You Want In the @font-face rule; first define a name for the font (e.g. myFirstFont) and then point to the font file. @font-face Tip: Always use lowercase letters for the font URL. Uppercase letters can give unexpected results in IE. To use the font for an HTML element, refer to the name of the font (myFirstFont) through the font-family property: font-family Example Using Bold Text You must add another @font-face rule containing descriptors for bold text: @font-face Example The file \"sansation_bold.woff\" is another font file, that contains the bold characters for the Sansation font. Browsers will use this whenever a piece of text with the font-family \"myFirstFont\" should render as bold. This way you can have many @font-face rules for the same font. @font-face CSS Font Descriptors The following table lists all the font descriptors that can be defined inside the @font-face rule: @font-face"
  },
  {
    "document": "CSS 2D Transforms CSS 2D Transforms CSS transforms allow you to move, rotate, scale, and skew elements. Mouse over the element below to see a 2D transformation: In this chapter you will learn about the following CSS property: transform CSS 2D Transforms Functions With the CSS transform property you can use the following 2D transformation functions: transform translate() rotate() scaleX() scaleY() scale() skewX() skewY() skew() matrix() Tip: You will learn about 3D transformations in the next chapter. The translate() Function The translate() function moves an element from its current position (according to the parameters given for the X-axis and the Y-axis). translate() The following example moves the <div> element 50 pixels to the right, and 100 pixels down from its current position: Example The rotate() Function The rotate() function rotates an element clockwise or counter-clockwise according to a given degree. rotate() The following example rotates the <div> element clockwise with 20 degrees: Example Using negative values will rotate the element counter-clockwise. The following example rotates the <div> element counter-clockwise with 20 degrees: Example The scale() Function The scale() function increases or decreases the size of an element (according to the parameters given for the width and height). scale() The following example increases the <div> element to be two times of its original width, and three times of its original height: Example The following example decreases the <div> element to be half of its original width and height: Example The scaleX() Function The scaleX() function increases or decreases the width of an element. scaleX() The following example increases the <div> element to be two times of its original width: Example The following example decreases the <div> element to be half of its original width: Example The scaleY() Function The scaleY() function increases or decreases the height of an element. scaleY() The following example increases the <div> element to be three times of its original height: Example The following example decreases the <div> element to be half of its original height: Example The skewX() Function The skewX() function skews an element along the X-axis by the given angle. skewX() The following example skews the <div> element 20 degrees along the X-axis: Example The skewY() Function The skewY() function skews an element along the Y-axis by the given angle. skewY() The following example skews the <div> element 20 degrees along the Y-axis: Example The skew() Function The skew() function skews an element along the X and Y-axis by the given angles. skew() The following example skews the <div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis: Example If the second parameter is not specified, it has a zero value. So, the following example skews the <div> element 20 degrees along the X-axis: Example The matrix() Function The matrix() function combines all the 2D transform functions into one. matrix() The matrix() function take six parameters, containing mathematic functions, which allows you to rotate, scale, move (translate), and skew elements."
  },
  {
    "document": "The parameters are as follow: matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY()) Example CSS Transform Properties The following table lists all the 2D transform properties: CSS 2D Transform Functions"
  },
  {
    "document": "CSS 3D Transforms CSS 3D Transforms CSS also supports 3D transformations. Mouse over the elements below to see the difference between a 2D and a 3D transformation: In this chapter you will learn about the following CSS property: transform CSS 3D Transforms Functions With the CSS transform property you can use the following 3D transformation functions: transform rotateX() rotateY() rotateZ() The rotateX() Function The rotateX() function rotates an element around its X-axis at a given degree: rotateX() Example The rotateY() Function The rotateY() function rotates an element around its Y-axis at a given degree: rotateY() Example The rotateZ() Function The rotateZ() function rotates an element around its Z-axis at a given degree: rotateZ() Example CSS Transform Properties The following table lists all the 3D transform properties: CSS 3D Transform Functions"
  },
  {
    "document": "CSS Transitions CSS Transitions CSS transitions allows you to change property values smoothly, over a given duration. Mouse over the element below to see a CSS transition effect: In this chapter you will learn about the following properties: transition transition-delay transition-duration transition-property transition-timing-function How to Use CSS Transitions? To create a transition effect, you must specify two things: Note: If the duration part is not specified, the transition will have no effect, because the default value is 0. The following example shows a 100px * 100px red <div> element. The <div> element has also specified a transition effect for the width property, with a duration of 2 seconds: Example The transition effect will start when the specified CSS property (width) changes value. Now, let us specify a new value for the width property when a user mouses over the <div> element: Example Notice that when the cursor mouses out of the element, it will gradually change back to its original style. Change Several Property Values The following example adds a transition effect for both the width and height property, with a duration of 2 seconds for the width and 4 seconds for the height: Example Specify the Speed Curve of the Transition The transition-timing-function property specifies the speed curve of the transition effect. transition-timing-function The transition-timing-function property can have the following values: ease linear ease-in ease-out ease-in-out cubic-bezier(n,n,n,n) The following example shows some of the different speed curves that can be used: Example Delay the Transition Effect The transition-delay property specifies a delay (in seconds) for the transition effect. transition-delay The following example has a 1 second delay before starting: Example Transition + Transformation The following example adds a transition effect to the transformation: Example More Transition Examples The CSS transition properties can be specified one by one, like this: Example or by using the shorthand property transition: transition Example CSS Transition Properties The following table lists all the CSS transition properties:"
  },
  {
    "document": "CSS Animations CSS Animations CSS allows animation of HTML elements without using JavaScript! In this chapter you will learn about the following properties: @keyframes animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode animation What are CSS Animations? An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. The @keyframes Rule When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times. @keyframes To get an animation to work, you must bind the animation to an element. The following example binds the \"example\" animation to the <div> element. The animation will last for 4 seconds, and it will gradually change the background-color of the <div> element from \"red\" to \"yellow\": Example Note: The animation-duration property defines how long an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). animation-duration animation-duration In the example above we have specified when the style will change by using the keywords \"from\" and \"to\" (which represents 0% (start) and 100% (complete)). It is also possible to use percent. By using percent, you can add as many style changes as you like. The following example will change the background-color of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: Example The following example will change both the background-color and the position of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: Example Delay an Animation The animation-delay property specifies a delay for the start of an animation. animation-delay The following example has a 2 seconds delay before starting the animation: Example Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds. In the following example, the animation will start as if it had already been playing for 2 seconds: Example Set How Many Times an Animation Should Run The animation-iteration-count property specifies the number of times an animation should run. animation-iteration-count The following example will run the animation 3 times before it stops: Example The following example uses the value \"infinite\" to make the animation continue for ever: Example Run Animation in Reverse Direction or Alternate Cycles The animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles."
  },
  {
    "document": "animation-direction The animation-direction property can have the following values: normal reverse alternate alternate-reverse The following example will run the animation in reverse direction (backwards): Example The following example uses the value \"alternate\" to make the animation run forwards first, then backwards: Example The following example uses the value \"alternate-reverse\" to make the animation run backwards first, then forwards: Example Specify the Speed Curve of the Animation The animation-timing-function property specifies the speed curve of the animation. animation-timing-function The animation-timing-function property can have the following values: ease linear ease-in ease-out ease-in-out cubic-bezier(n,n,n,n) The following example shows some of the different speed curves that can be used: Example Specify the fill-mode For an Animation CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior. The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both). animation-fill-mode The animation-fill-mode property can have the following values: none forwards backwards both The following example lets the <div> element retain the style values from the last keyframe when the animation ends: Example The following example lets the <div> element get the style values set by the first keyframe before the animation starts (during the animation-delay period): Example The following example lets the <div> element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends: Example Animation Shorthand Property The example below uses six of the animation properties: Example The same animation effect as above can be achieved by using the shorthand animation property: animation Example CSS Animation Properties The following table lists the @keyframes rule and all the CSS animation properties:"
  },
  {
    "document": "CSS Tooltip Create tooltips with CSS. Demo: Tooltip Examples A tooltip is often used to specify extra information about something when the user moves the mouse pointer over an element:  Basic Tooltip Create a tooltip that appears when the user moves the mouse over an element: Example Example Explained HTML: Use a container element (like <div>) and add the \"tooltip\" class to it. When the user mouse over this <div>, it will show the tooltip text. \"tooltip\" The tooltip text is placed inside an inline element (like <span>) with class=\"tooltiptext\". class=\"tooltiptext\" CSS: The tooltip class use position:relative, which is needed to position the tooltip text (position:absolute). Note: See examples below on how to position the tooltip. tooltip position:relative position:absolute The tooltiptext class holds the actual tooltip text. It is hidden by default, and will be visible on hover (see below). We have also added some basic styles to it: 120px width, black background color, white text color, centered text, and 5px top and bottom padding. tooltiptext The CSS border-radius property is used to add rounded corners to the tooltip text. border-radius The :hover selector is used to show the tooltip text when the user moves the mouse over the <div> with class=\"tooltip\". :hover class=\"tooltip\" Positioning Tooltips In this example, the tooltip is placed to the right (left:105%) of the \"hoverable\" text (<div>). Also note that top:-5px is used to place it in the middle of its container element. We use the number 5 because the tooltip text has a top and bottom padding of 5px. If you increase its padding, also increase the value of the top property to ensure that it stays in the middle (if this is something you want). The same applies if you want the tooltip placed to the left. left:105% top:-5px top Right Tooltip Result: Left Tooltip Result: If you want the tooltip to appear on top or on the bottom, see examples below. Note that we use the margin-left property with a value of minus 60 pixels. This is to center the tooltip above/below the hoverable text. It is set to the half of the tooltip's width (120/2 = 60). margin-left Top Tooltip Result: Bottom Tooltip Result: Tooltip Arrows To create an arrow that should appear from a specific side of the tooltip, add \"empty\" content after tooltip, with the pseudo-element class ::after together with the content property. The arrow itself is created using borders. This will make the tooltip look like a speech bubble. ::after content This example demonstrates how to add an arrow to the bottom of the tooltip: Bottom Arrow Result: Example Explained Position the arrow inside the tooltip: top: 100% will place the arrow at the bottom of the tooltip. left: 50% will center the arrow. top: 100% left: 50% Note: The border-width property specifies the size of the arrow. If you change this, also change the margin-left value to the same. This will keep the arrow centered."
  },
  {
    "document": "border-width margin-left The border-color is used to transform the content into an arrow. We set the top border to black, and the rest to transparent. If all sides were black, you would end up with a black square box. border-color This example demonstrates how to add an arrow to the top of the tooltip. Notice that we set the bottom border color this time: Top Arrow Result: This example demonstrates how to add an arrow to the left of the tooltip: Left Arrow Result: This example demonstrates how to add an arrow to the right of the tooltip: Right Arrow Result: Fade In Tooltips (Animation) If you want to fade in the tooltip text when it is about to be visible, you can use the CSS transition property together with the opacity property, and go from being completely invisible to 100% visible, in a number of specified seconds (1 second in our example): transition opacity Example"
  },
  {
    "document": "CSS Styling Images Learn how to style images using CSS. Rounded Images You can use the border-radius property to create rounded images: border-radius Example Rounded Image: Example Circled Image: Also look at the CSS Image Shapes chapter to learn how to shape (clip) images to circles, ellipses and polygons. Thumbnail Images Use the border property to create thumbnail images. border Thumbnail Image: Example Thumbnail Image as Link: Example Responsive Images Responsive images will automatically adjust to fit the size of the screen. Resize the browser window to see the effect: If you want an image to scale down if it has to, but never scale up to be larger than its original size, add the following: Example Tip: Read more about Responsive Web Design in our CSS RWD Tutorial. Polaroid Images / Cards Cinque Terre Northern Lights Example Transparent Image The opacity property can take a value from 0.0 - 1.0. The lower value, the more transparent: opacity opacity 0.2 opacity 0.5 opacity 1(default) Example Also look at the CSS Image Filters chapter to learn how to use the filter property to add visual effects (like opacity, blur, saturation, etc.) to images. Image Text How to position text in an image: Example Try it Yourself: Image Hover Overlay Create an overlay effect on hover: Example Fade in text: Example Fade in a box: Example Slide in (top): Example Slide in (bottom): Example Slide in (left): Example Slide in (right): Flip an Image Move your mouse over the image: Example Responsive Image Gallery CSS can be used to create image galleries. This example use media queries to re-arrange the images on different screen sizes. Resize the browser window to see the effect: Example Tip: Read more about Responsive Web Design in our CSS RWD Tutorial. Image Modal (Advanced) This is an example to demonstrate how CSS and JavaScript can work together. First, use CSS to create a modal window (dialog box), and hide it by default. Then, use a JavaScript to show the modal window and to display the image inside the modal, when a user clicks on the image: Example"
  },
  {
    "document": "CSS Centering Images Learn how to center an image horizontally and vertically with CSS. Center an Image Horizontally in Two Ways 1. Using margin: auto One way to center an image horizontally on a page is to use margin: auto. margin: auto Since the <img> element is an inline element (and margin: auto does not have any effect on inline elements) we also must convert the image to a block element, with display: block. margin: auto display: block In addition, we have to define a width. The width of the image must be smaller than the width of the page. width Here is a horizontally centered image using margin: auto: margin: auto Example 2. Using display: flex Another way to center an image horizontally on a page is to use display: flex. display: flex Here, we put the <img> element inside a <div> container. We add the following CSS to the div container: display: flex justify-content: center Then, we set a width for the image. The width of the image must be smaller than the width of the page. width Here is a horizontally centered image using display: flex: display: flex Example Center an Image Vertically display: flex is also used to center an image vertically on a page. display: flex Let's say we have a <div> container that is 600px high. Now we want to center the image vertically in the div container. Here, we also put the <img> element inside a <div> container. We add the following CSS to the div container: display: flex justify-content: center align-items: center height: 600px Then, we set a height for the image (must be smaller than the height of the container). height Here is a vertically centered image: Example"
  },
  {
    "document": "CSS Image Filter Effects The CSS filter property is used to add visual effects to elements. CSS Filters The CSS filter property is used to add visual effects (like blur and saturation) to elements. filter Within the filter property, you can use the following CSS functions: blur() brightness() contrast() drop-shadow() grayscale() hue-rotate() invert() opacity() saturate() sepia() The CSS blur() Function The blur() filter function applies a blur effect to an element. A larger value will create more blur. blur() Example Apply different blur effects to <img> elements: The CSS brightness() Function The brightness() filter function adjusts the brightness of an element. brightness() Example Make an image brighter and darker than the original: The CSS contrast() Function The contrast() filter function adjusts the contrast of an element. contrast() Example Increase and decrease the contrast for an image: The CSS drop-shadow() Function The drop-shadow() filter function applies a drop-shadow effect to an image. drop-shadow() Example Add different drop-shadow effects to an image: The CSS grayscale() Function The grayscale() filter function converts an image to grayscale. grayscale() Example Set various grayscale for an image: The CSS hue-rotate() Function The hue-rotate() filter function applies a color rotation to an element. hue-rotate() This function applies a hue rotation on the image. The value defines the number of degrees around the color circle the image will be adjusted. A positive hue rotation increases the hue value, while a negative rotation decreases the hue value. 0deg represents the original image. Example Set various color rotations for an image: The CSS invert() Function The invert() filter function inverts the color of an image. invert() Example Invert the colors of an image: The CSS opacity() Function The opacity() filter function applies an opacity effect to an element. opacity() Example Set various opacity for an image: The CSS saturate() Function The saturate() filter function adjusts the saturation (color intensity) of an element. saturate() Example Set various saturations for an image: The CSS sepia() Function The sepia() filter function converts an image to sepia (a warmer, more brown/yellow color). sepia() Example Set various sepia for an image: CSS Filter Functions The following table lists the CSS filter functions:"
  },
  {
    "document": "CSS Image Shapes With CSS it is easy to shape (clip) images to circles, ellipses and polygons. The CSS clip-path Property The clip-path property lets you clip an element to a basic shape. clip-path The CSS circle() Function The circle() function defines a circle with a radius and a position. circle() The circle() function is used within the clip-path property. circle() clip-path Here we clip an image to a circle with 50% radius: Example Clip an image to a circle with 50% radius: We can also specify the center of the circle. This can be a length or percentage value. It can also be a value such as left, right, top, or bottom. The default value is center. Here we clip an image to a circle with 50% radius and position the center of the circle to the right: Example Clip an image to a circle with 50% radius and position the center of the circle to the right: The CSS shape-outside Property The shape-outside property lets you define a shape for the wrapping of the inline content. shape-outside The circle() function is also used within the shape-outside property. circle() shape-outside Here we clip an image to a circle with 40% radius, and set the shape-outside to a circle with 45% radius (to shape the text): Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac laoreet quam, id aliquet nisl. Etiam id eros ligula. Aenean euismod, enim sed mollis feugiat, magna massa cursus leo, ut maximus metus eros non ante. Praesent eget tincidunt mauris, ut euismod ipsum. In hac habitasse platea dictumst. In dapibus tortor magna, elementum elementum neque sagittis id. Integer vestibulum semper dui, quis finibus libero elementum nec. Fusce ultricies lectus a eros interdum, efficitur iaculis nibh varius. Praesent sed ex bibendum, fermentum tortor nec, tincidunt augue. Maecenas in lobortis ligula, at viverra velit. Donec facilisis blandit purus sed efficitur. Duis est augue, bibendum quis bibendum sed, feugiat vel eros. Quisque ut nisi sed erat malesuada euismod. Aliquam feugiat erat eget sodales imperdiet. Ut vel tortor auctor, rutrum lectus a, tempor nunc. Vivamus nec elit ornare, dictum urna sollicitudin, ornare diam. Nullam dictum arcu vitae odio ultrices iaculis. Example Use of circle(), clip-path and shape-outside: The CSS ellipse() Function The ellipse() function defines an ellipse with two radii x and y. ellipse() The ellipse() function is used within the clip-path property and the shape-outside property. ellipse() Here we clip an image to an ellipse with 50% radius x and 35% radius y: Example Clip an image to an ellipse with 50% radius x and 35% radius y: We can also specify the center of the ellipse. This can be a length or percentage value. It can also be a value such as left, right, top, or bottom. The default value is center."
  },
  {
    "document": "Here we clip an image to an ellipse with 50% radius x and 35% radius y, and position the center of the ellipse to the right: Example Clip an image to an ellipse with 50% radius x and 35% radius y, and position the center of the ellipse to the right: The shape-outside Property and ellipse() Here we clip an image to an ellipse with 40% radius x and 50% radius y, and set the shape-outside to an ellipse with 45% radius x and 50% radius y (to shape the text): Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac laoreet quam, id aliquet nisl. Etiam id eros ligula. Aenean euismod, enim sed mollis feugiat, magna massa cursus leo, ut maximus metus eros non ante. Praesent eget tincidunt mauris, ut euismod ipsum. In hac habitasse platea dictumst. In dapibus tortor magna, elementum elementum neque sagittis id. Integer vestibulum semper dui, quis finibus libero elementum nec. Fusce ultricies lectus a eros interdum, efficitur iaculis nibh varius. Praesent sed ex bibendum, fermentum tortor nec, tincidunt augue. Maecenas in lobortis ligula, at viverra velit. Donec facilisis blandit purus sed efficitur. Duis est augue, bibendum quis bibendum sed, feugiat vel eros. Quisque ut nisi sed erat malesuada euismod. Aliquam feugiat erat eget sodales imperdiet. Ut vel tortor auctor, rutrum lectus a, tempor nunc. Vivamus nec elit ornare, dictum urna sollicitudin, ornare diam. Nullam dictum arcu vitae odio ultrices iaculis. Example Use of ellipse(), clip-path and shape-outside: The CSS polygon() Function The polygon() function defines a polygon. polygon() The polygon() function contains points that define the polygon. This can be a length or percentage value. Each point is a pair of x and y coordinates. 0 0 defines the left top corner and 100% 100% defines the right bottom corner. polygon() The polygon() function is used within the clip-path property and the shape-outside property. polygon() Here we clip an image to a polygon: Example Clip an image to a polygon: CSS Properties and Functions The following table lists the CSS properties and functions used in this chapter:"
  },
  {
    "document": "CSS The object-fit Property The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container. object-fit The CSS object-fit Property The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container. object-fit This property tells the content to fill the container in a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\". Look at the following image from Paris. This image is 400 pixels wide and 300 pixels high: However, if we style the image above to be half its width (200 pixels) and same height (300 pixels), it will look like this: Example We see that the image is being squished to fit the container of 200x300 pixels (its original aspect ratio is destroyed). Here is where the object-fit property comes in. The object-fit property can take one of the following values: object-fit object-fit fill contain cover none scale-down none contain Using object-fit: cover; If we use object-fit: cover; the image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit: object-fit: cover; Example Using object-fit: contain; If we use object-fit: contain; the image keeps its aspect ratio, but is resized to fit within the given dimension: object-fit: contain; Example Using object-fit: fill; If we use object-fit: fill; the image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit: object-fit: fill; Example Using object-fit: none; If we use object-fit: none; the image is not resized: object-fit: none; Example Using object-fit: scale-down; If we use object-fit: scale-down; the image is scaled down to the smallest version of none or contain: object-fit: scale-down; none contain Example Another Example Here we have two images and we want them to fill the width of 50% of the browser window and 100% of the height. In the following example we do NOT use object-fit, so when we resize the browser window, the aspect ratio of the images will be destroyed: object-fit Example In the next example, we use object-fit: cover;, so when we resize the browser window, the aspect ratio of the images is preserved: object-fit: cover; Example CSS object-fit More Examples The following example demonstrates all the possible values of the object-fit property in one example: object-fit Example CSS Object-* Properties The following table lists the CSS object-* properties:"
  },
  {
    "document": "CSS The object-position Property The CSS object-position property is used to specify how an <img> or <video> should be positioned within its container. object-position The Image Look at the following image from Paris, which is 400x300 pixels: Next, we use object-fit: cover; to keep the aspect ratio and to fill the given dimension. However, the image will be clipped to fit, like this: object-fit: cover; Example Using the object-position Property Let's say that the part of the image that is shown, is not positioned as we want. To position the image, we will use the object-position property. object-position Here we will use the object-position property to position the image so that the great old building is in center: object-position Example Here we will use the object-position property to position the image so that the famous Eiffel Tower is in center: object-position Example CSS Object-* Properties The following table lists the CSS object-* properties:"
  },
  {
    "document": "CSS Masking With CSS masking you create a mask layer to place over an element to partially or fully hide portions of the element. The CSS mask-image Property The CSS mask-image property specifies a mask layer image. mask-image The mask layer image can be a PNG image, an SVG image, a CSS gradient, or an SVG <mask> element. Browser Support The numbers in the table below specify the first browser version that fully supports the property. Numbers followed by -webkit- specify the first version that worked with a prefix. Use an Image as the Mask Layer To use a PNG or an SVG image as the mask layer, use a url() value to pass in the mask layer image. The mask image needs to have a transparent or semi-transparent area. Black indicates fully transparent. Here is the mask image (a PNG image) we will use: Here is an image from Cinque Terre, in Italy: Now, we apply the mask image (the PNG image above) as the mask layer for the image from Cinque Terre, Italy: Example Here is the source code: Example Explained The mask-image property specifies the image to be used as a mask layer for an element. mask-image The mask-repeat property specifies if or how a mask image will be repeated. The no-repeat value indicates that the mask image will not be repeated (the mask image will only be shown once). mask-repeat no-repeat Another Example If we omit the mask-repeat property, the mask image will be repeated all over the image from Cinque Terre, Italy: mask-repeat Example Here is the source code: Use Gradients as the Mask Layer CSS linear and radial gradients can also be used as mask images. Linear Gradient Examples Here, we use a linear-gradient as the mask layer for our image. This linear gradient goes from top (black) to bottom (transparent): Example Use a linear gradient as a mask layer: Here, we use a linear-gradient along with text masking as the mask layer for our image: The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore. The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore. The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore."
  },
  {
    "document": "Example Use a linear gradient along with text masking as a mask layer: Radial Gradient Examples Here, we use a radial-gradient (shaped as a circle) as the mask layer for our image: Example Use a radial gradient as a mask layer (a circle): Here, we use a radial-gradient (shaped as an ellipse) as the mask layer for our image: Example Use another radial gradient as a mask layer (an ellipse): Use SVG as the Mask Layer The SVG <mask> element can be used inside an SVG graphic to create masking effects. <mask> Here, we use the SVG <mask> element to create different mask layers for our image: <mask> Example An SVG mask layer (formed as a triangle): Example An SVG mask layer (formed as a star): Example An SVG mask layer (formed as circles): CSS Masking Properties The following table lists all the CSS masking properties:"
  },
  {
    "document": "CSS Buttons Learn how to style buttons using CSS. Basic Button Styling Default Button CSS Button Example Button Colors Use the background-color property to change the background color of a button: background-color Example Button Sizes Use the font-size property to change the font size of a button: font-size Example Use the padding property to change the padding of a button: padding Example Rounded Buttons Use the border-radius property to add rounded corners to a button: border-radius Example Colored Button Borders Use the border property to add a colored border to a button: border Example Hoverable Buttons Use the :hover selector to change the style of a button when you move the mouse over it. :hover Tip: Use the transition-duration property to determine the speed of the \"hover\" effect: transition-duration Example Shadow Buttons Use the box-shadow property to add shadows to a button: box-shadow Example Disabled Buttons Use the opacity property to add transparency to a button (creates a \"disabled\" look). opacity Tip: You can also add the cursor property with a value of \"not-allowed\", which will display a \"no parking sign\" when you mouse over the button: cursor Example Button Width By default, the size of the button is determined by its text content (as wide as its content). Use the width property to change the width of a button: width Example Button Groups Remove margins and add float:left to each button to create a button group: float:left Example Bordered Button Group Use the border property to create a bordered button group: border Example Vertical Button Group Use display:block instead of float:left to group the buttons below each other, instead of side by side: display:block float:left Example Button on Image Animated Buttons Example Add an arrow on hover: Example Add a \"pressed\" effect on click: Example Fade in on hover: Example Add a \"ripple\" effect on click:"
  },
  {
    "document": "CSS Pagination Examples Learn how to create a responsive pagination using CSS. Simple Pagination If you have a website with lots of pages, you may wish to add some sort of pagination to each page: Example Active and Hoverable Pagination Highlight the current page with an .active class, and use the :hover selector to change the color of each page link when moving the mouse over them: .active :hover Example Rounded Active and Hoverable Buttons Add the border-radius property if you want a rounded \"active\" and \"hover\" button: border-radius Example Hoverable Transition Effect Add the transition property to the page links to create a transition effect on hover: transition Example Bordered Pagination Use the border property to add borders to the pagination: border Example Rounded Borders Tip: Add rounded borders to your first and last link in the pagination: Example Space Between Links Tip: Add the margin property if you do not want to group the page links: margin Example Pagination Size Change the size of the pagination with the font-size property: font-size Example Centered Pagination To center the pagination, wrap a container element (like <div>) around it with text-align:center text-align:center Example More Examples Example Breadcrumbs Another variation of pagination is so-called \"breadcrumbs\": Example"
  },
  {
    "document": "CSS Multiple Columns CSS Multi-column Layout The CSS multi-column layout allows easy definition of multiple columns of text - just like in newspapers: Daily Ping Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. CSS Multi-column Properties In this chapter you will learn about the following multi-column properties: column-count column-gap column-rule-style column-rule-width column-rule-color column-rule column-span column-width CSS Create Multiple Columns The column-count property specifies the number of columns an element should be divided into. column-count The following example will divide the text in the <div> element into 3 columns: Example CSS Specify the Gap Between Columns The column-gap property specifies the gap between the columns. column-gap The following example specifies a 40 pixels gap between the columns: Example CSS Column Rules The column-rule-style property specifies the style of the rule between columns: column-rule-style Example The column-rule-width property specifies the width of the rule between columns: column-rule-width Example The column-rule-color property specifies the color of the rule between columns: column-rule-color Example The column-rule property is a shorthand property for setting all the column-rule-* properties above. column-rule The following example sets the width, style, and color of the rule between columns: Example Specify How Many Columns an Element Should Span The column-span property specifies how many columns an element should span across. column-span The following example specifies that the <h2> element should span across all columns: Example Specify The Column Width The column-width property specifies a suggested, optimal width for the columns. column-width The following example specifies that the suggested, optimal width for the columns should be 100px: Example CSS Multi-columns Properties The following table lists all the multi-columns properties:"
  },
  {
    "document": "CSS User Interface CSS User Interface In this chapter you will learn about the following CSS user interface properties: resize outline-offset CSS Resizing The resize property specifies if (and how) an element should be resizable by the user. resize This div element is resizable by the user! To resize: Click and drag the bottom right corner of this div element. The following example lets the user resize only the width of a <div> element: Example The following example lets the user resize only the height of a <div> element: Example The following example lets the user resize both the height and width of a <div> element: Example In many browsers, <textarea> is resizable by default. Here, we have used the resize property to disable the resizability: Example CSS Outline Offset The outline-offset property adds space between an outline and the edge or border of an element. outline-offset Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline. The following example uses the outline-offset property to add space between the border and the outline: outline-offset Example CSS User Interface Properties The following table lists all the user interface properties:"
  },
  {
    "document": "CSS Variables - The var() Function CSS Variables The var() function is used to insert the value of a CSS variable. var() CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries. A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables. The Traditional Way The following example shows the traditional way of defining some colors in a style sheet (by defining the colors to use, for each specific element): Example Syntax of the var() Function The var() function is used to insert the value of a CSS variable. var() The syntax of the var() function is as follows: var() Note: The variable name must begin with two dashes (--) and it is case sensitive! How var() Works First of all: CSS variables can have a global or local scope. Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared. To create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element. :root :root To create a variable with local scope, declare it inside the selector that is going to use it. The following example is equal to the example above, but here we use the var() function. var() First, we declare two global variables (--blue and --white). Then, we use the var() function to insert the value of the variables later in the style sheet: var() Example Advantages of using var() are: To change the blue and white color to a softer blue and white, you just need to change the two variable values: Example CSS var() Function"
  },
  {
    "document": "CSS Variables - The var() Function CSS Variables The var() function is used to insert the value of a CSS variable. var() CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries. A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables. The Traditional Way The following example shows the traditional way of defining some colors in a style sheet (by defining the colors to use, for each specific element): Example Syntax of the var() Function The var() function is used to insert the value of a CSS variable. var() The syntax of the var() function is as follows: var() Note: The variable name must begin with two dashes (--) and it is case sensitive! How var() Works First of all: CSS variables can have a global or local scope. Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared. To create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element. :root :root To create a variable with local scope, declare it inside the selector that is going to use it. The following example is equal to the example above, but here we use the var() function. var() First, we declare two global variables (--blue and --white). Then, we use the var() function to insert the value of the variables later in the style sheet: var() Example Advantages of using var() are: To change the blue and white color to a softer blue and white, you just need to change the two variable values: Example CSS var() Function"
  },
  {
    "document": "CSS Overriding Variables Override Global Variable With Local Variable From the previous page we have learned that global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared. Look at the example from the previous page: Example Sometimes we want the variables to change only in a specific section of the page. Assume we want a different color of blue for button elements. Then, we can re-declare the --blue variable inside the button selector. When we use var(--blue) inside this selector, it will use the local --blue variable value declared here. We see that the local --blue variable will override the global --blue variable for the button elements: Example Add a New Local Variable If a variable is to be used at only one single place, we could also have declared a new local variable, like this: Example CSS var() Function"
  },
  {
    "document": "CSS Change Variables With JavaScript Change Variables With JavaScript CSS variables have access to the DOM, which means that you can change them with JavaScript. Here is an example of how you can create a script to display and change the --blue variable from the example used in the previous pages. For now, do not worry if you are not familiar with JavaScript. You can learn more about JavaScript in our JavaScript Tutorial: Example CSS var() Function"
  },
  {
    "document": "CSS Using Variables in Media Queries Using Variables in Media Queries Now we want to change a variable value inside a media query. Tip: Media Queries are about defining different style rules for different devices (screens, tablets, mobile phones, etc.). You can learn more Media Queries in our Media Queries Chapter. Here, we first declare a new local variable named --fontsize for the .container class. We set its value to 25 pixels. Then we use it in the .container class further down. Then, we create a @media rule that says \"When the browser's width is 450px or wider, change the --fontsize variable value of the .container class to 50px.\" .container .container @media .container Here is the complete example: Example Here is another example where we also change the value of the --blue variable in the @media rule: @media Example CSS var() Function"
  },
  {
    "document": "CSS - The @property Rule CSS @property Rule The @property rule is used to define custom CSS properties directly in the stylesheet without having to run any JavaScript. @property The @property rule has data type checking and constraining, sets default values, and defines whether the property can inherit values or not. @property Example of defining a custom property: The definition above says that --myColor is a color property, it can inherit values from parent elements, and its default value is lightgray. To use the custom property in CSS, we use the var() function: var() The benefits of using @property: @property Browser Support The numbers in the table specifies the first browser version that fully supports the rule. Simple @property Example The following example defines two custom properties: my-bg-color and my-txt-color. Then, the div uses the custom properties in background-color and color: Example Another @property Example In the following example we use the default custom property on the <div> element. Then we override the custom property in class .fresh and class .nature (by setting some other colors), and it works perfectly fine: Example Avoid Error with Type Checking and Fallback Value In the following example we set the custom property in class .nature to an integer. This is not valid, and the browser will use the fallback color, which is defined in the initial-value property (lightgray): Example Use of the inherits Value In the following example we will set the inherits value to false. This means that the custom property WILL NOT inherit values from its parent elements. Look at the result: Example The next example sets the inherits value to true. This means that the custom property WILL inherit values from its parent elements. Look at the result: Example Create Smooth Animation with @property A complete new opportunity you can achieve with the @property rule, is to animate something that could not be animated before: Gradients. Look at the following example: @property Example Specify two custom properties for a gradient: CSS @property Rule"
  },
  {
    "document": "CSS Box Sizing CSS Box Sizing The CSS box-sizing property allows us to include the padding and border in an element's total width and height. box-sizing Without the CSS box-sizing Property By default, the width and height of an element is calculated like this: width + padding + border = actual width of an element height + padding + border = actual height of an element This means: When you set the width/height of an element, the element often appears bigger than you have set (because the element's border and padding are added to the element's specified width/height). The following illustration shows two <div> elements with the same specified width and height: The two <div> elements above end up with different sizes in the result (because div2 has a padding specified): Example The box-sizing property solves this problem. box-sizing With the CSS box-sizing Property The box-sizing property allows us to include the padding and border in an element's total width and height. box-sizing If you set box-sizing: border-box; on an element, padding and border are included in the width and height: box-sizing: border-box; Here is the same example as above, with box-sizing: border-box; added to both <div> elements: box-sizing: border-box; Example Since the result of using the box-sizing: border-box; is so much better, many developers want all elements on their pages to work this way. box-sizing: border-box; The code below ensures that all elements are sized in this more intuitive way. Many browsers already use box-sizing: border-box; for many form elements (but not all - which is why inputs and text areas look different at width: 100%;). box-sizing: border-box; Applying this to all elements is safe and wise: Example CSS Box Sizing Property"
  },
  {
    "document": "CSS Media Queries CSS Media Queries The @media rule, introduced in CSS2, made it possible to define different style rules for different media types. @media Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device. Media queries can be used to check many things, such as: Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones). CSS Media Types CSS Common Media Features Here are some commonly used media features: Media Query Syntax A media query consists of a media type and can contain one or more media features, which resolve to either true or false. The mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype. The result of the query is true if the specified media type matches the type of device the document is being displayed on and all media features in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules. Meaning of the not, only, and and keywords: not: This keyword inverts the meaning of an entire media query. only: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers. and: This keyword combines a media type and one or more media features. You can also link to different stylesheets for different media and different widths of the browser window (viewport): Media Queries Simple Examples One way to use media queries is to have an alternate CSS section right inside your style sheet. The following example changes the background-color to lightgreen if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the background-color will be pink): Example The following example shows a menu that will float to the left of the page if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the menu will be on top of the content): Example More Media Query Examples For much more examples on media queries, go to the next page: CSS MQ Examples. CSS @media Reference For a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference."
  },
  {
    "document": "CSS Media Queries - Examples CSS Media Queries - More Examples Let us look at some more examples of using media queries. Media queries are a popular technique for delivering a tailored style sheet to different devices. To demonstrate a simple example, we can change the background color for different devices: Example Do you wonder why we use exactly 992px and 600px? They are what we call \"typical breakpoints\" for devices. You can read more about typical breakpoints in our Responsive Web Design Tutorial. Media Queries For Menus In this example, we use media queries to create a responsive navigation menu, that varies in design on different screen sizes. Large screens: Small screens: Example Media Queries For Columns A common use of media queries, is to create a flexible layout. In this example, we create a layout that varies between four, two and full-width columns, depending on different screen sizes: Large screens:  Medium screens:  Small screens: Example Tip: A more modern way of creating column layouts, is to use CSS Flexbox (see example below). However, it is not supported in Internet Explorer 10 and earlier versions. If you require IE6-10 support, use floats (as shown above). To learn more about the Flexible Box Layout Module, read our CSS Flexbox chapter. To learn more about Responsive Web Design, read our Responsive Web Design Tutorial. Example Hide Elements With Media Queries Another common use of media queries, is to hide elements on different screen sizes: Example Change Font Size With Media Queries You can also use media queries to change the font size of an element on different screen sizes: Variable Font Size. Example Flexible Image Gallery In this example, we use media queries together with flexbox to create a responsive image gallery: Example Flexible Website In this example, we use media queries together with flexbox to create a responsive website, containing a flexible navigation bar and flexible content. Example Orientation: Portrait / Landscape Media queries can also be used to change layout of a page depending on the orientation of the browser. You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation: Example Use a lightblue background color if the orientation is in landscape mode: Min Width to Max Width You can also use the (max-width: ..) and (min-width: ..) values to set a minimum width and a maximum width. (max-width: ..) and (min-width: ..) For example, when the browser's width is between 600 and 900px, change the appearance of a <div> element: Example Using an additional value: In the example below, we add an additional media query to our already existing one using a comma: Example CSS @media Reference For a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference."
  },
  {
    "document": "Tip: To learn more about responsive web design (how to target different devices and screens), using media query breakpoints, read our Responsive Web Design Tutorial."
  },
  {
    "document": "CSS Flexbox 1 2 3 4 5 6 7 8 Try it Yourself Â» What is CSS Flexbox? Flexbox is short for the Flexible Box Layout module. Flexbox is a layout method for arranging items in rows or columns. Flexbox makes it easier to design a flexible responsive layout structure, without using float or positioning. Flexbox vs. Grid The CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns. The CSS Grid Layout should be used for two-dimensional layout, with rows AND columns. CSS Flexible Box Layout Module Before the Flexible Box Layout module, there were four layout modes: CSS flexbox is supported in all modern browsers. CSS Flexbox Components A flexbox always consists of: A Flex Container with Three Flex Items To start using CSS Flexbox, you need to first define a flex container. The flex container becomes flexible by setting the display property to flex. display flex 1 2 3 The element above represents a flex container (the blue area) with three flex items. Example A flex container with three flex items: Try it Yourself Â» You will learn more about flex containers and flex items in the next chapters."
  },
  {
    "document": "CSS Flex Container The CSS Flex Container Like we specified in the previous chapter, this is a flex container (the blue area) with three flex items: 1 2 3 The flex container becomes flexible by setting the display property to flex: display flex Example Try it Yourself Â» The CSS properties we use for the flex container are: flex-direction flex-wrap flex-flow justify-content align-items align-content The CSS flex-direction Property The flex-direction property specifies the display-direction of flex items in the flex container. flex-direction The flex-direction property can have one of the following values: flex-direction row column row-reverse column-reverse Example The row value is the default value, and it displays the flex items horizontally (from left to right): row Result: 1 2 3 Try it Yourself Â» Example The column value displays the flex items vertically (from top to bottom): column Result: 1 2 3 Try it Yourself Â» Example The row-reverse value displays the flex items horizontally (but from right to left): row-reverse Result: 1 2 3 Try it Yourself Â» Example The column-reverse value displays the flex items vertically (but from bottom to top): column-reverse Result: 1 2 3 Try it Yourself Â» The CSS flex-wrap Property The flex-wrap property specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line. flex-wrap The flex-wrap property can have one of the following values: flex-wrap nowrap wrap wrap-reverse Example The nowrap value specifies that the flex items will not wrap (this is default): nowrap Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example The wrap value specifies that the flex items will wrap if necessary: wrap Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example The wrap-reverse value specifies that the flex items will wrap if necessary, in reverse order: wrap-reverse Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» The CSS flex-flow Property The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties. flex-flow flex-direction flex-wrap Example Try it Yourself Â» The CSS justify-content Property The justify-content property is used to align the flex items when they do not use all available space on the main-axis (horizontally)."
  },
  {
    "document": "justify-content The justify-content property can have one of the following values: justify-content center flex-start flex-end space-around space-between space-evenly Example The center value positions the flex items in the center of the container: center Result: 1 2 3 Try it Yourself Â» Example The flex-start value positions the flex items at the beginning of the container (this is default): flex-start Result: 1 2 3 Try it Yourself Â» Example The flex-end value positions the flex items at the end of the container: flex-end Result: 1 2 3 Try it Yourself Â» Example The space-around value displays the flex items with space around them: space-around Result: 1 2 3 Try it Yourself Â» Example The space-between value displays the flex items with space between them: space-between Result: 1 2 3 Try it Yourself Â» Example The space-evenly value displays the flex items with equal space around them: space-evenly Result: 1 2 3 Try it Yourself Â» The CSS align-items Property The align-items property is used to align the flex items when they do not use all available space on the cross-axis (vertically). align-items The align-items property can have one of the following values: align-items center flex-start flex-end stretch baseline normal In the following examples we use a 200 pixels high container, to better demonstrate the align-items property. align-items Example The center value positions the flex items in the middle of the container: center Result: 1 2 3 Try it Yourself Â» Example The flex-start value positions the flex items at the top of the container: flex-start Result: 1 2 3 Try it Yourself Â» Example The flex-end value positions the flex items at the bottom of the container: flex-end Result: 1 2 3 Try it Yourself Â» Example The stretch value stretches the flex items to fill the container (this is equal to \"normal\" which is default): stretch Result: 1 2 3 Try it Yourself Â» Example The baseline value positions the flex items at the baseline of the container: baseline Note: The example uses different font-size to demonstrate that the items gets aligned by the text baseline: 1 3 Try it Yourself Â» The CSS align-content Property The align-content property is used to align the flex lines. align-content The align-content property is similar to align-items, but instead of aligning flex items, it aligns the flex lines. align-content align-items The align-content property can have one of the following values: align-content center stretch flex-start flex-end space-around space-between space-evenly In the following examples we use a 600 pixels high container, with the flex-wrap property set to wrap, to better demonstrate the align-content property."
  },
  {
    "document": "flex-wrap wrap align-content Example With center, the flex lines are packed toward the center of the container: center Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With stretch, the flex lines stretch to take up the remaining space of the container (this is default): stretch Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With flex-start, the flex lines are packed toward the start of the container: flex-start Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With flex-end, the flex lines are packed toward the end of the container: flex-end Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With space-between, the space between the flex lines are equal, but the first item is flush with the start edge of the container, and the last item is flush with the end edge of the container: space-between Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With space-around, the space between the flex lines are equal, but the space before the first item and after the last item is set to half of the space between the flex lines: space-around Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Example With space-evenly, the flex lines are evenly distributed in the flex container, with equal space on top, bottom and between: space-evenly Result: 1 2 3 4 5 6 7 8 9 Try it Yourself Â» Perfect Centering In the following example we will solve a common style problem: perfect centering. SOLUTION: Set both the justify-content and align-items properties to center, and the flex item will be perfectly centered: justify-content align-items center Example Try it Yourself Â» The CSS Flex Container Properties The following table lists all the CSS Flex Container properties:"
  },
  {
    "document": "CSS Flex Items The CSS Flex Items The direct child elements of a flex container automatically becomes flex items. 1 2 3 4 The element above represents four blue flex items inside a grey flex container. Example Try it Yourself Â» The CSS properties we use for flex items are: order flex-grow flex-shrink flex-basis flex align-self The order Property The order property specifies the order of the flex items inside the flex container. order The first flex item in the code does not have to appear as the first item in the layout. The order value must be a number, default value is 0. 1 2 3 4 Example The order property can change the order of the flex items: Try it Yourself Â» The flex-grow Property The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items. flex-grow 1 2 3 The value must be a number, default value is 0. Example Make the third flex item grow eight times faster than the other flex items: Try it Yourself Â» The flex-shrink Property The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items. flex-shrink 1 2 3 4 5 6 7 8 9 10 The value must be a number, default value is 1. Example Do not let the third flex item shrink as much as the other flex items: Try it Yourself Â» The flex-basis Property The flex-basis property specifies the initial length of a flex item. flex-basis 1 2 3 4 Example Set the initial length of the third flex item to 200 pixels: Try it Yourself Â» The flex Property The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties. flex flex-grow flex-shrink flex-basis Example Make the third flex item not growable (0), not shrinkable (0), and with an initial length of 200 pixels: Try it Yourself Â» The align-self Property The align-self property specifies the alignment for the selected item inside the flexible container. align-self The align-self property overrides the default alignment set by the container's align-items property. align-self align-items 1 2 3 4 In these examples we use a 200 pixels high container, to better demonstrate the align-self property: align-self Example Align the third flex item in the middle of the container: Try it Yourself Â» Example Align the second flex item at the top of the container, and the third flex item at the bottom of the container: Try it Yourself Â» The CSS Flex Items Properties The following table lists all the CSS Flex Items properties:"
  },
  {
    "document": "CSS Responsive Flexbox Responsive Flexbox You learned from the CSS Media Queries chapter that you can use media queries to create different layouts for different screen sizes and devices. Laptop and Desktops: Mobile phones and Tablets: For example, if you want to create a two-column layout for most screen sizes, and a one-column layout for small screen sizes (such as phones and tablets), you can change the flex-direction from row to column at a specific breakpoint (800px in the example below): flex-direction row column Example Try it Yourself Â» Another way is to change the percentage of the flex property of the flex items to create different layouts for different screen sizes. Note that we also have to include flex-wrap: wrap; on the flex container for this example to work: flex flex-wrap: wrap; Example Try it Yourself Â» Responsive Image Gallery using Flexbox Use flexbox to create a responsive image gallery that varies between four, two or full-width images, depending on screen size: Responsive Website using Flexbox Use flexbox to create a responsive website, containing a flexible navigation bar and flexible content:"
  },
  {
    "document": "CSS Grid Layout Module My Header Lorem Ipsum Lorem ipsum odor amet, consectetuer adipiscing elit. Ridiculus sit nisl laoreet facilisis aliquet. Potenti dignissim litora eget montes rhoncus sapien neque urna. Cursus libero sapien integer magnis ligula lobortis quam ut. Try it Yourself Â» CSS Grid Layout The Grid Layout Module offers a grid-based layout system, with rows and columns. The Grid Layout Module allows developers to easily create complex web layouts. The Grid Layout Module makes it easier to design a responsive layout structure, without using float or positioning. The CSS grid properties are supported in all modern browsers. Grid vs. Flexbox The CSS Grid Layout should be used for two-dimensional layout, with rows AND columns. The CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns. CSS Grid Components A grid always consists of: Grid Container and Grid Items A grid layout consists of a parent element (the grid container), with one or more grid items. All direct children of the grid container automatically become grid items. Example Result: Try it Yourself Â» Display Grid Property The <div> element becomes a grid container when its display property is set to grid or inline-grid. <div> display grid inline-grid Example Result: Try it Yourself Â» Example Result: Try it Yourself Â» All CSS Grid Properties"
  },
  {
    "document": "CSS Grid Columns, Rows and Gaps Grid Columns The vertical lines of grid items are called columns. Grid Rows The horizontal lines of grid items are called rows. Grid Gaps The spaces between each column/row are called gaps. You can adjust the gap size by using one of the following properties: column-gap row-gap gap The column-gap Property The column-gap property specifies the gap between the columns in a grid. column-gap Example Specify a 50 pixels gap between the columns in the grid: Result: Try it Yourself Â» The row-gap Property The row-gap property specifies the gap between the rows in a grid. row-gap Example Specify a 50 pixels gap between the rows in the grid: Result: Try it Yourself Â» The gap Property The gap property is a shorthand property for row-gap and column-gap: gap row-gap column-gap Example Set the gap between rows to 50px, and the gap between columns to 100px in the grid: Result: Try it Yourself Â» Example Set the gap between rows and the columns to 50px in the grid: Result: Try it Yourself Â» Grid Lines The lines between columns are called column lines. The lines between rows are called row lines. We can specify where to start and end a grid item by using the following properties: grid-column-start grid-column-end grid-row-start grid-row-end grid-column grid-row You can refer to line numbers when placing a grid item in a grid container. The grid-column-start and grid-column-end Properties The grid-column-start property specifies where to start a grid item. grid-column-start The grid-column-end property specifies where to end a grid item. grid-column-end Example Place the first grid item at column-line 1, and let it end on column-line 3: Result: Try it Yourself Â» The grid-column Property The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties. grid-column grid-column-start grid-column-end Example Place the first grid item at column-line 1, and let it span 2 columns: Result: Try it Yourself Â» The grid-row-start and grid-row-end Property The grid-row-start property specifies where to start a grid item. grid-row-start The grid-row-end property specifies where to end a grid item. grid-row-end Example Place the first grid item at row line 1, and let it end on row line 3: Result: Try it Yourself Â» The grid-row Property The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties. grid-row grid-row-start grid-row-end Example Place the first grid item at row-line 1, and let it span 2 rows: Result: Try it Yourself Â» All CSS Grid Column, Row and Gap Properties"
  },
  {
    "document": "CSS Grid Container Try it Yourself Â» Grid Container A grid container contains one or more grid items arranged in columns and rows. Direct child elements(s) of the grid container automatically becomes grid items. An element becomes a grid container when its display property is set to grid or inline-grid. display grid inline-grid Grid Tracks The rows and columns of a grid is defined with the grid-template-rows and the grid-template-columns properties (or the shorthand grid or grid-template properties). grid-template-rows grid-template-columns grid grid-template These define the grid tracks. A grid track is the space between two adjacent grid lines. The grid-template-columns Property The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column. grid-template-columns The value is a space-separated-list, where each value defines the width of the respective column. If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or \"auto\" if all columns should have the same width. Example Make a grid with 4 columns of equal width: Result: Try it Yourself Â» The grid-template-columns property can also be used to specify the exact size (width) of the columns, or a mix of fixed size and auto. grid-template-columns Example Set a fixed size for column 1, 2, and 4, and keep column 3 as auto size: Result: Try it Yourself Â» Note: If you have more than 4 grid items in a 4 columns grid, the grid will automatically add a new row to put the items in. Cell Sizing with the fr Unit The fr unit can be used when defining grids, like any other CSS length such as %, px or em. fr The fr unit stands for \"fraction\". This unit automatically divides the available space into fractions. fr Example: 1fr will take 1 fraction of the available space, while 2fr will take 2 fractions of the available space. Example Here, each column will take up 25% of the container width, splitting it equally: Result: Try it Yourself Â» Example Here, the second column will be twice as big as the others: Result: Try it Yourself Â» The grid-template-rows Property The grid-template-rows property defines the height of each row. grid-template-rows The value is a space-separated-list, where each value defines the height of the respective row: Example Result: Try it Yourself Â» Notice that the first row in the grid above is 80px high and the second row is 200px high. The next rows will use auto as default. The justify-content Property The justify-content property is used to align the grid items when they do not use all available space on the main-axis (horizontally). justify-content The justify-content property can have one of the following values: justify-content space-evenly space-around space-between center start end Note: The grid item's total width has to be less than the container's width for the justify-content property to have any effect."
  },
  {
    "document": "justify-content Example The space-evenly value displays the grid items with equal space around them: space-evenly Result: Try it Yourself Â» Example The space-around value displays the grid items with space around them: space-around Result: Try it Yourself Â» Example The space-between value displays the grid items with space between them: space-between Result: Try it Yourself Â» Example The center value positions the grid items in the center of the container: center Result: Try it Yourself Â» Example The start value positions the grid items at the start of the container: start Result: Try it Yourself Â» Example The end value positions the grid items at the end of the container: end Result: Try it Yourself Â» The align-content Property The align-content property is used to align the grid items when they do not use all available space on the cross-axis (vertically). align-content The align-content property can have one of the following values: align-content space-evenly space-around space-between center start end Note: The grid item's total height has to be less than the container's height for the align-content property to have any effect. align-content In the following examples we use a 400 pixels high container, to better demonstrate the align-content property. align-content Example The center value positions the grid items in the middle of the container: center Result: Try it Yourself Â» Example With space-evenly, the grid lines are evenly distributed in the grid container, with equal space on top, bottom and between: space-evenly Result: Try it Yourself Â» Example With space-around, the space between the grid lines are equal, but the space before the first grid item and after the last grid item is set to half of the space between the grid lines: space-around Result: Try it Yourself Â» Example With space-between, the space between the grid lines are equal, but the first grid item is flush with the start edge of the container, and the last grid item is flush with the end edge of the container: space-between Result: Try it Yourself Â» Example The start value positions the grid items at the start of the container: start Result: Try it Yourself Â» Example The end value positions the grid items at the end of the container: end Result: Try it Yourself Â» The place-content Property The place-content property is a shorthand property for the align-content and the justify-content properties. place-content align-content justify-content If the place-content property has two values: place-content place-content: start center; align-content justify-content If the place-content property has one value: place-content place-content: end; align-content justify-content Note: The grid item's total height and width has to be less than the container's height and width for the place-content property to have any effect."
  },
  {
    "document": "place-content Example The center value positions the grid items in the middle of the container (both vertically and horizontally): center Result: Try it Yourself Â» Example The end space-between value aligns the grid lines towards the bottom of the grid container, and aligns the grid items with the same space between them horizontally: end space-between Result: Try it Yourself Â» CSS Grid Container Properties"
  },
  {
    "document": "CSS Grid Item Try it Yourself Â» Grid Items A grid container contains one or more grid items. By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows. The grid-column-start and grid-column-end Properties The grid-column-start property specifies where to start a grid item. grid-column-start The grid-column-end property specifies where to end a grid item. grid-column-end Example Place the first grid item at column-line 1, and let it end on column-line 3: Result: Try it Yourself Â» The grid-column Property The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties. grid-column grid-column-start grid-column-end To place an item, you can refer to line numbers, or use the keyword \"span\" to define how many columns the item will span. Example Place the first grid item at column-line 1, and let it span 2 columns: Result: Try it Yourself Â» Example Make \"item1\" start on column 1 and end before column 4: Result: Try it Yourself Â» Example Make \"item2\" start on column 2 and span 2 columns: Result: Try it Yourself Â» The grid-row-start and grid-row-end Property The grid-row-start property specifies where to start a grid item. grid-row-start The grid-row-end property specifies where to end a grid item. grid-row-end Example Place the first grid item at row line 1, and let it end on row line 3: Result: Try it Yourself Â» The grid-row Property The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties. grid-row grid-row-start grid-row-end To place an item, you can refer to line numbers, or use the keyword \"span\" to define how many rows the item will span: Example Place the first grid item at row-line 1, and let it span 2 rows: Result: Try it Yourself Â» Example Make \"item1\" start on row-line 1 and end before row-line 4: Result: Try it Yourself Â» The grid-area Property The grid-area property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties. grid-area grid-row-start grid-column-start grid-row-end grid-column-end The syntax is grid-row-start / grid-column-start / grid-row-end / grid-column-end. Example Make \"item4\" start on row-line 1 and column-line 2, and end on row-line 3 and column line 2: Result: Try it Yourself Â» Example Make \"item4\" start on row-line 1 and column-line 1, and span 4 rows and 1 column: Result: Try it Yourself Â» Naming Grid Items with grid-area The grid-area property can also be used to assign names to grid items. grid-area The named grid items can then be referred to by the grid-template-areas property of the grid container. grid-template-areas Example Item1 gets the name \"myArea\" and spans all five columns in a five columns grid layout: Result: Try it Yourself Â» Each row is defined by apostrophes (' '). The named grid items in each row is defined inside the apostrophes, separated by a space."
  },
  {
    "document": "Example Let \"myArea\" span three columns in a five columns grid layout (period signs represent items with no name): Result: Try it Yourself Â» Note: A period sign represents a grid item with no name. To define two rows, define the second row inside another set of apostrophes: Example Let \"item1\" span two columns and two rows: Result: Try it Yourself Â» Example Name all grid items, and make a ready-to-use webpage template: Result: Try it Yourself Â» The Order of the Grid Items The grid-area property can also be used to define the order of the grid items. grid-area The first grid item in the HTML code does not have to appear as the first item in the grid. Example Define the order of the grid items: Result: Try it Yourself Â» You can also re-arrange the order for certain screen sizes, with media queries: Example Re-arrange order on small devices: Try it Yourself Â» The justify-self Property The justify-self property is used to align the content of a grid item along the row axis. justify-self Example Result: Try it Yourself Â» The align-self Property The align-self property is used to align the content of a grid item along the column axis. align-self Example Result: Try it Yourself Â» All CSS Grid Item Properties"
  },
  {
    "document": "Responsive Web Design - Introduction What is Responsive Web Design? Responsive web design makes your web page look good on all devices. Responsive web design uses only HTML and CSS. Responsive web design is not a program or a JavaScript. Designing For The Best Experience For All Users Web pages can be viewed using many different devices: desktops, tablets, and phones. Your web page should look good, and be easy to use, regardless of the device. Web pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device: It is called responsive web design when you use CSS and HTML to resize, hide, shrink, enlarge, or move the content to make it look good on any screen."
  },
  {
    "document": "Responsive Web Design - The Viewport What is The Viewport? The viewport is the user's visible area of a web page. The viewport varies with the device, and will be smaller on a mobile phone than on a computer screen. Before tablets and mobile phones, web pages were designed only for computer screens, and it was common for web pages to have a static design and a fixed size. Then, when we started surfing the internet using tablets and mobile phones, fixed size web pages were too large to fit the viewport. To fix this, browsers on those devices scaled down the entire web page to fit the screen. This was not perfect!! But a quick fix. Setting The Viewport HTML5 introduced a method to let web designers take control over the viewport, through the <meta> tag. <meta> You should include the following <meta> viewport element in the <head> section of all your web pages: <meta> <head> This gives the browser instructions on how to control the page's dimensions and scaling. The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device). width=device-width The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser. initial-scale=1.0 Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag: Tip: If you are browsing this page with a phone or a tablet, you can click on the two links above to see the difference. Size Content to The Viewport Users are used to scroll websites vertically on both desktop and mobile devices - but not horizontally! So, if the user is forced to scroll horizontally, or zoom out, to see the whole web page it results in a poor user experience. Some additional rules to follow: 1. Do NOT use large fixed-width elements - For example, if an image has a width wider than the viewport, it causes the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport. 2. Do NOT let the content rely on a particular width to render well - Since screen dimensions and width in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well. 3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute CSS widths for page elements will cause the elements to be too wide for smaller devices. Instead, consider using relative width values, such as width: 100%. Also, be careful of using large absolute positioning values. It may cause the element to fall outside the viewport on small devices."
  },
  {
    "document": "Responsive Web Design - Building a Grid View What is a Grid-View? Many web pages are based on a grid-view, which means that the page is divided into rows and columns. Using a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page. A responsive grid-view often has 6 or 12 columns, and will shrink and expand as you resize the browser window. Building a Grid View Lets start building a grid-view. First ensure that all HTML elements have the box-sizing property set to border-box. This makes sure that the padding and border are included in the total width and height of the elements. box-sizing border-box Add the following at the begnning of your CSS: Read more about the box-sizing property in our CSS Box Sizing chapter. box-sizing The HTML We create a grid container with five grid items (item1 = Header, item2 = Menu, item3 = Main content, item4 = right, item5 = Footer): HTML Here is the complete HTML: The CSS We also want to add some styles and colors to make it look better: Note: The webpage in the example below is responsive, but it does not look good when you resize the browser window to a very small width. In the next chapter you will learn how to fix that! Example Here is the complete CSS:"
  },
  {
    "document": "Responsive Web Design - Media Queries What is a Media Query? Media query is a CSS technique introduced in CSS3. It uses the @media rule to include a block of CSS properties only if a certain condition is true. @media Example If the browser window is 600px or smaller, the background color will be lightblue: Add a Breakpoint Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen. Media queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint. Example Here we use a media query to add a breakpoint at 600px: Another Breakpoint You can add as many breakpoints as you like. We will also insert a breakpoint between tablets and mobile phones. Example Here we use media queries to add breakpoints when screen is max 600px, when screen is min 600px, and when screen is min 768px : Typical Device Breakpoints There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups: Example Orientation: Portrait / Landscape Media queries can also be used to change layout of a page depending on the orientation of the browser. You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation: Example The web page will have a lightblue background if the orientation is in landscape mode: Hide Elements With Media Queries Another common use of media queries, is to hide elements on different screen sizes: Example Change Font Size With Media Queries You can also use media queries to change the font size of an element on different screen sizes: Variable Font Size. Example CSS @media Reference For a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference."
  },
  {
    "document": "Responsive Web Design - Images Resize the browser window to see how the image scales to fit the page. Using The width Property If the width property is set to a percentage and the height property is set to \"auto\", the image will be responsive and scale up and down: width height Example Notice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead. max-width Using The max-width Property If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size: max-width Example Add an Image to The Example Web Page Example Background Images Background images can also respond to resizing and scaling. Here we will show three different methods: 1. If the background-size property is set to \"contain\", the background image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship between the image's width and height): background-size Here is the CSS code: Example 2. If the background-size property is set to \"100% 100%\", the background image will stretch to cover the entire content area: background-size Here is the CSS code: Example 3. If the background-size property is set to \"cover\", the background image will scale to cover the entire content area. Notice that the \"cover\" value keeps the aspect ratio, and some part of the background image may be clipped: background-size Here is the CSS code: Example Different Images for Different Devices A large image can be perfect on a big computer screen, but useless on a small device. Why load a large image when you have to scale it down anyway? To reduce the load, or for any other reasons, you can use media queries to display different images on different devices. Here is one large image and one smaller image that will be displayed on different devices: Example You can use the media query min-device-width, instead of min-width, which checks the device width, instead of the browser width. Then the image will not change when you resize the browser window: min-device-width min-width Example The HTML <picture> Element The HTML <picture> element gives web developers more flexibility in specifying image resources. <picture> The most common use of the <picture> element will be for images used in responsive designs. Instead of having one image that is scaled up or down based on the viewport width, multiple images can be designed to more nicely fill the browser viewport. <picture> The <picture> element works similar to the <video> and <audio> elements. You set up different sources, and the first source that fits the preferences is the one being used: <picture> <video> <audio> Example The srcset attribute is required, and defines the source of the image. srcset The media attribute is optional, and accepts the media queries you find in CSS @media rule."
  },
  {
    "document": "media You should also define an <img> element for browsers that do not support the <picture> element. <img> <picture>"
  },
  {
    "document": "Responsive Web Design - Videos Using The width Property If the width property is set to 100%, the video player will be responsive and scale up and down: width Example Notice that in the example above, the video player can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead. max-width Using The max-width Property If the max-width property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its original size: max-width Example Add a Video to the Example Web Page We want to add a video in our example web page. The video will be resized to always take up all the available space: Example"
  },
  {
    "document": "Responsive Web Design - Frameworks There are many free CSS Frameworks that offer Responsive Design. Using W3.CSS A great way to create a responsive design, is to use a responsive style sheet, like W3.CSS W3.CSS makes it easy to develop sites that look nice at any size! W3.CSS Demo Resize the page to see the responsiveness! London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Paris Paris is the capital of France. The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants. Tokyo Tokyo is the capital of Japan. It is the center of the Greater Tokyo Area, and the most populous metropolitan area in the world. Example To learn more about W3.CSS, read our W3.CSS Tutorial. Bootstrap Another popular framework is Bootstrap. It uses HTML and CSS to make responsive web pages: Example To learn more about Bootstrap, go to our Bootstrap Tutorial. Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free. * no credit card required"
  },
  {
    "document": "Responsive Web Design - Templates W3.CSS Web Site Templates We have created some responsive templates with the W3.CSS framework. You are free to modify, save, share, and use them in all your projects. Tip: All templates below can be hosted for free with W3Schools Spaces. Band Template Art Template Architect Template Coming Soon Template Blog Template Food Blog Template Fashion Blog Template Gourmet Catering Template CV Template Wedding Invitation Template Photo Template Black & White Photo Template Photo III Template Nature Portfolio Template People Portfolio Template People Portfolio II Template Dark Portfolio Template Black & White Portfolio Template Parallax Template Clothing Store Template Interior Design Template Cafe Template Pizza Restaurant Template Modal Restaurant Template Start Page Template Startup Template App Launch Template Marketing Template Marketing / Website Template Web Page Template Social Media Template Analytics Template Apartment Rental Template Hotel Template Travel Template Travel Agency Template House Design Template Screen 50/50 Template Mail Template Kitchen Sink/Demo Template"
  },
  {
    "document": "CSS Templates CSS Layout Templates We have created some responsive starter templates with CSS. You are free to modify, save, share, and use them in all your projects. Header, equal columns and footer: Header, unequal columns and footer: Topnav, content and footer: Sidenav and content: Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free. * no credit card required"
  },
  {
    "document": "CSS Examples CSS Syntax CSS syntax explained CSS Selectors CSS selectors explained CSS How To / Where To CSS how to explained CSS Comments CSS comments explained CSS Colors CSS colors explained CSS Backgrounds CSS background properties explained CSS Borders CSS border properties explained CSS Margins Margin properties explained CSS Padding CSS padding properties explained CSS Height/Width CSS height/width properties explained CSS Box Model CSS box model explained CSS Outline CSS outline properties explained CSS Text CSS text properties explained CSS Fonts Font properties explained CSS Icons CSS icons explained CSS Links CSS link properties explained CSS Lists CSS list properties explained CSS Tables CSS table properties explained CSS Display CSS display properties explained CSS Positioning CSS positioning properties explained CSS Overflow CSS overflow properties explained CSS Floating CSS float properties explained CSS Inline-block CSS inline-block explained CSS Aligning Elements CSS align properties explained CSS Combinators CSS combinators explained CSS Pseudo-classes CSS pseudo-classes explained CSS Pseudo-elements CSS pseudo-elements explained CSS Opacity CSS image opacity explained CSS Navigation Bars CSS navigation bars explained CSS Dropdowns CSS dropdowns explained CSS Image Gallery CSS image gallery explained CSS Image Sprites CSS image sprites explained CSS Attribute Selectors CSS attribute selectors explained CSS Forms CSS forms explained CSS Counters CSS counters explained CSS Website Layout CSS website layout explained CSS Rounded Corners CSS rounded corners explained CSS Border Images CSS border images explained CSS Backgrounds CSS backgrounds explained CSS Gradients CSS gradients explained CSS Shadow Effects CSS shadow effects explained CSS Text Effects CSS text explained CSS Web Fonts CSS web fonts explained CSS 2D Transforms CSS 2D transforms explained CSS 3D Transforms CSS 3D transforms explained CSS Transitions CSS transitions explained CSS Animations CSS animations explained CSS Tooltips CSS tooltips explained CSS Style Images CSS images explained CSS Image Centering CSS image centering explained CSS Image Filters CSS image filters explained CSS Image Shapes CSS image shapes explained CSS Object-fit CSS object-fit explained CSS Object-position CSS object-position explained CSS Buttons CSS buttons explained CSS Pagination CSS pagination explained CSS Multiple Columns CSS multiple columns explained CSS User Interface CSS user interface explained CSS Variables CSS variables explained CSS Box Sizing CSS box sizing explained CSS Media Queries CSS media queries explained CSS Media Queries - More Examples CSS media queries examples explained CSS Flexbox CSS flexbox explained CSS Flex Items CSS flex items explained CSS Flexbox Responsive CSS flexbox responsive explained CSS Grid Intro CSS grid intro explained CSS Grid Columns, Rows and Gap CSS grid columns, rows and gap explained CSS Grid Container CSS grid container explained CSS Grid Item CSS grid item explained CSS Responsive Webdesign CSS responsive webdesign explained"
  },
  {
    "document": "CSS Online Editor CSS Editor With our online CSS editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser. Example My First CSS Example This is a paragraph. Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that lets you make and share your own website. You can change the website's look and how it works by editing the code right in your web browser. It's easy to use and doesn't require any setup: The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your CSS knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, but you can use it for other languages too, such as PHP, Python, Node.js, etc. If you don't know CSS, we suggest that you read our CSS Tutorial from scratch. Build Powerful Websites You can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share It With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "CSS Snippets CSS Snippets Have you ever seen a cool feature on a website and thought \"How do they do that\"? We have collected a bunch of CSS snippets that you can use in your projects, for free: Image Text Blocks Learn How To Â» Alert Buttons Learn How To Â» Loaders  Learn How To Â» Top Navigation Learn How To Â» Animated Search Form Learn How To Â» Hover Dropdowns Learn How To Â» Fixed Sidebar Learn How To Â» How To - Snippets Library For more snippets, you can visit our How To section, that include hundreds of code snippets for HTML, CSS and JavaScript. Go to W3Schools How To section Â»"
  },
  {
    "document": "CSS Quiz You can test your CSS skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about CSS. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the CSS Quiz â¯ If you don't know CSS, we suggest that you read our CSS Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "CSS Exercises Exercises Test your CSS skills with exercises from all categories: Syntax Selectors How To Comments Colors RGB HEX HSL Background Color Background Image Background Repeat Background Attachment Background Shorthand Border Border Width Border Color Border Sides Border Shorthand Rounded Borders Margins Margin Collapse Padding Height and Width Box Model Outline Outline Width Outline Color Outline Shorthand Outline Offset Text Text Alignment Text Decoration Text Transformation Text Spacing Text Shadow Font Family Web Safe Fonts Font Style Font Size Font Shorthand Icons Links Lists Tables Table Size Table Alignment Table Style Table Responsive Display Max Width Position Z-index Overflow Float Clear Inline-block Align Combinators Pseudo Classes Pseudo Elements Opacity Attribute Selectors Forms Counters Units Specificity !important Math Functions Rounded Corners Border Images Multiple Backgrounds Colors Color Keywords Linear Gradients Radial Gradients Conic Gradients Shadow Effects Box Shadow Text Effects Web Fonts 2D Transforms 3D Transforms Transitions Animations Images Image Centering Image Filters Image Shapes Object Fit Object Position Masking Multiple Columns User Interface Variables The property Rule Box Sizing Media Queries Flexbox Flex Container Flex Items Flex Responsive RWD Intro RWD Viewport RWD Grid View RWD Media Queries RWD Images RWD Videos Grid Columns and Rows Grid Container Grid Item Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "CSS and HTML Website Hosting Create a Website with HTML and CSS Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "CSS Syllabus Introduction The W3Schools CSS Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of CSS. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn CSS step by step, from the introduction to creating your first application with CSS. Get Started With CSS Â» Learning Outcomes Note: Are you a teacher teaching CSS? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are CSS Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn CSS for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment CSS, like any other coding language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit CSS code and view the result: CSS Example If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account CSS Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The CSS exam is a test that summarizes the W3Schools CSS syllabus. After passing the exam you get the \"Certified CSS Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach CSS? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "CSS Study Plan Introduction The CSS study plan helps you teach your students CSS step-by-step. Creating a study plan for CSS is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of CSS to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach CSS. The CSS training materials is available for you to include and use in your study plan: CSS Syllabus With the CSS Syllabus, your students will start with the basics, like styling text and changing colors, and move to more advanced topics, like creating layouts with Flexbox, Grid, and responsive design. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about CSS Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 5-week CSS study plan could look like: Image of Sample CSS study plan: Ready to get started? Start with CSS Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach CSS programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "CSS Interview Preparation Try W3Schools' comprehensive Front-End interview preparation feature. A tool that will help you get ready for your next interview. W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance. After the interview training you will get an evaluation of your performance that you can use to improve yourself. Get Started What to expect in a Front-End interview If you are going to a Front-End interview, there are a few things you can expect: Coding Questions: You will be asked coding questions, and you possibly also get a task to solve. Examples of technical questions: Tell me about your experience as a Front-End developer. Tell me about a personal project where you worked on implementing the user interface for a website. Examples of a task: Create a webpage that shows a greeting message to the user. Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day. If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers. Showcase your skills and projects: They would like to see projects to understand your work better. You can include current projects in your portfolio even if they are unfinished. Examples of projects to have in your portfolio: What to do before the interview Before you go to an interview, you should check out the company. It will give you a better understanding of their values and what they do. Check out: Make sure you understand the job description: Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand. You can also ask a friend or a community member to help you. There is a big community of Front-End developers on social media. Reflect on why you are the right fit for this role: Companies hire people they believe will be the right fit. Think about what value you can add to the role and the team. Write them down. It will help you discuss how you are the right candidate for the role. We have created an interview tool to help you prepare: Try it out  What is Front-End Development? Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience. Typical Languages Used in Front-End Development: Career Outlook The demand for Front-End developers is high. You can expect: The Average Salary is $112,328 in the US. Typical Job Titles for a Front-End Developer: Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more. Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!"
  },
  {
    "document": "Try W3Schools interview preparation here: Interview Preperation Best of luck!"
  },
  {
    "document": "W3Schools CSS Bootcamp HTML & CSS Bootcamp Learn More What You Will Learn HTML CSS JavaScript Self-paced Courses Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript. HTML is the standard markup language for Web pages. With HTML you can create your own Website. CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed. JavaScript is the programming language of the Web. This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification. The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification. What You Get 4x Certifications: Certificate of Completion You get sharable certificates that can be added to your CV, Resume or LinkedIn. Check out what it looks like in this example! Three Reasons to Join the Program Learn More How it Works Step 1. Course enrollment Enroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content. Step 2. Complete the course learning modules The courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam. Step 3. Take the exams The exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count. Step 4: Become certified Pass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code. Learn More"
  },
  {
    "document": "W3Schools CSS Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "HTML Tutorial Learn HTML HTML is the standard markup language for Web pages. With HTML you can create your own Website. HTML is easy to learn - You will enjoy it! Easy Learning with HTML \"Try it Yourself\" With our \"Try it Yourself\" editor, you can edit the HTML code and view the result: Example Click on the \"Try it Yourself\" button to see how it works. HTML Examples In this HTML tutorial, you will find more than 200 examples. With our online \"Try it Yourself\" editor, you can edit and test each example yourself! Go to HTML Examples! HTML Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all HTML Exercises HTML Quiz Test Test your HTML skills with our HTML Quiz! Start HTML Quiz! Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. HTML References At W3Schools you will find complete references about HTML elements, attributes, events, color names, entities, character-sets, URL encoding, language codes, HTTP messages, browser support, and more: Kickstart your career Get certified by completing the course Video: HTML for Beginners"
  },
  {
    "document": "HTML Introduction HTML is the standard markup language for creating Web pages. What is HTML? A Simple HTML Document Example Example Explained <!DOCTYPE html> <html> <head> <title> <body> <h1> <p> What is an HTML Element? An HTML element is defined by a start tag, some content, and an end tag: The HTML element is everything from the start tag to the end tag: Note: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag! Web Browsers The purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly. A browser does not display the HTML tags, but uses them to determine how to display the document:  HTML Page Structure Below is a visualization of an HTML page structure: Note: The content inside the <body> section will be displayed in a browser. The content inside the <title> element will be shown in the browser's title bar or in the page's tab. HTML History Since the early days of the World Wide Web, there have been many versions of HTML: This tutorial follows the latest HTML5 standard. Video: HTML Introduction"
  },
  {
    "document": "HTML Editors A simple text editor is all you need to learn HTML. Learn HTML Using Notepad or TextEdit Web pages can be created and modified by using professional HTML editors. However, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac). We believe that using a simple text editor is a good way to learn HTML. Follow the steps below to create your first web page with Notepad or TextEdit. Step 1: Open Notepad (PC) Windows 8 or later: Open the Start Screen (the window symbol at the bottom left on your screen). Type Notepad. Windows 7 or earlier: Open Start > Programs > Accessories > Notepad Step 1: Open TextEdit (Mac) Open Finder > Applications > TextEdit Also change some preferences to get the application to save files correctly. In Preferences > Format > choose \"Plain Text\" Then under \"Open and Save\", check the box that says \"Display HTML files as HTML code instead of formatted text\". Then open a new document to place the code. Step 2: Write Some HTML Write or copy the following HTML code into Notepad:  Step 3: Save the HTML Page Save the file on your computer. Select File > Save as in the Notepad menu. Name the file \"index.htm\" and set the encoding to UTF-8 (which is the preferred encoding for HTML files). Tip: You can use either .htm or .html as file extension. There is no difference; it is up to you. Step 4: View the HTML Page in Your Browser Open the saved HTML file in your favorite browser (double click on the file, or right-click - and choose \"Open with\"). The result will look much like this:  W3Schools Online Editor - \"Try it Yourself\" With our free online editor, you can edit the HTML code and view the result in your browser. It is the perfect tool when you want to test code fast. It also has color coding and the ability to save and share code with others: Example Click on the \"Try it Yourself\" button to see how it works. W3Schools Spaces If you want to create your own website and save your code online, try our free website builder, called W3schools Spaces: W3Schools Spaces W3Schools Spaces Everything you need right in the browser. Video: HTML Editors"
  },
  {
    "document": "HTML Basic Examples In this chapter we will show some basic HTML examples. Don't worry if we use tags you have not learned about yet. HTML Documents All HTML documents must start with a document type declaration: <!DOCTYPE html>. <!DOCTYPE html> The HTML document itself begins with <html> and ends with </html>. <html> </html> The visible part of the HTML document is between <body> and </body>. <body> </body> Example The <!DOCTYPE> Declaration The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly. <!DOCTYPE> It must only appear once, at the top of the page (before any HTML tags). The <!DOCTYPE> declaration is not case sensitive. <!DOCTYPE> The <!DOCTYPE> declaration for HTML5 is: <!DOCTYPE> HTML Headings HTML headings are defined with the <h1> to <h6> tags. <h1> <h6> <h1> defines the most important heading. <h6> defines the least important heading: <h1> <h6> Example HTML Paragraphs HTML paragraphs are defined with the <p> tag: <p> Example HTML Links HTML links are defined with the <a> tag: <a> Example The link's destination is specified in the href attribute. href Attributes are used to provide additional information about HTML elements. You will learn more about attributes in a later chapter. HTML Images HTML images are defined with the <img> tag. <img> The source file (src), alternative text (alt), width, and height are provided as attributes: src alt width height Example How to View HTML Source Have you ever seen a Web page and wondered \"Hey! How did they do that?\" View HTML Source Code: Click CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page. Inspect an HTML Element: Right-click on an element (or a blank area), and choose \"Inspect\" to see what elements are made up of (you will see both the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the Elements or Styles panel that opens."
  },
  {
    "document": "HTML Elements An HTML element is defined by a start tag, some content, and an end tag. HTML Elements The HTML element is everything from the start tag to the end tag: Examples of some HTML elements: Note: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag! Nested HTML Elements HTML elements can be nested (this means that elements can contain other elements). All HTML documents consist of nested HTML elements. The following example contains four HTML elements (<html>, <body>, <h1> and <p>): <html> <body> <h1> <p> Example Example Explained The <html> element is the root element and it defines the whole HTML document. <html> It has a start tag <html> and an end tag </html>. <html> </html> Then, inside the <html> element there is a <body> element: <html> <body> The <body> element defines the document's body. <body> It has a start tag <body> and an end tag </body>. <body> </body> Then, inside the <body> element there are two other elements: <h1> and <p>: <body> <h1> <p> The <h1> element defines a heading. <h1> It has a start tag <h1> and an end tag </h1>: <h1> </h1> The <p> element defines a paragraph. <p> It has a start tag <p> and an end tag </p>: <p> </p> Never Skip the End Tag Some HTML elements will display correctly, even if you forget the end tag: Example However, never rely on this! Unexpected results and errors may occur if you forget the end tag! Empty HTML Elements HTML elements with no content are called empty elements. The <br> tag defines a line break, and is an empty element without a closing tag: <br> Example HTML is Not Case Sensitive HTML tags are not case sensitive: <P> means the same as <p>. <P> <p> The HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML. At W3Schools we always use lowercase tag names. HTML Tag Reference W3Schools' tag reference contains additional information about these tags and their attributes. For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Elements"
  },
  {
    "document": "HTML Attributes HTML attributes provide additional information about HTML elements. HTML Attributes The href Attribute The <a> tag defines a hyperlink. The href attribute specifies the URL of the page the link goes to: <a> href Example You will learn more about links in our HTML Links chapter. The src Attribute The <img> tag is used to embed an image in an HTML page. The src attribute specifies the path to the image to be displayed: <img> src Example There are two ways to specify the URL in the src attribute: src 1. Absolute URL - Links to an external image that is hosted on another website. Example: src=\"https://www.w3schools.com/images/img_girl.jpg\". Notes: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; it can suddenly be removed or changed. 2. Relative URL - Links to an image that is hosted within the website. Here, the URL does not include the domain name. If the URL begins without a slash, it will be relative to the current page. Example: src=\"img_girl.jpg\". If the URL begins with a slash, it will be relative to the domain. Example: src=\"/images/img_girl.jpg\". Tip: It is almost always best to use relative URLs. They will not break if you change domain. The width and height Attributes The <img> tag should also contain the width and height attributes, which specify the width and height of the image (in pixels): <img> width height Example The alt Attribute The required alt attribute for the <img> tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to a slow connection, or an error in the src attribute, or if the user uses a screen reader. alt <img> src Example Example See what happens if we try to display an image that does not exist: You will learn more about images in our HTML Images chapter. The style Attribute The style attribute is used to add styles to an element, such as color, font, size, and more. style Example You will learn more about styles in our HTML Styles chapter. The lang Attribute You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers. lang <html> The following example specifies English as the language: Country codes can also be added to the language code in the lang attribute. So, the first two characters define the language of the HTML page, and the last two characters define the country. lang The following example specifies English as the language and United States as the country: You can see all the language codes in our HTML Language Code Reference. The title Attribute The title attribute defines some extra information about an element."
  },
  {
    "document": "title The value of the title attribute will be displayed as a tooltip when you mouse over the element: Example We Suggest: Always Use Lowercase Attributes The HTML standard does not require lowercase attribute names. The title attribute (and all other attributes) can be written with uppercase or lowercase like title or TITLE. However, W3C recommends lowercase attributes in HTML, and demands lowercase attributes for stricter document types like XHTML. At W3Schools we always use lowercase attribute names. We Suggest: Always Quote Attribute Values The HTML standard does not require quotes around attribute values. However, W3C recommends quotes in HTML, and demands quotes for stricter document types like XHTML. Good: Bad: Sometimes you have to use quotes. This example will not display the title attribute correctly, because it contains a space: Example At W3Schools we always use quotes around attribute values. Single or Double Quotes? Double quotes around attribute values are the most common in HTML, but single quotes can also be used. In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes: Or vice versa: Chapter Summary href <a> src <img> width height <img> alt <img> style lang <html> title HTML Attribute Reference A complete list of all attributes for each HTML element, is listed in our: HTML Attribute Reference. Video: HTML Attributes"
  },
  {
    "document": "HTML Headings HTML headings are titles or subtitles that you want to display on a webpage. Example Heading 1 Heading 2 Heading 3 HTML Headings HTML headings are defined with the <h1> to <h6> tags. <h1> <h6> <h1> defines the most important heading. <h6> defines the least important heading. <h1> <h6> Example Note: Browsers automatically add some white space (a margin) before and after a heading. Headings Are Important Search engines use the headings to index the structure and content of your web pages. Users often skim a page by its headings. It is important to use headings to show the document structure. <h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on. <h1> <h2> <h3> Note: Use HTML headings for headings only. Don't use headings to make text BIG or bold. Bigger Headings Each HTML heading has a default size. However, you can specify the size for any heading with the style attribute, using the CSS font-size property: style font-size Example HTML Tag Reference W3Schools' tag reference contains additional information about these tags and their attributes. For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Headings"
  },
  {
    "document": "HTML Paragraphs A paragraph always starts on a new line, and is usually a block of text. HTML Paragraphs The HTML <p> element defines a paragraph. <p> A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph. Example HTML Display You cannot be sure how HTML will be displayed. Large or small screens, and resized windows will create different results. With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code. The browser will automatically remove any extra spaces and lines when the page is displayed: Example HTML Horizontal Rules The <hr> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule. <hr> The <hr> element is used to separate content (or define a change) in an HTML page: <hr> Example The <hr> tag is an empty tag, which means that it has no end tag. <hr> HTML Line Breaks The HTML <br> element defines a line break. <br> Use <br> if you want a line break (a new line) without starting a new paragraph: <br> Example The <br> tag is an empty tag, which means that it has no end tag. <br> The Poem Problem This poem will display on a single line: Example Solution - The HTML <pre> Element The HTML <pre> element defines preformatted text. <pre> The text inside a <pre> element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks: <pre> Example HTML Tag Reference W3Schools' tag reference contains additional information about HTML elements and their attributes. For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Paragraphs"
  },
  {
    "document": "HTML Styles The HTML style attribute is used to add styles to an element, such as color, font, size, and more. style Example I am Red I am Blue I am Big The HTML Style Attribute Setting the style of an HTML element, can be done with the style attribute. style The HTML style attribute has the following syntax: style The property is a CSS property. The value is a CSS value. You will learn more about CSS later in this tutorial. Background Color The CSS background-color property defines the background color for an HTML element. background-color Example Set the background color for a page to powderblue: Example Set background color for two different elements: Text Color The CSS color property defines the text color for an HTML element: color Example Fonts The CSS font-family property defines the font to be used for an HTML element: font-family Example Text Size The CSS font-size property defines the text size for an HTML element: font-size Example Text Alignment The CSS text-align property defines the horizontal text alignment for an HTML element: text-align Example Chapter Summary style background-color color font-family font-size text-align Video: HTML Styles"
  },
  {
    "document": "HTML Text Formatting HTML contains several elements for defining text with a special meaning. Example This text is bold This text is italic This is subscript and superscript HTML Formatting Elements Formatting elements were designed to display special types of text: <b> <strong> <i> <em> <mark> <small> <del> <ins> <sub> <sup> HTML <b> and <strong> Elements The HTML <b> element defines bold text, without any extra importance. <b> Example The HTML <strong> element defines text with strong importance. The content inside is typically displayed in bold. <strong> Example HTML <i> and <em> Elements The HTML <i> element defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic. <i> Tip: The <i> tag is often used to indicate a technical term, a phrase from another language, a thought, a ship name, etc. <i> Example The HTML <em> element defines emphasized text. The content inside is typically displayed in italic. <em> Tip: A screen reader will pronounce the words in <em> with an emphasis, using verbal stress. <em> Example HTML <small> Element The HTML <small> element defines smaller text: <small> Example HTML <mark> Element The HTML <mark> element defines text that should be marked or highlighted: <mark> Example HTML <del> Element The HTML <del> element defines text that has been deleted from a document. Browsers will usually strike a line through deleted text: <del> Example HTML <ins> Element The HTML <ins> element defines a text that has been inserted into a document. Browsers will usually underline inserted text: <ins> Example HTML <sub> Element The HTML <sub> element defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font. Subscript text can be used for chemical formulas, like H2O: <sub> Example HTML <sup> Element The HTML <sup> element defines superscript text. Superscript text appears half a character above the normal line, and is sometimes rendered in a smaller font. Superscript text can be used for footnotes, like WWW[1]: <sup> Example HTML Text Formatting Elements For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Formatting"
  },
  {
    "document": "HTML Quotation and Citation Elements In this chapter we will go through the <blockquote>,<q>, <abbr>, <address>, <cite>, and <bdo> HTML elements. <blockquote> <q> <abbr> <address> <cite> <bdo> Example Here is a quote from WWF's website: HTML <blockquote> for Quotations The HTML <blockquote> element defines a section that is quoted from another source. <blockquote> Browsers usually indent <blockquote> elements. <blockquote> Example HTML <q> for Short Quotations The HTML <q> tag defines a short quotation. <q> Browsers normally insert quotation marks around the quotation. Example HTML <abbr> for Abbreviations The HTML <abbr> tag defines an abbreviation or an acronym, like \"HTML\", \"CSS\", \"Mr.\", \"Dr.\", \"ASAP\", \"ATM\". <abbr> Marking abbreviations can give useful information to browsers, translation systems and search-engines. Tip: Use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element. Example HTML <address> for Contact Information The HTML <address> tag defines the contact information for the author/owner of a document or an article. <address> The contact information can be an email address, URL, physical address, phone number, social media handle, etc. The text in the <address> element usually renders in italic, and browsers will always add a line break before and after the <address> element. <address> <address> Example HTML <cite> for Work Title The HTML <cite> tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.). <cite> Note: A person's name is not the title of a work. The text in the <cite> element usually renders in italic. <cite> Example HTML <bdo> for Bi-Directional Override BDO stands for Bi-Directional Override. The HTML <bdo> tag is used to override the current text direction: <bdo> Example HTML Quotation and Citation Elements For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Comments HTML comments are not displayed in the browser, but they can help document your HTML source code. HTML Comment Tag You can add comments to your HTML source by using the following syntax: Notice that there is an exclamation point (!) in the start tag, but not in the end tag. Note: Comments are not displayed by the browser, but they can help document your HTML source code. Add Comments With comments you can place notifications and reminders in your HTML code: Example Hide Content Comments can be used to hide content. This can be helpful if you hide content temporarily: Example You can also hide more than one line. Everything between the <!-- and the --> will be hidden from the display. <!-- --> Example Hide a section of HTML code: Comments are also great for debugging HTML, because you can comment out HTML lines of code, one at a time, to search for errors. Hide Inline Content Comments can be used to hide parts in the middle of the HTML code. Example Hide a part of a paragraph: Video: HTML Comments"
  },
  {
    "document": "HTML Colors HTML colors are specified with predefined color names, or with RGB, HEX, HSL, RGBA, or HSLA values. Color Names In HTML, a color can be specified by using a color name: Try it Yourself Â» HTML supports 140 standard color names. Background Color You can set the background color for HTML elements: Example Text Color You can set the color of text: Hello World Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Example Border Color You can set the color of borders: Hello World Hello World Hello World Example Color Values In HTML, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values. The following three <div> elements have their background color set with RGB, HEX, and HSL values: The following two <div> elements have their background color set with RGBA and HSLA values, which add an Alpha channel to the color (here we have 50% transparency): Example Learn more about Color Values You will learn more about RGB, HEX and HSL in the next chapters. Video: HTML Colors"
  },
  {
    "document": "HTML Colors HTML colors are specified with predefined color names, or with RGB, HEX, HSL, RGBA, or HSLA values. Color Names In HTML, a color can be specified by using a color name: Try it Yourself Â» HTML supports 140 standard color names. Background Color You can set the background color for HTML elements: Example Text Color You can set the color of text: Hello World Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Example Border Color You can set the color of borders: Hello World Hello World Hello World Example Color Values In HTML, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values. The following three <div> elements have their background color set with RGB, HEX, and HSL values: The following two <div> elements have their background color set with RGBA and HSLA values, which add an Alpha channel to the color (here we have 50% transparency): Example Learn more about Color Values You will learn more about RGB, HEX and HSL in the next chapters. Video: HTML Colors"
  },
  {
    "document": "HTML RGB and RGBA Colors An RGB color value represents RED, GREEN, and BLUE light sources. An RGBA color value is an extension of RGB with an Alpha channel (opacity). RGB Color Values In HTML, a color can be specified as an RGB value, using this formula: rgb(red, green, blue) Each parameter (red, green, and blue) defines the intensity of the color with a value between 0 and 255. This means that there are 256 x 256 x 256 = 16777216 possible colors! For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255), and the other two (green and blue) are set to 0. Another example, rgb(0, 255, 0) is displayed as green, because green is set to its highest value (255), and the other two (red and blue) are set to 0. To display black, set all color parameters to 0, like this: rgb(0, 0, 0). To display white, set all color parameters to 255, like this: rgb(255, 255, 255). Example Experiment by mixing the RGB values below:  RED GREEN BLUE Shades of Gray Shades of gray are often defined using equal values for all three parameters: Example RGBA Color Values RGBA color values are an extension of RGB color values with an Alpha channel - which specifies the opacity for a color. An RGBA color value is specified with: rgba(red, green, blue, alpha) The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all): Example Experiment by mixing the RGBA values below:  RED GREEN BLUE ALPHA"
  },
  {
    "document": "HTML HEX Colors A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. HEX Color Values In HTML, a color can be specified using a hexadecimal value in the form: #rrggbb Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255). For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other two (green and blue) are set to 00. Another example, #00ff00 is displayed as green, because green is set to its highest value (ff), and the other two (red and blue) are set to 00. To display black, set all color parameters to 00, like this: #000000. To display white, set all color parameters to ff, like this: #ffffff. Experiment by mixing the HEX values below:  RED GREEN BLUE Example Shades of Gray Shades of gray are often defined using equal values for all three parameters: Example"
  },
  {
    "document": "HTML HSL and HSLA Colors HSL stands for hue, saturation, and lightness. HSLA color values are an extension of HSL with an Alpha channel (opacity). HSL Color Values In HTML, a color can be specified using hue, saturation, and lightness (HSL) in the form: hsl(hue, saturation, lightness) Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue. Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color. Lightness is also a percentage value. 0% is black, and 100% is white. Experiment by mixing the HSL values below:  HUE SATURATION LIGHTNESS Example Saturation Saturation can be described as the intensity of a color. 100% is pure color, no shades of gray. 50% is 50% gray, but you can still see the color. 0% is completely gray; you can no longer see the color. Example Lightness The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light), and 100% means full lightness (white). Example Shades of Gray Shades of gray are often defined by setting the hue and saturation to 0, and adjusting the lightness from 0% to 100% to get darker/lighter shades: Example HSLA Color Values HSLA color values are an extension of HSL color values, with an Alpha channel - which specifies the opacity for a color. An HSLA color value is specified with: hsla(hue, saturation, lightness, alpha) The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all): Experiment by mixing the HSLA values below:  HUE SATURATION LIGHTNESS ALPHA Example"
  },
  {
    "document": "HTML Styles - CSS CSS stands for Cascading Style Sheets. CSS saves a lot of work. It can control the layout of multiple web pages all at once. CSS = Styles and Colors What is CSS? Cascading Style Sheets (CSS) is used to format the layout of a webpage. With CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more! Tip: The word cascading means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \"blue\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)! Using CSS CSS can be added to HTML documents in 3 ways: style <style> <head> <link> The most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself. Inline CSS An inline CSS is used to apply a unique style to a single HTML element. An inline CSS uses the style attribute of an HTML element. style The following example sets the text color of the <h1> element to blue, and the text color of the <p> element to red: <h1> <p> Example Internal CSS An internal CSS is used to define a style for a single HTML page. An internal CSS is defined in the <head> section of an HTML page, within a <style> element. <head> <style> The following example sets the text color of ALL the <h1> elements (on that page) to blue, and the text color of ALL the <p> elements to red. In addition, the page will be displayed with a \"powderblue\" background color: <h1> <p> Example External CSS An external style sheet is used to define the style for many HTML pages. To use an external style sheet, add a link to it in the <head> section of each HTML page: <head> Example The external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension. Here is what the \"styles.css\" file looks like: \"styles.css\": Tip: With an external style sheet, you can change the look of an entire web site, by changing one file! CSS Colors, Fonts and Sizes Here, we will demonstrate some commonly used CSS properties. You will learn more about them later. The CSS color property defines the text color to be used. color The CSS font-family property defines the font to be used. font-family The CSS font-size property defines the text size to be used."
  },
  {
    "document": "font-size Example Use of CSS color, font-family and font-size properties: CSS Border The CSS border property defines a border around an HTML element. border Tip: You can define a border for nearly all HTML elements. Example Use of CSS border property: CSS Padding The CSS padding property defines a padding (space) between the text and the border. padding Example Use of CSS border and padding properties: CSS Margin The CSS margin property defines a margin (space) outside the border. margin Example Use of CSS border and margin properties: Link to External CSS External style sheets can be referenced with a full URL or with a path relative to the current web page. Example This example uses a full URL to link to a style sheet: Try it Yourself Â» Example This example links to a style sheet located in the html folder on the current web site: Try it Yourself Â» Example This example links to a style sheet located in the same folder as the current page: Try it Yourself Â» You can read more about file paths in the chapter HTML File Paths. Chapter Summary style <style> <link> <head> color font-family font-size border padding margin Tip: You can learn much more about CSS in our CSS Tutorial. HTML Style Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML CSS"
  },
  {
    "document": "HTML Links Links are found in nearly all web pages. Links allow users to click their way from page to page. HTML Links - Hyperlinks HTML links are hyperlinks. You can click on a link and jump to another document. When you move the mouse over a link, the mouse arrow will turn into a little hand. Note: A link does not have to be text. A link can be an image or any other HTML element! HTML Links - Syntax The HTML <a> tag defines a hyperlink. It has the following syntax: <a> The most important attribute of the <a> element is the href attribute, which indicates the link's destination. <a> href The link text is the part that will be visible to the reader. Clicking on the link text, will send the reader to the specified URL address. Example This example shows how to create a link to W3Schools.com: By default, links will appear as follows in all browsers: Tip: Links can of course be styled with CSS, to get another look! HTML Links - The target Attribute By default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link. The target attribute specifies where to open the linked document. target The target attribute can have one of the following values: target _self _blank _parent _top Example Use target=\"_blank\" to open the linked document in a new browser window or tab: Absolute URLs vs. Relative URLs Both examples above are using an absolute URL (a full web address) in the href attribute. href A local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part): Example HTML Links - Use an Image as a Link To use an image as a link, just put the <img> tag inside the <a> tag: <img> <a> Example Link to an Email Address Use mailto: inside the href attribute to create a link that opens the user's email program (to let them send a new email): mailto: href Example Button as a Link To use an HTML button as a link, you have to add some JavaScript code. JavaScript allows you to specify what happens at certain events, such as a click of a button: Example Tip: Learn more about JavaScript in our JavaScript Tutorial. Link Titles The title attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element. title Example More on Absolute URLs and Relative URLs Example Use a full URL to link to a web page: Try it Yourself Â» Example Link to a page located in the html folder on the current web site: Try it Yourself Â» Example Link to a page located in the same folder as the current page: Try it Yourself Â» You can read more about file paths in the chapter HTML File Paths."
  },
  {
    "document": "Chapter Summary <a> href target <img> <a> mailto: href HTML Link Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Links"
  },
  {
    "document": "HTML Links Links are found in nearly all web pages. Links allow users to click their way from page to page. HTML Links - Hyperlinks HTML links are hyperlinks. You can click on a link and jump to another document. When you move the mouse over a link, the mouse arrow will turn into a little hand. Note: A link does not have to be text. A link can be an image or any other HTML element! HTML Links - Syntax The HTML <a> tag defines a hyperlink. It has the following syntax: <a> The most important attribute of the <a> element is the href attribute, which indicates the link's destination. <a> href The link text is the part that will be visible to the reader. Clicking on the link text, will send the reader to the specified URL address. Example This example shows how to create a link to W3Schools.com: By default, links will appear as follows in all browsers: Tip: Links can of course be styled with CSS, to get another look! HTML Links - The target Attribute By default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link. The target attribute specifies where to open the linked document. target The target attribute can have one of the following values: target _self _blank _parent _top Example Use target=\"_blank\" to open the linked document in a new browser window or tab: Absolute URLs vs. Relative URLs Both examples above are using an absolute URL (a full web address) in the href attribute. href A local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part): Example HTML Links - Use an Image as a Link To use an image as a link, just put the <img> tag inside the <a> tag: <img> <a> Example Link to an Email Address Use mailto: inside the href attribute to create a link that opens the user's email program (to let them send a new email): mailto: href Example Button as a Link To use an HTML button as a link, you have to add some JavaScript code. JavaScript allows you to specify what happens at certain events, such as a click of a button: Example Tip: Learn more about JavaScript in our JavaScript Tutorial. Link Titles The title attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element. title Example More on Absolute URLs and Relative URLs Example Use a full URL to link to a web page: Try it Yourself Â» Example Link to a page located in the html folder on the current web site: Try it Yourself Â» Example Link to a page located in the same folder as the current page: Try it Yourself Â» You can read more about file paths in the chapter HTML File Paths."
  },
  {
    "document": "Chapter Summary <a> href target <img> <a> mailto: href HTML Link Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Links"
  },
  {
    "document": "HTML Links - Different Colors An HTML link is displayed in a different color depending on whether it has been visited, is unvisited, or is active. HTML Link Colors By default, a link will appear like this (in all browsers): You can change the link state colors, by using CSS: Example Here, an unvisited link will be green with no underline. A visited link will be pink with no underline. An active link will be yellow and underlined. In addition, when mousing over a link (a:hover) it will become red and underlined: Link Buttons A link can also be styled as a button, by using CSS: Example To learn more about CSS, go to our CSS Tutorial. HTML Link Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Links - Create Bookmarks HTML links can be used to create bookmarks, so that readers can jump to specific parts of a web page. Create a Bookmark in HTML Bookmarks can be useful if a web page is very long. To create a bookmark - first create the bookmark, then add a link to it. When the link is clicked, the page will scroll down or up to the location with the bookmark. Example First, use the id attribute to create a bookmark: id Then, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page: Example You can also add a link to a bookmark on another page: Chapter Summary id href HTML Link Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Images Images can improve the design and the appearance of a web page. Example Example Example HTML Images Syntax The HTML <img> tag is used to embed an image in a web page. <img> Images are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image. <img> The <img> tag is empty, it contains attributes only, and does not have a closing tag. <img> The <img> tag has two required attributes: <img> Syntax The src Attribute The required src attribute specifies the path (URL) to the image. src Note: When a web page loads, it is the browser, at that moment, that gets the image from a web server and inserts it into the page. Therefore, make sure that the image actually stays in the same spot in relation to the web page, otherwise your visitors will get a broken link icon. The broken link icon and the alt text are shown if the browser cannot find the image. alt Example The alt Attribute The required alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader). alt The value of the alt attribute should describe the image: alt Example If a browser cannot find an image, it will display the value of the alt attribute: alt Example Tip: A screen reader is a software program that reads the HTML code, and allows the user to \"listen\" to the content. Screen readers are useful for people who are visually impaired or learning disabled. Image Size - Width and Height You can use the style attribute to specify the width and height of an image. style Example Alternatively, you can use the width and height attributes: width height Example The width and height attributes always define the width and height of the image in pixels. width height Note: Always specify the width and height of an image. If width and height are not specified, the web page might flicker while the image loads. Width and Height, or Style? The width, height, and style attributes are all valid in HTML. width height style However, we suggest using the style attribute. It prevents styles sheets from changing the size of images: style Example Images in Another Folder If you have your images in a sub-folder, you must include the folder name in the src attribute: src Example Images on Another Server/Website Some web sites point to an image on another server. To point to an image on another server, you must specify an absolute (full) URL in the src attribute: src Example Notes on external images: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; they can suddenly be removed or changed."
  },
  {
    "document": "Animated Images HTML allows animated GIFs: Example Image as a Link To use an image as a link, put the <img> tag inside the <a> tag: <img> <a> Example Image Floating Use the CSS float property to let the image float to the right or to the left of a text: float Example Tip: To learn more about CSS Float, read our CSS Float Tutorial. Common Image Formats Here are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera): Chapter Summary <img> src alt width height width height float Note: Loading large images takes time, and can slow down your web page. Use images carefully. HTML Image Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Images"
  },
  {
    "document": "HTML Images Images can improve the design and the appearance of a web page. Example Example Example HTML Images Syntax The HTML <img> tag is used to embed an image in a web page. <img> Images are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image. <img> The <img> tag is empty, it contains attributes only, and does not have a closing tag. <img> The <img> tag has two required attributes: <img> Syntax The src Attribute The required src attribute specifies the path (URL) to the image. src Note: When a web page loads, it is the browser, at that moment, that gets the image from a web server and inserts it into the page. Therefore, make sure that the image actually stays in the same spot in relation to the web page, otherwise your visitors will get a broken link icon. The broken link icon and the alt text are shown if the browser cannot find the image. alt Example The alt Attribute The required alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader). alt The value of the alt attribute should describe the image: alt Example If a browser cannot find an image, it will display the value of the alt attribute: alt Example Tip: A screen reader is a software program that reads the HTML code, and allows the user to \"listen\" to the content. Screen readers are useful for people who are visually impaired or learning disabled. Image Size - Width and Height You can use the style attribute to specify the width and height of an image. style Example Alternatively, you can use the width and height attributes: width height Example The width and height attributes always define the width and height of the image in pixels. width height Note: Always specify the width and height of an image. If width and height are not specified, the web page might flicker while the image loads. Width and Height, or Style? The width, height, and style attributes are all valid in HTML. width height style However, we suggest using the style attribute. It prevents styles sheets from changing the size of images: style Example Images in Another Folder If you have your images in a sub-folder, you must include the folder name in the src attribute: src Example Images on Another Server/Website Some web sites point to an image on another server. To point to an image on another server, you must specify an absolute (full) URL in the src attribute: src Example Notes on external images: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; they can suddenly be removed or changed."
  },
  {
    "document": "Animated Images HTML allows animated GIFs: Example Image as a Link To use an image as a link, put the <img> tag inside the <a> tag: <img> <a> Example Image Floating Use the CSS float property to let the image float to the right or to the left of a text: float Example Tip: To learn more about CSS Float, read our CSS Float Tutorial. Common Image Formats Here are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera): Chapter Summary <img> src alt width height width height float Note: Loading large images takes time, and can slow down your web page. Use images carefully. HTML Image Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Images"
  },
  {
    "document": "HTML Image Maps With HTML image maps, you can create clickable areas on an image. Image Maps The HTML <map> tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more <area> tags. <map> <area> Try to click on the computer, phone, or the cup of coffee in the image below: Example Here is the HTML source code for the image map above: How Does it Work? The idea behind an image map is that you should be able to perform different actions depending on where in the image you click. To create an image map you need an image, and some HTML code that describes the clickable areas. The Image The image is inserted using the <img> tag. The only difference from other images is that you must add a usemap attribute: <img> usemap The usemap value starts with a hash tag # followed by the name of the image map, and is used to create a relationship between the image and the image map. usemap # Tip: You can use any image as an image map! Create Image Map Then, add a <map> element. <map> The <map> element is used to create an image map, and is linked to the image by using the required name attribute: <map> name The name attribute must have the same value as the <img>'s usemap attribute . name <img> usemap The Areas Then, add the clickable areas. A clickable area is defined using an <area> element. <area> Shape You must define the shape of the clickable area, and you can choose one of these values: rect circle poly default You must also define some coordinates to be able to place the clickable area onto the image. Shape=\"rect\" The coordinates for shape=\"rect\" come in pairs, one for the x-axis and one for the y-axis. shape=\"rect\" So, the coordinates 34,44 is located 34 pixels from the left margin and 44 pixels from the top: 34,44 The coordinates 270,350 is located 270 pixels from the left margin and 350 pixels from the top: 270,350 Now we have enough data to create a clickable rectangular area: Example This is the area that becomes clickable and will send the user to the page \"computer.htm\": Shape=\"circle\" To add a circle area, first locate the coordinates of the center of the circle: 337,300 337,300 Then specify the radius of the circle: 44 pixels 44 Now you have enough data to create a clickable circular area: Example This is the area that becomes clickable and will send the user to the page \"coffee.htm\": Shape=\"poly\" The shape=\"poly\" contains several coordinate points, which creates a shape formed with straight lines (a polygon). shape=\"poly\" This can be used to create any shape. Like maybe a croissant shape! How can we make the croissant in the image below become a clickable link?"
  },
  {
    "document": "We have to find the x and y coordinates for all edges of the croissant: The coordinates come in pairs, one for the x-axis and one for the y-axis: Example This is the area that becomes clickable and will send the user to the page \"croissant.htm\": Image Map and JavaScript A clickable area can also trigger a JavaScript function. Add a click event to the <area> element to execute a JavaScript function: click <area> Example Here, we use the onclick attribute to execute a JavaScript function when the area is clicked: Chapter Summary <map> <area> usemap <img> HTML Image Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Background Images A background image can be specified for almost any HTML element. Background Image on an HTML element To add a background image on an HTML element, use the HTML style attribute and the CSS background-image property: style background-image Example Add a background image on a <p> element: You can also specify the background image in the <style> element, in the <head> section: <style> <head> Example Specify the background image in the <style> element: <style> Background Image on a Page If you want the entire page to have a background image, you must specify the background image on the <body> element: <body> Example Add a background image for the entire page: Background Repeat If the background image is smaller than the element, the image will repeat itself, horizontally and vertically, until it reaches the end of the element: Example To avoid the background image from repeating itself, set the background-repeat property to no-repeat. background-repeat no-repeat Example Background Cover If you want the background image to cover the entire element, you can set the background-size property to cover. background-size cover. Also, to make sure the entire element is always covered, set the background-attachment property to fixed: background-attachment fixed: This way, the background image will cover the entire element, with no stretching (the image will keep its original proportions): Example Background Stretch If you want the background image to stretch to fit the entire element, you can set the background-size property to 100% 100%: background-size 100% 100% Try resizing the browser window, and you will see that the image will stretch, but always cover the entire element. Example Learn More CSS From the examples above you have learned that background images can be styled by using the CSS background properties. To learn more about CSS background properties, study our CSS Background Tutorial."
  },
  {
    "document": "HTML <picture> Element The HTML <picture> element allows you to display different pictures for different devices or screen sizes. <picture> The HTML <picture> Element The HTML <picture> element gives web developers more flexibility in specifying image resources. <picture> The <picture> element contains one or more <source> elements, each referring to different images through the srcset attribute. This way the browser can choose the image that best fits the current view and/or device. <picture> <source> srcset Each <source> element has a media attribute that defines when the image is the most suitable. <source> media Example Show different images for different screen sizes: Note: Always specify an <img> element as the last child element of the <picture> element. The <img> element is used by browsers that do not support the <picture> element, or if none of the <source> tags match. <img> <picture> <img> <picture> <source> When to use the Picture Element There are two main purposes for the <picture> element: <picture> 1. Bandwidth If you have a small screen or device, it is not necessary to load a large image file. The browser will use the first <source> element with matching attribute values, and ignore any of the following elements. <source> 2. Format Support Some browsers or devices may not support all image formats. By using the <picture> element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements. <picture> Example The browser will use the first image format it recognizes: Note: The browser will use the first <source> element with matching attribute values, and ignore any following <source> elements. <source> <source> HTML Image Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Favicon A favicon is a small image displayed next to the page title in the browser tab. How To Add a Favicon in HTML You can use any image you like as your favicon. You can also create your own favicon on sites like https://www.favicon.cc. Tip: A favicon is a small image, so it should be a simple image with high contrast. A favicon image is displayed to the left of the page title in the browser tab, like this: To add a favicon to your website, either save your favicon image to the root directory of your webserver, or create a folder in the root directory called images, and save your favicon image in this folder. A common name for a favicon image is \"favicon.ico\". Next, add a <link> element to your \"index.html\" file, after the <title> element, like this: <link> <title> Example Now, save the \"index.html\" file and reload it in your browser. Your browser tab should now display your favicon image to the left of the page title. Favicon File Format Support The following table shows the file format support for a favicon image: Chapter Summary <link> HTML Link Tag For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Page Title Every web page should have a page title to describe the meaning of the page. The Title Element The <title> element adds a title to your page: <title> Example The title is shown in the browser's title bar:  What is a Good Title? The title should describe the content and the meaning of the page. The page title is very important for search engine optimization (SEO). The text is used by search engine algorithms to decide the order when listing pages in search results. The <title> element: <title> So, try to make the title as accurate and meaningful as possible! HTML Title Tag For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Tables HTML tables allow web developers to arrange data into rows and columns. Example Define an HTML Table A table in HTML consists of table cells inside rows and columns. Example A simple HTML table: Table Cells Each table cell is defined by a <td> and a </td> tag. <td> </td> td stands for table data. td Everything between <td> and </td> is the content of a table cell. <td> </td> Example Note: A table cell can contain all sorts of HTML elements: text, images, lists, links, other tables, etc. Table Rows Each table row starts with a <tr> and ends with a </tr> tag. <tr> </tr> tr stands for table row. tr Example You can have as many rows as you like in a table; just make sure that the number of cells are the same in each row. Note: There are times when a row can have less or more cells than another. You will learn about that in a later chapter. Table Headers Sometimes you want your cells to be table header cells. In those cases use the <th> tag instead of the <td> tag: <th> <td> th stands for table header. th Example Let the first row be table header cells: By default, the text in <th> elements are bold and centered, but you can change that with CSS. <th> HTML Table Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Tables Styling Tables Filter Table Sort Table Responsive Table Zebra Striped Table"
  },
  {
    "document": "HTML Tables HTML tables allow web developers to arrange data into rows and columns. Example Define an HTML Table A table in HTML consists of table cells inside rows and columns. Example A simple HTML table: Table Cells Each table cell is defined by a <td> and a </td> tag. <td> </td> td stands for table data. td Everything between <td> and </td> is the content of a table cell. <td> </td> Example Note: A table cell can contain all sorts of HTML elements: text, images, lists, links, other tables, etc. Table Rows Each table row starts with a <tr> and ends with a </tr> tag. <tr> </tr> tr stands for table row. tr Example You can have as many rows as you like in a table; just make sure that the number of cells are the same in each row. Note: There are times when a row can have less or more cells than another. You will learn about that in a later chapter. Table Headers Sometimes you want your cells to be table header cells. In those cases use the <th> tag instead of the <td> tag: <th> <td> th stands for table header. th Example Let the first row be table header cells: By default, the text in <th> elements are bold and centered, but you can change that with CSS. <th> HTML Table Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Tables Styling Tables Filter Table Sort Table Responsive Table Zebra Striped Table"
  },
  {
    "document": "HTML Table Borders HTML tables can have borders of different styles and shapes. How To Add a Border To add a border, use the CSS border property on table, th, and td elements: border table th td Example Collapsed Table Borders To avoid having double borders like in the example above, set the CSS border-collapse property to collapse. border-collapse collapse This will make the borders collapse into a single border: Example Style Table Borders If you set a background color of each cell, and give the border a white color (the same as the document background), you get the impression of an invisible border: Example Round Table Borders With the border-radius property, the borders get rounded corners: border-radius Example Skip the border around the table by leaving out table from the css selector: table Example Dotted Table Borders With the border-style property, you can set the appearance of the border. border-style The following values are allowed: dotted dashed solid double groove ridge inset outset none hidden Example Border Color With the border-color property, you can set the color of the border. border-color Example"
  },
  {
    "document": "HTML Table Sizes HTML tables can have different sizes for each column, row or the entire table. Use the style attribute with the width or height properties to specify the size of a table, row or column. style width height HTML Table Width To set the width of a table, add the style attribute to the <table> element: style <table> Example Set the width of the table to 100%: Note: Using a percentage as the size unit for a width means how wide will this element be compared to its parent element, which in this case is the <body> element. <body> HTML Table Column Width To set the size of a specific column, add the style attribute on a <th> or <td> element: style <th> <td> Example Set the width of the first column to 70%: HTML Table Row Height To set the height of a specific row, add the style attribute on a table row element: style Example Set the height of the second row to 200 pixels:"
  },
  {
    "document": "HTML Table Headers HTML tables can have headers for each column or row, or for many columns/rows. HTML Table Headers Table headers are defined with th elements. Each th element represents a table cell. th th Example Vertical Table Headers To use the first column as table headers, define the first cell in each row as a <th> element: <th> Example Align Table Headers By default, table headers are bold and centered: To left-align the table headers, use the CSS text-align property: text-align Example Header for Multiple Columns You can have a header that spans over two or more columns. To do this, use the colspan attribute on the <th> element: colspan <th> Example You will learn more about colspan and rowspan in the Table colspan & rowspan chapter. Table Caption You can add a caption that serves as a heading for the entire table. To add a caption to a table, use the <caption> tag: <caption> Example Note: The <caption> tag should be inserted immediately after the <table> tag. <caption> <table>"
  },
  {
    "document": "HTML Table Padding & Spacing HTML tables can adjust the padding inside the cells, and also the space between the cells. HTML Table - Cell Padding Cell padding is the space between the cell edges and the cell content. By default the padding is set to 0. To add padding on table cells, use the CSS padding property: padding Example To add padding only above the content, use the padding-top property. padding-top Add padding to the other sides with the padding-bottom, padding-left, and padding-right properties: padding-bottom padding-left padding-right Example HTML Table - Cell Spacing Cell spacing is the space between each cell. By default the space is set to 2 pixels. To change the space between table cells, use the CSS border-spacing property on the table element: border-spacing table Example"
  },
  {
    "document": "HTML Table Colspan & Rowspan HTML tables can have cells that span over multiple rows and/or columns. HTML Table - Colspan To make a cell span over multiple columns, use the colspan attribute: colspan Example Note: The value of the colspan attribute represents the number of columns to span. colspan HTML Table - Rowspan To make a cell span over multiple rows, use the rowspan attribute: rowspan Example Note: The value of the rowspan attribute represents the number of rows to span. rowspan"
  },
  {
    "document": "HTML Table Styling Use CSS to make your tables look better. HTML Table - Zebra Stripes If you add a background color on every other table row, you will get a nice zebra stripes effect. To style every other table row element, use the :nth-child(even) selector like this: :nth-child(even) Example Note: If you use (odd) instead of (even), the styling will occur on row 1,3,5 etc. instead of 2,4,6 etc. (odd) (even) HTML Table - Vertical Zebra Stripes To make vertical zebra stripes, style every other column, instead of every other row. Set the :nth-child(even) for table data elements like this: :nth-child(even) Example Note: Put the :nth-child() selector on both th and td elements if you want to have the styling on both headers and regular table cells. :nth-child() th td Combine Vertical and Horizontal Zebra Stripes You can combine the styling from the two examples above and you will have stripes on every other row and every other column. If you use a transparent color you will get an overlapping effect. Use an rgba() color to specify the transparency of the color: rgba() Example Horizontal Dividers If you specify borders only at the bottom of each table row, you will have a table with horizontal dividers. Add the border-bottom property to all tr elements to get horizontal dividers: border-bottom tr Example Hoverable Table Use the :hover selector on tr to highlight table rows on mouse over: :hover tr Example"
  },
  {
    "document": "HTML Table Colgroup The <colgroup> element is used to style specific columns of a table. <colgroup> HTML Table Colgroup If you want to style the first two columns of a table, use the <colgroup> and <col> elements. <colgroup> <col> The <colgroup> element should be used as a container for the column specifications. <colgroup> Each group is specified with a <col> element. <col> The span attribute specifies how many columns get the style. span The style attribute specifies the style to give the columns. style Note: There is a very limited selection of legal CSS properties for colgroups. Example Note: The <colgroup> tag must be a child of a <table> element and should be placed before any other table elements, like <thead>, <tr>, <td> etc., but after the <caption> element, if present. <colgroup> <table> <thead> <tr> <td> <caption> Legal CSS Properties There is only a very limited selection of CSS properties that are allowed to be used in the colgroup: width property visibility property background properties border properties width visibility background border All other CSS properties will have no effect on your tables. Multiple Col Elements If you want to style multiple columns with different styles, use more than one <col> element inside the <colgroup>: <col> <colgroup> Example Empty Colgroups If you want to style columns in the middle of a table, insert an \"empty\" <col> element (with no styles) for the columns before: <col> Example Hide Columns You can hide columns with the visibility: collapse property: visibility: collapse Example"
  },
  {
    "document": "HTML Lists HTML lists allow web developers to group a set of related items in lists. Example An unordered HTML list: An ordered HTML list: Unordered HTML List An unordered list starts with the <ul> tag. Each list item starts with the <li> tag. <ul> <li> The list items will be marked with bullets (small black circles) by default: Example Try it Yourself Â» Ordered HTML List An ordered list starts with the <ol> tag. Each list item starts with the <li> tag. <ol> <li> The list items will be marked with numbers by default: Example HTML Description Lists HTML also supports description lists. A description list is a list of terms, with a description of each term. The <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term: <dl> <dt> <dd> Example HTML List Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Lists"
  },
  {
    "document": "HTML Lists HTML lists allow web developers to group a set of related items in lists. Example An unordered HTML list: An ordered HTML list: Unordered HTML List An unordered list starts with the <ul> tag. Each list item starts with the <li> tag. <ul> <li> The list items will be marked with bullets (small black circles) by default: Example Try it Yourself Â» Ordered HTML List An ordered list starts with the <ol> tag. Each list item starts with the <li> tag. <ol> <li> The list items will be marked with numbers by default: Example HTML Description Lists HTML also supports description lists. A description list is a list of terms, with a description of each term. The <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term: <dl> <dt> <dd> Example HTML List Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Lists"
  },
  {
    "document": "HTML Unordered Lists The HTML <ul> tag defines an unordered (bulleted) list. <ul> Unordered HTML List An unordered list starts with the <ul> tag. Each list item starts with the <li> tag. <ul> <li> The list items will be marked with bullets (small black circles) by default: Example Try it Yourself Â» Unordered HTML List - Choose List Item Marker The CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values: list-style-type Disc Example - Disc Circle Example - Circle Square Example - Square No List Marker Example - None Nested HTML Lists Lists can be nested (list inside list): Example Note: A list item (<li>) can contain a new list, and other HTML elements, like images and links, etc. <li> Horizontal List with CSS HTML lists can be styled in many different ways with CSS. One popular way is to style a list horizontally, to create a navigation menu: Example Tip: You can learn much more about CSS in our CSS Tutorial. Chapter Summary <ul> list-style-type <li> float:left HTML List Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Ordered Lists The HTML <ol> tag defines an ordered list. An ordered list can be numerical or alphabetical. <ol> Ordered HTML List An ordered list starts with the <ol> tag. Each list item starts with the <li> tag. <ol> <li> The list items will be marked with numbers by default: Example Ordered HTML List - The Type Attribute The type attribute of the <ol> tag, defines the type of the list item marker: type <ol> Numbers Numbers: Uppercase Letters Uppercase Letters: Lowercase Letters Lowercase Letters: Roman Numbers - Uppercase Uppercase Roman Numbers: Roman Numbers - Lowercase Lowercase Roman Numbers: Control List Counting By default, an ordered list will start counting from 1. If you want to start counting from a specified number, you can use the start attribute: start Example Nested HTML Lists Lists can be nested (list inside list): Example Note: A list item (<li>) can contain a new list, and other HTML elements, like images and links, etc. <li> Chapter Summary <ol> type <li> HTML List Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Other Lists HTML also supports description lists. HTML Description Lists A description list is a list of terms, with a description of each term. The <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term: <dl> <dt> <dd> Example Chapter Summary <dl> <dt> <dd> HTML List Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Block and Inline Elements Every HTML element has a default display value, depending on what type of element it is. The two most common display values are block and inline. Block-level Elements A block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element. A block-level element always takes up the full width available (stretches out to the left and right as far as it can). Two commonly used block elements are: <p> and <div>. <p> <div> The <p> element defines a paragraph in an HTML document. <p> The <div> element defines a division or a section in an HTML document. <div> The <p> element is a block-level element. Example Here are the block-level elements in HTML: Inline Elements An inline element does not start on a new line. An inline element only takes up as much width as necessary. This is a <span> element inside a paragraph. Example Here are the inline elements in HTML: Note: An inline element cannot contain a block-level element! The <div> Element The <div> element is often used as a container for other HTML elements. <div> The <div> element has no required attributes, but style, class and id are common. <div> style class id When used together with CSS, the <div> element can be used to style blocks of content: <div> Example You will learn more about the <div> element in the next chapter. <div> The <span> Element The <span> element is an inline container used to mark up a part of a text, or a part of a document. <span> The <span> element has no required attributes, but style, class and id are common. <span> style class id When used together with CSS, the <span> element can be used to style parts of the text: <span> Example Chapter Summary <div> <span> HTML Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Block and Inline"
  },
  {
    "document": "HTML Div Element The <div> element is used as a container for other HTML elements. <div> The <div> Element The <div> element is by default a block element, meaning that it takes all available width, and comes with line breaks before and after. <div> Example A <div> element takes up all available width: Result The <div> element has no required attributes, but style, class and id are common. <div> style class id <div> as a container The <div> element is often used to group sections of a web page together. <div> Example A <div> element with HTML elements: Result London London is the capital city of England. London has over 9 million inhabitants. Center align a <div> element If you have a <div> element that is not 100% wide, and you want to center-align it, set the CSS margin property to auto. <div> margin auto Example Result London London is the capital city of England. London has over 9 million inhabitants. Multiple <div> elements You can have many <div> containers on the same page. <div> Example Result London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway. Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. Aligning <div> elements side by side When building web pages, you often want to have two or more <div> elements side by side, like this: <div> London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway. Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. There are different methods for aligning elements side by side, all include some CSS styling. We will look at the most common methods: Float The CSS float property was not originally meant to align <div> elements side-by-side, but has been used for this purpose for many years. float <div> The CSS float property is used for positioning and formatting content and allows elements to be positioned horizontally, rather than vertically. float Example How to use float to align div elements side by side: Result London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway. Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. Learn more about float in our CSS float tutorial. Inline-block If you change the <div> element's display property from block to inline-block, the <div> elements will no longer add a line break before and after, and will be displayed side by side instead of on top of each other. <div> display block inline-block <div> Example How to use display: inline-block to align div elements side by side: Result London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway."
  },
  {
    "document": "Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. Flex The CSS Flexbox Layout Module was introduced to make it easier to design flexible responsive layout structure without using float or positioning. To make the CSS flex method work, surround the <div> elements with another <div> element and give it the status as a flex container. <div> <div> Example How to use flex to align div elements side by side: Result London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway. Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. Learn more about flex in our CSS flexbox tutorial. Grid The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning. Sounds almost the same as flex, but has the ability to define more than one row and position each row individually. The CSS grid method requires that you surround the <div> elements with another <div> element and give the status as a grid container, and you must specify the width of each column. <div> <div> Example How to use grid to align <div> elements side by side: Result London London is the capital city of England. London has over 9 million inhabitants. Oslo Oslo is the capital city of Norway. Oslo has over 700,000 inhabitants. Rome Rome is the capital city of Italy. Rome has over 4 million inhabitants. Learn more about grid in our CSS grid tutorial. HTML Tags For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML class Attribute The HTML class attribute is used to specify a class for an HTML element. class Multiple HTML elements can share the same class. The class Attribute The class attribute is often used to point to a class name in a style sheet. It can also be used by a JavaScript to access and manipulate elements with the specific class name. class In the following example we have three <div> elements with a class attribute with the value of \"city\". All of the three <div> elements will be styled equally according to the .city style definition in the head section: <div> class <div> .city Example In the following example we have two <span> elements with a class attribute with the value of \"note\". Both <span> elements will be styled equally according to the .note style definition in the head section: <span> class <span> .note Example Tip: The class attribute can be used on any HTML element. class Note: The class name is case sensitive! Tip: You can learn much more about CSS in our CSS Tutorial. The Syntax For Class To create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}: Example Create a class named \"city\": Multiple Classes HTML elements can belong to more than one class. To define multiple classes, separate the class names with a space, e.g. <div class=\"city main\">. The element will be styled according to all the classes specified. In the following example, the first <h2> element belongs to both the city class and also to the main class, and will get the CSS styles from both of the classes: <h2> city main Example Different Elements Can Share Same Class Different HTML elements can point to the same class name. In the following example, both <h2> and <p> point to the \"city\" class and will share the same style: <h2> <p> Example Use of the class Attribute in JavaScript The class name can also be used by JavaScript to perform certain tasks for specific elements. JavaScript can access elements with a specific class name with the getElementsByClassName() method: getElementsByClassName() Example Click on a button to hide all elements with the class name \"city\": Don't worry if you don't understand the code in the example above. You will learn more about JavaScript in our HTML JavaScript chapter, or you can study our JavaScript Tutorial. Chapter Summary class class getElementsByClassName() Video: HTML Class"
  },
  {
    "document": "HTML id Attribute The HTML id attribute is used to specify a unique id for an HTML element. id You cannot have more than one element with the same id in an HTML document. The id Attribute The id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document. id id The id attribute is used to point to a specific style declaration in a style sheet. It is also used by JavaScript to access and manipulate the element with the specific id. id The syntax for id is: write a hash character (#), followed by an id name. Then, define the CSS properties within curly braces {}. In the following example we have an <h1> element that points to the id name \"myHeader\". This <h1> element will be styled according to the #myHeader style definition in the head section: <h1> <h1> #myHeader Example Note: The id name is case sensitive! Note: The id name must contain at least one character, cannot start with a number, and must not contain whitespaces (spaces, tabs, etc.). Difference Between Class and ID A class name can be used by multiple HTML elements, while an id name must only be used by one HTML element within the page: Example Tip: You can learn much more about CSS in our CSS Tutorial. HTML Bookmarks with ID and Links HTML bookmarks are used to allow readers to jump to specific parts of a webpage. Bookmarks can be useful if your page is very long. To use a bookmark, you must first create it, and then add a link to it. Then, when the link is clicked, the page will scroll to the location with the bookmark. Example First, create a bookmark with the id attribute: id Then, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page: Example Or, add a link to the bookmark (\"Jump to Chapter 4\"), from another page: Using the id Attribute in JavaScript The id attribute can also be used by JavaScript to perform some tasks for that specific element. id JavaScript can access an element with a specific id with the getElementById() method: getElementById() Example Use the id attribute to manipulate text with JavaScript: id Tip: Study JavaScript in the HTML JavaScript chapter, or in our JavaScript Tutorial. Chapter Summary id id id id id getElementById() Video: HTML ID"
  },
  {
    "document": "HTML Iframes An HTML iframe is used to display a web page within a web page. HTML Iframe Syntax The HTML <iframe> tag specifies an inline frame. <iframe> An inline frame is used to embed another document within the current HTML document. Syntax Tip: It is a good practice to always include a title attribute for the <iframe>. This is used by screen readers to read out what the content of the iframe is. title <iframe> Iframe - Set Height and Width Use the height and width attributes to specify the size of the iframe. height width The height and width are specified in pixels by default: Example Or you can add the style attribute and use the CSS height and width properties: style height width Example Iframe - Remove the Border By default, an iframe has a border around it. To remove the border, add the style attribute and use the CSS border property: style border Example With CSS, you can also change the size, style and color of the iframe's border: Example Iframe - Target for a Link An iframe can be used as the target frame for a link. The target attribute of the link must refer to the name attribute of the iframe: target name Example Chapter Summary <iframe> src title height width border:none; HTML iframe Tag For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Iframe"
  },
  {
    "document": "HTML JavaScript JavaScript makes HTML pages more dynamic and interactive. Example My First JavaScript  Try it Yourself Â» The HTML <script> Tag The HTML <script> tag is used to define a client-side script (JavaScript). <script> The <script> element either contains script statements, or it points to an external script file through the src attribute. <script> src Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content. To select an HTML element, JavaScript most often uses the document.getElementById() method. document.getElementById() This JavaScript example writes \"Hello JavaScript!\" into an HTML element with id=\"demo\": Example Tip: You can learn much more about JavaScript in our JavaScript Tutorial. A Taste of JavaScript Here are some examples of what JavaScript can do: Example JavaScript can change content: Example JavaScript can change styles: Example JavaScript can change attributes: The HTML <noscript> Tag The HTML <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support scripts: <noscript> Example HTML Script Tags For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML and JavaScript"
  },
  {
    "document": "HTML File Paths A file path describes the location of a file in a web site's folder structure. File Path Examples HTML File Paths A file path describes the location of a file in a web site's folder structure. File paths are used when linking to external files, like: Absolute File Paths An absolute file path is the full URL to a file: Example Try it Yourself Â» The <img> tag is explained in the chapter: HTML Images. Relative File Paths A relative file path points to a file relative to the current page. In the following example, the file path points to a file in the images folder located at the root of the current web: Example Try it Yourself Â» In the following example, the file path points to a file in the images folder located in the current folder: Example Try it Yourself Â» In the following example, the file path points to a file in the images folder located in the folder one level up from the current folder: Example Try it Yourself Â» Best Practice It is best practice to use relative file paths (if possible). When using relative file paths, your web pages will not be bound to your current base URL. All links will work on your own computer (localhost) as well as on your current public domain and your future public domains."
  },
  {
    "document": "HTML - The Head Element The HTML <head> element is a container for the following elements: <title>, <style>, <meta>, <link>, <script>, and <base>. <head> <title> <style> <meta> <link> <script> <base> The HTML <head> Element The <head> element is a container for metadata (data about data) and is placed between the <html> tag and the <body> tag. <head> <html> <body> HTML metadata is data about the HTML document. Metadata is not displayed on the page. Metadata typically define the document title, character set, styles, scripts, and other meta information. The HTML <title> Element The <title> element defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab. <title> The <title> element is required in HTML documents! <title> The content of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results. The <title> element: <title> So, try to make the title as accurate and meaningful as possible! A simple HTML document: Example The HTML <style> Element The <style> element is used to define style information for a single HTML page: <style> Example The HTML <link> Element The <link> element defines the relationship between the current document and an external resource.The <link> tag is most often used to link to external style sheets: <link> <link> Example Tip: To learn all about CSS, visit our CSS Tutorial. The HTML <meta> Element The <meta> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings. <meta> The metadata will not be displayed on the page, but is used by browsers (how to display content or reload page), by search engines (keywords), and other web services. Examples Define the character set used: Define keywords for search engines: Define a description of your web page: Define the author of a page: Refresh document every 30 seconds: Setting the viewport to make your website look good on all devices: Example of <meta> tags: <meta> Example Setting The Viewport The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen. You should include the following <meta> element in all your web pages: <meta> This gives the browser instructions on how to control the page's dimensions and scaling. The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device). width=device-width The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser. initial-scale=1.0 Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag: Tip: If you are browsing this page with a phone or a tablet, you can click on the two links below to see the difference."
  },
  {
    "document": "The HTML <script> Element The <script> element is used to define client-side JavaScripts. <script> The following JavaScript writes \"Hello JavaScript!\" into an HTML element with id=\"demo\": Example Tip: To learn all about JavaScript, visit our JavaScript Tutorial. The HTML <base> Element The <base> element specifies the base URL and/or target for all relative URLs in a page. <base> The <base> tag must have either an href or a target attribute present, or both. <base> There can only be one single <base> element in a document! <base> Example Specify a default URL and a default target for all links on a page: Chapter Summary <head> <head> <html> <body> <title> <style> <link> <meta> <script> <base> HTML head Elements For a complete list of all available HTML tags, visit our HTML Tag Reference. Video: HTML Head"
  },
  {
    "document": "HTML Layout Elements and Techniques Websites often display content in multiple columns (like a magazine or a newspaper). Example Cities London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. Footer HTML Layout Elements HTML has several semantic elements that define the different parts of a web page: <header> <nav> <section> <article> <aside> <footer> <details> <summary> <details> <header> <nav> <section> <article> <aside> <footer> <details> <summary> <details> You can read more about semantic elements in our HTML Semantics chapter. HTML Layout Techniques There are four different techniques to create multicolumn layouts. Each technique has its pros and cons: CSS Frameworks If you want to create your layout fast, you can use a CSS framework, like W3.CSS or Bootstrap. Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free. * no credit card required CSS Float Layout It is common to do entire web layouts using the CSS float property. Float is easy to learn - you just need to remember how the float and clear properties work. Disadvantages: Floating elements are tied to the document flow, which may harm the flexibility. Learn more about float in our CSS Float and Clear chapter. float float clear Example Cities London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. Footer CSS Flexbox Layout Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices. Learn more about flexbox in our CSS Flexbox chapter. Example Cities London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. Footer CSS Grid Layout The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning. Learn more about CSS grids in our CSS Grid Intro chapter."
  },
  {
    "document": "HTML Responsive Web Design Responsive web design is about creating web pages that look good on all devices! A responsive web design will automatically adjust for different screen sizes and viewports. What is Responsive Web Design? Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones): Try it Yourself Â» Setting The Viewport To create a responsive website, add the following <meta> tag to all your web pages: <meta> Example This will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling. Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag: Tip: If you are browsing this page on a phone or a tablet, you can click on the two links above to see the difference. Responsive Images Responsive images are images that scale nicely to fit any browser size. Using the width Property If the CSS width property is set to 100%, the image will be responsive and scale up and down: width Example Notice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead. max-width Using the max-width Property If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size: max-width Example Show Different Images Depending on Browser Width The HTML <picture> element allows you to define different images for different browser window sizes. <picture> Resize the browser window to see how the image below changes depending on the width: Example Responsive Text Size The text size can be set with a \"vw\" unit, which means the \"viewport width\". That way the text size will follow the size of the browser window: Hello World Resize the browser window to see how the text size scales. Example Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm. Media Queries In addition to resize text and images, it is also common to use media queries in responsive web pages. With media queries you can define completely different styles for different browser sizes. Example: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens: Example Tip: To learn more about Media Queries and Responsive Web Design, read our RWD Tutorial. Responsive Web Page - Full Example A responsive web page should look good on large desktop screens and on small mobile phones. Try it Yourself Â» Ever heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free."
  },
  {
    "document": "* no credit card required Responsive Web Design - Frameworks All popular CSS Frameworks offer responsive design. They are free, and easy to use. W3.CSS W3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default. W3.CSS is smaller and faster than similar CSS frameworks. W3.CSS is designed to be independent of jQuery or any other JavaScript library. W3.CSS Demo Resize the page to see the responsiveness! London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Paris Paris is the capital of France. The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants. Tokyo Tokyo is the capital of Japan. It is the center of the Greater Tokyo Area, and the most populous metropolitan area in the world. Example To learn more about W3.CSS, read our W3.CSS Tutorial. Bootstrap Another popular CSS framework is Bootstrap: Example To learn more about Bootstrap, go to our Bootstrap Tutorial."
  },
  {
    "document": "HTML Computer Code Elements HTML contains several elements for defining user input and computer code. Example HTML <kbd> For Keyboard Input The HTML <kbd> element is used to define keyboard input. The content inside is displayed in the browser's default monospace font. <kbd> Example Define some text as keyboard input in a document: Result: HTML <samp> For Program Output The HTML <samp> element is used to define sample output from a computer program. The content inside is displayed in the browser's default monospace font. <samp> Example Define some text as sample output from a computer program in a document: Result: File not found.Press F1 to continue HTML <code> For Computer Code The HTML <code> element is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font. <code> Example Define some text as computer code in a document: Result: x = 5; y = 6; z = x + y; Preserve Line-Breaks Notice that the <code> element does NOT preserve extra whitespace and line-breaks. <code> To preserve extra whitespace and line-breaks, you can put the <code> element inside a <pre> element: <code> <pre> Example Result: x = 5; y = 6; z = x + y; HTML <var> For Variables The HTML <var> element is used to define a variable in programming or in a mathematical expression. The content inside is typically displayed in italic. <var> Example Define some text as variables in a document: Result: Chapter Summary <kbd> <samp> <code> <var> <pre> HTML Computer Code Elements For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Semantic Elements Semantic elements = elements with a meaning. What are Semantic Elements? A semantic element clearly describes its meaning to both the browser and the developer. Examples of non-semantic elements: <div> and <span> - Tells nothing about its content. <div> <span> Examples of semantic elements: <img>, <table>, and <article> - Clearly defines its content. <img> <table> <article> Semantic Elements in HTML Many web sites contain HTML code like: <div id=\"nav\"> <div class=\"header\"> <div id=\"footer\"> to indicate navigation, header, and footer. In HTML there are several semantic elements that can be used to define different parts of a web page:  HTML <section> Element The <section> element defines a section in a document. <section> According to W3C's HTML documentation: \"A section is a thematic grouping of content, typically with a heading.\" Examples of where a <section> element can be used: <section> A web page could normally be split into sections for introduction, content, and contact information. Example Two sections in a document: HTML <article> Element The <article> element specifies independent, self-contained content. <article> An article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site. Examples of where the <article> element can be used: <article> Example Three articles with independent, self-contained content: Example 2 Use CSS to style the <article> element: Nesting <article> in <section> or Vice Versa? The <article> element specifies independent, self-contained content. <article> The <section> element defines section in a document. <section> Can we use the definitions to decide how to nest those elements? No, we cannot! So, you will find HTML pages with <section> elements containing <article> elements, and <article> elements containing <section> elements. <section> <article> <article> <section> HTML <header> Element The <header> element represents a container for introductory content or a set of navigational links. <header> A <header> element typically contains: <header> Note: You can have several <header> elements in one HTML document. However, <header> cannot be placed within a <footer>, <address> or another <header> element. <header> <header> <footer> <address> <header> Example A header for an <article>: HTML <footer> Element The <footer> element defines a footer for a document or section. <footer> A <footer> element typically contains: <footer> You can have several <footer> elements in one document. <footer> Example A footer section in a document: HTML <nav> Element The <nav> element defines a set of navigation links. <nav> Notice that NOT all links of a document should be inside a <nav> element. The <nav> element is intended only for major blocks of navigation links. <nav> <nav> Browsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content. Example A set of navigation links: HTML <aside> Element The <aside> element defines some content aside from the content it is placed in (like a sidebar). <aside> The <aside> content should be indirectly related to the surrounding content."
  },
  {
    "document": "<aside> Example Display some content aside from the content it is placed in: Example 2 Use CSS to style the <aside> element: HTML <figure> and <figcaption> Elements The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc. <figure> The <figcaption> tag defines a caption for a <figure> element. The <figcaption> element can be placed as the first or as the last child of a <figure> element. <figcaption> <figure> <figcaption> <figure> The <img> element defines the actual image/illustration. <img> Example Why Semantic Elements? According to the W3C: \"A semantic Web allows data to be shared and reused across applications, enterprises, and communities.\" Semantic Elements in HTML Below is a list of some of the semantic elements in HTML. For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Style Guide Consistent, clean, and tidy HTML code makes it easier for others to read and understand your code. Here are some guidelines and tips for creating good HTML code. Always Declare Document Type Always declare the document type as the first line in your document. The correct document type for HTML is: Use Lowercase Element Names HTML allows mixing uppercase and lowercase letters in element names. However, we recommend using lowercase element names, because: Good: Bad: Close All HTML Elements In HTML, you do not have to close all elements (for example the <p> element). <p> However, we strongly recommend closing all HTML elements, like this: Good: Bad: Use Lowercase Attribute Names HTML allows mixing uppercase and lowercase letters in attribute names. However, we recommend using lowercase attribute names, because: Good: Bad: Always Quote Attribute Values HTML allows attribute values without quotes. However, we recommend quoting attribute values, because: Good: Bad: Very bad: This will not work, because the value contains spaces: Always Specify alt, width, and height for Images Always specify the alt attribute for images. This attribute is important if the image for some reason cannot be displayed. alt Also, always define the width and height of images. This reduces flickering, because the browser can reserve space for the image before loading. width height Good: Bad: Spaces and Equal Signs HTML allows spaces around equal signs. But space-less is easier to read and groups entities better together. Good: Bad: Avoid Long Code Lines When using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code. Try to avoid too long code lines. Blank Lines and Indentation Do not add blank lines, spaces, or indentations without a reason. For readability, add blank lines to separate large or logical code blocks. For readability, add two spaces of indentation. Do not use the tab key. Good: Bad: Good Table Example: Good List Example: Never Skip the <title> Element The <title> element is required in HTML. <title> The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results. The <title> element: <title> So, try to make the title as accurate and meaningful as possible: Omitting <html> and <body>? An HTML page will validate without the <html> and <body> tags: <html> <body> Example However, we strongly recommend to always add the <html> and <body> tags! <html> <body> Omitting <body> can produce errors in older browsers. <body> Omitting <html> and <body> can also crash DOM and XML software. <html> <body> Omitting <head>? The HTML <head> tag can also be omitted. Browsers will add all elements before <body>, to a default <head> element. <body> <head> Example However, we recommend using the <head> tag. <head> Close Empty HTML Elements? In HTML, it is optional to close empty elements."
  },
  {
    "document": "Allowed: Also Allowed: If you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML. Add the lang Attribute You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers. lang <html> Example Meta Data To ensure proper interpretation and correct search engine indexing, both the language and the character encoding <meta charset=\"charset\"> should be defined as early as possible in an HTML document: <meta charset=\"charset\"> Setting The Viewport The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen. You should include the following <meta> element in all your web pages: <meta> This gives the browser instructions on how to control the page's dimensions and scaling. The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device). width=device-width The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser. initial-scale=1.0 Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag: Tip: If you are browsing this page with a phone or a tablet, you can click on the two links below to see the difference. HTML Comments Short comments should be written on one line, like this: Comments that spans more than one line, should be written like this: Long comments are easier to observe if they are indented with two spaces. Using Style Sheets Use simple syntax for linking to style sheets (the type attribute is not necessary): type Short CSS rules can be written compressed, like this: Long CSS rules should be written over multiple lines: Loading JavaScript in HTML Use simple syntax for loading external scripts (the type attribute is not necessary): type Accessing HTML Elements with JavaScript Using \"untidy\" HTML code can result in JavaScript errors. These two JavaScript statements will produce different results: Example Visit the JavaScript Style Guide. Use Lower Case File Names Some web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\". Other web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\". If you use a mix of uppercase and lowercase, you have to be aware of this. If you move from a case-insensitive to a case-sensitive server, even small errors will break your web! To avoid these problems, always use lowercase file names! File Extensions HTML files should have a .html extension (.htm is allowed). CSS files should have a .css extension. JavaScript files should have a .js extension. Differences Between .htm and .html? There is no difference between the .htm and .html file extensions! Both will be treated as HTML by any web browser and web server."
  },
  {
    "document": "Default Filenames When a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\". If your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html\". However, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want."
  },
  {
    "document": "HTML Entities Reserved characters in HTML must be replaced with entities: HTML Character Entities Some characters are reserved in HTML. If you use the less than (<) or greater than (>) signs in your HTML text, the browser might mix them with tags. Entity names or entity numbers can be used to display reserved HTML characters. Entity names look like this: Entity numbers look like this: To display a less than sign (<) we must write: &lt; or &#60; Entity names are easier to remember than entity numbers. Non-breaking Space A commonly used HTML entity is the non-breaking space: &nbsp; A non-breaking space is a space that will not break into a new line. Two words separated by a non-breaking space will stick together (not break into a new line). This is handy when breaking the words might be disruptive. Examples: Another common use of the non-breaking space is to prevent browsers from truncating spaces in HTML pages. If you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the &nbsp; character entity. The non-breaking hyphen (&#8209;) is used to define a hyphen character (â) that does not break into a new line. Some Useful HTML Character Entities Note Entity names are case sensitive. Combining Diacritical Marks A diacritical mark is a \"glyph\" added to a letter. Some diacritical marks, like grave ( Ì) and acute ( Ì) are called accents. Diacritical marks can be used in combination with alphanumeric characters to produce a character that is not present in the character set (encoding) used in the page. Here are some examples: There are more examples in the next chapter."
  },
  {
    "document": "HTML Symbols Symbols or letters that are not present on your keyboard can be added to HTML using entities. HTML Symbol Entities HTML entities were described in the previous chapter. Many mathematical, technical, and currency symbols, are not present on a normal keyboard. To add such symbols to an HTML page, you can use the entity name or the entity number (a decimal or a hexadecimal reference) for the symbol: Example Display the euro sign: Will display as: Some Mathematical Symbols Supported by HTML Full Math Symbols Reference Some Greek Letters Supported by HTML Full Greek Reference Some Other Entities Supported by HTML Full Currency Reference Full Arrows Reference Full Symbols Reference"
  },
  {
    "document": "Using Emojis in HTML Emojis are characters from the UTF-8 character set: ð ð ð Full HTML Emoji Reference HTML Emojis Examples HTML Emoji Transport Symbols HTML Emoji Office Symbols HTML Emoji People Symbols HTML Emoji Animals Symbols What are Emojis? Emojis look like images, or icons, but they are not. They are letters (characters) from the UTF-8 (Unicode) character set. UTF-8 covers almost all of the characters and symbols in the world. The HTML charset Attribute To display an HTML page correctly, a web browser must know the character set used in the page. This is specified in the <meta> tag: <meta> If not specified, UTF-8 is the default character set in HTML. UTF-8 Characters Many UTF-8 characters cannot be typed on a keyboard, but they can always be displayed using numbers (called entity numbers): Example Example Explained The <meta charset=\"UTF-8\"> element defines the character set. <meta charset=\"UTF-8\"> The characters A, B, and C, are displayed by the numbers 65, 66, and 67. To let the browser understand that you are displaying a character, you must start the entity number with &# and end it with ; (semicolon). Emoji Characters Emojis are also characters from the UTF-8 alphabet: Example Since Emojis are characters, they can be copied, displayed, and sized just like any other character in HTML. Example"
  },
  {
    "document": "HTML Encoding (Character Sets) To display an HTML page correctly, a web browser must know which character set to use. The HTML charset Attribute The character set is specified in the <meta> tag: <meta> Example The HTML5 specification encourages web developers to use the UTF-8 character set. UTF-8 covers almost all of the characters and symbols in the world! Full UTF-8 Reference The ASCII Character Set ASCII was the first character encoding standard for the web. It defined 128 different characters that could be used on the internet: The ANSI Character Set ANSI (Windows-1252) was the original Windows character set: The ISO-8859-1 Character Set ISO-8859-1 was the default character set for HTML 4. This character set supported 256 different character codes. HTML 4 also supported UTF-8. HTML 4 Example HTML 5 Example The UTF-8 Character Set Full HTML Character Set Reference. Differences Between Character Sets The following table displays the differences between the character sets described above:"
  },
  {
    "document": "HTML Uniform Resource Locators A URL is another word for a web address. A URL can be composed of words (e.g. w3schools.com), or an Internet Protocol (IP) address (e.g. 192.68.20.50). Most people enter the name when surfing, because names are easier to remember than numbers. URL - Uniform Resource Locator Web browsers request pages from web servers by using a URL. A Uniform Resource Locator (URL) is used to address a document (or other data) on the web. A web address like https://www.w3schools.com/html/default.asp follows these syntax rules: Explanation: Common URL Schemes The table below lists some common schemes: URL Encoding URLs can only be sent over the Internet using the ASCII character-set. If a URL contains characters outside the ASCII set, the URL has to be converted. URL encoding converts non-ASCII characters into a format that can be transmitted over the Internet. URL encoding replaces non-ASCII characters with a \"%\" followed by hexadecimal digits. URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign, or %20. Try It Yourself If you click \"Submit\", the browser will URL encode the input before it is sent to the server. A page at the server will display the received input. Try some other input and click Submit again. ASCII Encoding Examples Your browser will encode input, according to the character-set used in your page. The default character-set in HTML5 is UTF-8. For a complete reference of all URL encodings, visit our URL Encoding Reference."
  },
  {
    "document": "HTML Versus XHTML XHTML is a stricter, more XML-based version of HTML. What is XHTML? Why XHTML? XML is a markup language where all documents must be marked up correctly (be \"well-formed\"). XHTML was developed to make HTML more extensible and flexible to work with other data formats (such as XML). In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup. So XHTML comes with a much stricter error handling. If you want to study XML, please read our XML Tutorial. The Most Important Differences from HTML XHTML - <!DOCTYPE ....> Is Mandatory An XHTML document must have an XHTML <!DOCTYPE> declaration. The <html>, <head>, <title>, and <body> elements must also be present, and the xmlns attribute in <html> must specify the xml namespace for the document. Example Here is an XHTML document with a minimum of required tags: XHTML Elements Must be Properly Nested In XHTML, elements must always be properly nested within each other, like this: Correct: Wrong: XHTML Elements Must Always be Closed In XHTML, elements must always be closed, like this: Correct: Wrong: XHTML Empty Elements Must Always be Closed In XHTML, empty elements must always be closed, like this: Correct: Wrong: XHTML Elements Must be in Lowercase In XHTML, element names must always be in lowercase, like this: Correct: Wrong: XHTML Attribute Names Must be in Lowercase In XHTML, attribute names must always be in lowercase, like this: Correct: Wrong: XHTML Attribute Values Must be Quoted In XHTML, attribute values must always be quoted, like this: Correct: Wrong: XHTML Attribute Minimization is Forbidden In XHTML, attribute minimization is forbidden: Correct: Wrong: Validate HTML With The W3C Validator Put your web address in the box below:"
  },
  {
    "document": "HTML Forms An HTML form is used to collect user input. The user input is most often sent to a server for processing. Example The <form> Element The HTML <form> element is used to create an HTML form for user input: <form> The <form> element is a container for different types of input elements, such as: text fields, checkboxes, radio buttons, submit buttons, etc. <form> All the different form elements are covered in this chapter: HTML Form Elements. The <input> Element The HTML <input> element is the most used form element. <input> An <input> element can be displayed in many ways, depending on the type attribute. <input> type Here are some examples: All the different input types are covered in this chapter: HTML Input Types. Text Fields The <input type=\"text\"> defines a single-line input field for text input. <input type=\"text\"> Example A form with input fields for text: This is how the HTML code above will be displayed in a browser: Note: The form itself is not visible. Also note that the default width of an input field is 20 characters. The <label> Element Notice the use of the <label> element in the example above. <label> The <label> tag defines a label for many form elements. <label> The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focuses on the input element. <label> The <label> element also helps users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox. <label> <label> The for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together. for <label> id <input> Radio Buttons The <input type=\"radio\"> defines a radio button. <input type=\"radio\"> Radio buttons let a user select ONE of a limited number of choices. Example A form with radio buttons: This is how the HTML code above will be displayed in a browser: Choose your favorite Web language: Checkboxes The <input type=\"checkbox\"> defines a checkbox. <input type=\"checkbox\"> Checkboxes let a user select ZERO or MORE options of a limited number of choices. Example A form with checkboxes: This is how the HTML code above will be displayed in a browser: The Submit Button The <input type=\"submit\"> defines a button for submitting the form data to a form-handler. <input type=\"submit\"> The form-handler is typically a file on the server with a script for processing input data. The form-handler is specified in the form's action attribute. action Example A form with a submit button: This is how the HTML code above will be displayed in a browser: The Name Attribute for <input> Notice that each input field must have a name attribute to be submitted. name If the name attribute is omitted, the value of the input field will not be sent at all."
  },
  {
    "document": "name Example This example will not submit the value of the \"First name\" input field: Video: HTML Forms"
  },
  {
    "document": "HTML Form Attributes This chapter describes the different attributes for the HTML <form> element. <form> The Action Attribute The action attribute defines the action to be performed when the form is submitted. action Usually, the form data is sent to a file on the server when the user clicks on the submit button. In the example below, the form data is sent to a file called \"action_page.php\". This file contains a server-side script that handles the form data: Example On submit, send form data to \"action_page.php\": Tip: If the action attribute is omitted, the action is set to the current page. action The Target Attribute The target attribute specifies where to display the response that is received after submitting the form. target The target attribute can have one of the following values: target The default value is _self which means that the response will open in the current window. _self Example Here, the submitted result will open in a new browser tab: The Method Attribute The method attribute specifies the HTTP method to be used when submitting the form data. method The form-data can be sent as URL variables (with method=\"get\") or as HTTP post transaction (with method=\"post\"). method=\"get\" method=\"post\" The default HTTP method when submitting form data is GET. Example This example uses the GET method when submitting the form data: Example This example uses the POST method when submitting the form data: Notes on GET: Notes on POST: Tip: Always use POST if the form data contains sensitive or personal information! The Autocomplete Attribute The autocomplete attribute specifies whether a form should have autocomplete on or off. autocomplete When autocomplete is on, the browser automatically complete values based on values that the user has entered before. Example A form with autocomplete on: The Novalidate Attribute The novalidate attribute is a boolean attribute. novalidate When present, it specifies that the form-data (input) should not be validated when submitted. Example A form with a novalidate attribute: List of All <form> Attributes"
  },
  {
    "document": "HTML Form Elements This chapter describes all the different HTML form elements. The HTML <form> Elements The HTML <form> element can contain one or more of the following form elements: <form> <input> <label> <select> <textarea> <button> <fieldset> <legend> <datalist> <output> <option> <optgroup> The <input> Element One of the most used form elements is the <input> element. <input> The <input> element can be displayed in several ways, depending on the type attribute. <input> type Example All the different values of the type attribute are covered in the next chapter: HTML Input Types. type The <label> Element The <label> element defines a label for several form elements. <label> The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focus on the input element. <label> The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox. <label> <label> The for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together. for <label> id <input> The <select> Element The <select> element defines a drop-down list: <select> Example The <option> element defines an option that can be selected. <option> By default, the first item in the drop-down list is selected. To define a pre-selected option, add the selected attribute to the option: selected Example Visible Values: Use the size attribute to specify the number of visible values: size Example Allow Multiple Selections: Use the multiple attribute to allow the user to select more than one value: multiple Example The <textarea> Element The <textarea> element defines a multi-line input field (a text area): <textarea> Example The rows attribute specifies the visible number of lines in a text area. rows The cols attribute specifies the visible width of a text area. cols This is how the HTML code above will be displayed in a browser: You can also define the size of the text area by using CSS: Example The <button> Element The <button> element defines a clickable button: <button> Example This is how the HTML code above will be displayed in a browser: Note: Always specify the type attribute for the button element. Different browsers may use different default types for the button element. type The <fieldset> and <legend> Elements The <fieldset> element is used to group related data in a form. <fieldset> The <legend> element defines a caption for the <fieldset> element. <legend> <fieldset> Example This is how the HTML code above will be displayed in a browser: The <datalist> Element The <datalist> element specifies a list of pre-defined options for an <input> element. <datalist> <input> Users will see a drop-down list of the pre-defined options as they input data. The list attribute of the <input> element, must refer to the id attribute of the <datalist> element."
  },
  {
    "document": "list <input> id <datalist> Example The <output> Element The <output> element represents the result of a calculation (like one performed by a script). <output> Example Perform a calculation and show the result in an <output> element: <output> HTML Form Elements For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Input Types This chapter describes the different types for the HTML <input> element. <input> HTML Input Types Here are the different input types you can use in HTML: <input type=\"button\"> <input type=\"checkbox\"> <input type=\"color\"> <input type=\"date\"> <input type=\"datetime-local\"> <input type=\"email\"> <input type=\"file\"> <input type=\"hidden\"> <input type=\"image\"> <input type=\"month\"> <input type=\"number\"> <input type=\"password\"> <input type=\"radio\"> <input type=\"range\"> <input type=\"reset\"> <input type=\"search\"> <input type=\"submit\"> <input type=\"tel\"> <input type=\"text\"> <input type=\"time\"> <input type=\"url\"> <input type=\"week\"> Tip: The default value of the type attribute is \"text\". type Input Type Text <input type=\"text\"> defines a single-line text input field: <input type=\"text\"> Example This is how the HTML code above will be displayed in a browser: Input Type Password <input type=\"password\"> defines a password field: <input type=\"password\"> Example This is how the HTML code above will be displayed in a browser: The characters in a password field are masked (shown as asterisks or circles). Input Type Submit <input type=\"submit\"> defines a button for submitting form data to a form-handler. <input type=\"submit\"> The form-handler is typically a server page with a script for processing input data. The form-handler is specified in the form's action attribute: action Example This is how the HTML code above will be displayed in a browser: If you omit the submit button's value attribute, the button will get a default text: Example Input Type Reset <input type=\"reset\"> defines a reset button that will reset all form values to their default values: <input type=\"reset\"> Example This is how the HTML code above will be displayed in a browser: If you change the input values and then click the \"Reset\" button, the form-data will be reset to the default values. Input Type Radio <input type=\"radio\"> defines a radio button. <input type=\"radio\"> Radio buttons let a user select ONLY ONE of a limited number of choices: Example This is how the HTML code above will be displayed in a browser: Input Type Checkbox <input type=\"checkbox\"> defines a checkbox. <input type=\"checkbox\"> Checkboxes let a user select ZERO or MORE options of a limited number of choices. Example This is how the HTML code above will be displayed in a browser: Input Type Button <input type=\"button\"> defines a button: <input type=\"button\"> Example This is how the HTML code above will be displayed in a browser: Input Type Color The <input type=\"color\"> is used for input fields that should contain a color. <input type=\"color\"> Depending on browser support, a color picker can show up in the input field. Example Input Type Date The <input type=\"date\"> is used for input fields that should contain a date. <input type=\"date\"> Depending on browser support, a date picker can show up in the input field. Example You can also use the min and max attributes to add restrictions to dates: min max Example Input Type Datetime-local The <input type=\"datetime-local\"> specifies a date and time input field, with no time zone. <input type=\"datetime-local\"> Depending on browser support, a date picker can show up in the input field."
  },
  {
    "document": "Example Input Type Email The <input type=\"email\"> is used for input fields that should contain an e-mail address. <input type=\"email\"> Depending on browser support, the e-mail address can be automatically validated when submitted. Some smartphones recognize the email type, and add \".com\" to the keyboard to match email input. Example Input Type Image The <input type=\"image\"> defines an image as a submit button. <input type=\"image\"> The path to the image is specified in the src attribute. src Example Input Type File The <input type=\"file\"> defines a file-select field and a \"Browse\" button for file uploads. <input type=\"file\"> Example Input Type Hidden The <input type=\"hidden\"> defines a hidden input field (not visible to a user). <input type=\"hidden\"> A hidden field lets web developers include data that cannot be seen or modified by users when a form is submitted. A hidden field often stores what database record that needs to be updated when the form is submitted. Note: While the value is not displayed to the user in the page's content, it is visible (and can be edited) using any browser's developer tools or \"View Source\" functionality. Do not use hidden inputs as a form of security! Example Input Type Month The <input type=\"month\"> allows the user to select a month and year. <input type=\"month\"> Depending on browser support, a date picker can show up in the input field. Example Input Type Number The <input type=\"number\"> defines a numeric input field. <input type=\"number\"> You can also set restrictions on what numbers are accepted. The following example displays a numeric input field, where you can enter a value from 1 to 5: Example Input Restrictions Here is a list of some common input restrictions: You will learn more about input restrictions in the next chapter. The following example displays a numeric input field, where you can enter a value from 0 to 100, in steps of 10. The default value is 30: Example Input Type Range The <input type=\"range\"> defines a control for entering a number whose exact value is not important (like a slider control). Default range is 0 to 100. However, you can set restrictions on what numbers are accepted with the min, max, and step attributes: <input type=\"range\"> min max step Example Input Type Search The <input type=\"search\"> is used for search fields (a search field behaves like a regular text field). <input type=\"search\"> Example Input Type Tel The <input type=\"tel\"> is used for input fields that should contain a telephone number. <input type=\"tel\"> Example Input Type Time The <input type=\"time\"> allows the user to select a time (no time zone). <input type=\"time\"> Depending on browser support, a time picker can show up in the input field. Example Input Type Url The <input type=\"url\"> is used for input fields that should contain a URL address. <input type=\"url\"> Depending on browser support, the url field can be automatically validated when submitted. Some smartphones recognize the url type, and adds \".com\" to the keyboard to match url input."
  },
  {
    "document": "Example Input Type Week The <input type=\"week\"> allows the user to select a week and year. <input type=\"week\"> Depending on browser support, a date picker can show up in the input field. Example HTML Input Type Attribute"
  },
  {
    "document": "HTML Input Attributes This chapter describes the different attributes for the HTML <input> element. <input> The value Attribute The input value attribute specifies an initial value for an input field: value Example Input fields with initial (default) values: The readonly Attribute The input readonly attribute specifies that an input field is read-only. readonly A read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it). The value of a read-only input field will be sent when submitting the form! Example A read-only input field: The disabled Attribute The input disabled attribute specifies that an input field should be disabled. disabled A disabled input field is unusable and un-clickable. The value of a disabled input field will not be sent when submitting the form! Example A disabled input field: The size Attribute The input size attribute specifies the visible width, in characters, of an input field. size The default value for size is 20. size Note: The size attribute works with the following input types: text, search, tel, url, email, and password. size Example Set a width for an input field: The maxlength Attribute The input maxlength attribute specifies the maximum number of characters allowed in an input field. maxlength Note: When a maxlength is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code. maxlength Example Set a maximum length for an input field: The min and max Attributes The input min and max attributes specify the minimum and maximum values for an input field. min max The min and max attributes work with the following input types: number, range, date, datetime-local, month, time and week. min max Tip: Use the max and min attributes together to create a range of legal values. Example Set a max date, a min date, and a range of legal values: The multiple Attribute The input multiple attribute specifies that the user is allowed to enter more than one value in an input field. multiple The multiple attribute works with the following input types: email, and file. multiple Example A file upload field that accepts multiple values: The pattern Attribute The input pattern attribute specifies a regular expression that the input field's value is checked against, when the form is submitted. pattern The pattern attribute works with the following input types: text, date, search, url, tel, email, and password. pattern Tip: Use the global title attribute to describe the pattern to help the user. Tip: Learn more about regular expressions in our JavaScript tutorial. Example An input field that can contain only three letters (no numbers or special characters): The placeholder Attribute The input placeholder attribute specifies a short hint that describes the expected value of an input field (a sample value or a short description of the expected format)."
  },
  {
    "document": "placeholder The short hint is displayed in the input field before the user enters a value. The placeholder attribute works with the following input types: text, search, url, number, tel, email, and password. placeholder Example An input field with a placeholder text: The required Attribute The input required attribute specifies that an input field must be filled out before submitting the form. required The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file. required Example A required input field: The step Attribute The input step attribute specifies the legal number intervals for an input field. step Example: if step=\"3\", legal numbers could be -3, 0, 3, 6, etc. Tip: This attribute can be used together with the max and min attributes to create a range of legal values. The step attribute works with the following input types: number, range, date, datetime-local, month, time and week. step Example An input field with a specified legal number intervals: Note: Input restrictions are not foolproof, and JavaScript provides many ways to add illegal input. To safely restrict input, it must also be checked by the receiver (the server)! The autofocus Attribute The input autofocus attribute specifies that an input field should automatically get focus when the page loads. autofocus Example Let the \"First name\" input field automatically get focus when the page loads: The height and width Attributes The input height and width attributes specify the height and width of an <input type=\"image\"> element. height width <input type=\"image\"> Tip: Always specify both the height and width attributes for images. If height and width are set, the space required for the image is reserved when the page is loaded. Without these attributes, the browser does not know the size of the image, and cannot reserve the appropriate space to it. The effect will be that the page layout will change during loading (while the images load). Example Define an image as the submit button, with height and width attributes: The list Attribute The input list attribute refers to a <datalist> element that contains pre-defined options for an <input> element. list <datalist> Example An <input> element with pre-defined values in a <datalist>: The autocomplete Attribute The input autocomplete attribute specifies whether a form or an input field should have autocomplete on or off. autocomplete Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values. The autocomplete attribute works with <form> and the following <input> types: text, search, url, tel, email, password, datepickers, range, and color. autocomplete <form> <input> Example An HTML form with autocomplete on, and off for one input field: Tip: In some browsers you may need to activate an autocomplete function for this to work (Look under \"Preferences\" in the browser's menu)."
  },
  {
    "document": "HTML Form and Input Elements For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Input form* Attributes This chapter describes the different form* attributes for the HTML <input> element. form* <input> The form Attribute The input form attribute specifies the form the <input> element belongs to. form <input> The value of this attribute must be equal to the id attribute of the <form> element it belongs to. Example An input field located outside of the HTML form (but still a part of the form): The formaction Attribute The input formaction attribute specifies the URL of the file that will process the input when the form is submitted. formaction Note: This attribute overrides the action attribute of the <form> element. action <form> The formaction attribute works with the following input types: submit and image. formaction Example An HTML form with two submit buttons, with different actions: The formenctype Attribute The input formenctype attribute specifies how the form-data should be encoded when submitted (only for forms with method=\"post\"). formenctype Note: This attribute overrides the enctype attribute of the <form> element. <form> The formenctype attribute works with the following input types: submit and image. formenctype Example A form with two submit buttons. The first sends the form-data with default encoding, the second sends the form-data encoded as \"multipart/form-data\": The formmethod Attribute The input formmethod attribute defines the HTTP method for sending form-data to the action URL. formmethod Note: This attribute overrides the method attribute of the <form> element. <form> The formmethod attribute works with the following input types: submit and image. formmethod The form-data can be sent as URL variables (method=\"get\") or as an HTTP post transaction (method=\"post\"). Notes on the \"get\" method: Notes on the \"post\" method: Example A form with two submit buttons. The first sends the form-data with method=\"get\". The second sends the form-data with method=\"post\": The formtarget Attribute The input formtarget attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form. formtarget Note: This attribute overrides the target attribute of the <form> element. <form> The formtarget attribute works with the following input types: submit and image. formtarget Example A form with two submit buttons, with different target windows: The formnovalidate Attribute The input formnovalidate attribute specifies that an <input> element should not be validated when submitted. formnovalidate Note: This attribute overrides the novalidate attribute of the <form> element. <form> The formnovalidate attribute works with the following input types: submit. formnovalidate Example A form with two submit buttons (with and without validation): The novalidate Attribute The novalidate attribute is a <form> attribute. novalidate <form> When present, novalidate specifies that all of the form-data should not be validated when submitted. Example Specify that no form-data should be validated on submit: HTML Form and Input Elements For a complete list of all available HTML tags, visit our HTML Tag Reference."
  },
  {
    "document": "HTML Canvas Graphics The HTML <canvas> element is used to draw graphics on a web page. <canvas> The graphic to the left is created with <canvas>. It shows four elements: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text. <canvas> What is HTML Canvas? The HTML <canvas> element is used to draw graphics, on the fly, via JavaScript. <canvas> The <canvas> element is only a container for graphics. You must use JavaScript to actually draw the graphics. <canvas> Canvas has several methods for drawing paths, boxes, circles, text, and adding images. Canvas is supported by all major browsers. Canvas Examples A canvas is a rectangular area on an HTML page. By default, a canvas has no border and no content. The markup looks like this: Note: Always specify an id attribute (to be referred to in a script), and a width and height attribute to define the size of the canvas. To add a border, use the style attribute. id width height style Here is an example of a basic, empty canvas: Example Add a JavaScript After creating the rectangular canvas area, you must add a JavaScript to do the drawing. Here are some examples: Draw a Line Example Draw a Circle Example Draw a Text Example Stroke Text Example Draw Linear Gradient Example Draw Circular Gradient Example Draw Image Example HTML Canvas Tutorial To learn more about <canvas>, please read our HTML Canvas Tutorial. <canvas>"
  },
  {
    "document": "HTML SVG Graphics SVG (Scalable Vector Graphics) SVG defines vector-based graphics in XML, which can be directly embedded in HTML pages. SVG graphics are scalable, and do not lose any quality if they are zoomed or resized: SVG is supported by all major browsers. What is SVG? The <svg> Element The HTML <svg> element is a container for SVG graphics. <svg> SVG has several methods for drawing paths, rectangles, circles, polygons, text, and much more. SVG Circle Example SVG Rectangle Example SVG Rectangle with Opacity and Rounded Corners Example SVG Star Example SVG Gradient Ellipse and Text Example Differences Between SVG and Canvas SVG is a language for describing 2D graphics in XML, while Canvas draws 2D graphics, on the fly (with JavaScript). SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers to SVG graphics. In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape. Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic. Comparison of SVG and Canvas The table below shows some important differences between Canvas and SVG: SVG Tutorial To learn more about SVG, please read our SVG Tutorial."
  },
  {
    "document": "HTML Multimedia Multimedia on the web is sound, music, videos, movies, and animations. What is Multimedia? Multimedia comes in many different formats. It can be almost anything you can hear or see, like images, music, sound, videos, records, films, animations, and more. Web pages often contain multimedia elements of different types and formats. Browser Support The first web browsers had support for text only, limited to a single font in a single color. Later came browsers with support for colors, fonts, images, and multimedia! Multimedia Formats Multimedia elements (like audio or video) are stored in media files. The most common way to discover the type of a file, is to look at the file extension. Multimedia files have formats and different extensions like: .wav, .mp3, .mp4, .mpg, .wmv, and .avi. Common Video Formats Note: Only MP4, WebM, and Ogg video are supported by the HTML standard. Common Audio Formats MP3 is the best format for compressed recorded music. The term MP3 has become synonymous with digital music. If your website is about recorded music, MP3 is the choice. Note: Only MP3, WAV, and Ogg audio are supported by the HTML standard."
  },
  {
    "document": "HTML Video The HTML <video> element is used to show a video on a web page. <video> Video Example Courtesy of Big Buck Bunny: The HTML <video> Element To show a video in HTML, use the <video> element: <video> Example How it Works The controls attribute adds video controls, like play, pause, and volume. controls It is a good idea to always include width and height attributes. If height and width are not set, the page might flicker while the video loads. width height The <source> element allows you to specify alternative video files which the browser may choose from. The browser will use the first recognized format. <source> The text between the <video> and </video> tags will only be displayed in browsers that do not support the <video> element. <video> </video> <video> HTML <video> Autoplay To start a video automatically, use the autoplay attribute: autoplay Example Note: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed. Add muted after autoplay to let your video start playing automatically (but muted): muted autoplay Example Browser Support The numbers in the table specify the first browser version that fully supports the <video> element. <video> HTML Video Formats There are three supported video formats: MP4, WebM, and Ogg. The browser support for the different formats is: HTML Video - Media Types HTML Video - Methods, Properties, and Events The HTML DOM defines methods, properties, and events for the <video> element. <video> This allows you to load, play, and pause videos, as well as setting duration and volume. There are also DOM events that can notify you when a video begins to play, is paused, etc. Example: Using JavaScript Video courtesy of Big Buck Bunny. For a full DOM reference, go to our HTML Audio/Video DOM Reference. HTML Video Tags"
  },
  {
    "document": "HTML Audio The HTML <audio> element is used to play an audio file on a web page. <audio> The HTML <audio> Element To play an audio file in HTML, use the <audio> element: <audio> Example HTML Audio - How It Works The controls attribute adds audio controls, like play, pause, and volume. controls The <source> element allows you to specify alternative audio files which the browser may choose from. The browser will use the first recognized format. <source> The text between the <audio> and </audio> tags will only be displayed in browsers that do not support the <audio> element. <audio> </audio> <audio> HTML <audio> Autoplay To start an audio file automatically, use the autoplay attribute: autoplay Example Note: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed. Add muted after autoplay to let your audio file start playing automatically (but muted): muted autoplay Example Browser Support The numbers in the table specify the first browser version that fully supports the <audio> element. <audio> HTML Audio Formats There are three supported audio formats: MP3, WAV, and OGG. The browser support for the different formats is: *From Edge 79 HTML Audio - Media Types HTML Audio - Methods, Properties, and Events The HTML DOM defines methods, properties, and events for the <audio> element. <audio> This allows you to load, play, and pause audios, as well as set duration and volume. There are also DOM events that can notify you when an audio begins to play, is paused, etc. For a full DOM reference, go to our HTML Audio/Video DOM Reference. HTML Audio Tags"
  },
  {
    "document": "HTML Plug-ins Plug-ins are computer programs that extend the standard functionality of the browser. Plug-ins Plug-ins were designed to be used for many different purposes: To run Java applets To run Microsoft ActiveX controls To display Flash movies To display maps To scan for viruses To verify a bank id Warning ! Most browsers no longer support Java Applets and Plug-ins. ActiveX controls are no longer supported in any browsers. The support for Shockwave Flash has also been turned off in modern browsers. The <object> Element The <object> element is supported by all browsers. The <object> element defines an embedded object within an HTML document. It was designed to embed plug-ins (like Java applets, PDF readers, and Flash Players) in web pages, but can also be used to include HTML in HTML: Example <object width=\"100%\" height=\"500px\" data=\"snippet.html\"></object> Try it Yourself Â» Or images if you like: Example <object data=\"audi.jpeg\"></object> Try it Yourself Â» The <embed> Element The <embed> element is supported in all major browsers. The <embed> element also defines an embedded object within an HTML document. Web browsers have supported the <embed> element for a long time. However, it has not been a part of the HTML specification before HTML5. Example <embed src=\"audi.jpeg\"> Try it Yourself Â» Note that the <embed> element does not have a closing tag. It can not contain alternative text. The <embed> element can also be used to include HTML in HTML: Example <embed width=\"100%\" height=\"500px\" src=\"snippet.html\"> Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Warning ! Most browsers no longer support Java Applets and Plug-ins. ActiveX controls are no longer supported in any browsers. The support for Shockwave Flash has also been turned off in modern browsers. The <object> Element The <object> element is supported by all browsers. <object> The <object> element defines an embedded object within an HTML document. <object> It was designed to embed plug-ins (like Java applets, PDF readers, and Flash Players) in web pages, but can also be used to include HTML in HTML: Example Or images if you like: Example The <embed> Element The <embed> element is supported in all major browsers. <embed> The <embed> element also defines an embedded object within an HTML document. <embed> Web browsers have supported the <embed> element for a long time. However, it has not been a part of the HTML specification before HTML5. Example Note that the <embed> element does not have a closing tag. It can not contain alternative text. The <embed> element can also be used to include HTML in HTML: <embed> Example"
  },
  {
    "document": "HTML YouTube Videos The easiest way to play videos in HTML, is to use YouTube. Struggling with Video Formats? Converting videos to different formats can be difficult and time-consuming. An easier solution is to let YouTube play the videos in your web page. YouTube Video Id YouTube will display an id (like tgbNymZ7vqY), when you save (or play) a video. You can use this id, and refer to your video in the HTML code. Playing a YouTube Video in HTML To play your video on a web page, do the following: <iframe> src width height Example YouTube Autoplay + Mute You can let your video start playing automatically when a user visits the page, by adding autoplay=1 to the YouTube URL. However, automatically starting a video is annoying for your visitors! autoplay=1 Note: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed. Add mute=1 after autoplay=1 to let your video start playing automatically (but muted). mute=1 autoplay=1 YouTube - Autoplay + Muted YouTube Playlist A comma separated list of videos to play (in addition to the original URL). YouTube Loop Add playlist=videoID and loop=1 to let your video loop forever. playlist=videoID loop=1 loop=0 (default) - The video will play only once. loop=0 loop=1 - The video will loop (forever). loop=1 YouTube - Loop forever YouTube Controls Add controls=0 to NOT display controls in the video player. controls=0 controls=0 - Player controls does not display. controls=0 controls=1 (default) - Player controls is displayed. controls=1 YouTube - Controls"
  },
  {
    "document": "HTML - What is a Web API? A Web API is a developer's dream. What is Web API? API stands for Application Programming Interface. An API is some kind of interface that includes a set of functions and subroutines that allow programmers to access specific features or data of an application, operating system or other services. A Web API is an application programming interface for the Web. HTML APIs All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data. Here are some of the main HTML5 APIs: 1. Geolocation API - This API is used to access the current location of a user (with latitude and longitude). 2. Drag and Drop API - This API enables you to use drag-and-drop features in browsers. 3. Web Storage API - This API has mechanisms to let browsers store key/value pairs (in a more intuitive way than cookies). 4. Web Workers API - This API allows a JavaScript to run in the background, without affecting the performance of the page. Users can continue to do whatever they want: clicking, selecting things, etc., while the web worker runs in the background. 5. Server-Sent Events API - This API allows a web page to automatically get updates from a server. 6. Canvas API - This API lets you draw graphics, on the fly, via JavaScript. Notes on Using HTML APIs When implementing an HTML API, you should always: Check Browser Capability - Always check that the target browsers support the API. Always add script or message to be run if a browser does not support it. Add Robust Error Handling - Add robust error handling to take care of scenarios where an API may not function as expected, to ensure a seamless user experience. Request User Permission - When using an API that accesses sensitive data, like the Geolocation API (which will access the user's geographical position), always prompt the user for consent before proceeding. Third Party APIs Third party APIs are not built into your browser. To use these APIs, you will have to download the code from the Web. Examples:"
  },
  {
    "document": "HTML Geolocation API The Geolocation API is used to get the user's current location. Locate the User's Position The Geolocation API is used to access the user's current location. Since this can compromise privacy, the location is not available unless the user approves it. Try It Note: The Geolocation API is only available on secure contexts such as HTTPS. Tip: The Geolocation API is most accurate for devices with GPS, like smartphones or smartwatches. Browser Support The numbers in the table specify the first browser version that fully supports Geolocation. Using HTML Geolocation API The Geolocation API is accessed via a call to navigator.geolocation. This will cause the browser to ask the user for permission to access their location data. If the user accept, the browser will search for the best available functionality on the device to access this information (for example GPS). navigator.geolocation The getCurrentPosition() method is used to return the user's current location. getCurrentPosition() The example below returns the latitude and longitude of the user's current location: Example Example explained: getCurrentPosition() getCurrentPosition() Error Handling and Rejections The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location. getCurrentPosition() Here is an example of a more specific error handling: Example Location-specific Information Geolocation is also very useful for location-specific information, like: The getCurrentPosition() Method - Return Data The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available: getCurrentPosition() Geolocation Object - Other interesting Methods The Geolocation object also has other interesting methods: watchPosition() clearWatch() watchPosition() The example below shows the watchPosition() method. You need an accurate GPS device to test this (like a smartphone): watchPosition() Example"
  },
  {
    "document": "HTML Drag and Drop API The HTML Drag and Drop API enables an element to be dragged and dropped. Example Drag the W3Schools image into the second rectangle. Drag and Drop Drag and drop is a very common feature. It is when you \"grab\" an object and drag it to a different location. Browser Support The numbers in the table specify the first browser version that fully supports Drag and Drop. HTML Drag and Drop API Example The example below is a simple drag and drop example: Example It might seem complicated, but lets go through all the different parts of a drag and drop event. Make an Element Draggable First of all: To make an element draggable, set the draggable attribute to true: draggable or: What to Drag - ondragstart and setData() Then, specify what should happen when the element is dragged. In the example above, the ondragstart attribute of the <img> element calls a function (dragstartHandler(ev)), that specifies what data to be dragged. ondragstart The dataTransfer.setData() method sets the data type and the value of the dragged data: dataTransfer.setData() In this case, the data type is \"text\" and the value is the id of the draggable element (\"img1\"). Where to Drop - ondragover The ondragover attrribute of the <div> element calls a function (dragoverHandler(ev)), that specifies where the dragged data can be dropped. ondragover By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element. This is done by calling the preventDefault() method for the ondragover event: preventDefault() Do the Drop - ondrop When the dragged data is dropped, a drop event occurs. In the example above, the ondrop attribute of the <div> element calls a function, dropHandler(event): Code explained: preventDefault() dataTransfer.getData() setData() More Examples Example How to drag and drop an <h1> element to a <div> element: Example How to drag and drop an <a> element to a <div> element: Example How to drag and drop an image back and forth between two <div> elements:"
  },
  {
    "document": "HTML Web Storage API HTML Web Storage API; better than cookies. What is HTML Web Storage? With web storage, applications can store data locally within the user's browser. Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server. Web storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data. Web Storage API Objects Web storage provides two objects for storing data in the browser: window.localStorage window.sessionStorage Browser Support The numbers in the table specify the first browser version that fully supports Web Storage. Test Web Storage API Support Before using web storage, we can quickly check browser support for localStorage and sessionStorage: Example Test browser support: The localStorage Object The localStorage object stores the data with no expiration date. The data will not be lost when the browser is closed, and will be available the next day, week, or year. localStorage Example Use localStorage to set and retrieve name and value pairs: localStorage Example explained: localStorage.setItem() localStorage.getItem() The syntax for removing the \"lastname\" localStorage item is as follows: Note: Name/value pairs are always stored as strings. Remember to convert them to another format when needed! Counting Clicks with localStorage The following example counts the number of times a user has clicked a button. In this code the value string is converted to a number to be able to increase the counter: Example The sessionStorage Object The sessionStorage object is equal to the localStorage object, except that it stores the data for only one session! The data is deleted when the user closes the specific browser tab. sessionStorage localStorage Counting Clicks with sessionStorage The following example counts the number of times a user has clicked a button, in the current session: Example"
  },
  {
    "document": "HTML Web Workers API A web worker is an external JavaScript file that runs in the background, without affecting the performance of the page. What is a Web Worker? When executing scripts in an HTML page, the page becomes unresponsive until the script is finished. A web worker is an external JavaScript file that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background. Web workers are useful for heavy code that can't be run on the main thread, without causing long tasks that make the page unresponsive. Browser Support The numbers in the table specify the first browser version that fully support the Web Workers API. Web Workers API Example The example below creates a simple web worker that count numbers in the background: Example Start Worker Stop Worker Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks! Check Web Worker API Support Before using web worker, we can quickly check browser support: Example Test browser support: Create a .js Web Worker File Now, let's create a web worker in an external JavaScript file. Here we create a script that counts. The script is stored in the \"demo_workers.js\" file: Note: The important part of the code above is the postMessage() method - which is used to post messages back to the HTML page. postMessage() Create a Web Worker Object Once we have created the .js web worker file, we can call it from an HTML page. The following lines checks if a worker (w) already exists, if not - it creates a new web worker object and points to the .js file: \"demo_workers.js\": Then we can SEND and RETRIEVE messages from the web worker. Data is sent between web workers and the main thread via a system of messages - both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler. postMessage() onmessage Add an onmessage event listener to the web worker object. onmessage When the web worker in the .js posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data. event.data Terminate a Web Worker When a web worker object is created, it will continue to listen for messages until it is terminated. To terminate a web worker object, and free browser/computer resources, use the terminate() method: terminate() Reuse the Web Worker If you set the web worker variable to undefined, after it has been terminated, you can reuse the worker/code: Full Web Worker Example We have already seen the Web Worker code in the .js file. Below is the full code for the HTML page: Example Web Workers and the DOM Since web workers are in external .js files, they do not have access to the following JavaScript objects:"
  },
  {
    "document": "HTML Server-Sent Events API The Server-Sent Events (SSE) API enables pushing messages/updates from a server to the web page via HTTP connection. Server-Sent Events - One Way Messaging A server-sent event is when a web page automatically gets messages/updates from a server. Normally, a web page has to request data from the server, but with server-sent events, the updates are pushed automatically. Examples: Facebook/Twitter updates, stock market updates, news feeds, sport results, etc. Browser Support The numbers in the table specify the first browser version that fully support the Server-Sent Events API. Receive Server-Sent Event Notifications The EventSource object is used to receive server-sent event notifications: EventSource Example Example explained: EventSource onmessage onmessage Check Browser Support In the tryit example above there were some extra lines of code to check browser support for server-sent events: Server-Side Code Example For the example above to work, you need a server capable of sending data updates (like PHP or ASP). The server-side event stream syntax is simple. Set the \"Content-Type\" header to \"text/event-stream\". Now you can start sending event streams. Code in PHP (demo_sse.php): Code in ASP (VB) (demo_sse.asp): Code explained: The EventSource Object In the examples above we used the onmessage event to get messages. But other events are also available:"
  },
  {
    "document": "HTML Examples HTML Basic Examples explained HTML Attributes Examples explained HTML Headings Examples explained HTML Paragraphs Examples explained HTML Styles Examples explained HTML Text Formatting Examples explained HTML Quotations and Citations Examples explained HTML Comments Examples explained HTML CSS Examples explained HTML Links Examples explained HTML Images Examples explained HTML Tables Examples explained HTML Lists Examples explained HTML Block and inline elements Examples explained HTML Div Element Examples explained HTML Classes Examples explained HTML Id Examples explained HTML Layout Examples explained HTML IFrame Examples explained HTML head Elements Examples explained HTML Scripts Examples explained HTML Computercode Elements Examples explained HTML Forms Examples explained HTML Form Elements Examples explained HTML Input Types Examples explained HTML Input Attributes Examples explained HTML Canvas Graphics Examples explained HTML SVG Graphics Examples explained HTML Media Examples explained HTML Geolocation Examples explained HTML Local Storage Examples explained HTML Media Examples explained More HTML Examples"
  },
  {
    "document": "HTML Online Editor HTML Editor With our online HTML editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser. Example This is a Heading This is a paragraph. Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that lets you make and share your own website. You can change the website's look and how it works by editing the code right in your web browser. It's easy to use and doesn't require any setup: The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your HTML knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, but you can use it for other languages too, such as PHP, Python, Node.js, etc. If you don't know HTML, we suggest that you read our HTML Tutorial from scratch. Build Powerful Websites You can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share It With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "HTML Quiz You can test your HTML skills with W3Schools' Quiz. The Test The test contains 40 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about HTML. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 40 points. Start the Quiz Good luck! Start the HTML Quiz â¯ If you don't know HTML, we suggest that you read our HTML Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "HTML Exercises Exercises Test your HTML skills with exercises from all categories: Introduction Basic Elements Attributes Headings Paragraphs Styles Formatting Quotations Comments Colors RGB Colors Hex Colors HSL Colors CSS Links Link Colors Bookmarks Images Image Map Background Images Picture Favicon Title Tables Table Borders Table Sizes Table Headers Table Padding/Spacing Table Colspan and Rowspan Lists Unordered Lists Ordered Lists Description Lists Block and Inline Div element Classes Id Iframes Scripts Head Responsive Computercode Semantic Elements Entities Forms Form Attributes Form Elements Input Types Input Attributes Input Form Attributes Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "HTML Website Hosting Create Website with HTML Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "HTML Syllabus Introduction The W3Schools HTML Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of HTML. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn HTML step by step, from the introduction to creating your first application with HTML. Get Started With HTML Â» Learning Outcomes Note: Are you a teacher teaching HTML? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are HTML Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn HTML for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment HTML, like any other coding language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit HTML code and view the result: Example If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account HTML Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The HTML exam is a test that summarizes the W3Schools HTML syllabus. After passing the exam you get the \"Certified HTML Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach HTML? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "HTML Study Plan Introduction The HTML study plan helps you teach your students HTML step-by-step. Creating a study plan for HTML is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of HTML to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach HTML. The HTML training materials is available for you to include and use in your study plan: HTML Syllabus With the HTML Syllabus, your students will start with the basics, like creating simple web pages, and move to more advanced topics, like adding images, links, and forms. Each chapter has examples, try-its, exercises, and quizzes to make learning easy, interactive and fun. Read more about HTML Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 4 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 4-week HTML study plan could look like: Image of Sample HTML study plan: Ready to get started? Start with HTML Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach HTML programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "HTML Interview Preparation Try W3Schools' comprehensive Front-End interview preparation feature. A tool that will help you get ready for your next interview. W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance. After the interview training you will get an evaluation of your performance that you can use to improve yourself. Get Started What to expect in a Front-End interview If you are going to a Front-End interview, there are a few things you can expect: Coding Questions: You will be asked coding questions, and you possibly also get a task to solve. Examples of technical questions: Tell me about your experience as a Front-End developer. Tell me about a personal project where you worked on implementing the user interface for a website. Examples of a task: Create a webpage that shows a greeting message to the user. Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day. If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers. Showcase your skills and projects: They would like to see projects to understand your work better. You can include current projects in your portfolio even if they are unfinished. Examples of projects to have in your portfolio: What to do before the interview Before you go to an interview, you should check out the company. It will give you a better understanding of their values and what they do. Check out: Make sure you understand the job description: Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand. You can also ask a friend or a community member to help you. There is a big community of Front-End developers on social media. Reflect on why you are the right fit for this role: Companies hire people they believe will be the right fit. Think about what value you can add to the role and the team. Write them down. It will help you discuss how you are the right candidate for the role. We have created an interview tool to help you prepare: Try it out  What is Front-End Development? Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience. Typical Languages Used in Front-End Development: Career Outlook The demand for Front-End developers is high. You can expect: The Average Salary is $112,328 in the US. Typical Job Titles for a Front-End Developer: Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more. Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!"
  },
  {
    "document": "Try W3Schools interview preparation here: Interview Preperation Best of luck!"
  },
  {
    "document": "W3Schools HTML Bootcamp HTML & CSS Bootcamp Learn More What You Will Learn HTML CSS JavaScript Self-paced Courses Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript. HTML is the standard markup language for Web pages. With HTML you can create your own Website. CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed. JavaScript is the programming language of the Web. This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification. The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification. What You Get 4x Certifications: Certificate of Completion You get sharable certificates that can be added to your CV, Resume or LinkedIn. Check out what it looks like in this example! Three Reasons to Join the Program Learn More How it Works Step 1. Course enrollment Enroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content. Step 2. Complete the course learning modules The courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam. Step 3. Take the exams The exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count. Step 4: Become certified Pass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code. Learn More"
  },
  {
    "document": "You Have Learned HTML, Now What? HTML Summary This tutorial has taught you how to use HTML to create your own web site. HTML is the universal markup language for the Web. HTML lets you format text, add graphics, create links, input forms, frames and tables, etc., and save it all in a text file that any browser can read and display. For more information on HTML, please take a look at our HTML examples and our HTML reference. You can also test your HTML skills with HTML Exercises and HTML Quizzes. Now You Know HTML, What's Next? Learn CSS CSS lets you style your HTML pages. CSS gives you total control of the layout, without messing up the document content. To learn more about CSS, please visit our CSS tutorial. Learn JavaScript JavaScript makes your website more dynamic. A dynamic website can react to events and allow user interaction. JavaScript is the most popular scripting language on the internet and it works with all major browsers. If you want to learn more about JavaScript, please visit our JavaScript tutorial. Publishing Your Website To make your website available to the world, you must publish it. For this, you have two options: Using an Internet Service Provider An Internet service provider (ISP) is a company that provides services for accessing and using the Internet. Internet services typically provided by ISPs include Internet access, Internet transit, domain name registration, web hosting, Usenet service, and colocation. Using an Internet Service Provider (ISP) is the most common option. Advantages: Things to Consider: Hosting Your Own Website Hosting your own website, on your own server, is also an option. Things to Consider: Kickstart your career Get certified by completing the course"
  },
  {
    "document": "HTML Accessibility HTML Accessibility Always write HTML code with accessibility in mind! Provide the user a good way to navigate and interact with your site. Make your HTML code as semantic as possible. Semantic HTML Semantic HTML means using correct HTML elements for their correct purpose as much as possible. Semantic elements are elements with a meaning; if you need a button, use the <button> element (and not a <div> element). <button> <div> Semantic Non-semantic Semantic HTML gives context to screen readers, which read the contents of a page out loud. With the button example in mind: A button is also accessible for people relying on keyboard-only navigation; it can be clickable with both mouse and keys, and it can be tabbed between (using the tab key on the keyboard). Examples of non-semantic elements: <div> and <span> - Tells nothing about its content. <div> <span> Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content. <form> <table> <article> Headings Are Important Headings are defined with the <h1> to <h6> tags: <h1> <h6> Example Search engines use the headings to index the structure and content of your web pages. Users skim your pages by its headings. It is important to use headings to show the document structure and the relationships between different sections. Screen readers also use headings as a navigational tool. The different types of heading specify the outline of the page. <h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on. <h1> <h2> <h3> Note: Use HTML headings for headings only. Don't use headings to make text BIG or bold. Alternative Text The alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader). alt src The value of the alt attribute should describe the image: alt Example If a browser cannot find an image, it will display the value of the alt attribute: alt Example Declare the Language You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers. lang <html> The following example specifies English as the language: Use Clear Language Always use a clear language, that is easy to understand. Also try to avoid characters that cannot be read clearly by a screen reader. For example: Create Good Link Text A link text should explain clearly what information the reader will get by clicking on that link. Examples of good and bad links: Good Find out more about the HTML language Read more about how to eat healthy Buy tickets to Mars here Bad Click here Read more.. Buy tickets to Mars here Note: This page is an introduction in web accessibility. Visit our Accessibility Tutorial for more details."
  },
  {
    "document": "HTML Element Reference HTML Tags Ordered Alphabetically"
  },
  {
    "document": "HTML Attribute Reference HTML Attribute Reference The table below lists all HTML attributes and what elements they can be used within:"
  },
  {
    "document": "HTML Global Attributes HTML Global Attributes The global attributes are attributes that can be used with all HTML elements."
  },
  {
    "document": "HTML Reference - Browser Support HTML Reference With Browser Support The table below lists all HTML elements and their attributes, along with browser support: * Not supported by default, but can be enabled in about:config (set dom.dialog_element.enabled to true)."
  },
  {
    "document": "HTML Event Attributes Global Event Attributes HTML has the ability to let events trigger actions in a browser, like starting a JavaScript when a user clicks on an element. To learn more about programming events, please visit our JavaScript tutorial. Below are the global event attributes that can be added to HTML elements to define event actions. Window Event Attributes Events triggered for the window object (applies to the <body> tag): Form Events Events triggered by actions inside a HTML form (applies to almost all HTML elements, but is most used in form elements): Keyboard Events Mouse Events Drag Events Clipboard Events Media Events Events triggered by medias like videos, images and audio (applies to all HTML elements, but is most common in media elements, like <audio>, <embed>, <img>, <object>, and <video>). Tip: Look at our HTML Audio and Video DOM Reference for more information. Misc Events"
  },
  {
    "document": "HTML Color Names Color Names Supported by All Browsers All modern browsers support the following 140 color names (click on a color name, or a hex value, to view the color as the background-color along with different text colors): For a full overview of HTML colors, visit our colors tutorial."
  },
  {
    "document": "HTML Canvas Reference The <canvas> element defines a bitmapped area in an HTML page. The Canvas API allows JavaScript to draw graphics on the canvas. The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors, rotations, transparencies, and other pixel manipulations. You can add a canvas element anywhere in an HTML page with the <canvas> tag: <canvas> Example You can access a <canvas> element with the HTML DOM method getElementById(). <canvas> getElementById() To draw in the canvas you need to create a 2D context object: Note The HTML <canvas> element itself has no drawing abilities. <canvas> You must use JavaScript to draw any graphics. The getContext() method returns an object with tools (methods) for drawing. getContext() Drawing on the Canvas After you have created a 2D context, you can draw on the canvas. The fillRect() method draws a black rectangle with a top-left corner at position 20,20. The rectangle is 150 pixel wide and 100 pixels high. Example Using Colors The fillStyle property sets the fill color of the drawing object: Example You can also create a new <canvas> element with the document.createElement() method, and add the element to an existing HTML page: <canvas> document.createElement() Example Paths The common way to draw on the canvas is to: Begin a Path - beginPath() Move to a Point - moveTo() Draw in the Path - lineTo() Draw the Path - stroke() Example Complete Canvas API Reference This reference covers all Properties and Methods of the getContext(\"2d\") Object, used to draw text, lines, boxes, circles, pictures, and more on the canvas. Drawing Methods There are only 3 methods to draw directly on the canvas: Path Methods Text Colors, Styles, and Shadows Transformations Image Drawing The ImageData Object / Pixel Manipulation Compositing Other Methods Standard Properties and Events The canvas object also supports the standard properties and events. Related Pages Canvas tutorial: Canvas Tutorial HTML tutorial: HTML5 Canvas HTML reference: HTML <canvas> tag Browser Support The <canvas> element is an HTML5 standard (2014). <canvas> Canvas API is supported in all modern browsers: Canvas API"
  },
  {
    "document": "HTML Audio/Video DOM Reference HTML Audio and Video DOM Reference The HTML5 DOM has methods, properties, and events for the <audio> and <video> elements. <audio> <video> HTML Audio/Video Methods HTML Audio/Video Properties HTML Audio/Video Events"
  },
  {
    "document": "HTML <!DOCTYPE> The HTML Document Type All HTML documents must start with a <!DOCTYPE> declaration. <!DOCTYPE> The declaration is not an HTML tag. It is an \"information\" to the browser about what document type to expect. In HTML5, the <!DOCTYPE> declaration is simple: <!DOCTYPE> In older documents (HTML 4 or XHTML), the declaration is more complicated because the declaration must refer to a DTD (Document Type Definition). You can read more about document types in the <!DOCTYPE> reference. Valid HTML Elements in Different DOCTYPES"
  },
  {
    "document": "HTML Character Sets Common HTML Character Sets The default character set in HTML5 is UTF-8. For a closer look, visit our Complete HTML Character Set Reference."
  },
  {
    "document": "HTML URL Encoding Reference URL - Uniform Resource Locator Web browsers request pages from web servers by using a URL. The URL is the address of a web page, like: https://www.w3schools.com. URL Encoding (Percent Encoding) URL encoding converts characters into a format that can be transmitted over the Internet. URLs can only be sent over the Internet using the ASCII character-set. Since URLs often contain characters outside the ASCII set, the URL has to be converted into a valid ASCII format. URL encoding replaces unsafe ASCII characters with a \"%\" followed by two hexadecimal digits. URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign or with %20. Try It Yourself If you click the \"Submit\" button below, the browser will URL encode the input before it is sent to the server. A page at the server will display the received input. Try some other input and click Submit again. URL Encoding Functions In JavaScript, PHP, and ASP there are functions that can be used to URL encode a string. PHP has the rawurlencode() function, and ASP has the Server.URLEncode() function. In JavaScript you can use the encodeURIComponent() function. Click the \"URL Encode\" button to see how the JavaScript function encodes the text. Note: The JavaScript function encodes space as %20. ASCII Encoding Reference Your browser will encode input, according to the character-set used in your page. The default character-set in HTML5 is UTF-8. URL Encoding Reference The ASCII control characters %00-%1F were originally designed to control hardware devices. Control characters have nothing to do inside a URL."
  },
  {
    "document": "HTML Language Code Reference ISO Language Codes You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers: lang <html> In XHTML, the language is declared inside the <html> tag as follows: <html> ISO 639-1 Language Codes ISO 639-1 defines abbreviations for languages: See also: Reference for Country Codes."
  },
  {
    "document": "HTTP Status Messages HTML Error Messages When a browser requests a service from a web server, an error might occur, and the server might return an error code like \"404 Not Found\". It is common to name these errors HTML error messages. But these messages are something called HTTP status messages. In fact, the server always returns a message for every request. The most common message is 200 OK. Below is a list of HTTP status messages that might be returned: 1xx: Information 2xx: Successful 3xx: Redirection 4xx: Client Error 5xx: Server Error"
  },
  {
    "document": "HTTP Request Methods What is HTTP? The Hypertext Transfer Protocol (HTTP) is designed to enable communications between clients and servers. HTTP works as a request-response protocol between a client and server. Example: A client (browser) sends an HTTP request to the server; then the server returns a response to the client. The response contains status information about the request and may also contain the requested content. HTTP Methods The two most common HTTP methods are: GET and POST. The GET Method GET is used to request data from a specified resource. Note that the query string (name/value pairs) is sent in the URL of a GET request: Some notes on GET requests: The POST Method POST is used to send data to a server to create/update a resource. The data sent to the server with POST is stored in the request body of the HTTP request: Some notes on POST requests: Compare GET vs. POST The following table compares the two HTTP methods: GET and POST. The PUT Method PUT is used to send data to a server to create/update a resource. The difference between POST and PUT is that PUT requests are idempotent. That is, calling the same PUT request multiple times will always produce the same result. In contrast, calling a POST request repeatedly have side effects of creating the same resource multiple times. The HEAD Method HEAD is almost identical to GET, but without the response body. In other words, if GET /users returns a list of users, then HEAD /users will make the same request but will not return the list of users. A HEAD request is useful for checking what a GET request will return before actually making a GET request - a HEAD request can read the Content-Length header to check the size of the file, without actually downloading the file. The DELETE Method The DELETE method deletes the specified resource. The PATCH Method The PATCH method is used to apply partial modifications to a resource. The OPTIONS Method The OPTIONS method describes the communication options for the target resource. The CONNECT Method The CONNECT method is used to start a two-way communications (a tunnel) with the requested resource. The TRACE Method The TRACE method is used to perform a message loop-back test that tests the path for the target resource (useful for debugging purposes)."
  },
  {
    "document": "Pixels to Ems Conversion Pixel to Em Converter The tool below allows you to work out the em sizes from pixels (or vice versa). Set a default pixel size: Convert PX to EM: px Convert EM to PX: em  Result: Body Font Size In the table below, select a body font size in pixels (px) to display a complete \"px to em and percent\" conversion table. Tip: The default font size is usually 16px. What is the difference between PX, EM and Percent? Pixel is a static measurement, while percent and EM are relative measurements. The size of an EM or percent depends on its parent. If the text size of body is 16 pixels, then 150% or 1.5 EM will be 24 pixels (1.5 * 16). Look at CSS Units for more measurement units."
  },
  {
    "document": "Keyboard Shortcuts Keyboard Shortcuts For Windows and Mac Keyboard shortcuts are often used in modern operating systems and computer software programs. Learning and using keyboard shortcuts can save you a lot of time. Basic Shortcuts Text Editing Web Browsers Screenshots Note: Due to different keyboard setups, some shortcuts may not be compatible for all users."
  },
  {
    "document": "Java Tutorial Learn Java Java is a popular programming language. Java is used to develop mobile apps, web apps, desktop apps, games and much more. Examples in Each Chapter Our \"Try it Yourself\" editor makes it easy to learn Java. You can edit Java code and view the result in your browser. Example public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» Click on the \"Run example\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. Java is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed. Java Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Java Exercises Java Quiz Test your Java skills with a quiz. Start Java Quiz Learn by Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Java Examples Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Java Reference You will also find complete keyword and method references: Java Keywords Java String Methods Java Math Methods Java Output Methods Java Arrays Methods Java ArrayList Methods Java LinkedList Methods Java HashMap Methods Java Scanner Methods Java Iterator Methods Java Errors and Exception Types Download Java Download Java from the official Java web site: https://www.oracle.com Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Java Introduction What is Java? Java is a popular programming language, created in 1995. It is owned by Oracle, and more than 3 billion devices run Java. It is used for: Why Use Java? Get Started When you are finished with this tutorial, you will be able to write basic Java programs and create real-life examples. It is not necessary to have any prior programming experience. Video: Java Introduction"
  },
  {
    "document": "Java Getting Started Java Install Some PCs might have Java already installed. To check if you have Java installed on a Windows PC, search in the start bar for Java or type the following in Command Prompt (cmd.exe): If Java is installed, you will see something like this (depending on version): java version \"22.0.0\" 2024-08-21 LTS Java(TM) SE Runtime Environment 22.9 (build 22.0.0+13-LTS) Java HotSpot(TM) 64-Bit Server VM 22.9 (build 22.0.0+13-LTS, mixed mode) If you do not have Java installed on your computer, you can download it for free at oracle.com. Note: In this tutorial, we will write Java code in a text editor. However, it is possible to write Java in an Integrated Development Environment, such as IntelliJ IDEA, Netbeans or Eclipse, which are particularly useful when managing larger collections of Java files. Java Quickstart In Java, every application begins with a class name, and that class must match the filename. Let's create our first Java file, called Main.java, which can be done in any text editor (like Notepad). The file should contain a \"Hello World\" message, which is written with the following code: Main.java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code above. Save the code in Notepad as \"Main.java\". Open Command Prompt (cmd.exe), navigate to the directory where you saved your file, and type \"javac Main.java\": This will compile your code. If there are no errors in the code, the command prompt will take you to the next line. Now, type \"java Main\" to run the file: The output should read: Hello World Congratulations! You have written and executed your first Java program. W3Schools' Java Editor When learning Java at W3Schools.com, you can use our \"Try it Yourself\" tool, which shows both the code and the result. It is used to write, run, and test code right in your browser: Main.java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» This editor will be used in the entire tutorial to demonstrate the different aspects of Java. Video: Java Get Started"
  },
  {
    "document": "Java Syntax Java Syntax In the previous chapter, we created a Java file called Main.java, and we used the following code to print \"Hello World\" to the screen: Main.java Main.java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» Example explained Every line of code that runs in Java must be inside a class. And the class name should always start with an uppercase first letter. In our example, we named the class Main. class Note: Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning. The name of the java file must match the class name. When saving the file, save it using the class name and add \".java\" to the end of the filename. To run the example above on your computer, make sure that Java is properly installed: Go to the Get Started Chapter for how to install Java. The output should be: Hello World The main Method The main() method is required and you will see it in every Java program: main() public static void main(String[] args) public static void main(String[] args) Any code inside the main() method will be executed. Don't worry about the keywords before and after it. You will get to know them bit by bit while reading this tutorial. main() For now, just remember that every Java program has a class name which must match the filename, and that every program must contain the main() method. class main() System.out.println() Inside the main() method, we can use the println() method to print a line of text to the screen: main() println() public static void main(String[] args) { System.out.println(\"Hello World\"); } public static void main(String[] args) { System.out.println(\"Hello World\"); } Try it Yourself Â» Note: The curly braces {} marks the beginning and the end of a block of code. {} System is a built-in Java class that contains useful members, such as out, which is short for \"output\". The println() method, short for \"print line\", is used to print a value to the screen (or a file). System out println() Don't worry too much about how System, out and println() works. Just know that you need them together to print stuff to the screen. System out println() You should also note that each code statement must end with a semicolon (;). ; Video: Java Syntax"
  },
  {
    "document": "Java Output / Print Print Text You learned from the previous chapter that you can use the println() method to output values or print text in Java: println() Example System.out.println(\"Hello World! \"); System.out.println(\"Hello World! \"); Try it Yourself Â» You can add as many println() methods as you want. Note that it will add a new line for each method: println() Example System.out.println(\"Hello World! \"); System.out.println(\"I am learning Java. \"); System.out.println(\"It is awesome! \"); System.out.println(\"Hello World! \"); System.out.println(\"I am learning Java. \"); System.out.println(\"It is awesome! \"); Try it Yourself Â» Double Quotes Text must be wrapped inside double quotations marks \"\". \"\" If you forget the double quotes, an error occurs: Example System.out.println(\"This sentence will work! \"); System.out.println(\"This sentence will work! \"); System.out.println(This sentence will produce an error); System.out.println(This sentence will produce an error); Try it Yourself Â» The Print() Method There is also a print() method, which is similar to println(). print() println() The only difference is that it does not insert a new line at the end of the output: Example System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); Try it Yourself Â» Note that we add an extra space (after \"Hello World!\" in the example above) for better readability. In this tutorial, we will only use println() as it makes the code output easier to read. println() Video: Java Output / Print"
  },
  {
    "document": "Java Output / Print Print Text You learned from the previous chapter that you can use the println() method to output values or print text in Java: println() Example System.out.println(\"Hello World! \"); System.out.println(\"Hello World! \"); Try it Yourself Â» You can add as many println() methods as you want. Note that it will add a new line for each method: println() Example System.out.println(\"Hello World! \"); System.out.println(\"I am learning Java. \"); System.out.println(\"It is awesome! \"); System.out.println(\"Hello World! \"); System.out.println(\"I am learning Java. \"); System.out.println(\"It is awesome! \"); Try it Yourself Â» Double Quotes Text must be wrapped inside double quotations marks \"\". \"\" If you forget the double quotes, an error occurs: Example System.out.println(\"This sentence will work! \"); System.out.println(\"This sentence will work! \"); System.out.println(This sentence will produce an error); System.out.println(This sentence will produce an error); Try it Yourself Â» The Print() Method There is also a print() method, which is similar to println(). print() println() The only difference is that it does not insert a new line at the end of the output: Example System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); Try it Yourself Â» Note that we add an extra space (after \"Hello World!\" in the example above) for better readability. In this tutorial, we will only use println() as it makes the code output easier to read. println() Video: Java Output / Print"
  },
  {
    "document": "Java Output Numbers Print Numbers You can also use the println() method to print numbers. println() However, unlike text, we don't put numbers inside double quotes: Example System.out.println(3); System.out.println(358); System.out.println(50000); System.out.println(3); System.out.println(358); System.out.println(50000); Try it Yourself Â» You can also perform mathematical calculations inside the println() method: println() Example System.out.println(3 + 3); System.out.println(3 + 3); Try it Yourself Â» Example System.out.println(2 * 5); System.out.println(2 * 5); Try it Yourself Â»"
  },
  {
    "document": "Java Comments Java Comments Comments can be used to explain Java code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Single-line Comments Single-line comments start with two forward slashes (//). // Any text between // and the end of the line is ignored by Java (will not be executed). // This example uses a single-line comment before a line of code: Example // This is a comment System.out.println(\"Hello World\"); // This is a comment System.out.println(\"Hello World\"); Try it Yourself Â» This example uses a single-line comment at the end of a line of code: Example System.out.println(\"Hello World\"); // This is a comment System.out.println(\"Hello World\"); // This is a comment Try it Yourself Â» Java Multi-line Comments Multi-line comments start with /* and ends with */. /* */ Any text between /* and */ will be ignored by Java. /* */ This example uses a multi-line comment (a comment block) to explain the code: Example /* The code below will print the words Hello World to the screen, and it is amazing */ System.out.println(\"Hello World\"); /* The code below will print the words Hello World to the screen, and it is amazing */ System.out.println(\"Hello World\"); Try it Yourself Â» It's up to you which one you use. Normally, we use // for short comments, and /* */ for longer. // /* */ Video: Java Comments"
  },
  {
    "document": "Java Variables Java Variables Variables are containers for storing data values. In Java, there are different types of variables, for example: String int float char boolean Declaring (Creating) Variables To create a variable, you must specify the type and assign it a value: Syntax type variableName = value; type variableName = value; Where type is one of Java's types (such as int or String), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable. int String To create a variable that should store text, look at the following example: Example Create a variable called name of type String and assign it the value \"John\". Then we use println() to print the name variable: String println() String name = \"John\"; System.out.println(name); String name = \"John\"; System.out.println(name); Try it Yourself Â» To create a variable that should store a number, look at the following example: Example Create a variable called myNum of type int and assign it the value 15: int int myNum = 15; System.out.println(myNum); int myNum = 15; System.out.println(myNum); Try it Yourself Â» You can also declare a variable without assigning the value, and assign the value later: Example int myNum; myNum = 15; System.out.println(myNum); int myNum; myNum = 15; System.out.println(myNum); Try it Yourself Â» Note that if you assign a new value to an existing variable, it will overwrite the previous value: Example Change the value of myNum from 15 to 20: myNum 15 20 int myNum = 15; myNum = 20; // myNum is now 20 System.out.println(myNum); int myNum = 15; myNum = 20; // myNum is now 20 System.out.println(myNum); Try it Yourself Â» Final Variables If you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only): final Example final int myNum = 15; myNum = 20; // will generate an error: cannot assign a value to a final variable final int myNum = 15; myNum = 20; // will generate an error: cannot assign a value to a final variable Try it Yourself Â» Other Types A demonstration of how to declare variables of other types: Example int myNum = 5; float myFloatNum = 5.99f; char myLetter = 'D'; boolean myBool = true; String myText = \"Hello\"; int myNum = 5; float myFloatNum = 5.99f; char myLetter = 'D'; boolean myBool = true; String myText = \"Hello\"; You will learn more about data types in the next section. Video: Java Variables"
  },
  {
    "document": "Java Variables Java Variables Variables are containers for storing data values. In Java, there are different types of variables, for example: String int float char boolean Declaring (Creating) Variables To create a variable, you must specify the type and assign it a value: Syntax type variableName = value; type variableName = value; Where type is one of Java's types (such as int or String), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable. int String To create a variable that should store text, look at the following example: Example Create a variable called name of type String and assign it the value \"John\". Then we use println() to print the name variable: String println() String name = \"John\"; System.out.println(name); String name = \"John\"; System.out.println(name); Try it Yourself Â» To create a variable that should store a number, look at the following example: Example Create a variable called myNum of type int and assign it the value 15: int int myNum = 15; System.out.println(myNum); int myNum = 15; System.out.println(myNum); Try it Yourself Â» You can also declare a variable without assigning the value, and assign the value later: Example int myNum; myNum = 15; System.out.println(myNum); int myNum; myNum = 15; System.out.println(myNum); Try it Yourself Â» Note that if you assign a new value to an existing variable, it will overwrite the previous value: Example Change the value of myNum from 15 to 20: myNum 15 20 int myNum = 15; myNum = 20; // myNum is now 20 System.out.println(myNum); int myNum = 15; myNum = 20; // myNum is now 20 System.out.println(myNum); Try it Yourself Â» Final Variables If you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only): final Example final int myNum = 15; myNum = 20; // will generate an error: cannot assign a value to a final variable final int myNum = 15; myNum = 20; // will generate an error: cannot assign a value to a final variable Try it Yourself Â» Other Types A demonstration of how to declare variables of other types: Example int myNum = 5; float myFloatNum = 5.99f; char myLetter = 'D'; boolean myBool = true; String myText = \"Hello\"; int myNum = 5; float myFloatNum = 5.99f; char myLetter = 'D'; boolean myBool = true; String myText = \"Hello\"; You will learn more about data types in the next section. Video: Java Variables"
  },
  {
    "document": "Java Print Variables Display Variables The println() method is often used to display variables. println() To combine both text and a variable, use the + character: + Example String name = \"John\"; System.out.println(\"Hello \" + name); String name = \"John\"; System.out.println(\"Hello \" + name); Try it Yourself Â» You can also use the + character to add a variable to another variable: + Example String firstName = \"John \"; String lastName = \"Doe\"; String fullName = firstName + lastName; System.out.println(fullName); String firstName = \"John \"; String lastName = \"Doe\"; String fullName = firstName + lastName; System.out.println(fullName); Try it Yourself Â» For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here): + int Example int x = 5; int y = 6; System.out.println(x + y); // Print the value of x + y int x = 5; int y = 6; System.out.println(x + y); // Print the value of x + y Try it Yourself Â» From the example above, you can expect: println()"
  },
  {
    "document": "Java Declare Multiple Variables Declare Many Variables To declare more than one variable of the same type, you can use a comma-separated list: Example Instead of writing: int x = 5; int y = 6; int z = 50; System.out.println(x + y + z); int x = 5; int y = 6; int z = 50; System.out.println(x + y + z); You can simply write: int x = 5, y = 6, z = 50; System.out.println(x + y + z); int x = 5, y = 6, z = 50; System.out.println(x + y + z); Try it Yourself Â» One Value to Multiple Variables You can also assign the same value to multiple variables in one line: Example int x, y, z; x = y = z = 50; System.out.println(x + y + z); int x, y, z; x = y = z = 50; System.out.println(x + y + z); Try it Yourself Â»"
  },
  {
    "document": "Java Identifiers Identifiers All Java variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). Note: It is recommended to use descriptive names in order to create understandable and maintainable code: Example // Good int minutesPerHour = 60; // OK, but not so easy to understand what m actually is int m = 60; // Good int minutesPerHour = 60; // OK, but not so easy to understand what m actually is int m = 60; Try it Yourself Â» The general rules for naming variables are: int boolean"
  },
  {
    "document": "Java Variables - Examples Real-Life Examples Often in our examples, we simplify variable names to match their data type (myInt or myNum for int types, myChar for char types, and so on). This is done to avoid confusion. int char However, for a practical example of using variables, we have created a program that stores different data about a college student: Example // Student data String studentName = \"John Doe\"; int studentID = 15; int studentAge = 23; float studentFee = 75.25f; char studentGrade = 'B'; // Print variables System.out.println(\"Student name: \" + studentName); System.out.println(\"Student id: \" + studentID); System.out.println(\"Student age: \" + studentAge); System.out.println(\"Student fee: \" + studentFee); System.out.println(\"Student grade: \" + studentGrade); // Student data String studentName = \"John Doe\"; int studentID = 15; int studentAge = 23; float studentFee = 75.25f; char studentGrade = 'B'; // Print variables System.out.println(\"Student name: \" + studentName); System.out.println(\"Student id: \" + studentID); System.out.println(\"Student age: \" + studentAge); System.out.println(\"Student fee: \" + studentFee); System.out.println(\"Student grade: \" + studentGrade); Try it Yourself Â» Calculate the Area of a Rectangle In this real-life example, we create a program to calculate the area of a rectangle (by multiplying the length and width): Example // Create integer variables int length = 4; int width = 6; int area; // Calculate the area of a rectangle area = length * width; // Print variables System.out.println(\"Length is: \" + length); System.out.println(\"Width is: \" + width); System.out.println(\"Area of the rectangle is: \" + area); // Create integer variables int length = 4; int width = 6; int area; // Calculate the area of a rectangle area = length * width; // Print variables System.out.println(\"Length is: \" + length); System.out.println(\"Width is: \" + width); System.out.println(\"Area of the rectangle is: \" + area); Try it Yourself Â»"
  },
  {
    "document": "Java Data Types Java Data Types As explained in the previous chapter, a variable in Java must be a specified data type: Example int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String Try it Yourself Â» Data types are divided into two groups: byte short int long float double boolean char String Primitive Data Types A primitive data type specifies the type of a variable and the kind of values it can hold. There are eight primitive data types in Java: byte short int long float double boolean char Video: Java Data Types"
  },
  {
    "document": "Java Data Types Java Data Types As explained in the previous chapter, a variable in Java must be a specified data type: Example int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String Try it Yourself Â» Data types are divided into two groups: byte short int long float double boolean char String Primitive Data Types A primitive data type specifies the type of a variable and the kind of values it can hold. There are eight primitive data types in Java: byte short int long float double boolean char Video: Java Data Types"
  },
  {
    "document": "Java Numbers Numbers Primitive number types are divided into two groups: Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are byte, short, int and long. Which type you should use, depends on the numeric value. byte short int long Floating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and double. float double Even though there are many numeric types in Java, the most used for numbers are int (for whole numbers) and double (for floating point numbers). However, we will describe them all as you continue to read. int double Integer Types Byte The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127: byte int Example byte myNum = 100; System.out.println(myNum); byte myNum = 100; System.out.println(myNum); Try it Yourself Â» Short The short data type can store whole numbers from -32768 to 32767: short Example short myNum = 5000; System.out.println(myNum); short myNum = 5000; System.out.println(myNum); Try it Yourself Â» Int The int data type can store whole numbers from -2147483648 to 2147483647. In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value. int int Example int myNum = 100000; System.out.println(myNum); int myNum = 100000; System.out.println(myNum); Try it Yourself Â» Long The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\": long Example long myNum = 15000000000L; System.out.println(myNum); long myNum = 15000000000L; System.out.println(myNum); Try it Yourself Â» Floating Point Types You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515. The float and double data types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles: float double Float Example float myNum = 5.75f; System.out.println(myNum); float myNum = 5.75f; System.out.println(myNum); Try it Yourself Â» Double Example double myNum = 19.99d; System.out.println(myNum); double myNum = 19.99d; System.out.println(myNum); Try it Yourself Â» Use float or double? float double The precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only six or seven decimal digits, while double variables have a precision of about 16 digits. Therefore it is safer to use double for most calculations. float double double Scientific Numbers A floating point number can also be a scientific number with an \"e\" to indicate the power of 10: Example float f1 = 35e3f; double d1 = 12E4d; System.out.println(f1); System.out.println(d1); float f1 = 35e3f; double d1 = 12E4d; System.out.println(f1); System.out.println(d1); Try it Yourself Â»"
  },
  {
    "document": "Java Boolean Data Types Boolean Types Very often in programming, you will need a data type that can only have one of two values, like: For this, Java has a boolean data type, which can only take the values true or false: boolean true false Example boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false Try it Yourself Â» Boolean values are mostly used for conditional testing. You will learn much more about booleans and conditions later in this tutorial."
  },
  {
    "document": "Java Characters Characters The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c': char Example char myGrade = 'B'; System.out.println(myGrade); char myGrade = 'B'; System.out.println(myGrade); Try it Yourself Â» Alternatively, if you are familiar with ASCII values, you can use those to display certain characters: Example char myVar1 = 65, myVar2 = 66, myVar3 = 67; System.out.println(myVar1); System.out.println(myVar2); System.out.println(myVar3); char myVar1 = 65, myVar2 = 66, myVar3 = 67; System.out.println(myVar1); System.out.println(myVar2); System.out.println(myVar3); Try it Yourself Â» Tip: A list of all ASCII values can be found in our ASCII Table Reference. Strings The String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes: String Example String greeting = \"Hello World\"; System.out.println(greeting); String greeting = \"Hello World\"; System.out.println(greeting); Try it Yourself Â» The String type is so much used and integrated in Java, that some call it \"the special ninth type\". A String in Java is actually a non-primitive data type, because it refers to an object. The String object has methods that are used to perform certain operations on strings. Don't worry if you don't understand the term \"object\" just yet. We will learn more about strings and objects in a later chapter."
  },
  {
    "document": "Java Data Types Example Real-Life Example Here's a real-life example of using different data types, to calculate and output the total cost of a number of items: Example // Create variables of different data types int items = 50; float costPerItem = 9.99f; float totalCost = items * costPerItem; char currency = '$'; // Print variables System.out.println(\"Number of items: \" + items); System.out.println(\"Cost per item: \" + costPerItem + currency); System.out.println(\"Total cost = \" + totalCost + currency); // Create variables of different data types int items = 50; float costPerItem = 9.99f; float totalCost = items * costPerItem; char currency = '$'; // Print variables System.out.println(\"Number of items: \" + items); System.out.println(\"Cost per item: \" + costPerItem + currency); System.out.println(\"Total cost = \" + totalCost + currency); Try it Yourself Â»"
  },
  {
    "document": "Java Non-Primitive Data Types Non-Primitive Data Types Non-primitive data types are called reference types because they refer to objects. The main differences between primitive and non-primitive data types are: String int String null Examples of non-primitive types are Strings, Arrays, Classes etc. You will learn more about these in a later chapter."
  },
  {
    "document": "Java Type Casting Java Type Casting Type casting is when you assign a value of one primitive data type to another type. In Java, there are two types of casting: byte short char int long float double double float long int char short byte Widening Casting Widening casting is done automatically when passing a smaller size type to a larger size type: Example public class Main { public static void main(String[] args) { int myInt = 9; double myDouble = myInt; // Automatic casting: int to double System.out.println(myInt); // Outputs 9 System.out.println(myDouble); // Outputs 9.0 } } public class Main { public static void main(String[] args) { int myInt = 9; double myDouble = myInt; // Automatic casting: int to double System.out.println(myInt); // Outputs 9 System.out.println(myDouble); // Outputs 9.0 } } Try it Yourself Â» Narrowing Casting Narrowing casting must be done manually by placing the type in parentheses () in front of the value: () Example public class Main { public static void main(String[] args) { double myDouble = 9.78d; int myInt = (int) myDouble; // Manual casting: double to int System.out.println(myDouble); // Outputs 9.78 System.out.println(myInt); // Outputs 9 } } public class Main { public static void main(String[] args) { double myDouble = 9.78d; int myInt = (int) myDouble; // Manual casting: double to int System.out.println(myDouble); // Outputs 9.78 System.out.println(myInt); // Outputs 9 } } Try it Yourself Â» Real-Life Example Here's a real-life example of type casting where we create a program to calculate the percentage of a user's score in relation to the maximum score in a game. We use type casting to make sure that the result is a floating-point value, rather than an integer: Example // Set the maximum possible score in the game to 500 int maxScore = 500; // The actual score of the user int userScore = 423; /* Calculate the percentage of the user's score in relation to the maximum available score. Convert userScore to float to make sure that the division is accurate */ float percentage = (float) userScore / maxScore * 100.0f; System.out.println(\"User's percentage is \" + percentage); // Set the maximum possible score in the game to 500 int maxScore = 500; // The actual score of the user int userScore = 423; /* Calculate the percentage of the user's score in relation to the maximum available score. Convert userScore to float to make sure that the division is accurate */ float percentage = (float) userScore / maxScore * 100.0f; System.out.println(\"User's percentage is \" + percentage); Try it Yourself Â» Video: Java Type Casting"
  },
  {
    "document": "Java Operators Java Operators Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: + Example int x = 100 + 50; int x = 100 + 50; Try it Yourself Â» Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable: + Example int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) Try it Yourself Â» Java divides the operators into the following groups: Arithmetic Operators Arithmetic operators are used to perform common mathematical operations. Java Assignment Operators Assignment operators are used to assign values to variables. In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x: = Example int x = 10; int x = 10; Try it Yourself Â» The addition assignment operator (+=) adds a value to a variable: += Example int x = 10; x += 5; int x = 10; x += 5; Try it Yourself Â» A list of all assignment operators: Java Comparison Operators Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions. The return value of a comparison is either true or false. These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter. true false In the following example, we use the greater than operator (>) to find out if 5 is greater than 3: > Example int x = 5; int y = 3; System.out.println(x > y); // returns true, because 5 is higher than 3 int x = 5; int y = 3; System.out.println(x > y); // returns true, because 5 is higher than 3 Try it Yourself Â» Java Logical Operators You can also test for true or false values with logical operators. true false Logical operators are used to determine the logic between variables or values: Video: Java Operators"
  },
  {
    "document": "Java Strings Java Strings Strings are used for storing text. A String variable contains a collection of characters surrounded by double quotes: String Example Create a variable of type String and assign it a value: String String greeting = \"Hello\"; String greeting = \"Hello\"; Try it Yourself Â» String Length A String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with the length() method: length() Example String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length()); String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length()); Try it Yourself Â» More String Methods There are many string methods available, for example toUpperCase() and toLowerCase(): toUpperCase() toLowerCase() Example String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\" String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\" Try it Yourself Â» Finding a Character in a String The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace): indexOf() Example String txt = \"Please locate where 'locate' occurs! \"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7 String txt = \"Please locate where 'locate' occurs! \"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7 Try it Yourself Â» Java counts positions from zero.0 is the first position in a string, 1 is the second, 2 is the third ... Complete String Reference For a complete reference of String methods, go to our Java String Methods Reference. The reference contains descriptions and examples of all string methods. Video: Java Strings"
  },
  {
    "document": "Java Strings Java Strings Strings are used for storing text. A String variable contains a collection of characters surrounded by double quotes: String Example Create a variable of type String and assign it a value: String String greeting = \"Hello\"; String greeting = \"Hello\"; Try it Yourself Â» String Length A String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with the length() method: length() Example String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length()); String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length()); Try it Yourself Â» More String Methods There are many string methods available, for example toUpperCase() and toLowerCase(): toUpperCase() toLowerCase() Example String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\" String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\" Try it Yourself Â» Finding a Character in a String The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace): indexOf() Example String txt = \"Please locate where 'locate' occurs! \"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7 String txt = \"Please locate where 'locate' occurs! \"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7 Try it Yourself Â» Java counts positions from zero.0 is the first position in a string, 1 is the second, 2 is the third ... Complete String Reference For a complete reference of String methods, go to our Java String Methods Reference. The reference contains descriptions and examples of all string methods. Video: Java Strings"
  },
  {
    "document": "Java String Concatenation String Concatenation The + operator can be used between strings to combine them. This is called concatenation: + Example String firstName = \"John\"; String lastName = \"Doe\"; System.out.println(firstName + \" \" + lastName); String firstName = \"John\"; String lastName = \"Doe\"; System.out.println(firstName + \" \" + lastName); Try it Yourself Â» Note that we have added an empty text (\" \") to create a space between firstName and lastName on print. You can also use the concat() method to concatenate two strings: concat() Example String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); Try it Yourself Â»"
  },
  {
    "document": "Java Numbers and Strings Adding Numbers and Strings WARNING! Java uses the + operator for both addition and concatenation. + Numbers are added. Strings are concatenated. If you add two numbers, the result will be a number: Example int x = 10; int y = 20; int z = x + y; // z will be 30 (an integer/number) int x = 10; int y = 20; int z = x + y; // z will be 30 (an integer/number) Try it Yourself Â» If you add two strings, the result will be a string concatenation: Example String x = \"10\"; String y = \"20\"; String z = x + y; // z will be 1020 (a String) String x = \"10\"; String y = \"20\"; String z = x + y; // z will be 1020 (a String) Try it Yourself Â» If you add a number and a string, the result will be a string concatenation: Example String x = \"10\"; int y = 20; String z = x + y; // z will be 1020 (a String) String x = \"10\"; int y = 20; String z = x + y; // z will be 1020 (a String) Try it Yourself Â»"
  },
  {
    "document": "Java Special Characters Strings - Special Characters Because strings must be written within quotes, Java will misunderstand this string, and generate an error: String txt = \"We are the so-called \"Vikings\" from the north. \"; String txt = \"We are the so-called \"Vikings\" from the north. \"; The solution to avoid this problem, is to use the backslash escape character. The backslash (\\) escape character turns special characters into string characters: \\ The sequence \\\" inserts a double quote in a string: Example String txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» The sequence \\' inserts a single quote in a string: Example String txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up \\\" Example String txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» The sequence \\' inserts a single quote in a string: Example String txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example String txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; String txt = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» The sequence \\' inserts a single quote in a string: Example String txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up \\' Example String txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example String txt = \"The character \\\\ is called backslash."
  },
  {
    "document": "\"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example String txt = \"It\\'s alright. \"; String txt = \"It\\'s alright. \"; Try it Yourself Â» The sequence \\\\ inserts a single backslash in a string: Example String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up \\\\ Example String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are: Code Result Try it \\n New Line Try it Â» \\r Carriage Return Try it Â» \\t Tab Try it Â» \\b Backspace Try it Â» \\f Form Feed â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example String txt = \"The character \\\\ is called backslash. \"; String txt = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Other common escape sequences that are valid in Java are:"
  },
  {
    "document": "Java Math The Java Math class has many methods that allows you to perform mathematical tasks on numbers. Math.max(x,y) The Math.max(x,y) method can be used to find the highest value of x and y: Math.max(x,y) Example Math.max(5, 10); Math.max(5, 10); Try it Yourself Â» Math.min(x,y) The Math.min(x,y) method can be used to find the lowest value of x and y: Math.min(x,y) Example Math.min(5, 10); Math.min(5, 10); Try it Yourself Â» Math.sqrt(x) The Math.sqrt(x) method returns the square root of x: Math.sqrt(x) Example Math.sqrt(64); Math.sqrt(64); Try it Yourself Â» Math.abs(x) The Math.abs(x) method returns the absolute (positive) value of x: Math.abs(x) Example Math.abs(-4.7); Math.abs(-4.7); Try it Yourself Â» Random Numbers Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive): Math.random() Example Math.random(); Math.random(); Try it Yourself Â» To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula: Example int randomNum = (int)(Math.random() * 101); // 0 to 100 int randomNum = (int)(Math.random() * 101); // 0 to 100 Try it Yourself Â» Complete Math Reference For a complete reference of Math methods, go to our Java Math Methods Reference."
  },
  {
    "document": "Java Booleans Java Booleans Very often, in programming, you will need a data type that can only have one of two values, like: For this, Java has a boolean data type, which can store true or false values. boolean true false Boolean Values A boolean type is declared with the boolean keyword and can only take the values true or false: boolean true false Example boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false Try it Yourself Â» However, it is more common to return boolean values from boolean expressions, for conditional testing (see below). Boolean Expression A Boolean expression returns a boolean value: true or false. true false This is useful to build logic, and find answers. For example, you can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or a variable) is true or false: > Example int x = 10; int y = 9; System.out.println(x > y); // returns true, because 10 is higher than 9 int x = 10; int y = 9; System.out.println(x > y); // returns true, because 10 is higher than 9 Try it Yourself Â» Or even easier: Example System.out.println(10 > 9); // returns true, because 10 is higher than 9 System.out.println(10 > 9); // returns true, because 10 is higher than 9 Try it Yourself Â» In the examples below, we use the equal to (==) operator to evaluate an expression: == Example int x = 10; System.out.println(x == 10); // returns true, because the value of x is equal to 10 int x = 10; System.out.println(x == 10); // returns true, because the value of x is equal to 10 Try it Yourself Â» Example System.out.println(10 == 15); // returns false, because 10 is not equal to 15 System.out.println(10 == 15); // returns false, because 10 is not equal to 15 Try it Yourself Â» Real Life Example Let's think of a \"real life example\" where we need to find out if a person is old enough to vote. In the example below, we use the >= comparison operator to find out if the age (25) is greater than OR equal to the voting age limit, which is set to 18: >= 25 18 Example int myAge = 25; int votingAge = 18; System.out.println(myAge >= votingAge); int myAge = 25; int votingAge = 18; System.out.println(myAge >= votingAge); Try it Yourself Â» Cool, right? An even better approach (since we are on a roll now), would be to wrap the code above in an if...else statement, so we can perform different actions depending on the result: if...else Example Output \"Old enough to vote!\" if myAge is greater than or equal to 18. Otherwise output \"Not old enough to vote. \": myAge 18 int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote!"
  },
  {
    "document": "\"); } else { System.out.println(\"Not old enough to vote. \"); } int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote! \"); } else { System.out.println(\"Not old enough to vote. \"); } Try it Yourself Â» Booleans are the basis for all Java comparisons and conditions. You will learn more about conditions (if...else) in the next chapter. if...else"
  },
  {
    "document": "Java If ... Else Java Conditions and If Statements You already know that Java supports the usual logical conditions from mathematics: You can use these conditions to perform different actions for different decisions. Java has the following conditional statements: if else else if switch The if Statement Use the if statement to specify a block of Java code to be executed if a condition is true. if true Syntax if (condition) { // block of code to be executed if the condition is true } if (condition) { // block of code to be executed if the condition is true } Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error. if In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text: true Example if (20 > 18) { System.out.println(\"20 is greater than 18\"); } if (20 > 18) { System.out.println(\"20 is greater than 18\"); } Try it Yourself Â» We can also test variables: Example int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } Try it Yourself Â» In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\". >"
  },
  {
    "document": "Java If ... Else Java Conditions and If Statements You already know that Java supports the usual logical conditions from mathematics: You can use these conditions to perform different actions for different decisions. Java has the following conditional statements: if else else if switch The if Statement Use the if statement to specify a block of Java code to be executed if a condition is true. if true Syntax if (condition) { // block of code to be executed if the condition is true } if (condition) { // block of code to be executed if the condition is true } Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error. if In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text: true Example if (20 > 18) { System.out.println(\"20 is greater than 18\"); } if (20 > 18) { System.out.println(\"20 is greater than 18\"); } Try it Yourself Â» We can also test variables: Example int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } Try it Yourself Â» In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\". >"
  },
  {
    "document": "Java Else The else Statement Use the else statement to specify a block of code to be executed if the condition is false. else false Syntax if (condition) { // block of code to be executed if the condition is true } else { // block of code to be executed if the condition is false } if (condition) { // block of code to be executed if the condition is true } else { // block of code to be executed if the condition is false } Example int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\". false else"
  },
  {
    "document": "Java Else If The else if Statement Use the else if statement to specify a new condition if the first condition is false. else if false Syntax if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false } if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false } Example int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\". false else if false else false However, if the time was 14, our program would print \"Good day.\""
  },
  {
    "document": "Java Short Hand If...Else (Ternary Operator) Short Hand if...else There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line, and is most often used to replace simple if else statements: Syntax variable = (condition) ? expressionTrue : expressionFalse; variable = (condition) ? expressionTrue : expressionFalse; Instead of writing: Example int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } Try it Yourself Â» You can simply write: Example int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening. \"; System.out.println(result); int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening. \"; System.out.println(result); Try it Yourself Â»"
  },
  {
    "document": "Java If ... Else Examples Real-Life Examples This example shows how you can use if..else to \"open a door\" if the user enters the correct code: Example int doorCode = 1337; if (doorCode == 1337) { System.out.println(\"Correct code. The door is now open. \"); } else { System.out.println(\"Wrong code. The door remains closed. \"); } int doorCode = 1337; if (doorCode == 1337) { System.out.println(\"Correct code. The door is now open. \"); } else { System.out.println(\"Wrong code. The door remains closed. \"); } Try it Yourself Â» This example shows how you can use if..else to find out if a number is positive or negative: Example int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number. \"); } else if (myNum < 0) { System.out.println(\"The value is a negative number. \"); } else { System.out.println(\"The value is 0. \"); } int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number. \"); } else if (myNum < 0) { System.out.println(\"The value is a negative number. \"); } else { System.out.println(\"The value is 0. \"); } Try it Yourself Â» Find out if a person is old enough to vote: Example int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote! \"); } else { System.out.println(\"Not old enough to vote. \"); } int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote! \"); } else { System.out.println(\"Not old enough to vote. \"); } Try it Yourself Â» Find out if a number is even or odd: Example int myNum = 5; if (myNum % 2 == 0) { System.out.println(myNum + \" is even\"); } else { System.out.println(myNum + \" is odd\"); } int myNum = 5; if (myNum % 2 == 0) { System.out.println(myNum + \" is even\"); } else { System.out.println(myNum + \" is odd\"); } Try it Yourself Â»"
  },
  {
    "document": "Java Switch Java Switch Statements Instead of writing many if..else statements, you can use the switch statement. if..else switch The switch statement selects one of many code blocks to be executed: switch Syntax switch(expression) { case x: // code block break; case y: // code block break; default: // code block } switch(expression) { case x: // code block break; case y: // code block break; default: // code block } This is how it works: switch case break default The example below uses the weekday number to calculate the weekday name: Example int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) Try it Yourself Â» The break Keyword When Java reaches a break keyword, it breaks out of the switch block. break This will stop the execution of more code and case testing inside the block. When a match is found, and the job is done, it's time for a break. There is no need for more testing. A break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block. The default Keyword The default keyword specifies some code to run if there is no case match: default Example int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } // Outputs \"Looking forward to the Weekend\" int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } // Outputs \"Looking forward to the Weekend\" Try it Yourself Â» Note that if the default statement is used as the last statement in a switch block, it does not need a break. default"
  },
  {
    "document": "Java While Loop Loops Loops can execute a block of code as long as a specified condition is reached. Loops are handy because they save time, reduce errors, and they make code more readable. Java While Loop The while loop loops through a block of code as long as a specified condition is true: while true Syntax while (condition) { // code block to be executed } while (condition) { // code block to be executed } In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: Example int i = 0; while (i < 5) { System.out.println(i); i++; } int i = 0; while (i < 5) { System.out.println(i); i++; } Try it Yourself Â» Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "Java While Loop Loops Loops can execute a block of code as long as a specified condition is reached. Loops are handy because they save time, reduce errors, and they make code more readable. Java While Loop The while loop loops through a block of code as long as a specified condition is true: while true Syntax while (condition) { // code block to be executed } while (condition) { // code block to be executed } In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: Example int i = 0; while (i < 5) { System.out.println(i); i++; } int i = 0; while (i < 5) { System.out.println(i); i++; } Try it Yourself Â» Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "Java Do/While Loop The Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. do/while while Syntax do { // code block to be executed } while (condition); do { // code block to be executed } while (condition); The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: do/while Example int i = 0;do { System.out.println(i); i++; } while (i < 5); int i = 0;do { System.out.println(i); i++; } while (i < 5); Try it Yourself Â» Do not forget to increase the variable used in the condition, otherwise the loop will never end!"
  },
  {
    "document": "Java While Loop Examples Real-Life Examples To demonstrate a practical example of the while loop, we have created a simple \"countdown\" program: Example int countdown = 3; while (countdown > 0) { System.out.println(countdown); countdown--; } System.out.println(\"Happy New Year!! \"); int countdown = 3; while (countdown > 0) { System.out.println(countdown); countdown--; } System.out.println(\"Happy New Year!! \"); Try it Yourself Â» To demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy: Example Print \"Yatzy!\" If the dice number is 6: int dice = 1; while (dice <= 6) { if (dice < 6) { System.out.println(\"No Yatzy. \"); } else { System.out.println(\"Yatzy! \"); } dice = dice + 1; } int dice = 1; while (dice <= 6) { if (dice < 6) { System.out.println(\"No Yatzy. \"); } else { System.out.println(\"Yatzy! \"); } dice = dice + 1; } Try it Yourself Â» If the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy! \"."
  },
  {
    "document": "Java For Loop Java For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop: for while Syntax for (statement 1; statement 2; statement 3) { // code block to be executed } for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: Example for (int i = 0; i < 5; i++) { System.out.println(i); } for (int i = 0; i < 5; i++) { System.out.println(i); } Try it Yourself Â» Statement 1 sets a variable before the loop starts (int i = 0). Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end. Statement 3 increases a value (i++) each time the code block in the loop has been executed. Another Example This example will only print even values between 0 and 10: Example for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } Try it Yourself Â»"
  },
  {
    "document": "Java For Loop Java For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop: for while Syntax for (statement 1; statement 2; statement 3) { // code block to be executed } for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: Example for (int i = 0; i < 5; i++) { System.out.println(i); } for (int i = 0; i < 5; i++) { System.out.println(i); } Try it Yourself Â» Statement 1 sets a variable before the loop starts (int i = 0). Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end. Statement 3 increases a value (i++) each time the code block in the loop has been executed. Another Example This example will only print even values between 0 and 10: Example for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } Try it Yourself Â»"
  },
  {
    "document": "Java Nested Loops Nested Loops It is also possible to place a loop inside another loop. This is called a nested loop. The \"inner loop\" will be executed one time for each iteration of the \"outer loop\": Example // Outer loop for (int i = 1; i <= 2; i++) { System.out.println(\"Outer: \" + i); // Executes 2 times // Inner loop for (int j = 1; j <= 3; j++) { System.out.println(\" Inner: \" + j); // Executes 6 times (2 * 3) } } // Outer loop for (int i = 1; i <= 2; i++) { System.out.println(\"Outer: \" + i); // Executes 2 times // Inner loop for (int j = 1; j <= 3; j++) { System.out.println(\" Inner: \" + j); // Executes 6 times (2 * 3) } } Try it Yourself Â»"
  },
  {
    "document": "Java For Each Loop For-Each Loop There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array (or other data sets): Syntax for (type variableName : arrayName) { // code block to be executed } for (type variableName : arrayName) { // code block to be executed } The following example outputs all elements in the cars array, using a \"for-each\" loop: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } Try it Yourself Â» Note: Don't worry if you don't understand the example above. You will learn more about Arrays in the Java Arrays chapter."
  },
  {
    "document": "Java For Loop Examples Real-Life Examples To demonstrate a practical example of the for loop, let's create a program that counts to 100 by tens: Example for (int i = 0; i <= 100; i += 10) { System.out.println(i); } for (int i = 0; i <= 100; i += 10) { System.out.println(i); } Try it Yourself Â» In this example, we create a program that only print even values between 0 and 10: Example for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); } Try it Yourself Â» And in this example, we create a program that prints the multiplication table for a specified number: Example int number = 2; // Print the multiplication table for the number 2 for (int i = 1; i <= 10; i++) { System.out.println(number + \" x \" + i + \" = \" + (number * i)); } int number = 2; // Print the multiplication table for the number 2 for (int i = 1; i <= 10; i++) { System.out.println(number + \" x \" + i + \" = \" + (number * i)); } Try it Yourself Â»"
  },
  {
    "document": "Java Break and Continue Java Break You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement. break switch The break statement can also be used to jump out of a loop. break This example stops the loop when i is equal to 4: Example for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); } for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); } Try it Yourself Â» Java Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. continue This example skips the value of 4: Example for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); } for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); } Try it Yourself Â» Break and Continue in While Loop You can also use break and continue in while loops: break continue Break Example int i = 0; while (i < 10) { System.out.println(i); i++; if (i == 4) { break; } } int i = 0; while (i < 10) { System.out.println(i); i++; if (i == 4) { break; } } Try it Yourself Â» Continue Example int i = 0; while (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; } int i = 0; while (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; } Try it Yourself Â»"
  },
  {
    "document": "Java Arrays Java Arrays Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type with square brackets: String[] cars; String[] cars; We have now declared a variable that holds an array of strings. To insert values to it, you can place the values in a comma-separated list, inside curly braces: String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; To create an array of integers, you could write: int[] myNum = {10, 20, 30, 40}; int[] myNum = {10, 20, 30, 40}; Access the Elements of an Array You can access an array element by referring to the index number. This statement accesses the value of the first element in cars: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs Volvo String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs Volvo Try it Yourself Â» Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change an Array Element To change the value of a specific element, refer to the index number: Example cars[0] = \"Opel\"; cars[0] = \"Opel\"; Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; System.out.println(cars[0]); // Now outputs Opel instead of Volvo String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; System.out.println(cars[0]); // Now outputs Opel instead of Volvo Try it Yourself Â» Array Length To find out how many elements an array has, use the length property: length Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); // Outputs 4 String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); // Outputs 4 Try it Yourself Â»"
  },
  {
    "document": "Java Arrays Java Arrays Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type with square brackets: String[] cars; String[] cars; We have now declared a variable that holds an array of strings. To insert values to it, you can place the values in a comma-separated list, inside curly braces: String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; To create an array of integers, you could write: int[] myNum = {10, 20, 30, 40}; int[] myNum = {10, 20, 30, 40}; Access the Elements of an Array You can access an array element by referring to the index number. This statement accesses the value of the first element in cars: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs Volvo String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs Volvo Try it Yourself Â» Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change an Array Element To change the value of a specific element, refer to the index number: Example cars[0] = \"Opel\"; cars[0] = \"Opel\"; Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; System.out.println(cars[0]); // Now outputs Opel instead of Volvo String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; System.out.println(cars[0]); // Now outputs Opel instead of Volvo Try it Yourself Â» Array Length To find out how many elements an array has, use the length property: length Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); // Outputs 4 String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); // Outputs 4 Try it Yourself Â»"
  },
  {
    "document": "Java Arrays Loop Loop Through an Array You can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run. for length The following example outputs all elements in the cars array: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (int i = 0; i < cars.length; i++) { System.out.println(cars[i]); } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (int i = 0; i < cars.length; i++) { System.out.println(cars[i]); } Try it Yourself Â» Loop Through an Array with For-Each There is also a \"for-each\" loop, which is used exclusively to loop through elements in arrays: Syntax for (type variable : arrayname) { ... } for (type variable : arrayname) { ... } The following example outputs all elements in the cars array, using a \"for-each\" loop: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } Try it Yourself Â» The example above can be read like this: for each String element (called i - as in index) in cars, print out the value of i. String If you compare the for loop and for-each loop, you will see that the for-each method is easier to write, it does not require a counter (using the length property), and it is more readable. for"
  },
  {
    "document": "Java Arrays - Real-Life Examples Real-Life Example To demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages: Example // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg); // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg); Try it Yourself Â» And in this example, we create a program that finds the lowest age among different ages: Example // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Get the length of the array int length = ages.length; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge); // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Get the length of the array int length = ages.length; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge); Try it Yourself Â»"
  },
  {
    "document": "Java Multi-Dimensional Arrays Multidimensional Arrays A multidimensional array is an array of arrays. Multidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns. To create a two-dimensional array, add each array within its own set of curly braces: Example int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; myNumbers is now an array with two arrays as its elements. Access Elements To access the elements of the myNumbers array, specify two indexes: one for the array, and one for the element inside that array. This example accesses the third element (2) in the second array (1) of myNumbers: Example int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; System.out.println(myNumbers[1][2]); // Outputs 7 int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; System.out.println(myNumbers[1][2]); // Outputs 7 Try it Yourself Â» Remember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc. Change Element Values You can also change the value of an element: Example int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; myNumbers[1][2] = 9; System.out.println(myNumbers[1][2]); // Outputs 9 instead of 7 int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; myNumbers[1][2] = 9; System.out.println(myNumbers[1][2]); // Outputs 9 instead of 7 Try it Yourself Â» Loop Through a Multi-Dimensional Array You can also use a for loop inside another for loop to get the elements of a two-dimensional array (we still have to point to the two indexes): for loop for loop Example int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; for (int i = 0; i < myNumbers.length; ++i) { for (int j = 0; j < myNumbers[i].length; ++j) { System.out.println(myNumbers[i][j]); }} int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; for (int i = 0; i < myNumbers.length; ++i) { for (int j = 0; j < myNumbers[i].length; ++j) { System.out.println(myNumbers[i][j]); }} Try it Yourself Â» Or you could just use a for-each loop, which is considered easier to read and write: Example int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; for (int[] row : myNumbers) { for (int i : row) { System.out.println(i); } } int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; for (int[] row : myNumbers) { for (int i : row) { System.out.println(i); Try it Yourself Â»"
  },
  {
    "document": "Java Methods A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. Why use methods? To reuse code: define the code once, and use it many times. Create a Method A method must be declared within a class. It is defined with the name of the method, followed by parentheses (). Java provides some pre-defined methods, such as System.out.println(), but you can also create your own methods to perform certain actions: System.out.println() Example Create a method inside Main: public class Main { static void myMethod() { // code to be executed } } public class Main { static void myMethod() { // code to be executed } } myMethod() static void Call a Method To call a method in Java, write the method's name followed by two parentheses () and a semicolon; In the following example, myMethod() is used to print a text (the action), when it is called: myMethod() Example Inside main, call the myMethod() method: main myMethod() public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\" public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\" Try it Yourself Â» A method can also be called multiple times: Example public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); myMethod(); myMethod(); } } // I just got executed! // I just got executed! // I just got executed! public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); myMethod(); myMethod(); } } // I just got executed! // I just got executed! // I just got executed! Try it Yourself Â» In the next chapter, Method Parameters, you will learn how to pass data (parameters) into a method."
  },
  {
    "document": "Java Method Parameters Parameters and Arguments Information can be passed to methods as a parameter. Parameters act as variables inside the method. Parameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma. The following example has a method that takes a String called fname as parameter. When the method is called, we pass along a first name, which is used inside the method to print the full name: String Example public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes Try it Yourself Â» When a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments. fname Liam Jenny Anja Multiple Parameters You can have as many parameters as you like: Example public class Main { static void myMethod(String fname, int age) { System.out.println(fname + \" is \" + age); } public static void main(String[] args) { myMethod(\"Liam\", 5); myMethod(\"Jenny\", 8); myMethod(\"Anja\", 31); } } // Liam is 5 // Jenny is 8 // Anja is 31 public class Main { static void myMethod(String fname, int age) { System.out.println(fname + \" is \" + age); } public static void main(String[] args) { myMethod(\"Liam\", 5); myMethod(\"Jenny\", 8); myMethod(\"Anja\", 31); } } // Liam is 5 // Jenny is 8 // Anja is 31 Try it Yourself Â» Note that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order. A Method with If...Else It is common to use if...else statements inside methods: if...else Example public class Main { // Create a checkAge() method with an integer variable called age static void checkAge(int age) { // If age is less than 18, print \"access denied\" if (age < 18) { System.out.println(\"Access denied - You are not old enough! \"); // If age is greater than, or equal to, 18, print \"access granted\" } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(20); // Call the checkAge method and pass along an age of 20 } } // Outputs \"Access granted - You are old enough!\" public class Main { // Create a checkAge() method with an integer variable called age static void checkAge(int age) { // If age is less than 18, print \"access denied\" if (age < 18) { System.out.println(\"Access denied - You are not old enough!"
  },
  {
    "document": "\"); // If age is greater than, or equal to, 18, print \"access granted\" } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(20); // Call the checkAge method and pass along an age of 20 } } // Outputs \"Access granted - You are old enough!\" Try it Yourself Â»"
  },
  {
    "document": "Java Method Parameters Parameters and Arguments Information can be passed to methods as a parameter. Parameters act as variables inside the method. Parameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma. The following example has a method that takes a String called fname as parameter. When the method is called, we pass along a first name, which is used inside the method to print the full name: String Example public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes Try it Yourself Â» When a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments. fname Liam Jenny Anja Multiple Parameters You can have as many parameters as you like: Example public class Main { static void myMethod(String fname, int age) { System.out.println(fname + \" is \" + age); } public static void main(String[] args) { myMethod(\"Liam\", 5); myMethod(\"Jenny\", 8); myMethod(\"Anja\", 31); } } // Liam is 5 // Jenny is 8 // Anja is 31 public class Main { static void myMethod(String fname, int age) { System.out.println(fname + \" is \" + age); } public static void main(String[] args) { myMethod(\"Liam\", 5); myMethod(\"Jenny\", 8); myMethod(\"Anja\", 31); } } // Liam is 5 // Jenny is 8 // Anja is 31 Try it Yourself Â» Note that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order. A Method with If...Else It is common to use if...else statements inside methods: if...else Example public class Main { // Create a checkAge() method with an integer variable called age static void checkAge(int age) { // If age is less than 18, print \"access denied\" if (age < 18) { System.out.println(\"Access denied - You are not old enough! \"); // If age is greater than, or equal to, 18, print \"access granted\" } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(20); // Call the checkAge method and pass along an age of 20 } } // Outputs \"Access granted - You are old enough!\" public class Main { // Create a checkAge() method with an integer variable called age static void checkAge(int age) { // If age is less than 18, print \"access denied\" if (age < 18) { System.out.println(\"Access denied - You are not old enough!"
  },
  {
    "document": "\"); // If age is greater than, or equal to, 18, print \"access granted\" } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(20); // Call the checkAge method and pass along an age of 20 } } // Outputs \"Access granted - You are old enough!\" Try it Yourself Â»"
  },
  {
    "document": "Java Return Return Values In the previous page, we used the void keyword in all examples, which indicates that the method should not return a value. void If you want the method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method: int char void return Example public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) Try it Yourself Â» This example returns the sum of a method's two parameters: Example public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { System.out.println(myMethod(5, 3)); } } // Outputs 8 (5 + 3) public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { System.out.println(myMethod(5, 3)); } } // Outputs 8 (5 + 3) Try it Yourself Â» You can also store the result in a variable (recommended, as it is easier to read and maintain): Example public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { int z = myMethod(5, 3); System.out.println(z); } } // Outputs 8 (5 + 3) public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { int z = myMethod(5, 3); System.out.println(z); } } // Outputs 8 (5 + 3) Try it Yourself Â»"
  },
  {
    "document": "Java Method Overloading Method Overloading With method overloading, multiple methods can have the same name with different parameters: Example int myMethod(int x) float myMethod(float x) double myMethod(double x, double y) int myMethod(int x) float myMethod(float x) double myMethod(double x, double y) Consider the following example, which has two methods that add numbers of different type: Example static int plusMethodInt(int x, int y) { return x + y; } static double plusMethodDouble(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethodInt(8, 5); double myNum2 = plusMethodDouble(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); } static int plusMethodInt(int x, int y) { return x + y; } static double plusMethodDouble(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethodInt(8, 5); double myNum2 = plusMethodDouble(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); } Try it Yourself Â» Instead of defining two methods that should do the same thing, it is better to overload one. In the example below, we overload the plusMethod method to work for both int and double: plusMethod int double Example static int plusMethod(int x, int y) { return x + y; } static double plusMethod(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethod(8, 5); double myNum2 = plusMethod(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); } static int plusMethod(int x, int y) { return x + y; } static double plusMethod(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethod(8, 5); double myNum2 = plusMethod(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); } Try it Yourself Â» Note: Multiple methods can have the same name as long as the number and/or type of parameters are different."
  },
  {
    "document": "Java Scope Java Scope In Java, variables are only accessible inside the region they are created. This is called scope. Method Scope Variables declared directly inside a method are available anywhere in the method following the line of code in which they were declared: Example public class Main { public static void main(String[] args) { // Code here CANNOT use x int x = 100; // Code here can use x System.out.println(x); } } public class Main { public static void main(String[] args) { // Code here CANNOT use x int x = 100; // Code here can use x System.out.println(x);  Try it Yourself Â» Block Scope A block of code refers to all of the code between curly braces {}. {} Variables declared inside blocks of code are only accessible by the code between the curly braces, which follows the line in which the variable was declared: Example public class Main { public static void main(String[] args) { // Code here CANNOT use x { // This is a block // Code here CANNOT use x int x = 100; // Code here CAN use x System.out.println(x); } // The block ends here // Code here CANNOT use x } } public class Main { public static void main(String[] args) { // Code here CANNOT use x { // This is a block // Code here CANNOT use x int x = 100; // Code here CAN use x System.out.println(x); } // The block ends here // Code here CANNOT use x } } Try it Yourself Â» A block of code may exist on its own or it can belong to an if, while or for statement. In the case of for statements, variables declared in the statement itself are also available inside the block's scope. if while for for"
  },
  {
    "document": "Java Recursion Java Recursion Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve. Recursion may be a bit difficult to understand. The best way to figure out how it works is to experiment with it. Recursion Example Adding two numbers together is easy to do, but adding a range of numbers is more complicated. In the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers: Example Use recursion to add all of the numbers up to 10. public class Main { public static void main(String[] args) { int result = sum(10); System.out.println(result); } public static int sum(int k) { if (k > 0) { return k + sum(k - 1); } else { return 0; } } } public class Main { public static void main(String[] args) { int result = sum(10); System.out.println(result); public static int sum(int k) { if (k > 0) { return k + sum(k - 1); } else { return 0;   Try it Yourself Â» Example Explained When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. When running, the program follows these steps: sum() k k Since the function does not call itself when k is 0, the program stops there and returns the result. k Halting Condition Just as loops can run into the problem of infinite looping, recursive functions can run into the problem of infinite recursion. Infinite recursion is when the function never stops calling itself. Every recursive function should have a halting condition, which is the condition where the function stops calling itself. In the previous example, the halting condition is when the parameter k becomes 0. k It is helpful to see a variety of different examples to better understand the concept. In this example, the function adds a range of numbers between a start and an end."
  },
  {
    "document": "The halting condition for this recursive function is when end is not greater than start: Example Use recursion to add all of the numbers between 5 to 10. public class Main { public static void main(String[] args) { int result = sum(5, 10); System.out.println(result); } public static int sum(int start, int end) { if (end > start) { return end + sum(start, end - 1); } else { return end; } } } public class Main { public static void main(String[] args) { int result = sum(5, 10); System.out.println(result); public static int sum(int start, int end) { if (end > start) { return end + sum(start, end - 1); } else { return end; } } } Try it Yourself Â» The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming."
  },
  {
    "document": "Java OOP Java - What is OOP? OOP stands for Object-Oriented Programming. Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods. Object-oriented programming has several advantages over procedural programming: Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it. Java - What are Classes and Objects? Classes and objects are the two main aspects of object-oriented programming. Look at the following illustration to see the difference between class and objects: class Fruit objects Apple Banana Mango Another example: class Car objects Volvo Audi Toyota So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and methods from the class. You will learn much more about classes and objects in the next chapter."
  },
  {
    "document": "Java Classes and Objects Java Classes/Objects Java is an object-oriented programming language. Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. A Class is like an object constructor, or a \"blueprint\" for creating objects. Create a Class To create a class, use the keyword class: class Main.java Create a class named \"Main\" with a variable x: Main public class Main { int x = 5; } public class Main { int x = 5; } Remember from the Java Syntax chapter that a class should always start with an uppercase first letter, and that the name of the java file should match the class name. Create an Object In Java, an object is created from a class. We have already created the class named Main, so now we can use this to create objects. Main To create an object of Main, specify the class name, followed by the object name, and use the keyword new: Main new Example Create an object called \"myObj\" and print the value of x: myObj public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Try it Yourself Â» Multiple Objects You can create multiple objects of one class: Example Create two objects of Main: Main public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } Try it Yourself Â» Using Multiple Classes You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)). main() Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder: public class Main { int x = 5; } public class Main { int x = 5; } class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } When both files have been compiled: Run the Second.java file: And the output will be: 5 You will learn much more about classes and objects in the next chapters."
  },
  {
    "document": "Java Class Attributes Java Class Attributes In the previous chapter, we used the term \"variable\" for x in the example (as shown below). It is actually an attribute of the class. Or you could say that class attributes are variables within a class: x Example Create a class called \"Main\" with two attributes: x and y: Main x y public class Main { int x = 5; int y = 3; } public class Main { int x = 5; int y = 3; } Another term for class attributes is fields. Accessing Attributes You can access attributes by creating an object of the class, and by using the dot syntax (. ): . The following example will create an object of the Main class, with the name myObj. We use the x attribute on the object to print its value: Main myObj x Example Create an object called \"myObj\" and print the value of x: myObj x public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Try it Yourself Â» Modify Attributes You can also modify attribute values: Example Set the value of x to 40: x public class Main { int x; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 40; System.out.println(myObj.x); } } public class Main { int x; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 40; System.out.println(myObj.x); } } Try it Yourself Â» Or override existing values: Example Change the value of x to 25: x public class Main { int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // x is now 25 System.out.println(myObj.x); } } public class Main { int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // x is now 25 System.out.println(myObj.x); } } Try it Yourself Â» If you don't want the ability to override existing values, declare the attribute as final: final Example public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } Try it Yourself Â» The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...). final The final keyword is called a \"modifier\". You will learn more about these in the Java Modifiers Chapter."
  },
  {
    "document": "final Multiple Objects If you create multiple objects of one class, you can change the attribute values in one object, without affecting the attribute values in the other: Example Change the value of x to 25 in myObj2, and leave x in myObj1 unchanged: x myObj2 x myObj1 public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 myObj2.x = 25; System.out.println(myObj1.x); // Outputs 5 System.out.println(myObj2.x); // Outputs 25 } } public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 myObj2.x = 25; System.out.println(myObj1.x); // Outputs 5 System.out.println(myObj2.x); // Outputs 25 } } Try it Yourself Â» Multiple Attributes You can specify as many attributes as you want: Example public class Main { String fname = \"John\"; String lname = \"Doe\"; int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Age: \" + myObj.age); } } public class Main { String fname = \"John\"; String lname = \"Doe\"; int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Age: \" + myObj.age); } } Try it Yourself Â» The next chapter will teach you how to create class methods and how to access them with objects."
  },
  {
    "document": "Java Class Methods Java Class Methods You learned from the Java Methods chapter that methods are declared within a class, and that they are used to perform certain actions: Example Create a method named myMethod() in Main: myMethod() public class Main { static void myMethod() { System.out.println(\"Hello World! \"); } } public class Main { static void myMethod() { System.out.println(\"Hello World! \"); } } myMethod() prints a text (the action), when it is called. To call a method, write the method's name followed by two parentheses () and a semicolon; myMethod() Example Inside main, call myMethod(): main myMethod() public class Main { static void myMethod() { System.out.println(\"Hello World! \"); } public static void main(String[] args) { myMethod(); } } // Outputs \"Hello World!\" public class Main { static void myMethod() { System.out.println(\"Hello World! \"); } public static void main(String[] args) { myMethod(); } } // Outputs \"Hello World!\" Try it Yourself Â» Static vs. Public You will often see Java programs that have either static or public attributes and methods. static public In the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects: static public Example An example to demonstrate the differences between static and public methods: static public public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would compile an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method on the object } } public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would compile an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method on the object } } Try it Yourself Â» Note: You will learn more about these keywords (called modifiers) in the Java Modifiers chapter. Access Methods With an Object Example Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program: myCar fullThrottle() speed() myCar // Create a Main class public class Main { // Create a fullThrottle() method public void fullThrottle() { System.out.println(\"The car is going as fast as it can!"
  },
  {
    "document": "\"); } // Create a speed() method and add a parameter public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } // Inside main, call the methods on the myCar object public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } // The car is going as fast as it can! // Max speed is: 200 // Create a Main class public class Main { // Create a fullThrottle() method public void fullThrottle() { System.out.println(\"The car is going as fast as it can! \"); } // Create a speed() method and add a parameter public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } // Inside main, call the methods on the myCar object public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } // The car is going as fast as it can! // Max speed is: 200 Try it Yourself Â» Example explained 1) We created a custom Main class with the class keyword. Main class 2) We created the fullThrottle() and speed() methods in the Main class. fullThrottle() speed() Main 3) The fullThrottle() method and the speed() method will print out some text, when they are called. fullThrottle() speed() 4) The speed() method accepts an int parameter called maxSpeed - we will use this in 8). speed() int maxSpeed 5) In order to use the Main class and its methods, we need to create an object of the Main Class. Main Main 6) Then, go to the main() method, which you know by now is a built-in Java method that runs your program (any code inside main is executed). main() 7) By using the new keyword we created an object with the name myCar. new myCar 8) Then, we call the fullThrottle() and speed() methods on the myCar object, and run the program using the name of the object (myCar), followed by a dot (. ), followed by the name of the method (fullThrottle(); and speed(200);). Notice that we add an int parameter of 200 inside the speed() method. fullThrottle() speed() myCar myCar . fullThrottle(); speed(200); int speed() Remember that.. The dot (.) is used to access the object's attributes and methods. . To call a method in Java, write the method name followed by a set of parentheses (), followed by a semicolon (;). ; A class must have a matching filename (Main and Main.java). Main Using Multiple Classes Like we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class. Remember that the name of the java file should match the class name."
  },
  {
    "document": "In this example, we have created two files in the same directory: public class Main { public void fullThrottle() { System.out.println(\"The car is going as fast as it can! \"); } public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } } public class Main { public void fullThrottle() { System.out.println(\"The car is going as fast as it can! \"); } public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } } class Second { public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } class Second { public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } When both files have been compiled: Run the Second.java file: And the output will be: The car is going as fast as it can! Max speed is: 200"
  },
  {
    "document": "Java Constructors Java Constructors A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes: Example Create a constructor: // Create a Main class public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } // Outputs 5 // Create a Main class public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } // Outputs 5 Try it Yourself Â» Note that the constructor name must match the class name, and it cannot have a return type (like void). void Also note that the constructor is called when the object is created. All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes. Constructor Parameters Constructors can also take parameters, which is used to initialize attributes. The following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5: int y Example public class Main { int x; public Main(int y) { x = y; } public static void main(String[] args) { Main myObj = new Main(5); System.out.println(myObj.x); } } // Outputs 5 public class Main { int x; public Main(int y) { x = y; } public static void main(String[] args) { Main myObj = new Main(5); System.out.println(myObj.x); } } // Outputs 5 Try it Yourself Â» You can have as many parameters as you want: Example public class Main { int modelYear; String modelName; public Main(int year, String name) { modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, \"Mustang\"); System.out.println(myCar.modelYear + \" \" + myCar.modelName); } } // Outputs 1969 Mustang public class Main { int modelYear; String modelName; public Main(int year, String name) { modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, \"Mustang\"); System.out.println(myCar.modelYear + \" \" + myCar.modelName); } } // Outputs 1969 Mustang Try it Yourself Â»"
  },
  {
    "document": "Java Modifiers Modifiers By now, you are quite familiar with the public keyword that appears in almost all of our examples: public public class Main public class Main The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors. public We divide modifiers into two groups: Access Modifiers For classes, you can use either public or default: public public For attributes, methods and constructors, you can use the one of the following: public private protected Non-Access Modifiers For classes, you can use either final or abstract: final abstract final abstract For attributes and methods, you can use the one of the following: final static abstract transient synchronized volatile Final If you don't want the ability to override existing attribute values, declare attributes as final: final Example public class Main { final int x = 10; final double PI = 3.14; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 50; // will generate an error: cannot assign a value to a final variable myObj.PI = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } public class Main { final int x = 10; final double PI = 3.14; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 50; // will generate an error: cannot assign a value to a final variable myObj.PI = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } Try it Yourself Â» Static A static method means that it can be accessed without creating an object of the class, unlike public: static public Example An example to demonstrate the differences between static and public methods: static public public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } Try it Yourself Â» Abstract An abstract method belongs to an abstract class, and it does not have a body."
  },
  {
    "document": "The body is provided by the subclass: abstract abstract Example // Code from filename: Main.java // abstract classabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } // Code from filename: Main.java // abstract classabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } Try it Yourself Â»"
  },
  {
    "document": "Java Encapsulation Encapsulation The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must: declare class variables/attributes as private provide public get and set methods to access and update the value of a private variable Get and Set You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods. The get method returns the variable value, and the set method sets the value. Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case: Example public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } Example explained The get method returns the value of the variable name. The set method takes a parameter (newName) and assigns it to the name variable. The this keyword is used to refer to the current object. However, as the name variable is declared as private, we cannot access it from outside this class: Example public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; // error System.out.println(myObj.name); // error } } Run Example Â» If the variable was declared as public, we would expect the following output: John However, as we try to access a private variable, we get an error: MyClass.java:4: error: name has private access in Person myObj.name = \"John\"; ^ MyClass.java:5: error: name has private access in Person System.out.println(myObj.name); ^ 2 errors Instead, we use the getName() and setName() methods to access and update the variable: Example public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\" Try it Yourself Â» Why Encapsulation? Better control of class attributes and methods Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method) Flexible: the programmer can change one part of the code without affecting other parts Increased security of data â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up private private Get and Set You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods. private The get method returns the variable value, and the set method sets the value."
  },
  {
    "document": "get set Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case: get set Example public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } The get method returns the value of the variable name. get name The set method takes a parameter (newName) and assigns it to the name variable. The this keyword is used to refer to the current object. set newName name this However, as the name variable is declared as private, we cannot access it from outside this class: name private Example public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; // error System.out.println(myObj.name); // error } } public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; // error System.out.println(myObj.name); // error } } Run Example Â» If the variable was declared as public, we would expect the following output: public John However, as we try to access a private variable, we get an error: private MyClass.java:4: error: name has private access in Person myObj.name = \"John\"; ^ MyClass.java:5: error: name has private access in Person System.out.println(myObj.name); ^ 2 errors Instead, we use the getName() and setName() methods to access and update the variable: getName() setName() Example public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\" public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\" Try it Yourself Â» Why Encapsulation? get set"
  },
  {
    "document": "Java Packages Java Packages & API A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories: Built-in Packages The Java API is a library of prewritten classes, that are free to use, included in the Java Development Environment. The library contains components for managing input, database programming, and much much more. The complete list can be found at Oracles website: https://docs.oracle.com/javase/8/docs/api/. The library is divided into packages and classes. Meaning you can either import a single class (along with its methods and attributes), or a whole package that contain all the classes that belong to the specified package. To use a class or a package from the library, you need to use the import keyword: import Syntax import package.name.Class; // Import a single class import package.name. *; // Import the whole package import package.name.Class; // Import a single class import package.name. *; // Import the whole package Import a Class If you find a class you want to use, for example, the Scanner class, which is used to get user input, write the following code: Scanner Example import java.util.Scanner; import java.util.Scanner; In the example above, java.util is a package, while Scanner is a class of the java.util package. java.util Scanner java.util To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read a complete line: Scanner Scanner nextLine() Example Using the Scanner class to get user input: Scanner import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } } import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } } Run Example Â» Import a Package There are many packages to choose from. In the previous example, we used the Scanner class from the java.util package. This package also contains date and time facilities, random-number generator and other utility classes. Scanner java.util To import a whole package, end the sentence with an asterisk sign (*). The following example will import ALL the classes in the java.util package: * java.util Example import java.util. *; import java.util. *; Run Example Â» User-defined Packages To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer: Example âââ root âââ mypack âââ MyPackageClass.java To create a package, use the package keyword: package MyPackageClass.java package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package! \"); } } package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package!"
  },
  {
    "document": "\"); } } Run Example Â» Save the file as MyPackageClass.java, and compile it: Then compile the package: This forces the compiler to create the \"mypack\" package. The -d keyword specifies the destination for where to save the class file. You can use any directory name, like c:/user (windows), or, if you want to keep the package within the same directory, you can use the dot sign \". \", like in the example above. -d . Note: The package name should be written in lower case to avoid conflict with class names. When we compiled the package in the example above, a new folder was created, called \"mypack\". To run the MyPackageClass.java file, write the following: The output will be: This is my package!"
  },
  {
    "document": "Java Inheritance Java Inheritance (Subclass and Superclass) In Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories: To inherit from a class, use the extends keyword. extends In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass): Car Vehicle Example class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut! \"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut! \"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } Try it Yourself Â» Did you notice the protected modifier in Vehicle? protected We set the brand attribute in Vehicle to a protected access modifier. If it was set to private, the Car class would not be able to access it. protected private - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class. Tip: Also take a look at the next chapter, Polymorphism, which uses inherited methods to perform different tasks. The final Keyword If you don't want other classes to inherit from a class, use the final keyword: final If you try to access a final class, Java will generate an error: final final class Vehicle { ... } class Car extends Vehicle { ... } final class Vehicle { ... } class Car extends Vehicle { ... } The output will be something like this: Main.java:9: error: cannot inherit from final Vehicleclass Main extends Vehicle { ^ 1 error)"
  },
  {
    "document": "Java Polymorphism Java Polymorphism Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance. Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways. For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc. ): Animal animalSound() Example class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } Remember from the Inheritance chapter that we use the extends keyword to inherit from a class. extends Now we can create Pig and Dog objects and call the animalSound() method on both of them: Pig Dog animalSound() Example class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } } class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } } Try it Yourself Â» - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
  },
  {
    "document": "Java Inner Classes Java Inner Classes In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable. To access the inner class, create an object of the outer class, and then create an object of the inner class: Example class OuterClass { int x = 10; class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } } // Outputs 15 (5 + 10) class OuterClass { int x = 10; class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } } // Outputs 15 (5 + 10) Try it Yourself Â» Private Inner Class Unlike a \"regular\" class, an inner class can be private or protected. If you don't want outside objects to access the inner class, declare the class as private: private protected private Example class OuterClass { int x = 10; private class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } } class OuterClass { int x = 10; private class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } } If you try to access a private inner class from an outside class, an error occurs: Main.java:13: error: OuterClass.InnerClass has private access in OuterClass OuterClass.InnerClass myInner = myOuter.new InnerClass(); ^ Try it Yourself Â» Static Inner Class An inner class can also be static, which means that you can access it without creating an object of the outer class: static Example class OuterClass { int x = 10; static class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass.InnerClass myInner = new OuterClass.InnerClass(); System.out.println(myInner.y); } } // Outputs 5 class OuterClass { int x = 10; static class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass.InnerClass myInner = new OuterClass.InnerClass(); System.out.println(myInner.y); } } // Outputs 5 Try it Yourself Â» Note: just like static attributes and methods, a static inner class does not have access to members of the outer class."
  },
  {
    "document": "static static Access Outer Class From Inner Class One advantage of inner classes, is that they can access attributes and methods of the outer class: Example class OuterClass { int x = 10; class InnerClass { public int myInnerMethod() { return x; } } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.myInnerMethod()); } } // Outputs 10 class OuterClass { int x = 10; class InnerClass { public int myInnerMethod() { return x; } } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.myInnerMethod()); } } // Outputs 10 Try it Yourself Â»"
  },
  {
    "document": "Java Abstraction Abstract Classes and Methods Data abstraction is the process of hiding certain details and showing only essential information to the user. Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter). The abstract keyword is a non-access modifier, used for classes and methods: Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from). An abstract class can have both abstract and regular methods: abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(\"Zzz\"); } } From the example above, it is not possible to create an object of the Animal class: Animal myObj = new Animal(); // will generate an error To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class: Remember from the Inheritance chapter that we use the extends keyword to inherit from a class. Example // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Try it Yourself Â» Why And When To Use Abstract Classes and Methods? To achieve security - hide certain details and only show the important details of an object. Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up abstract An abstract class can have both abstract and regular methods: abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(\"Zzz\"); } } abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(\"Zzz\"); } } From the example above, it is not possible to create an object of the Animal class: Animal myObj = new Animal(); // will generate an error Animal myObj = new Animal(); // will generate an error To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class: Remember from the Inheritance chapter that we use the extends keyword to inherit from a class."
  },
  {
    "document": "extends Example // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Try it Yourself Â» To achieve security - hide certain details and only show the important details of an object. Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter."
  },
  {
    "document": "Java Interface Interfaces Another way to achieve abstraction in Java, is with interfaces. An interface is a completely \"abstract class\" that is used to group related methods with empty bodies: interface Example // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void run(); // interface method (does not have a body) } // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void run(); // interface method (does not have a body) } To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class: implements extends Example // Interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } // Interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Try it Yourself Â» abstract public public static final 1) To achieve security - hide certain details and only show the important details of an object (interface). 2) Java does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below)."
  },
  {
    "document": "Multiple Interfaces To implement multiple interfaces, separate them with a comma: Example interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class Main { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class Main { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } Try it Yourself Â»"
  },
  {
    "document": "Java Enums Enums An enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables). enum final To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters: enum enum Example enum Level { LOW, MEDIUM, HIGH } enum Level { LOW, MEDIUM, HIGH } You can access enum constants with the dot syntax: enum Enum is short for \"enumerations\", which means \"specifically listed\". Enum inside a Class You can also have an enum inside a class: enum Example public class Main { enum Level { LOW, MEDIUM, HIGH } public static void main(String[] args) { Level myVar = Level.MEDIUM; System.out.println(myVar); } } public class Main { enum Level { LOW, MEDIUM, HIGH } public static void main(String[] args) { Level myVar = Level.MEDIUM; System.out.println(myVar); } } The output will be: MEDIUM Enum in a Switch Statement Enums are often used in switch statements to check for corresponding values: switch Example enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(\"Low level\"); break; case MEDIUM: System.out.println(\"Medium level\"); break; case HIGH: System.out.println(\"High level\"); break; } } } enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(\"Low level\"); break; case MEDIUM: System.out.println(\"Medium level\"); break; case HIGH: System.out.println(\"High level\"); break; } } } The output will be: Medium level Loop Through an Enum The enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum: values() Example for (Level myVar : Level.values()) { System.out.println(myVar); } for (Level myVar : Level.values()) { System.out.println(myVar); } The output will be: LOW MEDIUM HIGH An enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden). enum class public static final An enum cannot be used to create objects, and it cannot extend other classes (but it can implement interfaces). enum Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc."
  },
  {
    "document": "Java User Input (Scanner) Java User Input The Scanner class is used to get user input, and it is found in the java.util package. Scanner java.util To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read Strings: Scanner Scanner nextLine() Example import java.util.Scanner; // Import the Scanner class class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Enter username\"); String userName = myObj.nextLine(); // Read user input System.out.println(\"Username is: \" + userName); // Output user input } } import java.util.Scanner; // Import the Scanner class class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Enter username\"); String userName = myObj.nextLine(); // Read user input System.out.println(\"Username is: \" + userName); // Output user input } } Run Example Â» If you don't know what a package is, read our Java Packages Tutorial. Input Types In the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below: nextLine() nextBoolean() boolean nextByte() byte nextDouble() double nextFloat() float nextInt() int nextLine() String nextLong() long nextShort() short In the example below, we use different methods to read data of various types: Example import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = myObj.nextLine(); // Numerical input int age = myObj.nextInt(); double salary = myObj.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } } import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = myObj.nextLine(); // Numerical input int age = myObj.nextInt(); double salary = myObj.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } } Run Example Â» Note: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like \"InputMismatchException\"). You can read more about exceptions and how to handle errors in the Exceptions chapter. Complete Scanner Reference Tip: For a complete reference of Scanner methods, go to our Java Scanner Reference."
  },
  {
    "document": "Java Date and Time Java Dates Java does not have a built-in Date class, but we can import the java.time package to work with the date and time API. The package includes many date and time classes. For example: java.time LocalDate LocalTime LocalDateTime DateTimeFormatter If you don't know what a package is, read our Java Packages Tutorial. Display Current Date To display the current date, import the java.time.LocalDate class, and use its now() method: java.time.LocalDate now() Example import java.time.LocalDate; // import the LocalDate class public class Main { public static void main(String[] args) { LocalDate myObj = LocalDate.now(); // Create a date object System.out.println(myObj); // Display the current date } } import java.time.LocalDate; // import the LocalDate class public class Main { public static void main(String[] args) { LocalDate myObj = LocalDate.now(); // Create a date object System.out.println(myObj); // Display the current date } } The output will be:  Display Current Time To display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class, and use its now() method: java.time.LocalTime now() Example import java.time.LocalTime; // import the LocalTime class public class Main { public static void main(String[] args) { LocalTime myObj = LocalTime.now(); System.out.println(myObj); } } import java.time.LocalTime; // import the LocalTime class public class Main { public static void main(String[] args) { LocalTime myObj = LocalTime.now(); System.out.println(myObj); } } This example displays the server's local time, which may differ from your local time:  Display Current Date and Time To display the current date and time, import the java.time.LocalDateTime class, and use its now() method: java.time.LocalDateTime now() Example import java.time.LocalDateTime; // import the LocalDateTime class public class Main { public static void main(String[] args) { LocalDateTime myObj = LocalDateTime.now(); System.out.println(myObj); } } import java.time.LocalDateTime; // import the LocalDateTime class public class Main { public static void main(String[] args) { LocalDateTime myObj = LocalDateTime.now(); System.out.println(myObj); } } The output will be something like this:  Formatting Date and Time The \"T\" in the example above is used to separate the date from the time. You can use the DateTimeFormatter class with the ofPattern() method in the same package to format or parse date-time objects. The following example will remove both the \"T\" and nanoseconds from the date-time: DateTimeFormatter ofPattern() Example import java.time.LocalDateTime; // Import the LocalDateTime class import java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class public class Main { public static void main(String[] args) { LocalDateTime myDateObj = LocalDateTime.now(); System.out.println(\"Before formatting: \" + myDateObj); DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\"); String formattedDate = myDateObj.format(myFormatObj); System.out.println(\"After formatting: \" + formattedDate); } } import java.time.LocalDateTime; // Import the LocalDateTime class import java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class public class Main { public static void main(String[] args) { LocalDateTime myDateObj = LocalDateTime.now(); System.out.println(\"Before formatting: \" + myDateObj); DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\"); String formattedDate = myDateObj.format(myFormatObj); System.out.println(\"After formatting: \" + formattedDate); } } The output will be:  The ofPattern() method accepts all sorts of values, if you want to display the date and time in a different format. For example: ofPattern()"
  },
  {
    "document": "Java ArrayList Java ArrayList The ArrayList class is a resizable array, which can be found in the java.util package. ArrayList java.util The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want. The syntax is also slightly different: ArrayList ArrayList Example Create an ArrayList object called cars that will store strings: ArrayList import java.util.ArrayList; // import the ArrayList class ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object import java.util.ArrayList; // import the ArrayList class ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object If you don't know what a package is, read our Java Packages Tutorial. Add Items The ArrayList class has many useful methods. For example, to add elements to the list, use the add() method: ArrayList add() Example import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } Try it Yourself Â» You can also add an item at a specified position by referring to the index number: Example import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(0, \"Mazda\"); // Insert element at the beginning of the list (0) System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(0, \"Mazda\"); // Insert element at the beginning of the list (0) System.out.println(cars); } } Try it Yourself Â» Remember: Array indexes start with 0: [0] is the first element. [1] is the second element, etc."
  },
  {
    "document": "Access an Item To access an element in the ArrayList, use the get() method and refer to the index number: ArrayList get() Example cars.get(0); cars.get(0); Try it Yourself Â» Change an Item To modify an element, use the set() method and refer to the index number: set() Example cars.set(0, \"Opel\"); cars.set(0, \"Opel\"); Try it Yourself Â» Remove an Item To remove an element, use the remove() method and refer to the index number: remove() Example cars.remove(0); cars.remove(0); Try it Yourself Â» To remove all the elements in the ArrayList, use the clear() method: ArrayList clear() Example cars.clear(); cars.clear(); Try it Yourself Â» ArrayList Size To find out how many elements an ArrayList have, use the size method: size Example cars.size(); cars.size(); Try it Yourself Â» Loop Through an ArrayList Loop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run: ArrayList for size() Example public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (int i = 0; i < cars.size(); i++) { System.out.println(cars.get(i)); } } } public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (int i = 0; i < cars.size(); i++) { System.out.println(cars.get(i)); } } } Try it Yourself Â» You can also loop through an ArrayList with the for-each loop: ArrayList Example public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } } public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Other Types Elements in an ArrayList are actually objects. In the examples above, we created elements (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer."
  },
  {
    "document": "For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc: Integer Boolean Character Double Example Create an ArrayList to store numbers (add elements of type Integer): ArrayList Integer import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(10); myNumbers.add(15); myNumbers.add(20); myNumbers.add(25); for (int i : myNumbers) { System.out.println(i); } } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(10); myNumbers.add(15); myNumbers.add(20); myNumbers.add(25); for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â» Sort an ArrayList Another useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically: java.util Collections sort() Example Sort an ArrayList of Strings: import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Example Sort an ArrayList of Integers: import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â» Complete ArrayList Reference For a complete reference of ArrayList methods, go to our Java ArrayList Reference."
  },
  {
    "document": "Java LinkedList Java LinkedList In the previous chapter, you learned about the ArrayList class. The LinkedList class is almost identical to the ArrayList: ArrayList LinkedList ArrayList Example // Import the LinkedList class import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } // Import the LinkedList class import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } Try it Yourself Â» ArrayList vs. LinkedList The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList. LinkedList ArrayList The LinkedList class has all of the same methods as the ArrayList class because they both implement the List interface. This means that you can add items, change items, remove items and clear the list in the same way. LinkedList ArrayList List However, while the ArrayList class and the LinkedList class can be used in the same way, they are built very differently. ArrayList LinkedList How the ArrayList works The ArrayList class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed. ArrayList How the LinkedList works The LinkedList stores its items in \"containers.\" The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list. LinkedList When To Use Use an ArrayList for storing and accessing data, and LinkedList to manipulate data. ArrayList LinkedList LinkedList Methods For many cases, the ArrayList is more efficient as it is common to need access to random items in the list, but the LinkedList provides several methods to do certain operations more efficiently: ArrayList LinkedList Complete LinkedList Reference For a complete reference of LinkedList methods, go to our Java LinkedList Reference."
  },
  {
    "document": "Java List Sorting Java Sort a List In the previous chapters, you learned how to use two popular lists in Java: ArrayList and LinkedList, which are found in the java.util package. Another useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically. Sort an ArrayList Sort an ArrayList of Strings alphabetically in ascending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Sort an ArrayList of Integers numerically in ascending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â» Reverse the Order You can also sort a list in reverse order, by using the reverseOrder() method. In the following example, we sort an ArrayList of Strings alphabetically in reverse/descending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars, Collections.reverseOrder()); // Sort cars for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Sort an ArrayList of Integers numerically in reverse/descending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up ArrayList LinkedList java.util Another useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically."
  },
  {
    "document": "java.util Collections sort() Sort an ArrayList Sort an ArrayList of Strings alphabetically in ascending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Sort an ArrayList of Integers numerically in ascending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â» Reverse the Order You can also sort a list in reverse order, by using the reverseOrder() method. reverseOrder() In the following example, we sort an ArrayList of Strings alphabetically in reverse/descending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars, Collections.reverseOrder()); // Sort cars for (String i : cars) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars, Collections.reverseOrder()); // Sort cars for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Sort an ArrayList of Integers numerically in reverse/descending order: Example import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } Try it Yourself Â»"
  },
  {
    "document": "Java HashMap Java HashMap In the ArrayList chapter, you learned that Arrays store items as an ordered collection, and you have to access them with an index number (int type). A HashMap however, store items in \"key/value\" pairs, and you can access them by an index of another type (e.g. a String). ArrayList int HashMap String One object is used as a key (index) to another object (value). It can store different types: String keys and Integer values, or the same type, like: String keys and String values: String Integer String String Example Create a HashMap object called capitalCities that will store String keys and String values: HashMap String String import java.util.HashMap; // import the HashMap class HashMap<String, String> capitalCities = new HashMap<String, String>(); import java.util.HashMap; // import the HashMap class HashMap<String, String> capitalCities = new HashMap<String, String>(); Add Items The HashMap class has many useful methods. For example, to add items to it, use the put() method: HashMap put() Example // Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called capitalCities HashMap<String, String> capitalCities = new HashMap<String, String>(); // Add keys and values (Country, City) capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } } // Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called capitalCities HashMap<String, String> capitalCities = new HashMap<String, String>(); // Add keys and values (Country, City) capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } } Try it Yourself Â» Access an Item To access a value in the HashMap, use the get() method and refer to its key: HashMap get() Example capitalCities.get(\"England\"); capitalCities.get(\"England\"); Try it Yourself Â» Remove an Item To remove an item, use the remove() method and refer to the key: remove() Example capitalCities.remove(\"England\"); capitalCities.remove(\"England\"); Try it Yourself Â» To remove all items, use the clear() method: clear() Example capitalCities.clear(); capitalCities.clear(); Try it Yourself Â» HashMap Size To find out how many items there are, use the size() method: size() Example capitalCities.size(); capitalCities.size(); Try it Yourself Â» Loop Through a HashMap Loop through the items of a HashMap with a for-each loop."
  },
  {
    "document": "HashMap Note: Use the keySet() method if you only want the keys, and use the values() method if you only want the values: keySet() values() Example // Print keys for (String i : capitalCities.keySet()) { System.out.println(i); } // Print keys for (String i : capitalCities.keySet()) { System.out.println(i); } Try it Yourself Â» Example // Print values for (String i : capitalCities.values()) { System.out.println(i); } // Print values for (String i : capitalCities.values()) { System.out.println(i); } Try it Yourself Â» Example // Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); } // Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); } Try it Yourself Â» Other Types Keys and values in a HashMap are actually objects. In the examples above, we used objects of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc: Integer Boolean Character Double Example Create a HashMap object called people that will store String keys and Integer values: HashMap String Integer // Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called people HashMap<String, Integer> people = new HashMap<String, Integer>(); // Add keys and values (Name, Age) people.put(\"John\", 32); people.put(\"Steve\", 30); people.put(\"Angie\", 33); for (String i : people.keySet()) { System.out.println(\"key: \" + i + \" value: \" + people.get(i)); } } } // Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called people HashMap<String, Integer> people = new HashMap<String, Integer>(); // Add keys and values (Name, Age) people.put(\"John\", 32); people.put(\"Steve\", 30); people.put(\"Angie\", 33); for (String i : people.keySet()) { System.out.println(\"key: \" + i + \" value: \" + people.get(i)); } } } Try it Yourself Â» Complete HashMap Reference For a complete reference of HashMap methods, go to our Java HashMap Reference."
  },
  {
    "document": "Java HashSet Java HashSet A HashSet is a collection of items where every item is unique, and it is found in the java.util package: java.util Example Create a HashSet object called cars that will store strings: HashSet import java.util.HashSet; // Import the HashSet class HashSet<String> cars = new HashSet<String>(); import java.util.HashSet; // Import the HashSet class HashSet<String> cars = new HashSet<String>(); Add Items The HashSet class has many useful methods. For example, to add items to it, use the add() method: HashSet add() Example // Import the HashSet class import java.util.HashSet; public class Main { public static void main(String[] args) { HashSet<String> cars = new HashSet<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Mazda\"); System.out.println(cars); } } // Import the HashSet class import java.util.HashSet; public class Main { public static void main(String[] args) { HashSet<String> cars = new HashSet<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Mazda\"); System.out.println(cars); } } Try it Yourself Â» Note: In the example above, even though BMW is added twice it only appears once in the set because every item in a set has to be unique. Check If an Item Exists To check whether an item exists in a HashSet, use the contains() method: contains() Example cars.contains(\"Mazda\"); cars.contains(\"Mazda\"); Try it Yourself Â» Remove an Item To remove an item, use the remove() method: remove() Example cars.remove(\"Volvo\"); cars.remove(\"Volvo\"); Try it Yourself Â» To remove all items, use the clear() method: clear() Example cars.clear(); cars.clear(); Try it Yourself Â» HashSet Size To find out how many items there are, use the size method: size Example cars.size(); cars.size(); Try it Yourself Â» Loop Through a HashSet Loop through the items of an HashSet with a for-each loop: HashSet Example for (String i : cars) { System.out.println(i); } for (String i : cars) { System.out.println(i); } Try it Yourself Â» Other Types Items in an HashSet are actually objects. In the examples above, we created items (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc: Integer Boolean Character Double Example Use a HashSet that stores Integer objects: HashSet Integer import java.util.HashSet; public class Main { public static void main(String[] args) { // Create a HashSet object called numbers HashSet<Integer> numbers = new HashSet<Integer>(); // Add values to the set numbers.add(4); numbers.add(7); numbers.add(8); // Show which numbers between 1 and 10 are in the set for(int i = 1; i <= 10; i++) { if(numbers.contains(i)) { System.out.println(i + \" was found in the set. \"); } else { System.out.println(i + \" was not found in the set."
  },
  {
    "document": "\"); } } } } import java.util.HashSet; public class Main { public static void main(String[] args) { // Create a HashSet object called numbers HashSet<Integer> numbers = new HashSet<Integer>(); // Add values to the set numbers.add(4); numbers.add(7); numbers.add(8); // Show which numbers between 1 and 10 are in the set for(int i = 1; i <= 10; i++) { if(numbers.contains(i)) { System.out.println(i + \" was found in the set. \"); } else { System.out.println(i + \" was not found in the set. \"); } } } } Try it Yourself Â»"
  },
  {
    "document": "Java Iterator Java Iterator An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an \"iterator\" because \"iterating\" is the technical term for looping. Iterator To use an Iterator, you must import it from the java.util package. java.util Getting an Iterator The iterator() method can be used to get an Iterator for any collection: iterator() Iterator Example // Import the ArrayList class and the Iterator class import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Print the first item System.out.println(it.next()); } } // Import the ArrayList class and the Iterator class import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Print the first item System.out.println(it.next()); } } Try it Yourself Â» Looping Through a Collection To loop through a collection, use the hasNext() and next() methods of the Iterator: hasNext() next() Iterator Example while(it.hasNext()) { System.out.println(it.next()); } while(it.hasNext()) { System.out.println(it.next()); } Try it Yourself Â» Removing Items from a Collection Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping. remove() Example Use an iterator to remove numbers less than 10 from a collection: import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(12); numbers.add(8); numbers.add(2); numbers.add(23); Iterator<Integer> it = numbers.iterator(); while(it.hasNext()) { Integer i = it.next(); if(i < 10) { it.remove(); } } System.out.println(numbers); } } import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(12); numbers.add(8); numbers.add(2); numbers.add(23); Iterator<Integer> it = numbers.iterator(); while(it.hasNext()) { Integer i = it.next(); if(i < 10) { it.remove(); } } System.out.println(numbers); } } Try it Yourself Â» Note: Trying to remove items using a for loop or a for-each loop would not work correctly because the collection is changing size at the same time that the code is trying to loop."
  },
  {
    "document": "Java Wrapper Classes Java Wrapper Classes Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects. int boolean The table below shows the primitive type and the equivalent wrapper class: Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects): ArrayList Example ArrayList<int> myNumbers = new ArrayList<int>(); // Invalid ArrayList<int> myNumbers = new ArrayList<int>(); // Invalid ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid Try it Yourself Â» Creating Wrapper Objects To create a wrapper object, use the wrapper class instead of the primitive type. To get the value, you can just print the object: Example public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt); System.out.println(myDouble); System.out.println(myChar); } } public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt); System.out.println(myDouble); System.out.println(myChar); } } Try it Yourself Â» Since you're now working with objects, you can use certain methods to get information about the specific object. For example, the following methods are used to get the value associated with the corresponding wrapper object: intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue(). intValue() byteValue() shortValue() longValue() floatValue() doubleValue() charValue() booleanValue() This example will output the same result as the example above: Example public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt.intValue()); System.out.println(myDouble.doubleValue()); System.out.println(myChar.charValue()); } } public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt.intValue()); System.out.println(myDouble.doubleValue()); System.out.println(myChar.charValue()); } } Try it Yourself Â» Another useful method is the toString() method, which is used to convert wrapper objects to strings. toString() In the following example, we convert an Integer to a String, and use the length() method of the String class to output the length of the \"string\": Integer String length() String Example public class Main { public static void main(String[] args) { Integer myInt = 100; String myString = myInt.toString(); System.out.println(myString.length()); } } public class Main { public static void main(String[] args) { Integer myInt = 100; String myString = myInt.toString(); System.out.println(myString.length()); } } Try it Yourself Â»"
  },
  {
    "document": "Java Exceptions - Try...Catch Java Exceptions When executing Java code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things. When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error). Java try and catch The try statement allows you to define a block of code to be tested for errors while it is being executed. try The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. catch The try and catch keywords come in pairs: try catch Syntax try { // Block of code to try } catch(Exception e) { // Block of code to handle errors } try { // Block of code to try } catch(Exception e) { // Block of code to handle errors } Consider the following example: This will generate an error, because myNumbers[10] does not exist. public class Main { public static void main(String[ ] args) { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); // error! } } public class Main { public static void main(String[ ] args) { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); // error! } } The output will be something like this: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 10 at Main.main(Main.java:4) Note: ArrayIndexOutOfBoundsException occurs when you try to access an index number that does not exist. ArrayIndexOutOfBoundsException If an error occurs, we can use try...catch to catch the error and execute some code to handle it: try...catch Example public class Main { public static void main(String[ ] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } } } public class Main { public static void main(String[ ] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } } } The output will be: Something went wrong. Finally The finally statement lets you execute code, after try...catch, regardless of the result: finally try...catch Example public class Main { public static void main(String[] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } finally { System.out.println(\"The 'try catch' is finished. \"); } } } public class Main { public static void main(String[] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } finally { System.out.println(\"The 'try catch' is finished. \"); } } } The output will be: Something went wrong. The 'try catch' is finished. The throw keyword The throw statement allows you to create a custom error. throw The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc: throw ArithmeticException FileNotFoundException ArrayIndexOutOfBoundsException SecurityException Example Throw an exception if age is below 18 (print \"Access denied\")."
  },
  {
    "document": "If age is 18 or older, print \"Access granted\": public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } The output will be: Exception in thread \"main\" java.lang.ArithmeticException: Access denied - You must be at least 18 years old. at Main.checkAge(Main.java:4) at Main.main(Main.java:12) If age was 20, you would not get an exception: Example checkAge(20); checkAge(20); The output will be: Access granted - You are old enough! Error and Exception Types Reference For a list of different errors and exception types, go to our Java Errors and Exception Types Reference."
  },
  {
    "document": "Java Regular Expressions What is a Regular Expression? A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. A regular expression can be a single character, or a more complicated pattern. Regular expressions can be used to perform all types of text search and text replace operations. Java does not have a built-in Regular Expression class, but we can import the java.util.regex package to work with regular expressions. The package includes the following classes: java.util.regex Pattern Matcher PatternSyntaxException Example Find out if there are any occurrences of the word \"w3schools\" in a sentence: import java.util.regex.Matcher; import java.util.regex.Pattern; public class Main { public static void main(String[] args) { Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(\"Visit W3Schools! \"); boolean matchFound = matcher.find(); if(matchFound) { System.out.println(\"Match found\"); } else { System.out.println(\"Match not found\"); } } } // Outputs Match found import java.util.regex.Matcher; import java.util.regex.Pattern; public class Main { public static void main(String[] args) { Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(\"Visit W3Schools! \"); boolean matchFound = matcher.find(); if(matchFound) { System.out.println(\"Match found\"); } else { System.out.println(\"Match not found\"); } } } // Outputs Match found Try it Yourself Â» Example Explained In this example, The word \"w3schools\" is being searched for in a sentence. First, the pattern is created using the Pattern.compile() method. The first parameter indicates which pattern is being searched for and the second parameter has a flag to indicates that the search should be case-insensitive. The second parameter is optional. Pattern.compile() The matcher() method is used to search for the pattern in a string. It returns a Matcher object which contains information about the search that was performed. matcher() The find() method returns true if the pattern was found in the string and false if it was not found. find() Flags Flags in the compile() method change how the search is performed. Here are a few of them: compile() Pattern.CASE_INSENSITIVE Pattern.LITERAL Pattern.UNICODE_CASE CASE_INSENSITIVE Regular Expression Patterns The first parameter of the Pattern.compile() method is the pattern. It describes what is being searched for. Pattern.compile() Brackets are used to find a range of characters: Metacharacters Metacharacters are characters with a special meaning: Quantifiers Quantifiers define quantities:"
  },
  {
    "document": "Java Threads Java Threads Threads allows a program to operate more efficiently by doing multiple things at the same time. Threads can be used to perform complicated tasks in the background without interrupting the main program. Creating a Thread There are two ways to create a thread. It can be created by extending the Thread class and overriding its run() method: Thread run() Extend Syntax public class Main extends Thread { public void run() { System.out.println(\"This code is running in a thread\"); } } public class Main extends Thread { public void run() { System.out.println(\"This code is running in a thread\");  Another way to create a thread is to implement the Runnable interface: Runnable Implement Syntax public class Main implements Runnable { public void run() { System.out.println(\"This code is running in a thread\"); } } public class Main implements Runnable { public void run() { System.out.println(\"This code is running in a thread\"); } } Running Threads If the class extends the Thread class, the thread can be run by creating an instance of the class and call its start() method: Thread start() Extend Example public class Main extends Thread { public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } } public class Main extends Thread { public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } } Try it Yourself Â» If the class implements the Runnable interface, the thread can be run by passing an instance of the class to a Thread object's constructor and then calling the thread's start() method: Runnable Thread start() Implement Example public class Main implements Runnable { public static void main(String[] args) { Main obj = new Main(); Thread thread = new Thread(obj); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } } public class Main implements Runnable { public static void main(String[] args) { Main obj = new Main(); Thread thread = new Thread(obj); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } } Try it Yourself Â» Differences between \"extending\" and \"implementing\" Threads The major difference is that when a class extends the Thread class, you cannot extend any other class, but by implementing the Runnable interface, it is possible to extend from another class as well, like: class MyClass extends OtherClass implements Runnable. MyClass extends OtherClass implements Runnable Concurrency Problems Because threads run at the same time as other parts of the program, there is no way to know in which order the code will run. When the threads and main program are reading and writing the same variables, the values are unpredictable."
  },
  {
    "document": "The problems that result from this are called concurrency problems. Example A code example where the value of the variable amount is unpredictable: public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(amount); amount++; System.out.println(amount); } public void run() { amount++; } } public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(amount); amount++; System.out.println(amount); public void run() { amount++;  Try it Yourself Â» To avoid concurrency problems, it is best to share as few attributes between threads as possible. If attributes need to be shared, one possible solution is to use the isAlive() method of the thread to check whether the thread has finished running before using any attributes that the thread can change. isAlive() Example Use isAlive() to prevent concurrency problems: isAlive() public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); // Wait for the thread to finish while(thread.isAlive()) { System.out.println(\"Waiting...\"); } // Update amount and print its value System.out.println(\"Main: \" + amount); amount++; System.out.println(\"Main: \" + amount); } public void run() { amount++; } } public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); // Wait for the thread to finish while(thread.isAlive()) { System.out.println(\"Waiting...\"); // Update amount and print its value System.out.println(\"Main: \" + amount); amount++; System.out.println(\"Main: \" + amount); public void run() { amount++;  Try it Yourself Â»"
  },
  {
    "document": "Java Lambda Expressions Java Lambda Expressions Lambda Expressions were added in Java 8. A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method. Syntax The simplest lambda expression contains a single parameter and an expression: parameter -> expression parameter -> expression To use more than one parameter, wrap them in parentheses: (parameter1, parameter2) -> expression (parameter1, parameter2) -> expression Expressions are limited. They have to immediately return a value, and they cannot contain variables, assignments or statements such as if or for. In order to do more complex operations, a code block can be used with curly braces. If the lambda expression needs to return a value, then the code block should have a return statement. if for return (parameter1, parameter2) -> { code block } (parameter1, parameter2) -> { code block } Using Lambda Expressions Lambda expressions are usually passed as parameters to a function: Example Use a lambda expression in the ArrayList's forEach() method to print every item in the list: ArrayList forEach() import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } Try it Yourself Â» Lambda expressions can be stored in variables if the variable's type is an interface which has only one method. The lambda expression should have the same number of parameters and the same return type as that method. Java has many of these kinds of interfaces built in, such as the Consumer interface (found in the java.util package) used by lists. Consumer java.util Example Use Java's Consumer interface to store a lambda expression in a variable: Consumer import java.util.ArrayList; import java.util.function.Consumer; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); Consumer<Integer> method = (n) -> { System.out.println(n); }; numbers.forEach( method ); } } import java.util.ArrayList; import java.util.function.Consumer; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); Consumer<Integer> method = (n) -> { System.out.println(n); }; numbers.forEach( method ); } } Try it Yourself Â» To use a lambda expression in a method, the method should have a parameter with a single-method interface as its type. Calling the interface's method will run the lambda expression: Example Create a method which takes a lambda expression as a parameter: interface StringFunction { String run(String str); } public class Main { public static void main(String[] args) { StringFunction exclaim = (s) -> s + \"! \"; StringFunction ask = (s) -> s + \"?"
  },
  {
    "document": "\"; printFormatted(\"Hello\", exclaim); printFormatted(\"Hello\", ask); } public static void printFormatted(String str, StringFunction format) { String result = format.run(str); System.out.println(result); } } interface StringFunction { String run(String str); public class Main { public static void main(String[] args) { StringFunction exclaim = (s) -> s + \"! \"; StringFunction ask = (s) -> s + \"? \"; printFormatted(\"Hello\", exclaim); printFormatted(\"Hello\", ask); public static void printFormatted(String str, StringFunction format) { String result = format.run(str); System.out.println(result);  Try it Yourself Â»"
  },
  {
    "document": "Java Advanced Sorting (Comparator and Comparable) Java Advanced Sorting In the List Sorting Chapter, you learned how to sort lists alphabetically and numerically, but what if the list has objects in it? To sort objects you need to specify a rule that decides how objects should be sorted. For example, if you have a list of cars you might want to sort them by year, the rule could be that cars with an earlier year go first. The Comparator and Comparable interfaces allow you to specify what rule is used to sort objects. Comparator Comparable Being able to specify a sorting rule also allows you to change how strings and numbers are sorted. Comparators An object that implements the Comparator interface is called a comparator. Comparator The Comparator interface allows you to create a class with a compare() method that compares two objects to decide which one should go first in a list."
  },
  {
    "document": "Comparator compare() The compare() method should return a number which is: compare() A class that implements the Comparator interface might look something like this: Comparator // Sort Car objects by year class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } } // Sort Car objects by year class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } } To use the comparator, pass it as an argument into a sorting method: // Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator); // Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator); Here is a complete example using a comparator to sort a list of cars by year: Example import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class class Car { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } } // Create a comparator class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the year of both objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } } import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class class Car { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } } // Create a comparator class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the year of both objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } } Using a Lambda Expression To make the code shorter, the comparator can be replaced with a lambda expression which has the same arguments and return value as the compare() method: compare() Example Use a lambda expression as a comparator: Collections.sort(myCars, (obj1, obj2) -> { Car a = (Car) obj1; Car b = (Car) obj2; if (a.year < b.year) return -1; if (a.year > b.year) return 1; return 0; }); Collections.sort(myCars, (obj1, obj2) -> { Car a = (Car) obj1; Car b = (Car) obj2; if (a.year < b.year) return -1; if (a.year > b.year) return 1; return 0; }); Special Sorting Rules Comparators can also be used to make special sorting rules for strings and numbers."
  },
  {
    "document": "In this example we use a comparator to list all of the even numbers before the odd ones: Example import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; class SortEvenFirst implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure the objects are integers Integer a = (Integer)obj1; Integer b = (Integer)obj2; // Check each number to see if it is even // A number is even if the remainder when dividing by 2 is 0 boolean aIsEven = (a % 2) == 0; boolean bIsEven = (b % 2) == 0; if (aIsEven == bIsEven) { // If both numbers are even or both are odd then use normal sorting rules if (a < b) return -1; if (a > b) return 1; return 0; } else { // If a is even then it goes first, otherwise b goes first if (aIsEven) { return -1; } else { return 1; } } } } public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Comparator myComparator = new SortEvenFirst(); Collections.sort(myNumbers, myComparator); for (int i : myNumbers) { System.out.println(i); } } } import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; class SortEvenFirst implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure the objects are integers Integer a = (Integer)obj1; Integer b = (Integer)obj2; // Check each number to see if it is even // A number is even if the remainder when dividing by 2 is 0 boolean aIsEven = (a % 2) == 0; boolean bIsEven = (b % 2) == 0; if (aIsEven == bIsEven) { // If both numbers are even or both are odd then use normal sorting rules if (a < b) return -1; if (a > b) return 1; return 0; } else { // If a is even then it goes first, otherwise b goes first if (aIsEven) { return -1; } else { return 1; } } } } public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Comparator myComparator = new SortEvenFirst(); Collections.sort(myNumbers, myComparator); for (int i : myNumbers) { System.out.println(i); } } } The Comparable Interface The Comparable interface allows an object to specify its own sorting rule with a compareTo() method. Comparable compareTo() The compareTo() method takes an object as an argument and compares the comparable with the argument to decide which one should go first in a list. compareTo() Like the comparator, the compareTo() method returns a number which is: compareTo() Many native Java classes implement the Comparable interface, such as String and Integer. Comparable String Integer This is why strings and numbers do not need a comparator to be sorted."
  },
  {
    "document": "An object that implements the Comparable interface might look something like this: Comparable class Car implements Comparable { public String brand; public String model; public int year; // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } } class Car implements Comparable { public String brand; public String model; public int year; // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } } Here is the same example as before but using the Comparable interface instead of a comparator: Comparable Example import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class which is comparable class Car implements Comparable { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Sort the cars Collections.sort(myCars); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } } import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class which is comparable class Car implements Comparable { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Sort the cars Collections.sort(myCars); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } } A Common Sorting Trick The most obvious way to sort two numbers naturally is to write something like this: if(a.year < b.year) return -1; // a is less than b if(a.year > b.year) return 1; // a is greater than b return 0; // a is equal to b if(a.year < b.year) return -1; // a is less than b if(a.year > b.year) return 1; // a is greater than b return 0; // a is equal to b But it can actually be done with just a single line: return a.year - b.year; return a.year - b.year; This trick can also be used to easily sort things in reverse: return b.year - a.year; return b.year - a.year; Comparator vs."
  },
  {
    "document": "Comparable A comparator is an object with one method that is used to compare two different objects. A comparable is an object which can compare itself with other objects. It is easier to use the Comparable interface when possible, but the Comparator interface is more powerful because it allows you to sort any kind of object even if you cannot change its code. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Comparable Comparator â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up"
  },
  {
    "document": "Java Files File handling is an important part of any application. Java has several methods for creating, reading, updating, and deleting files. Java File Handling The File class from the java.io package, allows us to work with files. File java.io To use the File class, create an object of the class, and specify the filename or directory name: Example import java.io.File; // Import the File class File myObj = new File(\"filename.txt\"); // Specify the filename If you don't know what a package is, read our Java Packages Tutorial. The File class has many useful methods for creating and getting information about files. For example: Method Type Description canRead() Boolean Tests whether the file is readable or not canWrite() Boolean Tests whether the file is writable or not createNewFile() Boolean Creates an empty file delete() Boolean Deletes a file exists() Boolean Tests whether the file exists getName() String Returns the name of the file getAbsolutePath() String Returns the absolute pathname of the file length() Long Returns the size of the file in bytes list() String[] Returns an array of the files in the directory mkdir() Boolean Creates a directory You will learn how to create, write, read and delete files in the next chapters: Create/Write Files Â» Read Files Â» Delete Files Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up File Example import java.io.File; // Import the File class File myObj = new File(\"filename.txt\"); // Specify the filename import java.io.File; // Import the File class File myObj = new File(\"filename.txt\"); // Specify the filename If you don't know what a package is, read our Java Packages Tutorial. The File class has many useful methods for creating and getting information about files. For example: File canRead() canWrite() createNewFile() delete() exists() getName() getAbsolutePath() length() list() mkdir() You will learn how to create, write, read and delete files in the next chapters:"
  },
  {
    "document": "Java Create and Write To Files Create a File To create a file in Java, you can use the createNewFile() method. This method returns a boolean value: true if the file was successfully created, and false if the file already exists. Note that the method is enclosed in a try...catch block. This is necessary because it throws an IOException if an error occurs (if the file cannot be created for some reason): createNewFile() true false try...catch IOException Example import java.io.File; // Import the File class import java.io.IOException; // Import the IOException class to handle errors public class CreateFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); if (myObj.createNewFile()) { System.out.println(\"File created: \" + myObj.getName()); } else { System.out.println(\"File already exists. \"); } } catch (IOException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.File; // Import the File class import java.io.IOException; // Import the IOException class to handle errors public class CreateFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); if (myObj.createNewFile()) { System.out.println(\"File created: \" + myObj.getName()); } else { System.out.println(\"File already exists. \"); } } catch (IOException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } The output will be: File created: filename.txt To create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the \"\\\" character (for Windows). On Mac and Linux you can just write the path, like: /Users/name/filename.txt \\ Example File myObj = new File(\"C:\\\\Users\\\\MyName\\\\filename.txt\"); File myObj = new File(\"C:\\\\Users\\\\MyName\\\\filename.txt\"); Run Example Â» Write To a File In the following example, we use the FileWriter class together with its write() method to write some text to the file we created in the example above. Note that when you are done writing to the file, you should close it with the close() method: FileWriter write() close() Example import java.io.FileWriter; // Import the FileWriter class import java.io.IOException; // Import the IOException class to handle errors public class WriteToFile { public static void main(String[] args) { try { FileWriter myWriter = new FileWriter(\"filename.txt\"); myWriter.write(\"Files in Java might be tricky, but it is fun enough! \"); myWriter.close(); System.out.println(\"Successfully wrote to the file. \"); } catch (IOException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.FileWriter; // Import the FileWriter class import java.io.IOException; // Import the IOException class to handle errors public class WriteToFile { public static void main(String[] args) { try { FileWriter myWriter = new FileWriter(\"filename.txt\"); myWriter.write(\"Files in Java might be tricky, but it is fun enough! \"); myWriter.close(); System.out.println(\"Successfully wrote to the file. \"); } catch (IOException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } The output will be: Successfully wrote to the file. To read the file above, go to the Java Read Files chapter."
  },
  {
    "document": "Java Read Files Read a File In the previous chapter, you learned how to create and write to a file. In the following example, we use the Scanner class to read the contents of the text file we created in the previous chapter: Scanner Example import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } The output will be: Files in Java might be tricky, but it is fun enough! Get File Information To get more information about a file, use any of the File methods: File Example import java.io.File; // Import the File class public class GetFileInfo { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.exists()) { System.out.println(\"File name: \" + myObj.getName()); System.out.println(\"Absolute path: \" + myObj.getAbsolutePath()); System.out.println(\"Writeable: \" + myObj.canWrite()); System.out.println(\"Readable \" + myObj.canRead()); System.out.println(\"File size in bytes \" + myObj.length()); } else { System.out.println(\"The file does not exist. \"); } } } import java.io.File; // Import the File class public class GetFileInfo { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.exists()) { System.out.println(\"File name: \" + myObj.getName()); System.out.println(\"Absolute path: \" + myObj.getAbsolutePath()); System.out.println(\"Writeable: \" + myObj.canWrite()); System.out.println(\"Readable \" + myObj.canRead()); System.out.println(\"File size in bytes \" + myObj.length()); } else { System.out.println(\"The file does not exist. \"); } } } The output will be: File name: filename.txt Absolute path: C:\\Users\\MyName\\filename.txt Writeable: true Readable: true File size in bytes: 0 Note: There are many available classes in the Java API that can be used to read and write files in Java: FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream, etc. Which one to use depends on the Java version you're working with and whether you need to read bytes or characters, and the size of the file/lines etc. FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream Tip: To delete a file, read our Java Delete Files chapter."
  },
  {
    "document": "Java Delete Files Delete a File To delete a file in Java, use the delete() method: delete() Example import java.io.File; // Import the File class public class DeleteFile { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.delete()) { System.out.println(\"Deleted the file: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the file. \"); } } } import java.io.File; // Import the File class public class DeleteFile { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.delete()) { System.out.println(\"Deleted the file: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the file. \"); } } } The output will be: Deleted the file: filename.txt Delete a Folder You can also delete a folder. However, it must be empty: Example import java.io.File; public class DeleteFolder { public static void main(String[] args) { File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); if (myObj.delete()) { System.out.println(\"Deleted the folder: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the folder. \"); } } } import java.io.File; public class DeleteFolder { public static void main(String[] args) { File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); if (myObj.delete()) { System.out.println(\"Deleted the folder: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the folder. \"); } } The output will be: Deleted the folder: Test"
  },
  {
    "document": "Java How To Add Two Numbers Add Two Numbers Learn how to add two numbers in Java: Example int x = 5; int y = 6; int sum = x + y; System.out.println(sum); // Print the sum of x + y int x = 5; int y = 6; int sum = x + y; System.out.println(sum); // Print the sum of x + y Add Two Numbers with User Input Learn how to add two numbers with user input: Example import java.util.Scanner; // Import the Scanner class class MyClass { public static void main(String[] args) { int x, y, sum; Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Type a number:\"); x = myObj.nextInt(); // Read user input System.out.println(\"Type another number:\"); y = myObj.nextInt(); // Read user input sum = x + y; // Calculate the sum of x + y System.out.println(\"Sum is: \" + sum); // Print the sum } } import java.util.Scanner; // Import the Scanner class class MyClass { public static void main(String[] args) { int x, y, sum; Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Type a number:\"); x = myObj.nextInt(); // Read user input System.out.println(\"Type another number:\"); y = myObj.nextInt(); // Read user input sum = x + y; // Calculate the sum of x + y System.out.println(\"Sum is: \" + sum); // Print the sum } }"
  },
  {
    "document": "Java How To Count Words Count Number of Words in a String You can easily count the number of words in a string with the following example: Example String words = \"One Two Three Four\"; int countWords = words.split(\"\\\\s\").length; System.out.println(countWords); String words = \"One Two Three Four\"; int countWords = words.split(\"\\\\s\").length; System.out.println(countWords); Related Pages Java String Tutorial Java String Methods"
  },
  {
    "document": "Java How To Reverse a String Reverse a String You can easily reverse a string by characters with the following example: Example String originalStr = \"Hello\"; String reversedStr = \"\"; for (int i = 0; i < originalStr.length(); i++) { reversedStr = originalStr.charAt(i) + reversedStr; } System.out.println(\"Reversed string: \"+ reversedStr); String originalStr = \"Hello\"; String reversedStr = \"\"; for (int i = 0; i < originalStr.length(); i++) { reversedStr = originalStr.charAt(i) + reversedStr; } System.out.println(\"Reversed string: \"+ reversedStr); Related Pages Java String Tutorial Java String Methods"
  },
  {
    "document": "Java How To Calculate the Sum of Elements Calculate the Sum of an Array Get the sum of array elements: Example int[] myArray = {1, 5, 10, 25}; int sum = 0; int i; // Loop through the array elements and store the sum in the sum variable for (i = 0; i < myArray.length; i++) { sum += myArray[i]; } System.out.println(\"The sum is: \" + sum); int[] myArray = {1, 5, 10, 25}; int sum = 0; int i; // Loop through the array elements and store the sum in the sum variable for (i = 0; i < myArray.length; i++) { sum += myArray[i]; System.out.println(\"The sum is: \" + sum);"
  },
  {
    "document": "Java How To Convert a String to an Array Convert a String to an Array There are many ways to convert a string to an array. The simplest way is to use the toCharArray() method: toCharArray() Example Convert a string to a char array: char // Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print the first element of the array System.out.println(myArray[0]); // Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print the first element of the array System.out.println(myArray[0]); You can also loop through the array to print all array elements: Example // Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print array elements for (char i : myArray) { System.out.println(i); } // Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print array elements for (char i : myArray) { System.out.println(i); } Related Pages Java Strings Tutorial Java Array Tutorial The toCharArray() String Method"
  },
  {
    "document": "Java How To Sort an Array How To Sort an Array You can use the sort() method, found in java.util.Arrays, to sort an array: sort() java.util.Arrays Example import java.util.Arrays; public class Main { public static void main(String[] args) { String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); for (String i : cars) { System.out.println(i); } } } import java.util.Arrays; public class Main { public static void main(String[] args) { String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); for (String i : cars) { System.out.println(i);    Try it Yourself Â» Related Pages Java Array Tutorial Java Arrays Class Reference"
  },
  {
    "document": "Java How To Find the Average of Array Elements How To Calculate the Average of Array Elements Create a program that calculates the average of different ages: Example // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg); // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg); Try it Yourself Â» Related Pages Java Array Tutorial"
  },
  {
    "document": "Java How To Find the Smallest Element in an Array How To Find the Smallest Element in an Array Create a program that finds the lowest age among different ages: Example // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge); // An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge); Try it Yourself Â» Related Pages Java Array Tutorial"
  },
  {
    "document": "Java How To Loop Through an ArrayList Loop Through an ArrayList Loop through the elements of an ArrayList: ArrayList Example public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } } public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } } Try it Yourself Â» Related Pages Java ArrayList Tutorial Java ArrayList Methods"
  },
  {
    "document": "Java How To Loop Through a HashMap Loop Through a HashMap Loop through the items of a HashMap with a for-each loop. HashMap Note: Use the keySet() method if you only want the keys, and use the values() method if you only want the values: keySet() values() Example // Print keys for (String i : capitalCities.keySet()) { System.out.println(i); } // Print keys for (String i : capitalCities.keySet()) { System.out.println(i); } Try it Yourself Â» Example // Print values for (String i : capitalCities.values()) { System.out.println(i); } // Print values for (String i : capitalCities.values()) { System.out.println(i); } Try it Yourself Â» Example // Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); } // Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); } Try it Yourself Â» Related Pages Java HashMap Tutorial Java HashMap Methods"
  },
  {
    "document": "Java How To Loop Through an Enum Loop Through an Enum The enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum: values() Example enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { for (Level myVar : Level.values()) { System.out.println(myVar); } } } enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { for (Level myVar : Level.values()) { System.out.println(myVar); } } } Related Pages Java Enums Tutorial"
  },
  {
    "document": "Java How To Get the Area of a Rectangle Area of Rectangle The area of a rectangle can be found by multiplying the length of the rectangle by the width: Example int length = 5; int width = 2; int area = length * width; System.out.println(\"Area of rectangle: \" + area); int length = 5; int width = 2; int area = length * width; System.out.println(\"Area of rectangle: \" + area);"
  },
  {
    "document": "Java How To Find Even or Odd Numbers Check Whether a Number is Even or Odd Find out if a number is even or odd: Example int number = 5; // Find out if the number above is even or odd if (number % 2 == 0) { System.out.println(number + \" is even. \"); } else { System.out.println(number + \" is odd. \"); } int number = 5; // Find out if the number above is even or odd if (number % 2 == 0) { System.out.println(number + \" is even. \"); } else { System.out.println(number + \" is odd. \"); Related Pages Java Numbers Tutorial Java Operators Tutorial Java Math Tutorial"
  },
  {
    "document": "Java How To Find Positive or Negative Numbers Find Out if a Number is Positive or Negative Find out if a number is even or odd: Example int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number. \"); } else if (myNum < 0) { System.out.println(\"The value is a negative number. \"); } else { System.out.println(\"The value is 0. \"); } int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number. \"); } else if (myNum < 0) { System.out.println(\"The value is a negative number. \"); } else { System.out.println(\"The value is 0. \"); Related Pages Java If..Else Tutorial"
  },
  {
    "document": "Java How To Find the Square Root of a Number Square Root of a Number You can use Math.sqrt() to find the square root of a number: Math.sqrt() Example Find the square root of 64: Math.sqrt(64); Math.sqrt(64); Related Pages Java Math Tutorial Java Math Reference"
  },
  {
    "document": "Java How To Generate Random Numbers How To Generate a Random Number You can use Math.random() method to generate a random number. Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive): Example Math.random(); Try it Yourself Â» To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula: Example int randomNum = (int)(Math.random() * 101); // 0 to 100 Try it Yourself Â» Related Pages Java Math Tutorial Java Math Reference Java Type Casting â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Math.random() Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive): Math.random() Example Math.random(); Math.random(); Try it Yourself Â» To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula: Example int randomNum = (int)(Math.random() * 101); // 0 to 100 int randomNum = (int)(Math.random() * 101); // 0 to 100 Try it Yourself Â» Related Pages Java Math Tutorial Java Math Reference Java Type Casting"
  },
  {
    "document": "Java Reference Documentation This section contains a Java reference documentation. Java Reference A list of Java keywords and methods can be found here:"
  },
  {
    "document": "Java Keywords Java Reserved Keywords Java has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers: Note: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers. true false null"
  },
  {
    "document": "Java assert Keyword â® Java Keywords Example Use assert to test the truth value of expressions: public class Main { public static void main(String[] args) { // Enable assertions ClassLoader loader = ClassLoader.getSystemClassLoader(); loader.setDefaultAssertionStatus(true); // Run the assert example AssertExample example = new AssertExample(); example.run(); } } class AssertExample { public void run() { int a = 12; try { assert a == 12; // Assertion without a fail message assert a == 12 : \"a is not 12\"; assert a == 15 : \"a is not 15\"; } catch (AssertionError e) { System.out.println(e.getMessage()); } } } public class Main { public static void main(String[] args) { // Enable assertions ClassLoader loader = ClassLoader.getSystemClassLoader(); loader.setDefaultAssertionStatus(true); // Run the assert example AssertExample example = new AssertExample(); example.run(); } } class AssertExample { public void run() { int a = 12; try { assert a == 12; // Assertion without a fail message assert a == 12 : \"a is not 12\"; assert a == 15 : \"a is not 15\"; } catch (AssertionError e) { System.out.println(e.getMessage()); } } } Try it Yourself Â» Definition and Usage The assert keyword evaluates a boolean expression and throws an AssertionError exception if the expression evaluates to false. When the exception is thrown we say that the assertion failed. assert AssertionError false An optional expression can be added which will be used as the exception message if the assertion fails. Assertions are disabled by default. assert statements are ignored unless assertions are enabled. assert The purpose of assertions is to clearly mark where a program is doing something unintended when debugging and testing a program. â® Java Keywords"
  },
  {
    "document": "Java abstract Keyword â® Java Keywords Example An abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass: abstract abstract // Code from filename: Main.java // abstract classabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } // Code from filename: Main.java // abstract classabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } Try it Yourself Â» Definition and Usage The abstract keyword is a non-access modifier, used for classes and methods. abstract Class: An abstract class is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). Method: An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from). Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java boolean Keyword â® Java Keywords Example A boolean data type with true or false values: boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false Try it Yourself Â» Definition and Usage The boolean keyword is a data type that can only take the values true or false. boolean true false Boolean values are mostly used for conditional testing (read the Java Booleans Tutorial for more information). Related Pages Read more about data types in our Java Data Types Tutorial. Read more about booleans in our Java Booleans Tutorial. â® Java Keywords"
  },
  {
    "document": "Java break Keyword â® Java Keywords Example End the loop when i is equal to 4: i for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); } for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); } Try it Yourself Â» Definition and Usage The break keyword is used to break out a for loop, a while loop or a switch block. break for while switch More Examples Example Break out of a while loop: int i = 0;while (i < 10) { System.out.println(i); i++; if (i == 4) { break; } } int i = 0;while (i < 10) { System.out.println(i); i++; if (i == 4) { break; } } Try it Yourself Â» Related Pages Use the continue keyword to end the current iteration in a loop, but continue with the next. continue Read more about for loops in our Java For Loops Tutorial. Read more about while loops in our Java While Loops Tutorial. Read more about break and continue in our Java Break Tutorial. â® Java Keywords"
  },
  {
    "document": "Java byte Keyword â® Java Keywords Example byte myNum = 100; System.out.println(myNum); byte myNum = 100; System.out.println(myNum); Try it Yourself Â» Definition and Usage The byte keyword is a data type that can store whole numbers from -128 to 127. byte Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java case Keyword â® Java Keywords Example Calculate the weekday name: int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) Try it Yourself Â» Definition and Usage The case keyword marks a block of code in a switch statement. case switch Related Pages Read more about the switch statement in our Java Switch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java catch Keyword â® Java Keywords Example If an error occur, use try...catch to catch the error and execute some code to handle it: try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } Try it Yourself Â» Definition and Usage The catch keyword catches exceptions generated by try statements. catch try The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. Related Pages Read more about exceptions in our Java Try..Catch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java char Keyword â® Java Keywords Example char myGrade = 'B'; System.out.println(myGrade); char myGrade = 'B'; System.out.println(myGrade); Try it Yourself Â» Definition and Usage The char keyword is a data type that is used to store a single character. char A char value must be surrounded by single quotes, like 'A' or 'c'. Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java class Keyword â® Java Keywords Example Create a class named \"Main\": public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» Definition and Usage The class keyword is used to create a class. class Every line of code that runs in Java must be inside a class. A class should always start with an uppercase first letter, and the name of the java file must match the class name. A class is like an object constructor. See the example below to see how we can use it to create an object. More Examples Example Create an object of Main called \"myObj\" and print the value of x: Main myObj public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Try it Yourself Â» Related Pages Read more about classes and objects in our Java Classes/Objects Tutorial. â® Java Keywords"
  },
  {
    "document": "Java continue Keyword â® Java Keywords Example Skip the iteration if the variable i is 4, but continue with the next iteration: i for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); } for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); } Try it Yourself Â» Definition and Usage The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration. continue for while More Examples Example Use the continue keyword in a while loop int i = 0;while (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; } int i = 0;while (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; } Try it Yourself Â» Related Pages Use the break keyword to break out of a loop. break Read more about for loops in our Java For Loops Tutorial. Read more about while loops in our Java While Loops Tutorial. Read more about break and continue in our Java Break Tutorial. â® Java Keywords"
  },
  {
    "document": "Java default Keyword â® Java Keywords Example Specify some code to run if there is no case match in a switch block: int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } / Outputs \"Looking forward to the Weekend\" int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } / Outputs \"Looking forward to the Weekend\" Try it Yourself Â» Definition and Usage The default keyword specifies the default block of code in a switch statement. default switch The default keyword specifies some code to run if there is no case match in the switch. default Note: if the default keyword is used as the last statement in a switch block, it does not need a break. default break Related Pages Read more about the switch statement in our Java Switch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java do Keyword â® Java Keywords Example The following loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: int i = 0; do { System.out.println(i); i++; } while (i < 5); int i = 0; do { System.out.println(i); i++; } while (i < 5); Try it Yourself Â» Definition and Usage The do keyword is used together with while to create a do-while loop. do while The while loop loops through a block of code as long as a specified condition is true: while true The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. do/while while Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end! Related Pages Read more about while loops in our Java While Loop Tutorial. â® Java Keywords"
  },
  {
    "document": "Java double Keyword â® Java Keywords Example double myNum = 19.99d; System.out.println(myNum); double myNum = 19.99d; System.out.println(myNum); Try it Yourself Â» Definition and Usage The double keyword is a data type that can store fractional numbers from 1.7eâ308 to 1.7e+308. double Note that you should end the value with a \"d\": Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java else Keyword â® Java Keywords Example Use the else statement to specify a block of code to be executed if the condition is false. else false int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» Definition and Usage The else statement specifies a block of Java code to be executed if a condition is false in an if statement. else false if Java has the following conditional statements: if else else if switch More Examples Example Use the else if statement to specify a new condition if the first condition is false. else if false int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 20) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 20) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» Related Pages Read more about conditions in our Java If...Else Tutorial. â® Java Keywords"
  },
  {
    "document": "Java enum Keyword â® Java Keywords Example Create an enum with constants (unchangeable variables): enum enum Level { LOW, MEDIUM, HIGH } enum Level { LOW, MEDIUM, HIGH } You can access enum constants with the dot syntax: enum Definition and Usage The enum keyword declares an enumerated (unchangeable) type. enum An enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables). To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters. enum An enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden). enum class public static final An enum cannot be used to create objects, and it can not extend other classes (but it can implement interfaces). enum Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc. Related Pages Read more about enums in our Java Enum Tutorial. â® Java Keywords"
  },
  {
    "document": "Java exports Keyword â® Java Keywords Example Use exports in a module's module-info.java file: exports module mymodule { exports com.w3schools.package1; exports com.w3Schools.package2 to module1, module2; } module mymodule { exports com.w3schools.package1; exports com.w3Schools.package2 to module1, module2; } Definition and Usage The exports keyword allows a package from a module to be used by other modules. exports If the to keyword is added, the exported package is only allowed to be used by the modules that are listed. to Note: The exports keyword is a module directive meant to be used in the module-info.java file of a module. exports The exports keyword was new in Java 9. exports â® Java Keywords"
  },
  {
    "document": "Java extends Keyword â® Java Keywords Example The Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass): Car Vehicle class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut! \"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut! \"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } Try it Yourself Â» Definition and Usage The extends keyword extends a class (indicates that a class is inherited from another class). extends In Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories: To inherit from a class, use the extends keyword. extends Related Pages Read more about inheritance in our Java Inheritance Tutorial. â® Java Keywords"
  },
  {
    "document": "Java final Keyword â® Java Keywords Example Set a variable to final, to prevent it from being overridden/modified: final public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } Try it Yourself Â» Definition and Usage The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override). final The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...). final The final keyword is called a \"modifier\". You will learn more about these in the Java Modifiers Chapter. final Related Pages Read more about attributes our Java Class Attributes Tutorial. â® Java Keywords"
  },
  {
    "document": "Java finally Keyword â® Java Keywords Example Execute code, after try...catch, regardless of the result: try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } finally { System.out.println(\"The 'try catch' is finished. \"); } try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } finally { System.out.println(\"The 'try catch' is finished. \"); } Try it Yourself Â» Definition and Usage The finally keyword is used to execute code (used with exceptions - try..catch statements) no matter if there is an exception or not. finally Related Pages Read more about exceptions in our Java Try..Catch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java float Keyword â® Java Keywords Example float myNum = 5.75f; System.out.println(myNum); float myNum = 5.75f; System.out.println(myNum); Try it Yourself Â» Definition and Usage The float keyword is a data type that can store fractional numbers from 3.4eâ038 to 3.4e+038. float Note that you should end the value with an \"f\": Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java for Keyword â® Java Keywords Example Print the numbers 0 to 4: for (int i = 0; i < 5; i++) { System.out.println(i); } for (int i = 0; i < 5; i++) { System.out.println(i); } Try it Yourself Â» Definition and Usage The for loop loops through a block of code a number of times. for From the example above: More Examples There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array: The following example outputs all elements in the cars array, using a \"for-each\" loop: Example String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } Try it Yourself Â» Related Pages Read more about for loops in our Java For Loop Tutorial. â® Java Keywords"
  },
  {
    "document": "Java if Keyword â® Java Keywords Example Test two values to find out if 20 is greater than 18. If the condition is true, print some text: true if (20 > 18) { System.out.println(\"20 is greater than 18\"); } if (20 > 18) { System.out.println(\"20 is greater than 18\"); } Try it Yourself Â» Definition and Usage The if statement specifies a block of Java code to be executed if a condition is true. if true Java has the following conditional statements: if else else if switch More Examples Example Use the if statement to test variables: if int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); } Try it Yourself Â» Example Use the else statement to specify a block of code to be executed if the condition is false. else false int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 20; if (time < 18) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» Example Use the else if statement to specify a new condition if the first condition is false. else if false int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 20) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" int time = 22; if (time < 10) { System.out.println(\"Good morning. \"); } else if (time < 20) { System.out.println(\"Good day. \"); } else { System.out.println(\"Good evening. \"); } // Outputs \"Good evening.\" Try it Yourself Â» Related Pages Read more about conditions in our Java If...Else Tutorial. â® Java Keywords"
  },
  {
    "document": "Java implements Keyword â® Java Keywords Example An interface is an abstract \"class\" that is used to group related methods with \"empty\" bodies: interface To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class: implements extends // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Try it Yourself Â» Definition and Usage The implements keyword is used to implement an interface. implements interface The interface keyword is used to declare a special type of class that only contains abstract methods. interface To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class. implements extends abstract public public static final To achieve security - hide certain details and only show the important details of an object (interface). Java does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below)."
  },
  {
    "document": "Multiple Interfaces To implement multiple interfaces, separate them with a comma: Example interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } Try it Yourself Â» Related Pages Read more about interfaces in our Java Interface Tutorial. â® Java Keywords"
  },
  {
    "document": "Java import Keyword â® Java Keywords Example Import the Scanner class from the Java API: Scanner import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } } import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } } Run Example Â» Definition and Usage The import keyword is used to import a package, class or interface. import Related Pages Read more about packages in our Java Packages Tutorial. â® Java Keywords"
  },
  {
    "document": "Java instanceof Keyword â® Java Keywords Example Check whether an object is an instance of a specific class: public class Main { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj instanceof Main); // returns true } } public class Main { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj instanceof Main); // returns true } } Try it Yourself Â» Definition and Usage The instanceof keyword checks whether an object is an instance of a specific class or an interface. instanceof The instanceof keyword compares the instance with type. The return value is either true or false. true false Related Pages Read more about objects in our Java Classes/Objects Tutorial. â® Java Keywords"
  },
  {
    "document": "Java int Keyword â® Java Keywords Example int myNum = 100000; System.out.println(myNum); int myNum = 100000; System.out.println(myNum); Try it Yourself Â» Definition and Usage The int keyword is a data type that can store whole numbers from -2147483648 to 2147483647. int Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java interface Keyword â® Java Keywords Example An interface is an abstract \"class\" that is used to group related methods with \"empty\" bodies: interface To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class: implements extends // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Try it Yourself Â» Definition and Usage The interface keyword is used to declare a special type of class that only contains abstract methods. interface To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class. implements extends abstract public public static final To achieve security - hide certain details and only show the important details of an object (interface). Java does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below)."
  },
  {
    "document": "Multiple Interfaces To implement multiple interfaces, separate them with a comma: Example interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } Try it Yourself Â» Related Pages Read more about interfaces in our Java Interface Tutorial. â® Java Keywords"
  },
  {
    "document": "Java long Keyword â® Java Keywords Example long myNum = 15000000000L; System.out.println(myNum); long myNum = 15000000000L; System.out.println(myNum); Try it Yourself Â» Definition and Usage The long keyword is a data type that can store whole numbers from -9223372036854775808 to 9223372036854775808. long Note that you should end the value with an \"L\": Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java module Keyword â® Java Keywords Example Declare a module: module mymodule { } module mymodule { } Definition and Usage The module keyword is used to declare a module. Following the keyword is the name of the module and braces which can contain directives describing the module. module Note: The module keyword is meant to be used in the module-info.java file of a module. module The module keyword was new in Java 9. module â® Java Keywords"
  },
  {
    "document": "Java native Keyword â® Java Keywords Example Load a method from a compiled library: class Main { static { System.loadLibrary(\"libraryname\"); } public static void main(String[] args) { test(); } private static native void test(); } class Main { static { System.loadLibrary(\"libraryname\"); } public static void main(String[] args) { test(); } private static native void test(); } Definition and Usage The native keyword declares a method as belonging to an external compiled library which is native to the operating system. native In order to use native methods, an external library must be loaded from a .dll, .so or similar kind of file. The compiled code in the external file should be written to support the Java Native Interface. .dll .so â® Java Keywords"
  },
  {
    "document": "Java new Keyword â® Java Keywords Example Create an object called \"myObj\" and print the value of x: myObj public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Try it Yourself Â» Definition and Usage The new keyword creates new objects. new Related Pages Read more about objects in our Java Classes/Objects Tutorial. â® Java Keywords"
  },
  {
    "document": "Java package Keyword â® Java Keywords package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package! \"); } } package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package! \"); } } Run Example Â» Definition and Usage The package keyword creates a package. package Related Pages Read more about packages in our Java Packages Tutorial. â® Java Keywords"
  },
  {
    "document": "Java private Keyword â® Java Keywords Example A class with private attributes: private public class Main { private String fname = \"John\"; private String lname = \"Doe\"; private String email = \"john@doe.com\"; private int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } } public class Main { private String fname = \"John\"; private String lname = \"Doe\"; private String email = \"john@doe.com\"; private int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } } Try it Yourself Â» Definition and Usage The private keyword is an access modifier used for attributes, methods and constructors, making them only accessible within the declared class. private Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java protected Keyword â® Java Keywords Example The Student subclass accesses a Person class with protected attributes: Student Person protected class Person { protected String fname = \"John\"; protected String lname = \"Doe\"; protected String email = \"john@doe.com\"; protected int age = 24; } class Student extends Person { private int graduationYear = 2018; public static void main(String[] args) { Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); } } class Person { protected String fname = \"John\"; protected String lname = \"Doe\"; protected String email = \"john@doe.com\"; protected int age = 24; } class Student extends Person { private int graduationYear = 2018; public static void main(String[] args) { Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); } } Try it Yourself Â» Definition and Usage The protected keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses. protected Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java public Keyword â® Java Keywords Example Second accesses a public Main class with public attributes: Second public Main public /* Code from filename: Main.java public class Main { public String fname = \"John\"; public String lname = \"Doe\"; public String email = \"john@doe.com\"; public int age = 24; } */ class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } } /* Code from filename: Main.java public class Main { public String fname = \"John\"; public String lname = \"Doe\"; public String email = \"john@doe.com\"; public int age = 24; } */ class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } } Try it Yourself Â» Definition and Usage The public keyword is an access modifier used for classes, attributes, methods and constructors, making them accessible by any other class. public Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java return Keyword â® Java Keywords Example A method with a return value: public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) Try it Yourself Â» Definition and Usage The return keyword finishes the execution of a method, and can be used to return a value from a method. return More Examples Tip: Use the void keyword to specify that a method should not have a return value: void Example A method without any return values: public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } Try it Yourself Â» Related Pages Read more about methods in our Java Methods Tutorial. â® Java Keywords"
  },
  {
    "document": "Java requires Keyword â® Java Keywords Example Use requires in a module's module-info.java file: requires module mymodule { requires module1; requires transitive module2; requires static module3; } module mymodule { requires module1; requires transitive module2; requires static module3; } Definition and Usage The requires keyword is a module directive that specifies a different module which this module depends on. requires There are two modifiers which can be added to the requires directive: transitive and static requires transitive static The transitive modifier allows other modules to use this module without also having to declare this same requirement. transitive The static modifier makes the requirement optional during runtime. It allows this module to run even if the other module is not present. static Note: The requires keyword is a module directive meant to be used in the module-info.java file of a module. requires The requires keyword was new in Java 9. requires â® Java Keywords"
  },
  {
    "document": "Java short Keyword â® Java Keywords Example short myNum = 5000; System.out.println(myNum); short myNum = 5000; System.out.println(myNum); Try it Yourself Â» Definition and Usage The short keyword is a data type that can store whole numbers from -32768 to 32767. short Related Pages Read more about data types in our Java Data Types Tutorial. â® Java Keywords"
  },
  {
    "document": "Java static Keyword â® Java Keywords Example A static method can be accessed without creating an object of the class first: static public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } Try it Yourself Â» Definition and Usage The static keyword is a non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class. static Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java super Keyword â® Java Keywords Example Using super to call the superclass of Dog (subclass): super Dog class Animal { // Superclass (parent) public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Dog extends Animal { // Subclass (child) public void animalSound() { super.animalSound(); // Call the superclass method System.out.println(\"The dog says: bow wow\"); } } public class Main { public static void main(String args[]) { Animal myDog = new Dog(); // Create a Dog object myDog.animalSound(); // Call the method on the Dog object } } class Animal { // Superclass (parent) public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Dog extends Animal { // Subclass (child) public void animalSound() { super.animalSound(); // Call the superclass method System.out.println(\"The dog says: bow wow\"); } } public class Main { public static void main(String args[]) { Animal myDog = new Dog(); // Create a Dog object myDog.animalSound(); // Call the method on the Dog object } } Try it Yourself Â» Definition and Usage The super keyword refers to superclass (parent) objects. super It is used to call superclass methods, and to access the superclass constructor. The most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name. super To understand the super keyword, you should have a basic understanding of Inheritance and Polymorphism. super Related Pages Read more about inheritance (subclasses and superclasses) in our Java Inheritance Tutorial. Read more about polymorphism in our Java Polymorphism Tutorial. â® Java Keywords"
  },
  {
    "document": "Java switch Keyword â® Java Keywords Example Use the switch statement to calculate the weekday name: int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) Try it Yourself Â» Definition and Usage The switch keyword selects one of many code blocks to be executed. switch From the example above, it works like this: switch case break Related Pages Read more about the switch statement in our Java Switch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java synchronized Keyword â® Java Keywords Example Use the synchronized modifier to prevent race conditions between threads: synchronized public class Main implements Runnable { public static int a, b; public static void main(String[] args) { a = 100; b = 100; // Check the total amount shared between a and b before the transfers System.out.println(\"Total before: \" + (a + b)); // Run threads which will transfer amounts between a and b Thread thread1 = new Thread(new Main()); Thread thread2 = new Thread(new Main()); thread1.start(); thread2.start(); // Wait for the threads to finish running try { thread1.join(); thread2.join(); } catch (InterruptedException e) { e.printStackTrace(); } // Check the total amount shared between a and b after the transfers // It should be the same amount as before System.out.println(\"Total after: \" + (a + b)); } public void run() { for (int i = 0; i < 10000000; i++) { transfer(); } } public static synchronized void transfer() { // Choose a random amount to transfer int amount = (int) (5.0 * Math.random()); // Transfer between a and b if (a > b) { a -= amount; b += amount; } else { a += amount; b -= amount; } } } public class Main implements Runnable { public static int a, b; public static void main(String[] args) { a = 100; b = 100; // Check the total amount shared between a and b before the transfers System.out.println(\"Total before: \" + (a + b)); // Run threads which will transfer amounts between a and b Thread thread1 = new Thread(new Main()); Thread thread2 = new Thread(new Main()); thread1.start(); thread2.start(); // Wait for the threads to finish running try { thread1.join(); thread2.join(); } catch (InterruptedException e) { e.printStackTrace(); } // Check the total amount shared between a and b after the transfers // It should be the same amount as before System.out.println(\"Total after: \" + (a + b)); } public void run() { for (int i = 0; i < 10000000; i++) { transfer(); } } public static synchronized void transfer() { // Choose a random amount to transfer int amount = (int) (5.0 * Math.random()); // Transfer between a and b if (a > b) { a -= amount; b += amount; } else { a += amount; b -= amount; } } } Try it Yourself Â» Definition and Usage The synchronized keyword is a modifier that locks a method so that only one thread can use it at a time. This prevents problems that arise from race conditions between threads. synchronized In the example above, removing the synchronized keyword from the transfer() method may cause the values of a and b to be modified by another thread in between operations. This would result in the total amount between the two variables to change. synchronized transfer() a b Related Pages Read more about modifiers in our Java Modifiers Tutorial. Read more about threads in our Java Threads Tutorial. â® Java Keywords"
  },
  {
    "document": "Java this Keyword â® Java Keywords Example Using this with a class attribute (x): this public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(\"Value of x = \" + myObj.x); } } public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(\"Value of x = \" + myObj.x); } } Try it Yourself Â» Definition and Usage The this keyword refers to the current object in a method or constructor. this The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name (because a class attribute is shadowed by a method or constructor parameter). If you omit the keyword in the example above, the output would be \"0\" instead of \"5\". this this can also be used to: this Related Pages Read more about objects in our Java Classes/Objects Tutorial. Read more about constructors in our Java Constructors Tutorial. Read more about methods in our Java Methods Tutorial. â® Java Keywords"
  },
  {
    "document": "Java throw Keyword â® Java Keywords Example Throw an exception if age is below 18 (print \"Access denied\"). If age is 18 or older, print \"Access granted\": public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } Try it Yourself Â» Definition and Usage The throw keyword is used to create a custom error. throw The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc. throw ArithmeticException ClassNotFoundException ArrayIndexOutOfBoundsException SecurityException The exception type is often used together with a custom method, like in the example above. Differences between throw and throws: throw throws throw throws Related Pages Read more about exceptions in our Java Try..Catch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java throws Keyword â® Java Keywords Example Throw an exception if age is below 18 (print \"Access denied\"). If age is 18 or older, print \"Access granted\": public class Main { static void checkAge(int age) throws ArithmeticException { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } public class Main { static void checkAge(int age) throws ArithmeticException { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old. \"); } else { System.out.println(\"Access granted - You are old enough! \"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } } Try it Yourself Â» Definition and Usage The throws keyword indicates what exception type may be thrown by a method. throws There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc. ArithmeticException ClassNotFoundException ArrayIndexOutOfBoundsException SecurityException Differences between throw and throws: throw throws throw throws Related Pages Read more about exceptions in our Java Try..Catch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java transient Keyword â® Java Keywords Example The transient keyword prevents an attribute from being serialized: transient import java.io. *; public class Main { public static void main(String[] args) { Person person = new Person(); person.fname = \"John\"; person.lname = \"Doe\"; person.age = 24; person.accessCode = 5044; // Serialize the object ByteArrayOutputStream output = new ByteArrayOutputStream(); try { ObjectOutputStream objOut = new ObjectOutputStream(output); objOut.writeObject(person); } catch (IOException e) {} // Deserialize the object Person person2 = new Person(); try { ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(output.toByteArray())); person2 = (Person)objIn.readObject(); } catch(Exception e) {} // Print the deseralized object System.out.println(\"First name: \" + person2.fname); System.out.println(\"Last name: \" + person2.lname); System.out.println(\"Age: \" + person2.age); System.out.println(\"Access code: \" + person2.accessCode); } } class Person implements Serializable { String fname = \"John\"; String lname = \"Doe\"; int age = 24; transient int accessCode = 0; } import java.io. *; public class Main { public static void main(String[] args) { Person person = new Person(); person.fname = \"John\"; person.lname = \"Doe\"; person.age = 24; person.accessCode = 5044; // Serialize the object ByteArrayOutputStream output = new ByteArrayOutputStream(); try { ObjectOutputStream objOut = new ObjectOutputStream(output); objOut.writeObject(person); } catch (IOException e) {} // Deserialize the object Person person2 = new Person(); try { ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(output.toByteArray())); person2 = (Person)objIn.readObject(); } catch(Exception e) {} // Print the deseralized object System.out.println(\"First name: \" + person2.fname); System.out.println(\"Last name: \" + person2.lname); System.out.println(\"Age: \" + person2.age); System.out.println(\"Access code: \" + person2.accessCode); } } class Person implements Serializable { String fname = \"John\"; String lname = \"Doe\"; int age = 24; transient int accessCode = 0; } Try it Yourself Â» Definition and Usage The transient keyword is a modifier that tells Java to ignore an attribute when serializing an object. transient Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java try Keyword â® Java Keywords Example If an error occur, use try...catch to catch the error and execute some code to handle it: try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong. \"); } Try it Yourself Â» Definition and Usage The try keyword creates a try...catch statement. try The try statement allows you to define a block of code to be tested for errors while it is being executed. try The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. catch Related Pages Read more about exceptions in our Java Try..Catch Tutorial. â® Java Keywords"
  },
  {
    "document": "Java var Keyword â® Java Keywords Example Use var to declare variables: var public class Main { public int test = 10; public static void main(String[] args) { var x = 5; var main = new Main(); System.out.println(x); System.out.println(main.test); } } public class Main { public int test = 10; public static void main(String[] args) { var x = 5; var main = new Main(); System.out.println(x); System.out.println(main.test); } } Try it Yourself Â» Definition and Usage The var keyword allows a variable to be initialized without having to declare its type. The type of the variable depends on the type of the data that is being assigned to it. var The var keyword was introduced in Java 10. var Related Pages Read more about variables in our Java Variables Tutorial. â® Java Keywords"
  },
  {
    "document": "Java void Keyword â® Java Keywords Example A method without any return values: public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } public class Main { static void myMethod() { System.out.println(\"I just got executed! \"); } public static void main(String[] args) { myMethod(); } } Try it Yourself Â» Definition and Usage The void keyword specifies that a method should not have a return value. void More Examples Tip: If you want a method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method: int char void return Example public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3) Try it Yourself Â» Related Pages Read more about methods in our Java Methods Tutorial. â® Java Keywords"
  },
  {
    "document": "Java volatile Keyword â® Java Keywords Example Create a volatile attribute: volatile public class Main { public static volatile int x = 5; public static void main(String[] args) { System.out.println(x); } } public class Main { public static volatile int x = 5; public static void main(String[] args) { System.out.println(x); } } Try it Yourself Â» Definition and Usage The volatile keyword is a modifier that ensures that an attribute's value is always the same when read from all threads. volatile Ordinarily the value of an attribute may be written into a thread's local cache and not updated in the main memory for some amount of time. In this case, other threads will see a different value for the attribute. The volatile keyword makes sure that threads always update the value of an attribute in main memory. volatile Related Pages Read more about modifiers in our Java Modifiers Tutorial. â® Java Keywords"
  },
  {
    "document": "Java while Keyword â® Java Keywords Example In the example below, the code in the loop will run, over and over again, as long as a variable i is less than 5: i int i = 0; while (i < 5) { System.out.println(i); i++; } int i = 0; while (i < 5) { System.out.println(i); i++; } Try it Yourself Â» Definition and Usage The while loop loops through a block of code as long as a specified condition is true. while true Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end! More Examples The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true: do/while while Example int i = 0; do { System.out.println(i); i++; } while (i < 5); int i = 0; do { System.out.println(i); i++; } while (i < 5); Try it Yourself Â» Related Pages Read more about while loops in our Java While Loop Tutorial. â® Java Keywords"
  },
  {
    "document": "Java String Methods All String Methods The String class has a set of built-in methods that you can use on strings. Related Pages Java Strings Tutorial"
  },
  {
    "document": "Java String charAt() Method â® String Methods Example Return the first character (0) of a string: String myStr = \"Hello\"; char result = myStr.charAt(0); System.out.println(result); String myStr = \"Hello\"; char result = myStr.charAt(0); System.out.println(result); Try it Yourself Â» Definition and Usage The charAt() method returns the character at the specified index in a string. charAt() The index of the first character is 0, the second character is 1, and so on. Syntax public char charAt(int index) public char charAt(int index) Parameter Values int Technical Details char IndexOutOfBoundsException"
  },
  {
    "document": "Java String codePointAt() Method â® String Methods Example Return the Unicode of the first character in a string (the Unicode value of \"H\" is 72): String myStr = \"Hello\"; int result = myStr.codePointAt(0); System.out.println(result); String myStr = \"Hello\"; int result = myStr.codePointAt(0); System.out.println(result); Try it Yourself Â» Definition and Usage The codePointAt() method returns the Unicode value of the character at the specified index in a string. codePointAt() The index of the first character is 0, the second character is 1, and so on. Syntax public int codePointAt(int index) public int codePointAt(int index) Parameter Values int Technical Details int IndexOutOfBoundsException"
  },
  {
    "document": "Java String codePointBefore() Method â® String Methods Example Return the Unicode of the first character in a string (the Unicode value of \"H\" is 72): String myStr = \"Hello\"; int result = myStr.codePointBefore(1); System.out.println(result); String myStr = \"Hello\"; int result = myStr.codePointBefore(1); System.out.println(result); Try it Yourself Â» Definition and Usage The codePointBefore() method returns the Unicode value of the character before the specified index in a string. codePointBefore() The index of the first character is 1, the second character is 2, and so on. Note: The value 0 will generate an error, as this is a negative number (out of reach). Syntax public int codePointBefore(int index) public int codePointBefore(int index) Parameter Values int Technical Details int IndexOutOfBoundsException"
  },
  {
    "document": "Java String codePointCount() Method â® String Methods Example Return the number of Unicode values found in a string: String myStr = \"Hello\"; int result = myStr.codePointCount(0, 5); System.out.println(result); String myStr = \"Hello\"; int result = myStr.codePointCount(0, 5); System.out.println(result); Try it Yourself Â» Definition and Usage The codePointCount() method returns the number of Unicode values found in a string. codePointCount() Use the startIndex and endIndex parameters to specify where to begin and end the search. The index of the first character is 0, the second character is 1, and so on. Syntax public int codePointCount(int startIndex, int endIndex) public int codePointCount(int startIndex, int endIndex) Parameter Values int int Technical Details int IndexOutOfBoundsException"
  },
  {
    "document": "Java String compareTo() Method â® String Methods Example Compare two strings: String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; System.out.println(myStr1.compareTo(myStr2)); // Returns 0 because they are equal String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; System.out.println(myStr1.compareTo(myStr2)); // Returns 0 because they are equal Try it Yourself Â» Definition and Usage The compareTo() method compares two strings lexicographically. compareTo() The comparison is based on the Unicode value of each character in the strings. The method returns 0 if the string is equal to the other string. A value less than 0 is returned if the string is less than the other string (less characters) and a value greater than 0 if the string is greater than the other string (more characters). Tip: Use compareToIgnoreCase() to compare two strings lexicographyically, ignoring lower case and upper case differences. Tip: Use the equals() method to compare two strings without consideration of Unicode values. Syntax One of the following: public int compareTo(String string2) public int compareTo(String string2) public int compareTo(Object object) public int compareTo(Object object) Parameter Values String Object Technical Details int"
  },
  {
    "document": "Java String compareToIgnoreCase() Method â® String Methods Example Compare two strings, ignoring lower case and upper case differences: String myStr1 = \"HELLO\"; String myStr2 = \"hello\"; System.out.println(myStr1.compareToIgnoreCase(myStr2)); String myStr1 = \"HELLO\"; String myStr2 = \"hello\"; System.out.println(myStr1.compareToIgnoreCase(myStr2)); Try it Yourself Â» Definition and Usage The compareToIgnoreCase() method compares two strings lexicographically, ignoring lower case and upper case differences. compareToIgnoreCase() The comparison is based on the Unicode value of each character in the string converted to lower case. The method returns 0 if the string is equal to the other string, ignoring case differences. A value less than 0 is returned if the string is less than the other string (less characters) and a value greater than 0 if the string is greater than the other string (more characters). Syntax public int compareToIgnoreCase(String string2) public int compareToIgnoreCase(String string2) Parameter Values String Technical Details int"
  },
  {
    "document": "Java String concat() Method â® String Methods Example Concatenate two strings: String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); Try it Yourself Â» Definition and Usage The concat() method appends (concatenate) a string to the end of another string. concat() Syntax public String concat(String string2) public String concat(String string2) Parameter Values String Technical Details String"
  },
  {
    "document": "Java String contains() Method â® String Methods Example Find out if a string contains a sequence of characters: String myStr = \"Hello\"; System.out.println(myStr.contains(\"Hel\")); // true System.out.println(myStr.contains(\"e\")); // true System.out.println(myStr.contains(\"Hi\")); // false String myStr = \"Hello\"; System.out.println(myStr.contains(\"Hel\")); // true System.out.println(myStr.contains(\"e\")); // true System.out.println(myStr.contains(\"Hi\")); // false Try it Yourself Â» Definition and Usage The contains() method checks whether a string contains a sequence of characters. contains() Returns true if the characters exist and false if not. true false Syntax public boolean contains(CharSequence chars) public boolean contains(CharSequence chars) Parameter Values The CharSequence interface is a readable sequence of char values, found in the java.lang package. Technical Details boolean true false NullPointerException"
  },
  {
    "document": "Java String contentEquals() Method â® String Methods Example Find out if a string contains a sequence of characters: String myStr = \"Hello\"; System.out.println(myStr.contentEquals(\"Hello\")); // true System.out.println(myStr.contentEquals(\"e\")); // false System.out.println(myStr.contentEquals(\"Hi\")); // false String myStr = \"Hello\"; System.out.println(myStr.contentEquals(\"Hello\")); // true System.out.println(myStr.contentEquals(\"e\")); // false System.out.println(myStr.contentEquals(\"Hi\")); // false Try it Yourself Â» Definition and Usage The contentEquals() method searches a string to find out if it contains the exact same sequence of characters in the specified string or StringBuffer. contentEquals() Returns true if the characters exist and false if not. true false Syntax One of the following: public boolean contentEquals(StringBuffer chars) public boolean contentEquals(StringBuffer chars) public boolean contentEquals(CharSequence chars) public boolean contentEquals(CharSequence chars) Parameter Values The StringBuffer class is like a String, only it can be modified, found in the java.lang package. The CharSequence interface is a readable sequence of char values, found in the java.lang package. Technical Details boolean true false"
  },
  {
    "document": "Java String copyValueOf() Method â® String Methods Example Return a String that represents certain characters of a char array: char[] myStr1 = {'H', 'e', 'l', 'l', 'o'}; String myStr2 = \"\"; myStr2 = myStr2.copyValueOf(myStr1, 0, 5); System.out.println(\"Returned String: \" + myStr2); char[] myStr1 = {'H', 'e', 'l', 'l', 'o'}; String myStr2 = \"\"; myStr2 = myStr2.copyValueOf(myStr1, 0, 5); System.out.println(\"Returned String: \" + myStr2); Try it Yourself Â» Definition and Usage The copyValueOf() method returns a String that represents the characters of a char array. copyValueOf() String This method returns a new String array and copies the characters into it. String Syntax public static String copyValueOf(char[] data, int offset, int count) public static String copyValueOf(char[] data, int offset, int count) Parameter Values char int int Technical Details String StringIndexOutOfBoundsException"
  },
  {
    "document": "Java String endsWith() Method â® String Methods Example Find out if the string ends with the specified characters: String myStr = \"Hello\"; System.out.println(myStr.endsWith(\"Hel\")); // false System.out.println(myStr.endsWith(\"llo\")); // true System.out.println(myStr.endsWith(\"o\")); // true String myStr = \"Hello\"; System.out.println(myStr.endsWith(\"Hel\")); // false System.out.println(myStr.endsWith(\"llo\")); // true System.out.println(myStr.endsWith(\"o\")); // true Try it Yourself Â» Definition and Usage The endsWith() method checks whether a string ends with the specified character(s). endsWith() Tip: Use the startsWith() method to check whether a string starts with the specified character(s). Syntax public boolean endsWith(String chars) public boolean endsWith(String chars) Parameter Values String Technical Details boolean true false"
  },
  {
    "document": "Java String equals() Method â® String Methods Example Compare strings to find out if they are equal: String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equals(myStr2)); // Returns true because they are equal System.out.println(myStr1.equals(myStr3)); // false String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equals(myStr2)); // Returns true because they are equal System.out.println(myStr1.equals(myStr3)); // false Try it Yourself Â» Definition and Usage The equals() method compares two strings, and returns true if the strings are equal, and false if not. equals() Tip: Use the compareTo() method to compare two strings lexicographically. Syntax public boolean equals(Object anotherObject) public boolean equals(Object anotherObject) Parameter Values Object Technical Details boolean true false equals Object"
  },
  {
    "document": "Java String equalsIgnoreCase() Method â® String Methods Example Compare strings to find out if they are equal, ignoring case differences: String myStr1 = \"Hello\"; String myStr2 = \"HELLO\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equalsIgnoreCase(myStr2)); // true System.out.println(myStr1.equalsIgnoreCase(myStr3)); // false String myStr1 = \"Hello\"; String myStr2 = \"HELLO\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equalsIgnoreCase(myStr2)); // true System.out.println(myStr1.equalsIgnoreCase(myStr3)); // false Try it Yourself Â» Definition and Usage The equalsIgnoreCase() method compares two strings, ignoring lower case and upper case differences. equalsIgnoreCase() This method returns true if the strings are equal, and false if not. Tip: Use the compareToIgnoreCase() method to compare two strings lexicographically, ignoring case differences. Syntax public boolean equalsIgnoreCase(String anotherString) public boolean equalsIgnoreCase(String anotherString) Parameter Values String Technical Details boolean true false"
  },
  {
    "document": "Java String format() Method â® String Methods Example Return a formatted string: String myStr = \"Hello %s! One kilobyte is %,d bytes. \"; String result = String.format(myStr, \"World\", 1024); System.out.println(result); String myStr = \"Hello %s! One kilobyte is %,d bytes. \"; String result = String.format(myStr, \"World\", 1024); System.out.println(result); Try it Yourself Â» Note: You will find more \"Try it Yourself\" examples at the bottom of this page. Definition and Usage The format() method returns a formatted string using a locale, format and additional arguments. format() If a locale is not passed to this method then the locale given by Locale.getDefault() is used. Locale.getDefault() Data from the additional arguments is formatted and written into placeholders in the format string, which are marked by a % symbol. The way in which arguments are formatted depends on the sequence of characters that follows the % symbol. Placeholders The placeholders have the form %[arg$][flags][width][.precision]conversion. The components in [square brackets] are optional. %[arg$][flags][width][.precision]conversion An explanation of each of the components: arg$ < flags - # +  0 , ( width - .precision . conversion List of conversions % n b B h H Note: For any data other than positive integers this does not represent its real value."
  },
  {
    "document": "s S c C d o x X e E f g G f e E a A t T The following characters can be used for date and time formatting: Syntax One of the following: public static String format(Locale locale, String format, Object... args) public static String format(Locale locale, String format, Object... args) public static String format(String format, Object... args) public static String format(String format, Object... args) Parameter Values Technical Details String IllegalFormatException More Examples Example A placeholder which uses all of the components: String result = String.format(\"%2$,3.2f %1$s\", \"meters\", 1260.5052); System.out.println(result); String result = String.format(\"%2$,3.2f %1$s\", \"meters\", 1260.5052); System.out.println(result); This is how each part of the placeholder %2$,3.2f works: %2$,3.2f 2$ , 3 .2 f Try it Yourself Â» Example Use arguments in a different order: String result = String.format(\"%3$c %2$c %1$c\", 'a', 'b', 'c'); System.out.println(result); String result = String.format(\"%3$c %2$c %1$c\", 'a', 'b', 'c'); System.out.println(result); Try it Yourself Â» Example Format a floating point number: double myNumber = 123456.78; String result; // Default result = String.format(\"%f\", myNumber); System.out.println(result); // Two decimal digits result = String.format(\"%.2f\", myNumber); System.out.println(result); // No decimal digits result = String.format(\"%.0f\", myNumber); System.out.println(result); // No decimal digits but keep the decimal point result = String.format(\"%#.0f\", myNumber); System.out.println(result); // Group digits result = String.format(\"%,.2f\", myNumber); System.out.println(result); // Scientific notation with two digits of precision result = String.format(\"%.2e\", myNumber); System.out.println(result); double myNumber = 123456.78; String result; // Default result = String.format(\"%f\", myNumber); System.out.println(result); // Two decimal digits result = String.format(\"%.2f\", myNumber); System.out.println(result); // No decimal digits result = String.format(\"%.0f\", myNumber); System.out.println(result); // No decimal digits but keep the decimal point result = String.format(\"%#.0f\", myNumber); System.out.println(result); // Group digits result = String.format(\"%,.2f\", myNumber); System.out.println(result); // Scientific notation with two digits of precision result = String.format(\"%.2e\", myNumber); System.out.println(result); Try it Yourself Â» Example Format a date from a Unix timestamp: long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) String result // Time result = String.format(\"%tl:%<tM %<tp\", date); System.out.println(result); // Month and day result = String.format(\"%tB %<te\", date); System.out.println(result); // Full date representation result = String.format(\"%tc\", date); System.out.println(result); long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) String result // Time result = String.format(\"%tl:%<tM %<tp\", date); System.out.println(result); // Month and day result = String.format(\"%tB %<te\", date); System.out.println(result); // Full date representation result = String.format(\"%tc\", date); System.out.println(result); Try it Yourself Â» Example Represent characters from their unicode code points: String result; // Represent characters from their unicode code points result = String.format(\"%c%c%c%c%c\", 72, 101, 108, 108, 111); System.out.println(result); // Force unicode characters to uppercase result = String.format(\"%C%C%C%C%C\", 72, 101, 108, 108, 111); System.out.println(result); String result; // Represent characters from their unicode code points result = String.format(\"%c%c%c%c%c\", 72, 101, 108, 108, 111); System.out.println(result); // Force unicode characters to uppercase result = String.format(\"%C%C%C%C%C\", 72, 101, 108, 108, 111); System.out.println(result); Try it Yourself Â»"
  },
  {
    "document": "Java String getBytes() Method â® String Methods Example Convert a string into a byte array: String myStr = \"Hello\"; byte[] result = myStr.getBytes(); System.out.println(result[0]); String myStr = \"Hello\"; byte[] result = myStr.getBytes(); System.out.println(result[0]); Try it Yourself Â» Definition and Usage The getBytes() method converts a string into an array of bytes. getBytes() The encoding of the bytes depends on the charset argument. If the charset argument is not provided then the bytes will be encoded using the system's default character set. Syntax One of the following: public byte[] getBytes(Charset charset) public byte[] getBytes(Charset charset) public byte[] getBytes() public byte[] getBytes() Parameter Values Charset Technical Details byte"
  },
  {
    "document": "Java String getChars() Method â® String Methods Example Copy part of a string into a char array: char char[] myArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; System.out.println(myArray); String myStr = \"Hello, World! \"; myStr.getChars(7, 12, myArray, 4); System.out.println(myArray); char[] myArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; System.out.println(myArray); String myStr = \"Hello, World! \"; myStr.getChars(7, 12, myArray, 4); System.out.println(myArray); Try it Yourself Â» Definition and Usage The getChars() method copies characters from a string to a char array. getChars() char Syntax public void getChars(int start, int end, char[] destination, int position) public void getChars(int start, int end, char[] destination, int position) Parameter Values Technical Details IndexOutOfBoundsException"
  },
  {
    "document": "Java String hashCode() Method â® String Methods Example Return the hash code of a string: String myStr = \"Hello\"; System.out.println(myStr.hashCode()); String myStr = \"Hello\"; System.out.println(myStr.hashCode()); Try it Yourself Â» Definition and Usage The hashCode() method returns the hash code of a string. hashCode() The hash code for a String object is computed like this: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] where s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation. Syntax public int hashCode() public int hashCode() Parameter Values None. Technical Details int"
  },
  {
    "document": "Java String indexOf() Method â® String Methods Example Search a string for the first occurrence of \"planet\": String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.indexOf(\"planet\")); String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.indexOf(\"planet\")); Try it Yourself Â» Definition and Usage The indexOf() method returns the position of the first occurrence of specified character(s) in a string. indexOf() Tip: Use the lastIndexOf method to return the position of the last occurrence of specified character(s) in a string. Syntax One of the following: public int indexOf(String str) public int indexOf(String str) public int indexOf(String str, int fromIndex) public int indexOf(String str, int fromIndex) public int indexOf(int char) public int indexOf(int char) public int indexOf(int char, int fromIndex) public int indexOf(int char, int fromIndex) Parameter Values String int int Technical Details int More Examples Example Find the first occurrence of the letter \"e\" in a string, starting the search at position 5: public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.indexOf(\"e\", 5)); } } public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.indexOf(\"e\", 5)); } } Try it Yourself Â»"
  },
  {
    "document": "Java String isEmpty() Method â® String Methods Example Find out if a string is empty or not: String myStr1 = \"Hello\"; String myStr2 = \"\"; System.out.println(myStr1.isEmpty()); System.out.println(myStr2.isEmpty()); String myStr1 = \"Hello\"; String myStr2 = \"\"; System.out.println(myStr1.isEmpty()); System.out.println(myStr2.isEmpty()); Try it Yourself Â» Definition and Usage The isEmpty() method checks whether a string is empty or not. isEmpty() This method returns true if the string is empty (length() is 0), and false if not. Syntax public boolean isEmpty() public boolean isEmpty() Parameters None. Technical Details boolean true false"
  },
  {
    "document": "Java String join() Method â® String Methods Example Join strings with a space between them: String fruits = String.join(\" \", \"Orange\", \"Apple\", \"Mango\"); System.out.println(fruits); String fruits = String.join(\" \", \"Orange\", \"Apple\", \"Mango\"); System.out.println(fruits); Try it Yourself Â» Definition and Usage The join() method joins one or more strings with a specified separator. join() Syntax One of the following: public String join(CharSequence separator, CharSequence... elements) public String join(CharSequence separator, CharSequence... elements) public String join(CharSequence separator, Iterable elements) public String join(CharSequence separator, Iterable elements) Parameter Values Technical Details String"
  },
  {
    "document": "Java String lastIndexOf() Method â® String Methods Example Search a string for the last occurrence of \"planet\": String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.lastIndexOf(\"planet\")); String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.lastIndexOf(\"planet\")); Try it Yourself Â» Definition and Usage The lastIndexOf() method returns the position of the last occurrence of specified character(s) in a string. lastIndexOf() Tip: Use the indexOf method to return the position of the first occurrence of specified character(s) in a string. Syntax One of the following: public int lastIndexOf(String str) public int lastIndexOf(String str) public int lastIndexOf(String str, int fromIndex) public int lastIndexOf(String str, int fromIndex) public int lastIndexOf(int char) public int lastIndexOf(int char) public int lastIndexOf(int char, int fromIndex) public int lastIndexOf(int char, int fromIndex) Parameter Values String int int Technical Details int More Examples Example Find the last occurrence of \"e\" in a string, starting the search at position 5: public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.lastIndexOf(\"e\", 5)); } } public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet. \"; System.out.println(myStr.lastIndexOf(\"e\", 5)); } } Try it Yourself Â»"
  },
  {
    "document": "Java String length() Method â® String Methods Example Return the number of characters in a string: String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(txt.length()); String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(txt.length()); Try it Yourself Â» Definition and Usage The length() method returns the length of a specified string. length() Note: The length of an empty string is 0. Syntax public int length() public int length() Parameters None. Technical Details int"
  },
  {
    "document": "Java String matches() Method â® String Methods Example Check whether a string matches the regular expression: String regex = \"cat|dog|fish\"; System.out.println(\"cat\".matches(regex)); System.out.println(\"dog\".matches(regex)); System.out.println(\"catfish\".matches(regex)); System.out.println(\"doggy bag\".matches(regex)); String regex = \"cat|dog|fish\"; System.out.println(\"cat\".matches(regex)); System.out.println(\"dog\".matches(regex)); System.out.println(\"catfish\".matches(regex)); System.out.println(\"doggy bag\".matches(regex)); Try it Yourself Â» Definition and Usage The matches() method searches a string for a match against a regular expression, and returns the matches. matches() Syntax public String matches(String regex) public String matches(String regex) Parameter Values Technical Details boolean true false"
  },
  {
    "document": "Java String offsetByCodePoints() Method â® String Methods Example Get an index from a string which is offset from another index by a number of code points: String myStr = \"Hello, World! \"; int result = myStr.offsetByCodePoints(3, 2); System.out.println(result); String myStr = \"Hello, World! \"; int result = myStr.offsetByCodePoints(3, 2); System.out.println(result); Try it Yourself Â» Definition and Usage The offsetByCodePoints() method returns an index in a string which is offset from another index by a specified number of code points. offsetByCodePoints() Note: A code point may be formed by more than one character. These code points will offset the index by more than 1. Syntax public int offsetByCodePoints(int index, int codePointOffset) public int offsetByCodePoints(int index, int codePointOffset) Parameter Values Technical Details int IndexOutOfBoundsException"
  },
  {
    "document": "Java String regionMatches() Method â® String Methods Example Test if two string regions are equal: String myStr1 = \"Hello, World! \"; String myStr2 = \"New World\"; System.out.println(myStr1.regionMatches(7, myStr2, 4, 5)); System.out.println(myStr1.regionMatches(0, myStr2, 0, 5)); String myStr1 = \"Hello, World! \"; String myStr2 = \"New World\"; System.out.println(myStr1.regionMatches(7, myStr2, 4, 5)); System.out.println(myStr1.regionMatches(0, myStr2, 0, 5)); Try it Yourself Â» Definition and Usage The regionMatches() method compares regions in two different strings to check if they are equal. regionMatches() Syntax One of the following: public boolean regionMatches(boolean ignoreCase, int offset, String other, int otherOffset, int length) public boolean regionMatches(boolean ignoreCase, int offset, String other, int otherOffset, int length) public boolean regionMatches(int offset, String other, int otherOffset, int length) public boolean regionMatches(int offset, String other, int otherOffset, int length) Parameter Values Technical Details true false"
  },
  {
    "document": "Java String replace() Method â® String Methods Example Return a new string where all \"l\" characters are replaced with \"p\" characters: String myStr = \"Hello\"; System.out.println(myStr.replace('l', 'p')); String myStr = \"Hello\"; System.out.println(myStr.replace('l', 'p')); Try it Yourself Â» Definition and Usage The replace() method searches a string for a specified character, and returns a new string where the specified character(s) are replaced. replace() Syntax public String replace(char searchChar, char newChar) public String replace(char searchChar, char newChar) Parameter Values char char Technical Details String"
  },
  {
    "document": "Java String replaceAll() Method â® String Methods Example Replace every match of a regular expression with a substring: String myStr = \"I love cats. Cats are very easy to love. Cats are very popular. \"; String regex = \"(?i)cat\"; System.out.println(myStr.replaceAll(regex, \"dog\")); String myStr = \"I love cats. Cats are very easy to love. Cats are very popular. \"; String regex = \"(?i)cat\"; System.out.println(myStr.replaceAll(regex, \"dog\")); Try it Yourself Â» Definition and Usage The replaceAll() method replaces the first match of a regular expression in a string with a new substring. replaceAll() Replacement strings may contain a backreference in the form $n where n is the index of a group in the pattern. In the returned string, instances of $n will be replaced with the substring that was matched by the group or, if $0 is used, by the whole expression. See \"More Examples\" below for an example of using a backreference. Tip: See the Java RegEx tutorial to learn about regular expressions. Syntax public String replaceAll(String regex, String replacement) public String replaceAll(String regex, String replacement) Parameter Values Technical Details PatternSyntaxException More Examples Example Use a backreference to wrap numbers in parentheses: String myStr = \"Quest complete! Earned 30 gold and 500 experience. \"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceAll(regex, \"($0)\")); String myStr = \"Quest complete! Earned 30 gold and 500 experience. \"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceAll(regex, \"($0)\")); Try it Yourself Â»"
  },
  {
    "document": "Java String replaceFirst() Method â® String Methods Example Replace the first match of a regular expression with a different substring: String myStr = \"This is W3Schools\"; String regex = \"is\"; System.out.println(myStr.replaceFirst(regex, \"at\")); String myStr = \"This is W3Schools\"; String regex = \"is\"; System.out.println(myStr.replaceFirst(regex, \"at\")); Try it Yourself Â» Definition and Usage The replaceFirst() method replaces the first match of a regular expression in a string with a new substring. replaceFirst() Replacement strings may contain a backreference in the form $n where n is the index of a group in the pattern. In the returned string, instances of $n will be replaced with the substring that was matched by the group or, if $0 is used, by the whole expression. See \"More Examples\" below for an example of using a backreference. Tip: See the Java RegEx tutorial to learn about regular expressions. Syntax public String replaceFirst(String regex, String replacement) public String replaceFirst(String regex, String replacement) Parameter Values Technical Details PatternSyntaxException More Examples Example Use a backreference to wrap the first number in parentheses: String myStr = \"Quest complete! Earned 30 gold and 500 experience. \"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceFirst(regex, \"($0)\")); String myStr = \"Quest complete! Earned 30 gold and 500 experience. \"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceFirst(regex, \"($0)\")); Try it Yourself Â»"
  },
  {
    "document": "Java String split() Method â® String Methods Example Split a string into an array of strings: String myStr = \"Split a string by spaces, and also punctuation. \"; String regex = \"[,\\\\.\\\\s]\"; String[] myArray = myStr.split(regex); for (String s : myArray) { System.out.println(s); } String myStr = \"Split a string by spaces, and also punctuation. \"; String regex = \"[,\\\\.\\\\s]\"; String[] myArray = myStr.split(regex); for (String s : myArray) { System.out.println(s); } Try it Yourself Â» Definition and Usage The split() method splits a string into an array of substrings using a regular expression as the separator. split() If a limit is specified, the returned array will not be longer than the limit. The last element of the array will contain the remainder of the string, which may still have separators in it if the limit was reached. Tip: See the Java RegEx tutorial to learn about regular expressions. Syntax One of the following: public String[] split(String regex, int limit) public String[] split(String regex, int limit) public String[] split(String regex) public String[] split(String regex) Parameter Values Technical Details String PatternSyntaxException"
  },
  {
    "document": "Java String startsWith() Method â® String Methods Example Find out if the string starts with the specified characters: String myStr = \"Hello\"; System.out.println(myStr.startsWith(\"Hel\")); // true System.out.println(myStr.startsWith(\"llo\")); // false System.out.println(myStr.startsWith(\"o\")); // false String myStr = \"Hello\"; System.out.println(myStr.startsWith(\"Hel\")); // true System.out.println(myStr.startsWith(\"llo\")); // false System.out.println(myStr.startsWith(\"o\")); // false Try it Yourself Â» Definition and Usage The startsWith() method checks whether a string starts with the specified character(s). startsWith() Tip: Use the endsWith() method to check whether a string ends with the specified character(s). Syntax public boolean startsWith(String chars) public boolean startsWith(String chars) Parameter Values String Technical Details boolean true false"
  },
  {
    "document": "Java String subSequence() Method â® String Methods Example Return a sequence of characters from a string: String myStr = \"Hello, World! \"; System.out.println(myStr.subSequence(7, 12)); String myStr = \"Hello, World! \"; System.out.println(myStr.subSequence(7, 12)); Try it Yourself Â» Definition and Usage The subSequence() method returns a subsequence from the string as a CharSequence object. subSequence() CharSequence Syntax public CharSequence subSequence(int start, int end) public CharSequence subSequence(int start, int end) Parameter Values Technical Details CharSequence IndexOutOfBoundsException"
  },
  {
    "document": "Java String substring() Method â® String Methods Example Return a substring from a string: String myStr = \"Hello, World! \"; System.out.println(myStr.substring(7, 12)); String myStr = \"Hello, World! \"; System.out.println(myStr.substring(7, 12)); Try it Yourself Â» Definition and Usage The substring() method returns a substring from the string. substring() If the end argument is not specified then the substring will end at the end of the string. Syntax One of the following: public String substring(int start, int end) public String substring(int start, int end) public String substring(int start) public String substring(int start) Parameter Values Technical Details String IndexOutOfBoundsException"
  },
  {
    "document": "Java String toCharArray() Method â® String Methods Example Convert a string to a char array: char String myStr = \"Hello\"; char[] myArray = myStr.toCharArray(); System.out.println(myArray[0]); String myStr = \"Hello\"; char[] myArray = myStr.toCharArray(); System.out.println(myArray[0]); Try it Yourself Â» Definition and Usage The toCharArray() method returns a new char array representing the contents of the string. toCharArray() char Syntax public char[] toCharArray() public char[] toCharArray() Technical Details"
  },
  {
    "document": "Java String toLowerCase() Method â® String Methods Example Convert a string to upper case and lower case letters: String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase()); String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase()); Try it Yourself Â» Definition and Usage The toLowerCase() method converts a string to lower case letters. toLowerCase() Note: The toUpperCase() method converts a string to upper case letters. Syntax public String toLowerCase() public String toLowerCase() Parameters None. Technical Details String"
  },
  {
    "document": "Java String toString() Method â® String Methods Example Return a string's value: String myStr = \"Hello, World! \"; System.out.println(myStr.toString()); String myStr = \"Hello, World! \"; System.out.println(myStr.toString()); Try it Yourself Â» Definition and Usage The toString() method returns the string itself. toString() This method may seem redundant, but its purpose is to allow code that is treating the string as a more generalized object to know its string value without casting it to String type. String Syntax public String toString() public String toString() Technical Details String"
  },
  {
    "document": "Java String toUpperCase() Method â® String Methods Example Convert a string to upper case and lower case letters: String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase()); String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase()); Try it Yourself Â» Definition and Usage The toUpperCase() method converts a string to upper case letters. toUpperCase() Note: The toLowerCase() method converts a string to lower case letters. Syntax public String toUpperCase() public String toUpperCase() Parameters None. Technical Details String"
  },
  {
    "document": "Java String trim() Method â® String Methods Example Remove whitespace from both sides of a string: String myStr = \" Hello World! \"; System.out.println(myStr); System.out.println(myStr.trim()); String myStr = \" Hello World! \"; System.out.println(myStr); System.out.println(myStr.trim()); Try it Yourself Â» Definition and Usage The trim() method removes whitespace from both ends of a string. trim() Note: This method does not change the original string. Syntax public String trim() public String trim() Parameters None. Technical Details String"
  },
  {
    "document": "Java String valueOf() Method â® String Methods Example Return a string representation of different data types: char[] myArray = {'a', 'b', 'c'}; System.out.println(String.valueOf(myArray)); System.out.println(String.valueOf('A')); System.out.println(String.valueOf(true)); System.out.println(String.valueOf(4.5f)); System.out.println(String.valueOf(5.2)); System.out.println(String.valueOf(12)); System.out.println(String.valueOf(1400L)); char[] myArray = {'a', 'b', 'c'}; System.out.println(String.valueOf(myArray)); System.out.println(String.valueOf('A')); System.out.println(String.valueOf(true)); System.out.println(String.valueOf(4.5f)); System.out.println(String.valueOf(5.2)); System.out.println(String.valueOf(12)); System.out.println(String.valueOf(1400L)); Try it Yourself Â» Definition and Usage The valueOf() method returns the string representation of the specified value. valueOf() Syntax One of the following: public static String valueOf(boolean data) public static String valueOf(boolean data) public static String valueOf(char data) public static String valueOf(char data) public static String valueOf(char[] data) public static String valueOf(char[] data) public static String valueOf(char[] data, int start, int length) public static String valueOf(char[] data, int start, int length) public static String valueOf(double data) public static String valueOf(double data) public static String valueOf(float data) public static String valueOf(float data) public static String valueOf(int data) public static String valueOf(int data) public static String valueOf(long data) public static String valueOf(long data) public static String valueOf(Object data) public static String valueOf(Object data) Parameter Values char char Technical Details String IndexOutOfBoundsException"
  },
  {
    "document": "Java Math Methods The Java Math class has many methods that allows you to perform mathematical tasks on numbers. All Math Methods A list of all Math methods can be found in the table below: Note: All Math methods are static. static Related Pages Java Math Tutorial"
  },
  {
    "document": "Java Math abs() Method â® Math Methods Example Return the absolute (positive) value of different numbers: System.out.println(Math.abs(-4.7)); System.out.println(Math.abs(4.7)); System.out.println(Math.abs(3)); System.out.println(Math.abs(-4.7)); System.out.println(Math.abs(4.7)); System.out.println(Math.abs(3)); Try it Yourself Â» Definition and Usage The abs() method returns the absolute (positive) value of a number. abs() Syntax One of the following: public static double abs(double number) public static double abs(double number) public static float abs(float number) public static float abs(float number) public static int abs(int number) public static int abs(int number) public static long abs(long number) public static long abs(long number) Parameter Values Technical Details double float int long"
  },
  {
    "document": "Java Math acos() Method â® Math Methods Example Return the arc cosine of different numbers: System.out.println(Math.acos(0.64)); System.out.println(Math.acos(-0.4)); System.out.println(Math.acos(0)); System.out.println(Math.acos(1)); System.out.println(Math.acos(-1)); System.out.println(Math.acos(2)); System.out.println(Math.acos(0.64)); System.out.println(Math.acos(-0.4)); System.out.println(Math.acos(0)); System.out.println(Math.acos(1)); System.out.println(Math.acos(-1)); System.out.println(Math.acos(2)); Try it Yourself Â» Definition and Usage The acos() method returns the arc cosine value of a number. acos() Tip: acos(-1) returns the value of PI. Syntax public static double abs(double number) public static double abs(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math addExact() Method â® Math Methods Example Add integers: System.out.println(Math.addExact(12, 16)); System.out.println(Math.addExact(10000, 24060)); System.out.println(Math.addExact(12, 16)); System.out.println(Math.addExact(10000, 24060)); Definition and Usage The addExact() method adds two integers and throws an exception if the addition causes an overflow. This prevents incorrect results that can occur from adding really large numbers. addExact() Syntax One of the following: public static int addExact(int x, int y) public static int addExact(int x, int y) public static long addExact(long x, long y) public static long addExact(long x, long y) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math asin() Method â® Math Methods Example Return the arc sine of different numbers: System.out.println(Math.asin(0.64)); System.out.println(Math.asin(-0.4)); System.out.println(Math.asin(0)); System.out.println(Math.asin(1)); System.out.println(Math.asin(-1)); System.out.println(Math.asin(2)); System.out.println(Math.asin(0.64)); System.out.println(Math.asin(-0.4)); System.out.println(Math.asin(0)); System.out.println(Math.asin(1)); System.out.println(Math.asin(-1)); System.out.println(Math.asin(2)); Try it Yourself Â» Definition and Usage The asin() method returns the arc sine of a number in radians. asin() Tip: asin(1) returns the value of PI/2. Syntax public static double asin(double number) public static double asin(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math atan() Method â® Math Methods Example Return the arc tangent of different numbers: System.out.println(Math.atan(0.5)); System.out.println(Math.atan(-0.5)); System.out.println(Math.atan(5)); System.out.println(Math.atan(-5)); System.out.println(Math.atan(100)); System.out.println(Math.atan(-100)); System.out.println(Math.atan(0.5)); System.out.println(Math.atan(-0.5)); System.out.println(Math.atan(5)); System.out.println(Math.atan(-5)); System.out.println(Math.atan(100)); System.out.println(Math.atan(-100)); Try it Yourself Â» Definition and Usage The atan() method returns the arc tangent of a number in radians. atan() Tip: The atan() method only returns angles between -PI/2 and PI/2. The atan2() method can return any angle. atan() Syntax public static double atan(double number) public static double atan(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math atan2() Method â® Math Methods Example Return the angle in radians of the polar coordinates given rectangular coordinates: System.out.println(Math.atan2(0.5, 0.5)); System.out.println(Math.atan2(-0.5, -0.5)); System.out.println(Math.atan2(5, 5)); System.out.println(Math.atan2(10, 20)); System.out.println(Math.atan2(-5, -5)); System.out.println(Math.atan2(-10, 10)); System.out.println(Math.atan2(0.5, 0.5)); System.out.println(Math.atan2(-0.5, -0.5)); System.out.println(Math.atan2(5, 5)); System.out.println(Math.atan2(10, 20)); System.out.println(Math.atan2(-5, -5)); System.out.println(Math.atan2(-10, 10)); Try it Yourself Â» Definition and Usage The atan2() method returns the angle theta in radians from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). atan2() This is the same as calling atan(y/x) except that it takes into account negative values of x so that it can return angles outside of the range -PI/2 to PI/2. atan(y/x) Note: In the atan2() method the y coordinate goes first, then the x coordinate. This is because it is doing the division y / x. atan2() Syntax public static double atan2(double y, double x) public static double atan2(double y, double x) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math cbrt() Method â® Math Methods Example Return the cube root of different numbers: System.out.println(Math.cbrt(0)); System.out.println(Math.cbrt(1)); System.out.println(Math.cbrt(27)); System.out.println(Math.cbrt(0.64)); System.out.println(Math.cbrt(-27)); System.out.println(Math.cbrt(0)); System.out.println(Math.cbrt(1)); System.out.println(Math.cbrt(27)); System.out.println(Math.cbrt(0.64)); System.out.println(Math.cbrt(-27)); Try it Yourself Â» Definition and Usage The cbrt() method returns the cube root of a number. cbrt() Syntax public static double cbrt(double number) public static double cbrt(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math ceil() Method â® Math Methods Example Round numbers up to the nearest integer: System.out.println(Math.ceil(0.60)); System.out.println(Math.ceil(0.40)); System.out.println(Math.ceil(5)); System.out.println(Math.ceil(5.1)); System.out.println(Math.ceil(-5.1)); System.out.println(Math.ceil(-5.9)); System.out.println(Math.ceil(0.60)); System.out.println(Math.ceil(0.40)); System.out.println(Math.ceil(5)); System.out.println(Math.ceil(5.1)); System.out.println(Math.ceil(-5.1)); System.out.println(Math.ceil(-5.9)); Try it Yourself Â» Definition and Usage The ceil() method rounds a number UP to the nearest integer. ceil() Tip: To round a number DOWN to the nearest integer, look at the floor() method. Tip: To round a number to the nearest integer in either direction, look at the round() method. Syntax public static double ceil(double number) public static double ceil(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math copySign() Method â® Math Methods Example Return the value of a number with the sign of another: System.out.println(Math.copySign(-4.7, 3)); System.out.println(Math.copySign(4.7, -2.5)); System.out.println(Math.copySign(3, 4)); System.out.println(Math.copySign(-2.5, -4.7)); System.out.println(Math.copySign(-4.7, 3)); System.out.println(Math.copySign(4.7, -2.5)); System.out.println(Math.copySign(3, 4)); System.out.println(Math.copySign(-2.5, -4.7)); Try it Yourself Â» Definition and Usage The copySign() method returns the value of the first number with the sign of the second number. copySign() Syntax One of the following: public static double copySign(double value, double sign) public static double copySign(double value, double sign) public static float copySign(float value, float sign) public static float copySign(float value, float sign) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math cos() Method â® Math Methods Example Return the cosine of different angles: System.out.println(Math.cos(3)); System.out.println(Math.cos(-3)); System.out.println(Math.cos(0)); System.out.println(Math.cos(Math.PI)); System.out.println(Math.cos(Math.PI/2)); System.out.println(Math.cos(3)); System.out.println(Math.cos(-3)); System.out.println(Math.cos(0)); System.out.println(Math.cos(Math.PI)); System.out.println(Math.cos(Math.PI/2)); Try it Yourself Â» Definition and Usage The cos() method returns the cosine of an angle. cos() Note: Angles are measured in radians. Tip: You can use the constant Math.PI to make fractions of PI for angles. Syntax public static double cos(double angle) public static double cos(double angle) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math cosh() Method â® Math Methods Example Return the hyperbolic cosine of different numbers: System.out.println(Math.cosh(3)); System.out.println(Math.cosh(-3)); System.out.println(Math.cosh(0)); System.out.println(Math.cosh(1)); System.out.println(Math.cosh(3)); System.out.println(Math.cosh(-3)); System.out.println(Math.cosh(0)); System.out.println(Math.cosh(1)); Try it Yourself Â» Definition and Usage The cosh() method returns the hyperbolic cosine of a number. cosh() The hyperbolic cosine is equivalent to (Math.exp(number) + Math.exp(-number)) / 2. (Math.exp(number) + Math.exp(-number)) / 2 Syntax public static double cosh(double number) public static double cosh(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math decrementExact() Method â® Math Methods Example Decrement different numbers: System.out.println(Math.decrementExact(12002)); System.out.println(Math.decrementExact(18)); System.out.println(Math.decrementExact(32)); System.out.println(Math.decrementExact(947)); System.out.println(Math.decrementExact(12002)); System.out.println(Math.decrementExact(18)); System.out.println(Math.decrementExact(32)); System.out.println(Math.decrementExact(947)); Definition and Usage The decrementExact() method returns 1 less than a specified integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow. decrementExact() Syntax One of the following: public static int decrementExact(int x) public static int decrementExact(int x) public static long decrementExact(long x) public static long decrementExact(long x) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math exp() Method â® Math Methods Example Return e raised to the power of different numbers: System.out.println(Math.exp(0)); System.out.println(Math.exp(1)); System.out.println(Math.exp(10)); System.out.println(Math.exp(4.8)); System.out.println(Math.exp(Math.E)); System.out.println(Math.exp(0)); System.out.println(Math.exp(1)); System.out.println(Math.exp(10)); System.out.println(Math.exp(4.8)); System.out.println(Math.exp(Math.E)); Try it Yourself Â» Definition and Usage The exp() method returns e raised to the power of a number (ex). exp() e is the base of the natural system of logarithms (approximately 2.718282). In Java, the value of e is available as the constant Math.E. Syntax public static double exp(double number) public static double exp(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math expm1() Method â® Math Methods Example Return ex - 1 for different values of x: System.out.println(Math.expm1(0)); System.out.println(Math.expm1(1)); System.out.println(Math.expm1(10)); System.out.println(Math.expm1(4.8)); System.out.println(Math.expm1(Math.E)); System.out.println(Math.expm1(0)); System.out.println(Math.expm1(1)); System.out.println(Math.expm1(10)); System.out.println(Math.expm1(4.8)); System.out.println(Math.expm1(Math.E)); Try it Yourself Â» Definition and Usage The expm1() method returns the solution to ex - 1 for any number x. expm1() e is the base of the natural system of logarithms (approximately 2.718282). In Java, the value of e is available as the constant Math.E. Syntax public static double expm1(double number) public static double expm1(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math floor() Method â® Math Methods Example Round numbers down to the nearest integer: System.out.println(Math.floor(0.60)); System.out.println(Math.floor(0.40)); System.out.println(Math.floor(5)); System.out.println(Math.floor(5.1)); System.out.println(Math.floor(-5.1)); System.out.println(Math.floor(-5.9)); System.out.println(Math.floor(0.60)); System.out.println(Math.floor(0.40)); System.out.println(Math.floor(5)); System.out.println(Math.floor(5.1)); System.out.println(Math.floor(-5.1)); System.out.println(Math.floor(-5.9)); Try it Yourself Â» Definition and Usage The floor() method rounds a number DOWN to the nearest integer. floor() Tip: To round a number UP to the nearest integer, look at the ceil() method. Tip: To round a number to the nearest integer in either direction, look at the round() method. Note: For positive numbers the floor() method just removes the decimal part, but for negative numbers the integer part of the number will be changed if the number has a decimal part. If you only want to remove the decimal part, you can type cast the number as an integer. floor() Syntax public static double floor(double number) public static double floor(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math floorDiv() Method â® Math Methods Example Perform integer divisions: System.out.println(Math.floorDiv(10, 5)); System.out.println(Math.floorDiv(10, 4)); System.out.println(Math.floorDiv(-10, 4)); System.out.println(Math.floorDiv(-10, 5)); System.out.println(Math.floorDiv(10, 5)); System.out.println(Math.floorDiv(10, 4)); System.out.println(Math.floorDiv(-10, 4)); System.out.println(Math.floorDiv(-10, 5)); Definition and Usage The floorDiv() method returns the division between two integers rounded down. This is different from an ordinary integer division in that negative results are rounded down away from zero instead of truncated towards it. floorDiv() Syntax One of the following: public static int floorDiv(int dividend, int divisor) public static int floorDiv(int dividend, int divisor) public static long floorDiv(long dividend, long divisor) public static long floorDiv(long dividend, long divisor) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math floorMod() Method â® Math Methods Example Return the remainders of rounded-down divisions: System.out.println(Math.floorMod(10, 4)); System.out.println(Math.floorMod(-10, 4)); System.out.println(Math.floorMod(10, 3)); System.out.println(Math.floorMod(-10, 3)); System.out.println(Math.floorMod(10, 4)); System.out.println(Math.floorMod(-10, 4)); System.out.println(Math.floorMod(10, 3)); System.out.println(Math.floorMod(-10, 3)); Definition and Usage The floorMod() method returns the remainder of a division between two integers where the result of the division was rounded down. floorMod()  dividend - Math.floorDiv(dividend, divisor) * divisor Syntax One of the following: public static int floorMod(int dividend, int divisor) public static long floorMod(long dividend, long divisor) Parameter Values Parameter Description dividend Required. The dividend of the remainder operation. divisor Required. The divisor of the remainder operation. Technical Details Returns: An int or long value representing the remainder from a division between two integers. Throws: ArithmeticException - If the divisor is zero. Java version: 1.8+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up Syntax One of the following: public static int floorMod(int dividend, int divisor) public static int floorMod(int dividend, int divisor) public static long floorMod(long dividend, long divisor) public static long floorMod(long dividend, long divisor) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math getExponent() Method â® Math Methods Example Get the exponent of different floating point numbers: System.out.println(Math.getExponent(1)); System.out.println(Math.getExponent(2)); System.out.println(Math.getExponent(-8)); System.out.println(Math.getExponent(10)); System.out.println(Math.getExponent(0.5)); System.out.println(Math.getExponent(-0.33)); System.out.println(Math.getExponent(1)); System.out.println(Math.getExponent(2)); System.out.println(Math.getExponent(-8)); System.out.println(Math.getExponent(10)); System.out.println(Math.getExponent(0.5)); System.out.println(Math.getExponent(-0.33)); Try it Yourself Â» Definition and Usage The getExponent() method returns the unbiased exponent of Java's internal representation of a floating point number. getExponent() Java represents every floating point number internally in the form mÂ·2x. The getExponent() method returns the value of x for any floating point number. The term unbiased refers to the fact that the exponent can only be represented internally as a positive number, so there is a positive bias to the exponent. When you subtract the bias from the exponent you get the unbiased (true) value of the exponent. getExponent() Syntax One of the following: public static int getExponent(double number) public static int getExponent(double number) public static int getExponent(float number) public static int getExponent(float number) Parameter Values Technical Details int"
  },
  {
    "document": "Java Math hypot() Method â® Math Methods Example Get the distance of 2D points (x, y) from the origin (0, 0): System.out.println(Math.hypot(3, 4)); System.out.println(Math.hypot(1, 1)); System.out.println(Math.hypot(1, 10)); System.out.println(Math.hypot(3, 4)); System.out.println(Math.hypot(1, 1)); System.out.println(Math.hypot(1, 10)); Try it Yourself Â» Definition and Usage The hypot() method returns the length of the hypotenuse of a right angle triangle, which is equivalent to the distance between a 2D point (x, y) and the origin (0, 0). hypot() This method returns a value equal to Math.sqrt(x * x + y * y) but it is optimized to prevent overflows and underflows caused during intermediate operations such as addition and multiplication. Math.sqrt(x * x + y * y) Syntax public static double hypot(double x, double y) public static double hypot(double x, double y) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math IEEEremainder() Method â® Math Methods Example Calculate the IEEE 754 remainder of different pairs of numbers: System.out.println(Math.IEEEremainder(11, 3)); System.out.println(Math.IEEEremainder(16, 4)); System.out.println(Math.IEEEremainder(31, 2.5)); System.out.println(Math.IEEEremainder(11, 3)); System.out.println(Math.IEEEremainder(16, 4)); System.out.println(Math.IEEEremainder(31, 2.5)); Try it Yourself Â» Definition and Usage The IEEEremainder() method computes the remainder operation on two numbers as prescribed by the IEEE 754 standard. IEEEremainder() The return value of this method for two numbers a and b is equal to a - (b * Math.rint(a/b)). a - (b * Math.rint(a/b)) Syntax public static double IEEEremainder(double dividend, double divisor) public static double IEEEremainder(double dividend, double divisor) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math incrementExact() Method â® Math Methods Example Increment different numbers: System.out.println(Math.incrementExact(12002)); System.out.println(Math.incrementExact(18)); System.out.println(Math.incrementExact(32)); System.out.println(Math.incrementExact(947)); System.out.println(Math.incrementExact(12002)); System.out.println(Math.incrementExact(18)); System.out.println(Math.incrementExact(32)); System.out.println(Math.incrementExact(947)); Definition and Usage The incrementExact() method returns 1 more than a specified integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow. incrementExact() Syntax One of the following: public static int incrementExact(int x) public static int incrementExact(int x) public static long incrementExact(long x) public static long incrementExact(long x) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math log() Method â® Math Methods Example Return the natural logarithm of different numbers: System.out.println(Math.log(6)); System.out.println(Math.log(Math.E)); System.out.println(Math.log(2)); System.out.println(Math.log(1)); System.out.println(Math.log(0)); System.out.println(Math.log(-1)); System.out.println(Math.log(6)); System.out.println(Math.log(Math.E)); System.out.println(Math.log(2)); System.out.println(Math.log(1)); System.out.println(Math.log(0)); System.out.println(Math.log(-1)); Try it Yourself Â» Definition and Usage The log() method returns the natural logarithm of a number. log() The natural logarithm is the logarithm with base e. The value of e is approximately 2.718282 and it is available as the constant Math.E in Java. Math.E Syntax public static double log(double number) public static double log(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math log10() Method â® Math Methods Example Return the base 10 logarithm for different numbers: System.out.println(Math.log10(120)); System.out.println(Math.log10(10)); System.out.println(Math.log10(3.1623)); System.out.println(Math.log10(1)); System.out.println(Math.log10(0)); System.out.println(Math.log10(-1)); System.out.println(Math.log10(120)); System.out.println(Math.log10(10)); System.out.println(Math.log10(3.1623)); System.out.println(Math.log10(1)); System.out.println(Math.log10(0)); System.out.println(Math.log10(-1)); Try it Yourself Â» Definition and Usage The log10() method returns the base 10 logarithm of a number. log10() Syntax public static double log10(double number) public static double log10(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math log1p() Method â® Math Methods Example Return the natural logarithm of 1 + x for different values of x: System.out.println(Math.log1p(6)); System.out.println(Math.log1p(Math.E)); System.out.println(Math.log1p(2)); System.out.println(Math.log1p(1)); System.out.println(Math.log1p(0)); System.out.println(Math.log1p(-1)); System.out.println(Math.log1p(6)); System.out.println(Math.log1p(Math.E)); System.out.println(Math.log1p(2)); System.out.println(Math.log1p(1)); System.out.println(Math.log1p(0)); System.out.println(Math.log1p(-1)); Try it Yourself Â» Definition and Usage The log1p() method returns the natural logarithm of 1 + x for any number x. log1p() The natural logarithm is the logarithm with base e. The value of e is approximately 2.718282 and it is available as the constant Math.E in Java. Math.E Syntax public static double log1p(double number) public static double log1p(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math max() Method â® Math Methods Example Get the highest value from different pairs of numbers: System.out.println(Math.max(2.0, 0.25)); System.out.println(Math.max(31.2f, 18.0f)); System.out.println(Math.max(14, 22)); System.out.println(Math.max(96L, 2048L)); System.out.println(Math.max(2.0, 0.25)); System.out.println(Math.max(31.2f, 18.0f)); System.out.println(Math.max(14, 22)); System.out.println(Math.max(96L, 2048L)); Try it Yourself Â» Definition and Usage The max() method returns the number with the highest value from a pair of numbers. max() Tip: Use the min() method to return the number with the lowest value. min() Syntax One of the following: public static double max(double x, double y) public static double max(double x, double y) public static float max(float x, float y) public static float max(float x, float y) public static int max(int x, int y) public static int max(int x, int y) public static long max(long x, long y) public static long max(long x, long y) Parameter Values Technical Details double float int long"
  },
  {
    "document": "Java Math min() Method â® Math Methods Example Get the lowest value from different pairs of numbers: System.out.println(Math.min(2.0, 0.25)); System.out.println(Math.min(31.2f, 18.0f)); System.out.println(Math.min(14, 22)); System.out.println(Math.min(96L, 2048L)); System.out.println(Math.min(2.0, 0.25)); System.out.println(Math.min(31.2f, 18.0f)); System.out.println(Math.min(14, 22)); System.out.println(Math.min(96L, 2048L)); Try it Yourself Â» Definition and Usage The min() method returns the number with the lowest value from a pair of numbers. min() Tip: Use the max() method to return the number with the highest value. max() Syntax One of the following: public static double min(double x, double y) public static double min(double x, double y) public static float min(float x, float y) public static float min(float x, float y) public static int min(int x, int y) public static int min(int x, int y) public static long min(long x, long y) public static long min(long x, long y) Parameter Values Technical Details double float int long"
  },
  {
    "document": "Java Math multiplyExact() Method â® Math Methods Example Multiply integers using multiplyExact(): multiplyExact() System.out.println(Math.multiplyExact(96000, 1200)); System.out.println(Math.multiplyExact(-460, 95)); System.out.println(Math.multiplyExact(96000, 1200)); System.out.println(Math.multiplyExact(-460, 95)); Definition and Usage The multiplyExact() method multiplies two integers and throws an exception if the result causes an overflow. This prevents incorrect results that can occur from multiplying really large numbers. multiplyExact() Syntax One of the following: public static int multiplyExact(int x, int y) public static int multiplyExact(int x, int y) public static long multiplyExact(long x, long y) public static long multiplyExact(long x, long y) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math negateExact() Method â® Math Methods Example Change the sign of different numbers: System.out.println(Math.negateExact(15)); System.out.println(Math.negateExact(-32)); System.out.println(Math.negateExact(7)); System.out.println(Math.negateExact(-25)); System.out.println(Math.negateExact(15)); System.out.println(Math.negateExact(-32)); System.out.println(Math.negateExact(7)); System.out.println(Math.negateExact(-25)); Definition and Usage The negateExact() method returns an integer with equal value and opposite sign to another integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow. negateExact() An overflow occurs when the integer is equal to Integer.MIN_VALUE or Long.MIN_VALUE, the largest negative integer, because it does not have a positive equivalent. Integer.MIN_VALUE Long.MIN_VALUE Syntax One of the following: public static int negateExact(int x) public static int negateExact(int x) public static long negateExact(long x) public static long negateExact(long x) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math nextAfter() Method â® Math Methods Example Find the next floating point number for different numbers in different directions: System.out.println(Math.nextAfter(1, 2)); System.out.println(Math.nextAfter(1, 0)); System.out.println(Math.nextAfter(0.5f, 1.0f)); System.out.println(Math.nextAfter(0.5f, 0.0f)); System.out.println(Math.nextAfter(1, 2)); System.out.println(Math.nextAfter(1, 0)); System.out.println(Math.nextAfter(0.5f, 1.0f)); System.out.println(Math.nextAfter(0.5f, 0.0f)); Try it Yourself Â» Definition and Usage The nextAfter() method returns the floating point number adjacent to a number x in the direction of a number y. nextAfter() If y is greater than x then it looks for the lowest possible floating point number that is greater than x. If y is less than x then it looks for the highest possible floating point number that is less than x. If y is equal to x then this method returns x. The return value for double type arguments will be closer to x than the return value for float type arguments. Syntax One of the following: public static double nextAfter(double x, double y) public static float nextAfter(float x, double y) Parameter Values Parameter Description x Required. The number to start from. y Required. The direction to step towards. Technical Details Returns: A double or float value representing the next floating point number from a starting point in a specified direction. Java version: 1.6+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up The return value for double type arguments will be closer to x than the return value for float type arguments. Syntax One of the following: public static double nextAfter(double x, double y) public static float nextAfter(float x, double y) Parameter Values Parameter Description x Required. The number to start from. y Required. The direction to step towards. Technical Details Returns: A double or float value representing the next floating point number from a starting point in a specified direction. Java version: 1.6+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up The return value for double type arguments will be closer to x than the return value for float type arguments. double float Syntax One of the following: public static double nextAfter(double x, double y) public static double nextAfter(double x, double y) public static float nextAfter(float x, double y) public static float nextAfter(float x, double y) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math nextDown() Method â® Math Methods Example Find the next floating point number below different numbers: System.out.println(Math.nextDown(1.0f)); System.out.println(Math.nextDown(1.0)); System.out.println(Math.nextDown(0.5f)); System.out.println(Math.nextDown(0.5)); System.out.println(Math.nextDown(Math.PI)); System.out.println(Math.nextDown(3.1415927f)); System.out.println(Math.nextDown(1.0f)); System.out.println(Math.nextDown(1.0)); System.out.println(Math.nextDown(0.5f)); System.out.println(Math.nextDown(0.5)); System.out.println(Math.nextDown(Math.PI)); System.out.println(Math.nextDown(3.1415927f)); Try it Yourself Â» Definition and Usage The nextDown() method returns the floating point number adjacent to a number in the negative direction, which is the highest possible floating point number that is less than the starting number. The return value for double type arguments will be closer to the starting number than the return value for float type arguments. Syntax One of the following: public static double nextDown(double start) public static float nextDown(float start) Parameter Values Parameter Description start Required. The number to start from. Technical Details Returns: A double or float value representing the floating point number adjacent to a starting number in the negative direction. Java version: 1.8+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up nextDown() The return value for double type arguments will be closer to the starting number than the return value for float type arguments. Syntax One of the following: public static double nextDown(double start) public static float nextDown(float start) Parameter Values Parameter Description start Required. The number to start from. Technical Details Returns: A double or float value representing the floating point number adjacent to a starting number in the negative direction. Java version: 1.8+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up The return value for double type arguments will be closer to the starting number than the return value for float type arguments. double float Syntax One of the following: public static double nextDown(double start) public static double nextDown(double start) public static float nextDown(float start) public static float nextDown(float start) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math nextUp() Method â® Math Methods Example Find the next floating point number above different numbers: System.out.println(Math.nextUp(1.0f)); System.out.println(Math.nextUp(1.0)); System.out.println(Math.nextUp(0.5f)); System.out.println(Math.nextUp(0.5)); System.out.println(Math.nextUp(Math.PI)); System.out.println(Math.nextUp(3.1415927f)); System.out.println(Math.nextUp(1.0f)); System.out.println(Math.nextUp(1.0)); System.out.println(Math.nextUp(0.5f)); System.out.println(Math.nextUp(0.5)); System.out.println(Math.nextUp(Math.PI)); System.out.println(Math.nextUp(3.1415927f)); Try it Yourself Â» Definition and Usage The nextUp() method returns the floating point number adjacent to a number in the positive direction, which is the lowest possible floating point number that is greater than the starting number. The return value for double type arguments will be closer to the starting number than the return value for float type arguments. Syntax One of the following: public static double nextUp(double start) public static float nextUp(float start) Parameter Values Parameter Description start Required. The number to start from. Technical Details Returns: A double or float value representing the floating point number adjacent to a starting number in the positive direction. Java version: 1.6+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up nextUp() The return value for double type arguments will be closer to the starting number than the return value for float type arguments. Syntax One of the following: public static double nextUp(double start) public static float nextUp(float start) Parameter Values Parameter Description start Required. The number to start from. Technical Details Returns: A double or float value representing the floating point number adjacent to a starting number in the positive direction. Java version: 1.6+ â® Math Methods â +1 Track your progress - it's free! Log in Sign Up The return value for double type arguments will be closer to the starting number than the return value for float type arguments. double float Syntax One of the following: public static double nextUp(double start) public static double nextUp(double start) public static float nextUp(float start) public static float nextUp(float start) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math pow() Method â® Math Methods Example Raise different numbers to different powers: System.out.println(Math.pow(2, 8)); System.out.println(Math.pow(3, 4)); System.out.println(Math.pow(9, 0.5)); System.out.println(Math.pow(8, -1)); System.out.println(Math.pow(10, -2)); System.out.println(Math.pow(2, 8)); System.out.println(Math.pow(3, 4)); System.out.println(Math.pow(9, 0.5)); System.out.println(Math.pow(8, -1)); System.out.println(Math.pow(10, -2)); Try it Yourself Â» Definition and Usage The pow() method raises a number to the power of another number. pow() Syntax public static double pow(double base, double exponent) public static double pow(double base, double exponent) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math random() Method â® Math Methods Example Generate a random number: System.out.println(Math.random()); System.out.println(Math.random()); Try it Yourself Â» Definition and Usage The random() method returns a random number between 0 and 1. random() This method never returns exactly 1, but it can return 0. Syntax public static double random() public static double random() Technical Details double"
  },
  {
    "document": "Java Math rint() Method â® Math Methods Example Round numbers to the nearest integer: System.out.println(Math.rint(0.5)); System.out.println(Math.rint(1.5)); System.out.println(Math.rint(5)); System.out.println(Math.rint(5.1)); System.out.println(Math.rint(-5.1)); System.out.println(Math.rint(-5.9)); System.out.println(Math.rint(0.5)); System.out.println(Math.rint(1.5)); System.out.println(Math.rint(5)); System.out.println(Math.rint(5.1)); System.out.println(Math.rint(-5.1)); System.out.println(Math.rint(-5.9)); Try it Yourself Â» Definition and Usage The rint() method rounds a number to the nearest integer. If there are two integers that are equally close to the number then the even integer will be returned. rint() Note: This method is very similar to round(). The main differences between rint() and round() are: round() rint() round() round() long int rint() double rint() round() Syntax public static double rint(double number) public static double rint(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math round() Method â® Math Methods Example Round numbers to the nearest integer: System.out.println(Math.round(0.60)); System.out.println(Math.round(0.40)); System.out.println(Math.round(5)); System.out.println(Math.round(5.1)); System.out.println(Math.round(-5.1)); System.out.println(Math.round(-5.9)); System.out.println(Math.round(0.60)); System.out.println(Math.round(0.40)); System.out.println(Math.round(5)); System.out.println(Math.round(5.1)); System.out.println(Math.round(-5.1)); System.out.println(Math.round(-5.9)); Try it Yourself Â» Definition and Usage The round() method rounds a number to the nearest integer. round() Syntax One of the following: public static long round(double number) public static long round(double number) public static int round(float number) public static int round(float number) Parameter Values Technical Details long int"
  },
  {
    "document": "Java Math scalb() Method â® Math Methods Example Return numbers multiplied by powers of 2: System.out.println(Math.scalb(1.5, 4)); System.out.println(Math.scalb(1.0, 5)); System.out.println(Math.scalb(1.2, 0)); System.out.println(Math.scalb(1.85, 10)); System.out.println(Math.scalb(1.5, 4)); System.out.println(Math.scalb(1.0, 5)); System.out.println(Math.scalb(1.2, 0)); System.out.println(Math.scalb(1.85, 10)); Definition and Usage The scalb() method returns the result of the formula xÂ·2y for a floating point number x and an integer y. scalb() Syntax One of the following: public static double scalb(double x, int y) public static double scalb(double x, int y) public static float scalb(float x, int y) public static float scalb(float x, int y) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math signum() Method â® Math Methods Example Return the sign of different numbers: System.out.println(Math.signum(12)); System.out.println(Math.signum(0.5)); System.out.println(Math.signum(0)); System.out.println(Math.signum(-0.25)); System.out.println(Math.signum(-6)); System.out.println(Math.signum(12)); System.out.println(Math.signum(0.5)); System.out.println(Math.signum(0)); System.out.println(Math.signum(-0.25)); System.out.println(Math.signum(-6)); Try it Yourself Â» Definition and Usage The signum() method returns the sign of a number. A number's sign tells whether it is positive or negative. This method returns 1 for positive numbers, -1 for negative numbers and 0 for the number 0. signum() Syntax public static double signum(double number) public static double signum(double number) public static float signum(float number) public static float signum(float number) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Math sin() Method â® Math Methods Example Return the sine of different angles: System.out.println(Math.sin(3)); System.out.println(Math.sin(-3)); System.out.println(Math.sin(0)); System.out.println(Math.sin(Math.PI)); System.out.println(Math.sin(Math.PI/2)); System.out.println(Math.sin(3)); System.out.println(Math.sin(-3)); System.out.println(Math.sin(0)); System.out.println(Math.sin(Math.PI)); System.out.println(Math.sin(Math.PI/2)); Try it Yourself Â» Definition and Usage The sin() method returns the sine of an angle. sin() Note: Angles are measured in radians. Tip: You can use the constant Math.PI to make fractions of PI for angles. Syntax public static double sin(double angle) public static double sin(double angle) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math sinh() Method â® Math Methods Example Return the hyperbolic sine of different numbers: System.out.println(Math.sinh(3)); System.out.println(Math.sinh(-3)); System.out.println(Math.sinh(0)); System.out.println(Math.sinh(1)); System.out.println(Math.sinh(3)); System.out.println(Math.sinh(-3)); System.out.println(Math.sinh(0)); System.out.println(Math.sinh(1)); Try it Yourself Â» Definition and Usage The sinh() method returns the hyperbolic sine of a number. sinh() The hyperbolic sine is equivalent to (Math.exp(number) - Math.exp(-number)) / 2. (Math.exp(number) - Math.exp(-number)) / 2 Syntax public static double sinh(double number) public static double sinh(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math sqrt() Method â® Math Methods Example Return the square root of different numbers: System.out.println(Math.sqrt(0)); System.out.println(Math.sqrt(1)); System.out.println(Math.sqrt(9)); System.out.println(Math.sqrt(0.64)); System.out.println(Math.sqrt(-9)); System.out.println(Math.sqrt(0)); System.out.println(Math.sqrt(1)); System.out.println(Math.sqrt(9)); System.out.println(Math.sqrt(0.64)); System.out.println(Math.sqrt(-9)); Try it Yourself Â» Definition and Usage The sqrt() method returns the square root of a number. sqrt() Syntax public static double sqrt(double number) public static double sqrt(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math subtractExact() Method â® Math Methods Example Subtract integers using subtractExact(): subtractExact() System.out.println(Math.subtractExact(12, 16)); System.out.println(Math.subtractExact(24060, 10000)); System.out.println(Math.subtractExact(12, 16)); System.out.println(Math.subtractExact(24060, 10000)); Definition and Usage The subtractExact() method subtracts two integers and throws an exception if the subtraction causes an overflow. This prevents incorrect results that can occur from subtracting really large negative numbers. subtractExact() Syntax One of the following: public static int subtractExact(int x, int y) public static int subtractExact(int x, int y) public static long subtractExact(long x, long y) public static long subtractExact(long x, long y) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math tan() Method â® Math Methods Example Return the tangent of different angles: System.out.println(Math.tan(0.5)); System.out.println(Math.tan(-0.5)); System.out.println(Math.tan(1)); System.out.println(Math.tan(-3)); System.out.println(Math.tan(Math.PI/4)); System.out.println(Math.tan(0.5)); System.out.println(Math.tan(-0.5)); System.out.println(Math.tan(1)); System.out.println(Math.tan(-3)); System.out.println(Math.tan(Math.PI/4)); Try it Yourself Â» Definition and Usage The tan() method returns the tangent of an angle. tan() Note: Angles are measured in radians. Tip: You can use the constant Math.PI to make fractions of PI for angles. Syntax public static double tan(double angle) public static double tan(double angle) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math tanh() Method â® Math Methods Example Return the hyperbolic tangent of different numbers: System.out.println(Math.tanh(3)); System.out.println(Math.tanh(-3)); System.out.println(Math.tanh(0)); System.out.println(Math.tanh(1)); System.out.println(Math.tanh(3)); System.out.println(Math.tanh(-3)); System.out.println(Math.tanh(0)); System.out.println(Math.tanh(1)); Try it Yourself Â» Definition and Usage The tanh() method returns the hyperbolic tangent of a number. tanh() The hyperbolic tangent is equivalent to Math.sinh(number) / Math.cosh(number). Math.sinh(number) / Math.cosh(number) Syntax public static double tanh(double number) public static double tanh(double number) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math toDegrees() Method â® Math Methods Example Convert radians to degrees for different angles: System.out.println(Math.toDegrees(1)); System.out.println(Math.toDegrees(Math.PI)); System.out.println(Math.toDegrees(Math.PI / 4)); System.out.println(Math.toDegrees(-0.5236)); System.out.println(Math.toDegrees(6)); System.out.println(Math.toDegrees(1)); System.out.println(Math.toDegrees(Math.PI)); System.out.println(Math.toDegrees(Math.PI / 4)); System.out.println(Math.toDegrees(-0.5236)); System.out.println(Math.toDegrees(6)); Try it Yourself Â» Definition and Usage The toDegrees() method converts an angle from radians to degrees. toDegrees() Tip: To convert from degrees to radians, look at the toRadians() method. Syntax public static double toDegrees(double angle) public static double toDegrees(double angle) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math toIntExact() Method â® Math Methods Example Convert long values to int: long int System.out.println(Math.toIntExact(1500000L)); System.out.println(Math.toIntExact(-32L)); System.out.println(Math.toIntExact(-86345L)); System.out.println(Math.toIntExact(25L)); System.out.println(Math.toIntExact(1500000L)); System.out.println(Math.toIntExact(-32L)); System.out.println(Math.toIntExact(-86345L)); System.out.println(Math.toIntExact(25L)); Definition and Usage The toIntExact() method Converts a long value to an int and throws an exception if the conversion results in an overflow. This prevents incorrect results that can occur from the overflow. toIntExact() long int Syntax public static int toIntExact(long x) public static int toIntExact(long x) Parameter Values Technical Details int long ArithmeticException"
  },
  {
    "document": "Java Math toRadians() Method â® Math Methods Example Convert degrees to radians for different angles: System.out.println(Math.toRadians(57)); System.out.println(Math.toRadians(180)); System.out.println(Math.toRadians(45)); System.out.println(Math.toRadians(-30)); System.out.println(Math.toRadians(340)); System.out.println(Math.toRadians(57)); System.out.println(Math.toRadians(180)); System.out.println(Math.toRadians(45)); System.out.println(Math.toRadians(-30)); System.out.println(Math.toRadians(340)); Try it Yourself Â» Definition and Usage The toRadians() method converts an angle from degrees to radians. toRadians() Tip: To convert from radians to degrees, look at the toDegrees() method. Syntax public static double toRadians(double angle) public static double toRadians(double angle) Parameter Values Technical Details double"
  },
  {
    "document": "Java Math ulp() Method â® Math Methods Example Find the unit of least precision for different numbers: System.out.println(Math.ulp(1.0)); System.out.println(Math.ulp(1.0f)); System.out.println(Math.ulp(5000000.0)); System.out.println(Math.ulp(5000000.0f)); System.out.println(Math.ulp(50000000.0)); System.out.println(Math.ulp(50000000.0f)); System.out.println(Math.ulp(1.0)); System.out.println(Math.ulp(1.0f)); System.out.println(Math.ulp(5000000.0)); System.out.println(Math.ulp(5000000.0f)); System.out.println(Math.ulp(50000000.0)); System.out.println(Math.ulp(50000000.0f)); Try it Yourself Â» Definition and Usage The ulp() method returns the unit of least precision of a number. ulp() The unit of least precision is the smallest step you can take up or down from a number. For example, the ulp for 50000000.0f is 4.0, so the next number above it than can be represented with a float data type is 50000004.0f. 50000000.0f float 50000004.0f Note: The double data type has a lot more precision than the float data type, so the ulp is smaller. double float Note: Larger numbers have less precision than smaller numbers, that means the ulp is larger. Note: The sign of a number does not affect the ulp. Syntax public static double ulp(double number) public static double ulp(double number) public static float ulp(float number) public static float ulp(float number) Parameter Values Technical Details double float"
  },
  {
    "document": "Java Output Methods Output Methods The System.out stream, short for \"output\", is used together with different methods to output values or print text to the console: System.out"
  },
  {
    "document": "Java Output print() Method â® Output Methods Example Print some text to the console: System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line. \"); Try it Yourself Â» Definition and Usage The print() method prints text or values the console. print() Note: The print() method does not insert a new line at the end of the output. However, the println() method does. print() println() Syntax System.out.print(argument); System.out.print(argument); Parameter Values Technical Details"
  },
  {
    "document": "Java Output printf() Method â® Output Methods Example Print some formatted text to the console. The %s character is a placeholder for the string \"World\": %s System.out.printf(\"Hello %s! \", \"World\"); System.out.printf(\"Hello %s! \", \"World\"); Try it Yourself Â» Note: You will find more \"Try it Yourself\" examples at the bottom of this page. Definition and Usage The printf() method outputs a formatted string. printf() Data from the additional arguments is formatted and written into placeholders in the formatted string, which are marked by a % symbol. The way in which arguments are formatted depends on the sequence of characters that follows the % symbol. % % Placeholders The placeholders have the form %[arg$][flags][width][.precision]conversion. The components in [square brackets] are optional. %[arg$][flags][width][.precision]conversion An explanation of each of the components: arg$ < flags - +  0 , width - .precision . conversion List of conversions % n b B c C s S d h H Note: For any data other than positive integers this does not represent its real value. o x X e E f g G f e E a A t T The following characters can be used for date and time formatting: Syntax System.out.printf(locale, formatString, args) System.out.printf(locale, formatString, args) Parameter Values Technical Details PrintStream IllegalFormatException More Examples Example Print a formatted text containing a string and an integer: System.out.printf(\"Hello %s! One kilobyte is %,d bytes. \", \"World\", 1024); System.out.printf(\"Hello %s! One kilobyte is %,d bytes."
  },
  {
    "document": "\", \"World\", 1024); Try it Yourself Â» Example Format a floating point number in different ways: // Default System.out.printf(\"%f%n\", 123456.78); // Two decimal digits System.out.printf(\"%.2f%n\", 123456.78); // No decimal digits System.out.printf(\"%.0f%n\", 123456.78); // No decimal digits but keep the decimal point System.out.printf(\"%#.0f%n\", 123456.78); // Group digits System.out.printf(\"%,.2f%n\", 123456.78); // Scientific notation with two digits of precision System.out.printf(\"%.2e\", 123456.78); // Default System.out.printf(\"%f%n\", 123456.78); // Two decimal digits System.out.printf(\"%.2f%n\", 123456.78); // No decimal digits System.out.printf(\"%.0f%n\", 123456.78); // No decimal digits but keep the decimal point System.out.printf(\"%#.0f%n\", 123456.78); // Group digits System.out.printf(\"%,.2f%n\", 123456.78); // Scientific notation with two digits of precision System.out.printf(\"%.2e\", 123456.78); Try it Yourself Â» Example A placeholder which uses all of the components: System.out.printf(\"%2$,3.2f %1$s\", \"meters\", 1260.5052); System.out.printf(\"%2$,3.2f %1$s\", \"meters\", 1260.5052); This is how each part of the placeholder %2$,3.2f works: %2$,3.2f 2$ , 3 .2 f Try it Yourself Â» Example Use arguments in a different order: System.out.printf(\"%3$c %2$c %1$c\", 'a', 'b', 'c'); System.out.printf(\"%3$c %2$c %1$c\", 'a', 'b', 'c'); Try it Yourself Â» Example Format a date from a Unix timestamp: long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) // Time System.out.printf(\"%tl:%<tM %<tp%n\", date); // Month and day System.out.printf(\"%tB %<te%n\", date); // Full date representation System.out.printf(\"%tc%n\", date); long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) // Time System.out.printf(\"%tl:%<tM %<tp%n\", date); // Month and day System.out.printf(\"%tB %<te%n\", date); // Full date representation System.out.printf(\"%tc%n\", date); Try it Yourself Â» Example Represent characters from their unicode code points: // Represent characters from their unicode code points System.out.printf(\"%c%c%c%c%c%n\", 72, 101, 108, 108, 111); // Force unicode characters to uppercase System.out.printf(\"%C%C%C%C%C\", 72, 101, 108, 108, 111); // Represent characters from their unicode code points System.out.printf(\"%c%c%c%c%c%n\", 72, 101, 108, 108, 111); // Force unicode characters to uppercase System.out.printf(\"%C%C%C%C%C\", 72, 101, 108, 108, 111); Try it Yourself Â»"
  },
  {
    "document": "Java Output println() Method â® Output Methods Example Print some text to the console, followed by a new line: System.out.println(\"Hello World! \"); System.out.println(\"I will print a new line. \"); System.out.println(\"Hello World! \"); System.out.println(\"I will print a new line. \"); Try it Yourself Â» Definition and Usage The println() method prints text or values to the console, followed by a new line. println() This method is often preferred over the print() method, as the new line makes the output of code easier to read. print() Syntax System.out.println(argument); System.out.println(argument); Parameter Values Technical Details"
  },
  {
    "document": "Java Arrays Class The Java Arrays class (found in java.util), has methods that allow you to manipulate arrays. Arrays java.util Arrays Methods A list of popular methods of the Arrays Class can be found in the table below: Properties The length property is a built-in Java property, and does not belong to the Arrays class. length Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java Arrays.compare() Method â® Arrays Methods Example Compare two arrays: String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.compare(cars, cars2)); String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.compare(cars, cars2)); Try it Yourself Â» Definition and Usage The compare() method compares two arrays lexicographically. compare() Syntax Arrays.compare(array1, array2) Arrays.compare(array1, array2) Parameter Values Technical Details 0 Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java Arrays.equals() Method â® Arrays Methods Example Find out if two arrays are equal: String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.equals(cars, cars2)); String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.equals(cars, cars2)); Try it Yourself Â» Definition and Usage The equals() method checks whether two arrays are equal. equals() Note: Two arrays are consided equal if they share the same elements in the same order. Syntax Arrays.compare(array1, array2) Arrays.compare(array1, array2) Parameter Values Technical Details true false Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java Arrays.sort() Method â® Arrays Methods Example Sort an array of strings alphabetically: String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); Try it Yourself Â» Definition and Usage The sort() method sorts an array in ascending order. sort() This method sorts arrays of strings alphabetically, and arrays of integers numerically. Syntax Arrays.sort(array) Arrays.sort(array) Arrays.sort(array, start, end) Arrays.sort(array, start, end) Parameter Values Technical Details java.util More Examples Example Sort an integer array numerically: int[] myNum = {50, 10, 25, 1, 17, 99, 33}; Arrays.sort(myNum); int[] myNum = {50, 10, 25, 1, 17, 99, 33}; Arrays.sort(myNum); Try it Yourself Â» Example Sort an integer array numerically, but only sort from index 1 to 3: int[] myNum = {50, 10, 25, 1, 17, 99, 33}; // This will only sort the integers 10, 25, 1 and 17 from the myNum array Arrays.sort(myNum, 1, 4); int[] myNum = {50, 10, 25, 1, 17, 99, 33}; // This will only sort the integers 10, 25, 1 and 17 from the myNum array Arrays.sort(myNum, 1, 4); Try it Yourself Â» Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java Arrays.fill() Method â® Arrays Methods Example Fill all the elements in an array with a \"Kiwi\" value: String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, \"Kiwi\"); String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, \"Kiwi\"); Try it Yourself Â» Definition and Usage The fill() method fills an array with a specified value. fill() Note: The value must be of the same data type as the array. Tip: Start and end position can be specified. If not, all elements will be filled. Syntax Arrays.fill(array, value) Arrays.fill(array, value) Arrays.fill(array, start, end, value) Arrays.fill(array, start, end, value) Parameter Values Technical Details java.util More Examples Example Fill the last two elements: String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, 2, 4, \"Kiwi\"); String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, 2, 4, \"Kiwi\"); Try it Yourself Â» Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java Array length Property â® Arrays Methods Example Find out how many elements an array has: String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length); Try it Yourself Â» Definition and Usage The length property returns the length of an array. length This is a built-in Java property, and does not belong to the Java Arrays Class. Note: The length property must not be mistaken with the length() method that is used for Strings. length length() Syntax array.length array.length Related Pages Java Arrays Tutorial"
  },
  {
    "document": "Java ArrayList Methods All ArrayList Methods A list of all ArrayList methods can be found in the table below. Some methods use the type of the ArrayList's items as a parameter or return value. This type will be referred to as T in the table. Iterator ArrayList ListIterator ArrayList Spliterator ArrayList Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList add() Method â® ArrayList Methods Example Add an item to a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The add() method adds an item to the list. add() If an index is provided then the new item will be placed at the specified index, pushing all of the following elements in the list ahead by one. If an index is not provided then the new item will be placed at the end of the list. Syntax One of the following: public boolean add(T item) public boolean add(T item) public void add(int index, T item) public void add(int index, T item) T refers to the data type of items in the list. T Parameter Values Technical Details true false IndexOutOfBoundsException More Examples Example Add an item at a specified position in the list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList add() Method â® ArrayList Methods Example Add items from one list into another: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } } Try it Yourself Â» Definition and Usage The addAll() method adds all of the items from a collection to the list. addAll() If an index is provided then the new items will be placed at the specified index, pushing all of the following elements in the list ahead. If an index is not provided then the new items will be placed at the end of the list. Syntax One of the following: public boolean addAll(Collection<T> items) public boolean addAll(Collection<T> items) public boolean addAll(int index, Collection<T> items) public boolean addAll(int index, Collection<T> items) T refers to the data type of items in the list. T Parameter Values Technical Details true false IndexOutOfBoundsException NullPointerException More Examples Example Add items at a specified position in the list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList clear() Method â® ArrayList Methods Example Remove all items from a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The clear() removes all items from the list. clear() Syntax public void clear() public void clear() Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList clone() Method â® ArrayList Methods Example Create a copy of a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList cars2 = (ArrayList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList cars2 = (ArrayList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } } Try it Yourself Â» Definition and Usage The clone() method returns a copy of the ArrayList as an Object. clone() ArrayList Object This creates a \"shallow\" copy, which means that copies of objects in the list are not created, instead the list has references to the same objects that are in the original list. Note: Since the return type is Object, it must be type casted in order to use it as an ArrayList as shown in the example above. Object ArrayList Syntax public Object clone() public Object clone() Technical Details ArrayList Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList contains() Method â® ArrayList Methods Example Check if an item exists in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } } Try it Yourself Â» Definition and Usage The contains() method returns true if an item exists in a list and false otherwise. contains() true false Syntax public boolean contains(Object item) public boolean contains(Object item) Parameter Values Technical Details true false Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList ensureCapacity() Method â® ArrayList Methods Example Increase the capacity of a list to 15 items: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.ensureCapacity(15); for (int i = 1; i <= 15; i++) { list.add(i); } System.out.println(list); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.ensureCapacity(15); for (int i = 1; i <= 15; i++) { list.add(i); } System.out.println(list); } } Try it Yourself Â» Definition and Usage The ensureCapacity() method increases the capacity of a list to a specified amount, if necessary. ensureCapacity() This method does not have a visible effect but it can make code more efficient. When methods such as add() and addAll() are called, if the capacity of a list is not large enough then some extra work is done to add enough space for the new items. It takes a bit of time to do this, so having this happen with every add() call is not ideal. add() addAll() add() If you know approximately how many items you are going to add, the ensureCapacity() method allows you to increase the capacity of the list just once for multiple add() calls. ensureCapacity() add() Syntax public void add(int capacity) public void add(int capacity) Parameter Values Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList forEach() Method â® ArrayList Methods Example Use a lambda expression in the ArrayList's forEach() method to print every item in the list: ArrayList forEach() import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } Try it Yourself Â» Definition and Usage The forEach() method performs an action on every item in a list. The action can be defined by a lambda expression that is compatible with the accept() method of Java's Consumer interface. forEach() accept() Consumer To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void forEach(Consumer action) public void forEach(Consumer action) Parameter Values Consumer Related Pages Java Arrays Tutorial Java ArrayList Tutorial Java Lambda Expressions Tutorial"
  },
  {
    "document": "Java ArrayList get() Method â® ArrayList Methods Example Output the value of an item in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } } Try it Yourself Â» Definition and Usage The get() method returns the item at a specified position in the list. get() Syntax public T get(int index) public T get(int index) T refers to the data type of items in the list. T Parameter Values Technical Details IndexOutOfBoundsException Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList indexOf() Method â® ArrayList Methods Example Find the position of an item in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } } Try it Yourself Â» Definition and Usage The indexOf() method returns the position of the first occurrence of a value in the list. If the item is not found in the list then it returns -1. indexOf() Syntax public int indexOf(Object item) public int indexOf(Object item) Parameter Values Technical Details Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList isEmpty() Method â® ArrayList Methods Example Check if a list is empty: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } } Try it Yourself Â» Definition and Usage The isEmpty() method returns true if a list has no items and false otherwise. isEmpty() true false Syntax public boolean isEmpty() public boolean isEmpty() Technical Details true false Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList iterator() Method â® ArrayList Methods Example Use an iterator to loop through a list: import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } } import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } } Try it Yourself Â» Definition and Usage The iterator() method returns an Iterator for the list. iterator() Iterator To learn how to use iterators, see our Java Iterator tutorial. Syntax public Iterator iterator() public Iterator iterator() Technical Details Iterator Related Pages Java Arrays Tutorial Java ArrayList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java ArrayList lastIndexOf() Method â® ArrayList Methods Example Find the first and last position of an item in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } } Try it Yourself Â» Definition and Usage The lastIndexOf() method returns the position of the last occurrence of a value in the list. If the item is not found in the list then it returns -1. lastIndexOf() Syntax public int lastIndexOf(Object item) public int lastIndexOf(Object item) Parameter Values Technical Details Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList listIterator() Method â® ArrayList Methods Example Use a ListIterator to loop forward and backward through a list: ListIterator import java.util.ArrayList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } } import java.util.ArrayList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } } Try it Yourself Â» Definition and Usage The listIterator() method returns a ListIterator for the list. listIterator() ListIterator To learn how to use iterators, see our Java Iterator tutorial. The ListIterator differs from an Iterator in that it can also traverse the list backwards. ListIterator Iterator Syntax public ListIterator listIterator() public ListIterator listIterator() Technical Details ListIterator Related Pages Java Arrays Tutorial Java ArrayList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java ArrayList remove() Method â® ArrayList Methods Example Remove items from a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The remove() method removes an item from the list, either by position or by value. If a position is specified then this method returns the removed item. If a value is specified then it returns true if the value was found and false otherwise. remove() true false If a value is specified and multiple elements in the list have the same value then only the first one is deleted. If the list contains integers and you want to delete an integer based on its value you will need to pass an Integer object. See More Examples below for an example. Integer Syntax One of the following: public T remove(int index) public boolean remove(Object item) T refers to the data type of items in the list. Parameter Values Parameter Description index Required. The position of the item to be deleted. item Required. The value of the item to be deleted. Technical Details Returns: If an object was passed as an argument then it returns true if the object was found in the list and false otherwise. If an index was passed then it returns the object which was removed. Throws: IndexOutOfBoundsException - If the index is less than zero, equal to the size of the list or greater than the size of the list. More Examples Example Remove an integer from the list by position and by value: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial â® ArrayList Methods â +1 Track your progress - it's free! Log in Sign Up Syntax One of the following: public T remove(int index) public T remove(int index) public boolean remove(Object item) public boolean remove(Object item) T refers to the data type of items in the list. T Parameter Values Technical Details true IndexOutOfBoundsException More Examples Example Remove an integer from the list by position and by value: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list);  Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList removeAll() Method â® ArrayList Methods Example Remove all items from a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The removeAll() method removes all items from a list which belong to a specified collection. removeAll() Syntax public boolean removeAll(Collection items) public boolean removeAll(Collection items) Parameter Values Technical Details true false NullPointerException More Examples Example Remove multiple items from a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> remove = new ArrayList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> remove = new ArrayList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList removeIf() Method â® ArrayList Methods Example Remove all even numbers from a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } } Try it Yourself Â» Definition and Usage The removeIf() method removes all elements from this list for which a condition is satisfied. The condition can be defined by the return value of a lambda expression that is compatible with the test() method of Java's Predicate interface. removeIf() test() Predicate To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public boolean removeIf(Predicate condition) public boolean removeIf(Predicate condition) Parameter Values Predicate Technical Details true false Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList replaceAll() Method â® ArrayList Methods Example Add 1 to every number in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } } Try it Yourself Â» Definition and Usage The replaceAll() method replaces every item in a list with the result of performing an operation on the item. The operation can be defined by a lambda expression that is compatible with Java's UnaryOperator interface. replaceAll() UnaryOperator To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void replaceAll(UnaryOperator operator) public void replaceAll(UnaryOperator operator) Parameter Values UnaryOperator Related Pages Java Arrays Tutorial Java ArrayList Tutorial Java Lambda Expression Tutorial"
  },
  {
    "document": "Java ArrayList retainAll() Method â® ArrayList Methods Example Remove items from a list which do not belong to a specified collection: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> valid = new ArrayList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> valid = new ArrayList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The retainAll() method removes all items from a list which do not belong to a specified collection. retainAll() Syntax public boolean retainAll(Collection items) public boolean retainAll(Collection items) Parameter Values Technical Details true false NullPointerException Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList set() Method â® ArrayList Methods Example Replace an item in a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The set() method replaces an item at a specified position in the list and returns the item that was previously at that position. set() Syntax public T set(int index, T item) public T set(int index, T item) T refers to the data type of items in the list. T Parameter Values Technical Details IndexOutOfBoundsException Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList size() Method â® ArrayList Methods Example Find out the size of a list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } } Try it Yourself Â» Definition and Usage The size() method indicates how many elements are in the list. size() Syntax public int size() public int size() Technical Details Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList sort() Method â® ArrayList Methods Example Sort a list in alphabetical order: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The sort() method sorts items in the list. A Comparator can be used to compare pairs of elements. The comparator can be defined by a lambda expression which is compatible with the compare() method of Java's Comparator interface. sort() Comparator compare() Comparator If null is passed into the method then items will be sorted naturally based on their data type (e.g. alphabetically for strings, numerically for numbers). Non-primitive types must implement Java's Comparable interface in order to be sorted without a comparator. null Comparable Syntax public void sort(Comparator compare) public void sort(Comparator compare) Parameter Values null Technical Details More Examples Example Use a lambda expression to sort a list in reverse alphabetical order: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList spliterator() Method â® ArrayList Methods Example Use a Spliterator to loop through items in a list: Spliterator import java.util.ArrayList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } } import java.util.ArrayList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } } Try it Yourself Â» Note: The syntax while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); is equivalent to: while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); } boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); } Definition and Usage The spliterator() method returns a Spliterator for the list. spliterator() Spliterator A spliterator is a special type of iterator. To learn how to use iterators, see our Java Iterator tutorial. The Spliterator is considerably different from an ordinary iterator. The purpose of a spliterator is to separate a collection into smaller pieces so that each piece can be processed by a separate thread. The Spliterator interface has two important methods: Spliterator Spliterator trySplit() tryAdvance(Consumer action) false Syntax public Spliterator spliterator() public Spliterator spliterator() Technical Details Spliterator Related Pages Java Arrays Tutorial Java ArrayList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java ArrayList toArray() Method â® ArrayList Methods Example Get an array from an ArrayList: ArrayList import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } } Try it Yourself Â» Definition and Usage The toArray() method returns an array containing all of the items in the list. toArray() If no argument is passed then the type of the returned array will be Object. If an array is passed as an argument then this method will return an array with the same data type. Object If the array in the argument is large enough to contain all of the list items then this method will return the argument itself after writing the list items into it. Syntax One of the following: public Object[] toArray() public Object[] toArray() public T[] toArray(T[] array) public T[] toArray(T[] array) T refers to the data type of items in the list. T Parameter Values Technical Details ArrayList ArrayStoreException ArrayList NullPointerException null More Examples Example Specify the return type of toArray(): toArray() import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java ArrayList trimToSize() Method â® ArrayList Methods Example Reduce the capacity of a list to exactly the size of the list: import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.trimToSize(); System.out.println(cars); } } import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.trimToSize(); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The trimToSize() method reduces the capacity of a list to fit exactly the number of items that the list contains. trimToSize() This method does not have a visible effect but it can can be used to reduce the memory usage of the list. When an ArrayList is created, capacity for 10 items is reserved unless another number is specified in the constructor. Even if the list does not have 10 items, this space is still reserved. Removing items from a list may leave the space for those items reserved. When you are not using of the capacity of an ArrayList then there is some wasted memory which can accumulate if your program makes use of many ArrayLists. You can use the trimToSize() method to recover the unused memory. ArrayList ArrayList ArrayList trimToSize() Syntax public void trimToSize() public void trimToSize() Related Pages Java Arrays Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java LinkedList Methods All LinkedList Methods A list of all LinkedList methods can be found in the table below. Some methods use the type of the LinkedList's items as a parameter or return value. This type will be referred to as T in the table. getFirst() Iterator LinkedList ListIterator LinkedList getFirst() peek() poll() removeFirst() addFirst() Spliterator LinkedList Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java ArrayList Tutorial"
  },
  {
    "document": "Java LinkedList add() Method â® LinkedList Methods Example Add an item to a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The add() method adds an item to the list. add() If an index is provided then the new item will be placed at the specified index, pushing all of the following elements in the list ahead by one. If an index is not provided then the new item will be placed at the end of the list. Syntax One of the following: public boolean add(T item) public boolean add(T item) public void add(int index, T item) public void add(int index, T item) T refers to the data type of items in the list. T Parameter Values Technical Details true false IndexOutOfBoundsException More Examples Example Add an item at a specified position in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList add() Method â® LinkedList Methods Example Add items from one list into another: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } } Try it Yourself Â» Definition and Usage The addAll() method adds all of the items from a collection to the list. addAll() If an index is provided then the new items will be placed at the specified index, pushing all of the following elements in the list ahead. If an index is not provided then the new items will be placed at the end of the list. Syntax One of the following: public boolean addAll(Collection<T> items) public boolean addAll(Collection<T> items) public boolean addAll(int index, Collection<T> items) public boolean addAll(int index, Collection<T> items) T refers to the data type of items in the list. T Parameter Values Technical Details true false IndexOutOfBoundsException NullPointerException More Examples Example Add items at a specified position in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList clear() Method â® LinkedList Methods Example Remove all items from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The clear() removes all items from the list. clear() Syntax public void clear() public void clear() Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList clone() Method â® LinkedList Methods Example Create a copy of a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList cars2 = (LinkedList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList cars2 = (LinkedList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } } Try it Yourself Â» Definition and Usage The clone() method returns a copy of the LinkedList as an Object. clone() LinkedList Object This creates a \"shallow\" copy, which means that copies of objects in the list are not created, instead the list has references to the same objects that are in the original list. Note: Since the return type is Object, it must be type casted in order to use it as an LinkedList as shown in the example above. Object LinkedList Syntax public Object clone() public Object clone() Technical Details LinkedList Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList contains() Method â® LinkedList Methods Example Check if an item exists in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } } Try it Yourself Â» Definition and Usage The contains() method returns true if an item exists in a list and false otherwise. contains() true false Syntax public boolean contains(Object item) public boolean contains(Object item) Parameter Values Technical Details true false Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList forEach() Method â® LinkedList Methods Example Use a lambda expression in the LinkedList's forEach() method to print every item in the list: LinkedList forEach() import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } } Try it Yourself Â» Definition and Usage The forEach() method performs an action on every item in a list. The action can be defined by a lambda expression that is compatible with the accept() method of Java's Consumer interface. forEach() accept() Consumer To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void forEach(Consumer action) public void forEach(Consumer action) Parameter Values Consumer Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java Lambda Expressions Tutorial"
  },
  {
    "document": "Java LinkedList get() Method â® LinkedList Methods Example Output the value of an item in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } } Try it Yourself Â» Definition and Usage The get() method returns the item at a specified position in the list. get() Syntax public T get(int index) public T get(int index) T refers to the data type of items in the list. T Parameter Values Technical Details IndexOutOfBoundsException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList getFirst() Method â® LinkedList Methods Example Get the first item in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getFirst() to get the first item in the list System.out.println(cars.getFirst()); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getFirst() to get the first item in the list System.out.println(cars.getFirst()); } } Try it Yourself Â» Definition and Usage The getFirst() method returns the first item in a list. getFirst() Tip: Use the getLast() method to get the last item in a list. getLast() Syntax public T getFirst() public T getFirst() T refers to the data type of items in the list. T Parameters None. Technical Details NoSuchElementException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList getLast() Method â® LinkedList Methods Example Get the last item in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getLast() to get the last item in the list System.out.println(cars.getLast()); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getLast() to get the last item in the list System.out.println(cars.getLast()); } } Try it Yourself Â» Definition and Usage The getLast() method returns the last item in a list. getLast() Tip: Use the getFirst() method to get the first item in a list. getFirst() Syntax public T getLast() public T getLast() T refers to the data type of items in the list. T Parameters None. Technical Details NoSuchElementException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList indexOf() Method â® LinkedList Methods Example Find the position of an item in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } } Try it Yourself Â» Definition and Usage The indexOf() method returns the position of the first occurrence of a value in the list. If the item is not found in the list then it returns -1. indexOf() Syntax public int indexOf(Object item) public int indexOf(Object item) Parameter Values Technical Details Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList isEmpty() Method â® LinkedList Methods Example Check if a list is empty: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } } Try it Yourself Â» Definition and Usage The isEmpty() method returns true if a list has no items and false otherwise. isEmpty() true false Syntax public boolean isEmpty() public boolean isEmpty() Technical Details true false Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList iterator() Method â® LinkedList Methods Example Use an iterator to loop through a list: import java.util.LinkedList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } } import java.util.LinkedList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } } Try it Yourself Â» Definition and Usage The iterator() method returns an Iterator for the list. iterator() Iterator To learn how to use iterators, see our Java Iterator tutorial. Syntax public Iterator iterator() public Iterator iterator() Technical Details Iterator Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java LinkedList lastIndexOf() Method â® LinkedList Methods Example Find the first and last position of an item in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } } Try it Yourself Â» Definition and Usage The lastIndexOf() method returns the position of the last occurrence of a value in the list. If the item is not found in the list then it returns -1. lastIndexOf() Syntax public int lastIndexOf(Object item) public int lastIndexOf(Object item) Parameter Values Technical Details Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList listIterator() Method â® LinkedList Methods Example Use a ListIterator to loop forward and backward through a list: ListIterator import java.util.LinkedList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } } import java.util.LinkedList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } } Try it Yourself Â» Definition and Usage The listIterator() method returns a ListIterator for the list. listIterator() ListIterator To learn how to use iterators, see our Java Iterator tutorial. The ListIterator differs from an Iterator in that it can also traverse the list backwards. ListIterator Iterator Syntax public ListIterator listIterator() public ListIterator listIterator() Technical Details ListIterator Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java LinkedList remove() Method â® LinkedList Methods Example Remove items from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The remove() method removes an item from the list, either by position or by value. If a position is specified then this method returns the removed item. If a value is specified then it returns true if the value was found and false otherwise. remove() true false If a value is specified and multiple elements in the list have the same value then only the first one is deleted. If the list contains integers and you want to delete an integer based on its value you will need to pass an Integer object. See More Examples below for an example. Integer Syntax One of the following: public T remove(int index) public boolean remove(Object item) T refers to the data type of items in the list. Parameter Values Parameter Description index Required. The position of the item to be deleted. item Required. The value of the item to be deleted. Technical Details Returns: If an object was passed as an argument then it returns true if the object was found in the list and false otherwise. If an index was passed then it returns the object which was removed. Throws: IndexOutOfBoundsException - If the index is less than zero, equal to the size of the list or greater than the size of the list. More Examples Example Remove an integer from the list by position and by value: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> list = new LinkedList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial â® LinkedList Methods â +1 Track your progress - it's free! Log in Sign Up Syntax One of the following: public T remove(int index) public T remove(int index) public boolean remove(Object item) public boolean remove(Object item) T refers to the data type of items in the list. T Parameter Values Technical Details true IndexOutOfBoundsException More Examples Example Remove an integer from the list by position and by value: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> list = new LinkedList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> list = new LinkedList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list);  Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList removeAll() Method â® LinkedList Methods Example Remove all items from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The removeAll() method removes all items from a list which belong to a specified collection. removeAll() Syntax public boolean removeAll(Collection items) public boolean removeAll(Collection items) Parameter Values Technical Details true false NullPointerException More Examples Example Remove multiple items from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> remove = new LinkedList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> remove = new LinkedList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList removeFirst() Method â® LinkedList Methods Example Remove the first item in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeFirst() remove the first item from the list cars.removeFirst(); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeFirst() remove the first item from the list cars.removeFirst(); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The removeFirst() method removes the first item in a list. removeFirst() Tip: Use the removeLast() method to remove the last item in a list. removeLast() Syntax public T removeFirst() public T removeFirst() T refers to the data type of items in the list. T Parameters None. Technical Details NoSuchElementException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList removeIf() Method â® LinkedList Methods Example Remove all even numbers from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } } Try it Yourself Â» Definition and Usage The removeIf() method removes all elements from this list for which a condition is satisfied. The condition can be defined by the return value of a lambda expression that is compatible with the test() method of Java's Predicate interface. removeIf() test() Predicate To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public boolean removeIf(Predicate condition) public boolean removeIf(Predicate condition) Parameter Values Predicate Technical Details true false Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList removeLast() Method â® LinkedList Methods Example Remove the last item in the list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeLast() to remove the last item from the list cars.removeLast(); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeLast() to remove the last item from the list cars.removeLast(); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The removeLast() method removes the last item in a list. removeLast() Tip: Use the removeFirst() method to remove the first item in a list. removeFirst() Syntax public T removeLast() public T removeLast() T refers to the data type of items in the list. T Parameters None. Technical Details NoSuchElementException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList replaceAll() Method â® LinkedList Methods Example Add 1 to every number in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } } Try it Yourself Â» Definition and Usage The replaceAll() method replaces every item in a list with the result of performing an operation on the item. The operation can be defined by a lambda expression that is compatible with Java's UnaryOperator interface. replaceAll() UnaryOperator To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void replaceAll(UnaryOperator operator) public void replaceAll(UnaryOperator operator) Parameter Values UnaryOperator Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java Lambda Expression Tutorial"
  },
  {
    "document": "Java LinkedList retainAll() Method â® LinkedList Methods Example Remove items from a list which do not belong to a specified collection: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> valid = new LinkedList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> valid = new LinkedList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The retainAll() method removes all items from a list which do not belong to a specified collection. retainAll() Syntax public boolean retainAll(Collection items) public boolean retainAll(Collection items) Parameter Values Technical Details true false NullPointerException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList set() Method â® LinkedList Methods Example Replace an item in a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The set() method replaces an item at a specified position in the list and returns the item that was previously at that position. set() Syntax public T set(int index, T item) public T set(int index, T item) T refers to the data type of items in the list. T Parameter Values Technical Details IndexOutOfBoundsException Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList size() Method â® LinkedList Methods Example Find out the size of a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } } Try it Yourself Â» Definition and Usage The size() method indicates how many elements are in the list. size() Syntax public int size() public int size() Technical Details Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList sort() Method â® LinkedList Methods Example Sort a list in alphabetical order: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } } Try it Yourself Â» Definition and Usage The sort() method sorts items in the list. A Comparator can be used to compare pairs of elements. The comparator can be defined by a lambda expression which is compatible with the compare() method of Java's Comparator interface. sort() Comparator compare() Comparator If null is passed into the method then items will be sorted naturally based on their data type (e.g. alphabetically for strings, numerically for numbers). Non-primitive types must implement Java's Comparable interface in order to be sorted without a comparator. null Comparable Syntax public void sort(Comparator compare) public void sort(Comparator compare) Parameter Values null Technical Details More Examples Example Use a lambda expression to sort a list in reverse alphabetical order: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList spliterator() Method â® LinkedList Methods Example Use a Spliterator to loop through items in a list: Spliterator import java.util.LinkedList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } } import java.util.LinkedList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } } Try it Yourself Â» Note: The syntax while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); is equivalent to: while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); } boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); } Definition and Usage The spliterator() method returns a Spliterator for the list. spliterator() Spliterator A spliterator is a special type of iterator. To learn how to use iterators, see our Java Iterator tutorial. The Spliterator is considerably different from an ordinary iterator. The purpose of a spliterator is to separate a collection into smaller pieces so that each piece can be processed by a separate thread. The Spliterator interface has two important methods: Spliterator Spliterator trySplit() tryAdvance(Consumer action) false Syntax public Spliterator spliterator() public Spliterator spliterator() Technical Details Spliterator Related Pages Java Arrays Tutorial Java LinkedList Tutorial Java Iterator Tutorial"
  },
  {
    "document": "Java LinkedList subList() Method â® LinkedList Methods Example Get a sublist from a list: import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println( cars.subList(1, 3) ); } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println( cars.subList(1, 3) ); } } Try it Yourself Â» Definition and Usage The subList() method returns a new list (referred to as a sublist) which contains the items of the list between two indices. subList() Note: The item at the last index is not included in the sublist. Note: The sublist is a view of the original list, which means that changing the sublist also changes the original list. Syntax public List sublist(int start, int end) public List sublist(int start, int end) Parameter Values Technical Details List IndexOutOfBoundsException IllegalArgumentException More Examples Example A list can be changed by changing a sublist: import java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); List<String> sublist = cars.subList(1, 3); sublist.set(0, \"Toyota\"); System.out.println(cars); } } import java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); List<String> sublist = cars.subList(1, 3); sublist.set(0, \"Toyota\"); System.out.println(cars); } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java LinkedList toArray() Method â® LinkedList Methods Example Get an array from an LinkedList: LinkedList import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList cars = new LinkedList(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList cars = new LinkedList(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } } Try it Yourself Â» Definition and Usage The toArray() method returns an array containing all of the items in the list. toArray() If no argument is passed then the type of the returned array will be Object. If an array is passed as an argument then this method will return an array with the same data type. Object If the array in the argument is large enough to contain all of the list items then this method will return the argument itself after writing the list items into it. Syntax One of the following: public Object[] toArray() public Object[] toArray() public T[] toArray(T[] array) public T[] toArray(T[] array) T refers to the data type of items in the list. T Parameter Values Technical Details LinkedList ArrayStoreException LinkedList NullPointerException null More Examples Example Specify the return type of toArray(): toArray() import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } } import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } } Try it Yourself Â» Related Pages Java Arrays Tutorial Java LinkedList Tutorial"
  },
  {
    "document": "Java HashMap Methods All HashMap Methods A list of all HashMap methods can be found in the table below. Some methods use the type of the HashMap's entries as a parameter or return value. The type of the key will be referred to as K and the type of the value will be referred to as V in the table. Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap clear() Method â® HashMap Methods Example Remove all items from a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.clear(); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.clear(); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The clear() method removes all entries from the map. clear() Syntax public void clear() public void clear() Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap clone() Method â® HashMap Methods Example Create a copy of a map and change it: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap copy = (HashMap)capitalCities.clone(); copy.remove(\"England\"); System.out.println(capitalCities); System.out.println(copy); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap copy = (HashMap)capitalCities.clone(); copy.remove(\"England\"); System.out.println(capitalCities); System.out.println(copy); } } Try it Yourself Â» Definition and Usage The clone() method returns a copy of the map as an Object. clone() Object This creates a \"shallow\" copy, which means that copies of objects in the map are not created, instead the map has references to the same objects that are in the original map. Note: Since the return type is Object, it must be type casted in order to use it as a HashMap as shown in the example above. Object HashMap Syntax public Object clone() public Object clone() Technical Details HashMap Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap compute() Method â® HashMap Methods Example Compute a new value for an entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.compute(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.compute(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The compute() method changes the value of an entry or creates a new value if the entry does not exist. compute() The new value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface. apply() BiFunction To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void compute(K key, BiFunction function) public void compute(K key, BiFunction function) K refers to the data type of the keys of the map. K Parameter Values BiFunction Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap computeIfAbsent() Method â® HashMap Methods Example Compute a value for a new entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfAbsent(\"Canada\", (k) -> \"Toronto (\" + k + \")\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfAbsent(\"Canada\", (k) -> \"Toronto (\" + k + \")\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The computeIfAbsent() method calculates a value for a new entry based on its key. If an entry with the specified key already exists and its value is not null then the map is not changed. computeIfAbsent() null The value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's Function interface. apply() Function To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void computeIfAbsent(K key, Function function) public void computeIfAbsent(K key, Function function) K refers to the data type of the keys of the map. K Parameter Values Function Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap computeIfPresent() Method â® HashMap Methods Example Compute a new value for an entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfPresent(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfPresent(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The computeIfPresent() method calculates a value for an entry based on its key. If an entry with the specified key does not exist or its value is null then the map is not changed. computeIfPresent() null The value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface. apply() BiFunction To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void computeIfPresent(K key, BiFunction function) public void computeIfPresent(K key, BiFunction function) K refers to the data type of the keys of the map. K Parameter Values Function Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap containsKey() Method â® HashMap Methods Example Check if a key exists in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsKey(\"England\")); System.out.println(capitalCities.containsKey(\"Canada\")); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsKey(\"England\")); System.out.println(capitalCities.containsKey(\"Canada\")); } } Try it Yourself Â» Definition and Usage The containsKey() method returns true if an entry with the specified key exists in the map and false otherwise. containsKey() true false Syntax public boolean containsKey(Object key) public boolean containsKey(Object key) Parameter Values Technical Details true false Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap containsValue() Method â® HashMap Methods Example Check if a value exists in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsValue(\"London\")); System.out.println(capitalCities.containsValue(\"Ottawa\")); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsValue(\"London\")); System.out.println(capitalCities.containsValue(\"Ottawa\")); } } Try it Yourself Â» Definition and Usage The containsValue() method returns true if an entry with the specified value exists in the map and false otherwise. containsValue() true false Syntax public boolean containsValue(Object value) public boolean containsValue(Object value) Parameter Values Technical Details true false Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap entrySet() Method â® HashMap Methods Example Return all the entries in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.entrySet()); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.entrySet()); } } Try it Yourself Â» Definition and Usage The entrySet() method returns a set containing all of the entries in the map. entrySet() To learn about sets, see our Java HashSet tutorial. Note: The returned set is a view of the map, which means that changing the set also changes the map. Syntax public Set< Map.Entry<K,V> > entrySet() K and V refer to the data types of the keys and values of the map. Technical Details Returns: A set containing all of the entries in the map. Related Pages Java HashMap Tutorial Java HashSet Tutorial â® HashMap Methods â +1 Track your progress - it's free! Log in Sign Up Note: The returned set is a view of the map, which means that changing the set also changes the map. Syntax public Set< Map.Entry<K,V> > entrySet() public Set< Map.Entry<K,V> > entrySet() K and V refer to the data types of the keys and values of the map. K V Technical Details Related Pages Java HashMap Tutorial Java HashSet Tutorial"
  },
  {
    "document": "Java HashMap forEach() Method â® HashMap Methods Example Use the forEach() method to print every entry in the map: forEach() import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.forEach( (k, v) -> { System.out.println(k + \" -> \" + v); } ); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.forEach( (k, v) -> { System.out.println(k + \" -> \" + v); } ); } } Try it Yourself Â» Definition and Usage The forEach() method performs an action on every entry in the map. The action can be defined by a lambda expression that is compatible with the accept() method of Java's BiConsumer interface. forEach() accept() BiConsumer To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void forEach(BiConsumer action) public void forEach(BiConsumer action) Parameter Values BiConsumer Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap get() Method â® HashMap Methods Example Get the value of an entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.get(\"England\")); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.get(\"England\")); } } Try it Yourself Â» Definition and Usage The get() method returns the value of the entry in the map which has a specified key. get() Syntax public V get(Object key) public V get(Object key) V refers to the data type of the values of the map. V Parameter Values Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap getOrDefault() Method â® HashMap Methods Example Output the value of an entry in a map, or \"Unknown\" if it does not exist: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.getOrDefault(\"England\", \"Unknown\")); System.out.println(capitalCities.getOrDefault(\"Canada\", \"Unknown\")); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.getOrDefault(\"England\", \"Unknown\")); System.out.println(capitalCities.getOrDefault(\"Canada\", \"Unknown\")); } } Try it Yourself Â» Definition and Usage The getOrDefault() method returns the value of the entry in the map which has a specified key. If the entry does not exist then the value of the second parameter is returned. getOrDefault() Syntax public V get(Object key, V def) public V get(Object key, V def) V refers to the data type of the values of the map. V Parameter Values Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap isEmpty() Method â® HashMap Methods Example Check if a map is empty: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); System.out.println(capitalCities.isEmpty()); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.isEmpty()); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); System.out.println(capitalCities.isEmpty()); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.isEmpty()); } } Try it Yourself Â» Definition and Usage The isEmpty() method returns true if the map has no entries and false otherwise. isEmpty() true false Syntax public boolean isEmpty() public boolean isEmpty() Technical Details true false Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap keySet() Method â® HashMap Methods Example Return all the keys in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.keySet()); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.keySet()); } } Try it Yourself Â» Definition and Usage The keySet() method returns a set containing all of the keys in the map. keySet() To learn about sets, see our Java HashSet tutorial. Note: The returned set is a view of the map, which means that changing the set also changes the map. Syntax public Set<K> keySet() K refers to the data type of the keys of the map. Technical Details Returns: A set containing all of the keys in the map. Related Pages Java HashMap Tutorial Java HashSet Tutorial â® HashMap Methods â +1 Track your progress - it's free! Log in Sign Up Note: The returned set is a view of the map, which means that changing the set also changes the map. Syntax public Set<K> keySet() public Set<K> keySet() K refers to the data type of the keys of the map. K Technical Details Related Pages Java HashMap Tutorial Java HashSet Tutorial"
  },
  {
    "document": "Java HashMap merge() Method â® HashMap Methods Example Compute a new value for an entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.merge(\"Canada\", \"Ottawa\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"England\", \"London\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"Germany\", \"Berlin\", (a, b) -> a + \" -> \" + b); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.merge(\"Canada\", \"Ottawa\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"England\", \"London\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"Germany\", \"Berlin\", (a, b) -> a + \" -> \" + b); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The merge() method creates an entry with a specified key and value or, if an entry with the specified key already exists, calculates a new value for the entry. merge() The new value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface. apply() BiFunction To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public V merge(K key, V value, BiFunction function) public V merge(K key, V value, BiFunction function) K and V refer to the data types of the keys and values of the map. K V Parameter Values BiFunction Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap put() Method â® HashMap Methods Example Add entries into a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The put() method writes an entry into the map. If an entry with the same key already exists then the value of that entry will be changed. put() Syntax public V put(K key, V value) public V put(K key, V value) K and V refer to the data types of the keys and values of the map. K V Parameter Values Technical Details null Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap putAll() Method â® HashMap Methods Example Copy entries from one map into another: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap<String, String> moreCities = new HashMap<String, String>(); moreCities.put(\"Canada\", \"Ottawa\"); moreCities.put(\"Japan\", \"Tokyo\"); capitalCities.putAll(moreCities); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap<String, String> moreCities = new HashMap<String, String>(); moreCities.put(\"Canada\", \"Ottawa\"); moreCities.put(\"Japan\", \"Tokyo\"); capitalCities.putAll(moreCities); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The putAll() method writes all of the entries from another map into the map. If entries exist with the same keys then the values of these entries will be changed. putAll() Syntax One of the following: public void putAll(Map map) public void putAll(Map map) K and V refer to the data types of the keys and values of the map. K V Parameter Values Technical Details NullPointerException null Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap putIfAbsent() Method â® HashMap Methods Example Add entries into a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); // Add new entries only if they don't exist capitalCities.putIfAbsent(\"Canada\", \"Ottawa\"); capitalCities.putIfAbsent(\"England\", \"Cambridge\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); // Add new entries only if they don't exist capitalCities.putIfAbsent(\"Canada\", \"Ottawa\"); capitalCities.putIfAbsent(\"England\", \"Cambridge\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The putIfAbsent() method writes an entry into the map. If an entry with the same key already exists and its value is not null then the map is not changed. putIfAbsent() null Syntax public V putIfAbsent(K key, V value) public V putIfAbsent(K key, V value) K and V refer to the data types of the keys and values of the map. K V Parameter Values Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap remove() Method â® HashMap Methods Example Remove entries from a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.remove(\"USA\"); capitalCities.remove(\"Germany\", \"Berlin\"); capitalCities.remove(\"England\", \"Cambridge\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.remove(\"USA\"); capitalCities.remove(\"Germany\", \"Berlin\"); capitalCities.remove(\"England\", \"Cambridge\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The remove() method removes an entry with a specified key from the map. If a value is provided then the entry will only be removed if its value matches the specified value. remove() Syntax One of the following: public V remove(Object key) public V remove(Object key) public boolean remove(Object key, Object value) public boolean remove(Object key, Object value) V refers to the data type of the values in the map. V Parameter Values Technical Details true false null Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap replace() Method â® HashMap Methods Example Replace the values of entries in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"Cambridge\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replace(\"England\", \"London\"); capitalCities.replace(\"Canada\", \"Ottawa\"); capitalCities.replace(\"USA\", \"New York\", \"Washington DC\"); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"Cambridge\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replace(\"England\", \"London\"); capitalCities.replace(\"Canada\", \"Ottawa\"); capitalCities.replace(\"USA\", \"New York\", \"Washington DC\"); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The replace() method writes a new value to an existing entry in the map. The entry can be specified by its key, or by both its key and value. replace() Syntax One of the following: public V replace(K key, V newValue) public V replace(K key, V newValue) public boolean replace(K key, V oldValue, V newValue) public boolean replace(K key, V oldValue, V newValue) K and V refer to the data types of the keys and values of the map. K V Parameter Values Technical Details true false null Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap replaceAll() Method â® HashMap Methods Example Update the value of every entry in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replaceAll((k, v) -> \"The capital of \" + k + \" is \" + v); System.out.println(capitalCities); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replaceAll((k, v) -> \"The capital of \" + k + \" is \" + v); System.out.println(capitalCities); } } Try it Yourself Â» Definition and Usage The replaceAll() method replaces the value of every entry in the map with the result of an operation using the entry's key and value. The operation can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface. replaceAll() apply() BiFunction To learn about lambda expressions, see our Java Lambda Expression tutorial. Syntax public void replaceAll(BiFunction operator) public void replaceAll(BiFunction operator) Parameter Values BiFunction Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap size() Method â® HashMap Methods Example Get the size of a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.size()); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.size()); } } Try it Yourself Â» Definition and Usage The size() method returns the number of entries in a map. size() Syntax public int size() public int size() Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java HashMap values() Method â® HashMap Methods Example Return all the values in a map: import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.values()); } } import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.values()); } } Try it Yourself Â» Definition and Usage The values() method returns a collection containing all of the values in the map. values() Note: The returned collection is a view of the map, which means that changing the collection also changes the map. Syntax public Collection<V> values() public Collection<V> values() V refers to the data type of the values of the map. V Technical Details Related Pages Java HashMap Tutorial"
  },
  {
    "document": "Java Scanner Methods Scanner Methods The Scanner class can be used to obtain data from the keyboard, files and strings. Scanner A list of useful Scanner methods can be found in the table below. Scanner byte int long short byte double float int long short"
  },
  {
    "document": "Java Scanner close() Method â® Scanner Methods Example Use the close() method when finished reading from a file: close() import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } Definition and Usage The close() method closes the file or input stream that the scanner was reading. After calling the close() method, the current Scanner object can no longer be used. close() close() Note: Closing a scanner that was created with System.in will close the System.in stream itself, making it unusable. It is best to only used the close() method with files. System.in System.in close() Syntax public void close() public void close() Related Pages Java Tutorial: Create and Write Files. â® Scanner Methods"
  },
  {
    "document": "Java Scanner delimiter() Method â® Scanner Methods Example Show the delimiter that is currently being used by the scanner: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the delimiter System.out.println(myObj.delimiter()); // Close the scanner myObj.close(); // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the delimiter System.out.println(myObj.delimiter()); // Close the scanner myObj.close(); Definition and Usage The delimiter() method returns a Pattern object describing the sequence of characters which separates tokens in the data being scanned. The default delimiter is a sequence of whitespace characters, but it can be changed with the useDelimiter() method. delimiter() Pattern useDelimiter() Learn more about the Pattern object in our Java RegEx tutorial. Pattern What is a token? A token is a sequence of characters separated from other tokens by delimiters. Syntax public Pattern delimiter() public Pattern delimiter() Technical Details Pattern â® Scanner Methods"
  },
  {
    "document": "Java Scanner findInLine() Method â® Scanner Methods Example Find an email address in a line of text: // Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details. \"); // Get the email address with a pattern String email = myObj.findInLine(\"[a-zA-Z]+@[a-zA-Z]+. [a-zA-Z]{2,}\"); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); } // Close the scanner myObj.close(); // Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details. \"); // Get the email address with a pattern String email = myObj.findInLine(\"[a-zA-Z]+@[a-zA-Z]+. [a-zA-Z]{2,}\"); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); } // Close the scanner myObj.close(); Definition and Usage The findInLine() method searches up to the next line break in the scanner for the first match of a regular expression provided by a Pattern object or a string. If a match is not found then it returns null. findInLine() Pattern null If a match is found the scanner advances to the first character following the match. Learn more about the regular expressions in our Java RegEx tutorial. Syntax One of the following: public String findInLine(Pattern pattern) public String findInLine(Pattern pattern) public String findInLine(String pattern) public String findInLine(String pattern) Parameter Values Pattern Technical Details String null IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner findWithinHorizon() Method â® Scanner Methods Example Find an email address in a line of text: // Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details. \"); // Get the email address with a pattern String email = myObj.findWithinHorizon(\"[a-zA-Z]+@[a-zA-Z]+. [a-zA-Z]{2,}\", 0); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); } // Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details. \"); // Get the email address with a pattern String email = myObj.findWithinHorizon(\"[a-zA-Z]+@[a-zA-Z]+. [a-zA-Z]{2,}\", 0); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); } Definition and Usage The findWithinHorizon() method searches through a specified number of characters for the first match of a regular expression provided by a Pattern object or a string. If a match is not found then it returns null. findWithinHorizon() Pattern null The number of characters to search is specified by the horizon parameter, if it is set to zero then it continues searching without limit. If a match is found the scanner advances to the first character following the match. Learn more about the regular expressions in our Java RegEx tutorial. Syntax One of the following: public String findWithinHorizon(Pattern pattern, int horizon) public String findWithinHorizon(Pattern pattern, int horizon) public String findWithinHorizon(String pattern, int horizon) public String findWithinHorizon(String pattern, int horizon) Parameter Values Pattern Technical Details String null IllegalStateException IllegalArgumentException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNext() Method â® Scanner Methods Example Use hasNext() to read every token in a string: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Read every token while(myObj.hasNext()) { System.out.println(myObj.next()); } // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Read every token while(myObj.hasNext()) { System.out.println(myObj.next()); } Definition and Usage The hasNext() method returns true if there is another token available in the scanner. hasNext() If the pattern parameter is used, then it only returns true if the next token matches the regular expression specified by the parameter. Learn more about the regular expressions in our Java RegEx tutorial. What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean hasNext() public boolean hasNext() public boolean hasNext(Pattern pattern) public boolean hasNext(Pattern pattern) public boolean hasNext(String pattern) public boolean hasNext(String pattern) Parameter Values Technical Details boolean IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextBoolean() Method â® Scanner Methods Example Print the first boolean value that is found: // Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); } // Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); } Definition and Usage The hasNextBoolean() method returns true if the next token represents a boolean value. A token represents a boolean value if its value matches one of the strings \"true\" or \"false\". The match is case-insensitive, which means that values like \"True\" and \"FALSE\" also represent a boolean value. hasNextBoolean() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public boolean hasNextBoolean() public boolean hasNextBoolean() Technical Details boolean IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextByte() Method â® Scanner Methods Example Print the value of every byte in the string: // Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while(myObj.hasNext()) { if(myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while(myObj.hasNext()) { if(myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } } Definition and Usage The hasNextByte() method returns true if the next token represents a number that can be stored by the byte data type, which is any whole number between -128 and 127. hasNextByte() byte If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean hasNextByte() public boolean hasNextByte() public boolean hasNextByte(int radix) public boolean hasNextByte(int radix) Parameter Values Technical Details boolean byte IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextDouble() Method â® Scanner Methods Example Print the value of every floating point number in the string: // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } } Definition and Usage The hasNextDouble() method returns true if the next token represents a valid number. hasNextDouble() The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public boolean hasNextDouble() public boolean hasNextDouble() Technical Details boolean IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextFloat() Method â® Scanner Methods Example Print the value of every floating point number in the string: // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } } Definition and Usage The hasNextFloat() method returns true if the next token represents a valid number. hasNextFloat() The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public boolean hasNextFloat() public boolean hasNextFloat() Technical Details boolean IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextInt() Method â® Scanner Methods Example Print the value of every integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while (myObj.hasNext()) { if (myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while (myObj.hasNext()) { if (myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } } Definition and Usage The hasNextInt() method returns true if the next token represents a number that can be stored by the int data type, which is any whole number between -2,147,483,648 and 2,147,483,647. hasNextInt() int The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean hasNextInt() public boolean hasNextInt() public boolean hasNextInt(int radix) public boolean hasNextInt(int radix) Parameter Values Technical Details boolean int IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextLine() Method â® Scanner Methods Example Output the contents a file line by line: import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } Definition and Usage The hasNextLine() method returns true if there is another line of text available in the scanner. A line of text is a sequence of one or more characters followed by either a new line character or the end of the scanner's content. hasNextLine() Syntax public boolean hasNextLine() public boolean hasNextLine() Technical Details boolean IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextLong() Method â® Scanner Methods Example Print the value of every long integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } } Definition and Usage The hasNextLong() method returns true if the next token represents a number that can be stored by the long data type, which is any whole number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807. hasNextLong() long The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean hasNextLong() public boolean hasNextLong() public boolean hasNextLong(int radix) public boolean hasNextLong(int radix) Parameter Values Technical Details boolean long IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner hasNextShort() Method â® Scanner Methods Example Print the value of every short integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } } Definition and Usage The hasNextShort() method returns true if the next token represents a number that can be stored by the short data type, which is any whole number between -32,768 and 32,767. hasNextShort() short The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean hasNextShort() public boolean hasNextShort() public boolean hasNextShort(int radix) public boolean hasNextShort(int radix) Parameter Values Technical Details boolean short IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner locale() Method â® Scanner Methods Example Show the locale that is currently being used by the scanner: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the locale System.out.println(myObj.locale()); // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the locale System.out.println(myObj.locale()); Definition and Usage The locale() method returns a Locale object describing the locale used when interpreting numbers. The locale specifies formatting such as which character is used as a decimal point and how digits in large numbers are grouped. locale() Locale Syntax public Locale locale() public Locale locale() Technical Details Locale â® Scanner Methods"
  },
  {
    "document": "Java Scanner next() Method â® Scanner Methods Example Display the next token from the scanner: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Output the next token System.out.println(myObj.next()); // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Output the next token System.out.println(myObj.next()); Definition and Usage The next() method returns a string containing the next token in the scanner. next() If the pattern parameter is used, then it will throw an exception when the token does not match the regular expression specified by the parameter. Learn more about the regular expressions in our Java RegEx tutorial. What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public String next() public String next() public String next(Pattern pattern) public String next(Pattern pattern) public String next(String pattern) public String next(String pattern) Parameter Values Technical Details String InputMismatchException NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextBoolean() Method â® Scanner Methods Example Print the first boolean value that is found: // Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); } // Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); } Definition and Usage The nextBoolean() method returns the boolean value that the next token represents. A token represents a boolean value if its value matches one of the strings \"true\" or \"false\". The match is case-insensitive, which means that values like \"True\" and \"FALSE\" also represent a boolean value. nextBoolean() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public boolean nextBoolean() public boolean nextBoolean() Technical Details boolean InputMismatchException NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextByte() Method â® Scanner Methods Example Print the value of every byte in the string: // Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while (myObj.hasNext()) { if (myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while (myObj.hasNext()) { if (myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } } Definition and Usage The nextByte() method returns the byte value of the number that the next token represents. The token must represent a whole number between -128 and 127. nextByte() byte If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public boolean nextByte() public boolean nextByte() public boolean nextByte(int radix) public boolean nextByte(int radix) Parameter Values Technical Details byte InputMismatchException byte NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextDouble() Method â® Scanner Methods Example Print the value of every floating point number in the string: // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } } Definition and Usage The nextDouble() method returns a double value containing the number represented by the next token. nextDouble() double The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public double nextDouble() public double nextDouble() Technical Details double InputMismatchException NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextFloat() Method â® Scanner Methods Example Print the value of every floating point number in the string: // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } } Definition and Usage The nextFloat() method returns a float value containing the number represented by the next token. nextFloat() float The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax public float nextFloat() public float nextFloat() Technical Details float InputMismatchException NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextInt() Method â® Scanner Methods Example Print the value of every integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while(myObj.hasNext()) { if(myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while(myObj.hasNext()) { if(myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } } Definition and Usage The nextInt() method returns the int value of the number that the next token represents. The token must represent a whole number between -2,147,483,648 and 2,147,483,647. nextInt() int The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public int nextInt() public int nextInt() public int nextInt(int radix) public int nextInt(int radix) Parameter Values Technical Details int InputMismatchException int NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextLine() Method â® Scanner Methods Example Output the contents a file line by line: import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred. \"); e.printStackTrace(); } } } Definition and Usage The nextLine() method returns a string containing all of the characters up to the next new line character in the scanner, or up to the end of the scanner if there are no more new line characters. nextLine() Syntax public String nextLine() public String nextLine() Technical Details String NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextLong() Method â® Scanner Methods Example Print the value of every long integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } } Definition and Usage The nextLong() method returns the long value of the number that the next token represents. The token must represent a whole number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807. nextLong() long The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix which is 10 by default, but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public long nextLong() public long nextLong() public long nextLong(int radix) public long nextLong(int radix) Parameter Values Technical Details long InputMismatchException long NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner nextShort() Method â® Scanner Methods Example Print the value of every short integer in the string: // Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } } // Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } } Definition and Usage The nextShort() method returns the short value of the number that the next token represents. The token must represent a whole number between -32,768 and 32,767. nextShort() short The scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method. useLocale() If the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix which is 10 by default, but it can be changed with the useRadix() method. useRadix() What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method. useDelimiter() Syntax One of the following: public short nextShort() public short nextShort() public short nextShort(int radix) public short nextShort(int radix) Parameter Values Technical Details short InputMismatchException short NoSuchElementException IllegalStateException â® Scanner Methods"
  },
  {
    "document": "Java Scanner radix() Method â® Scanner Methods Example Show the radix that is currently being used by the scanner: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Display the radix (defaults to 10) System.out.println(myObj.radix()); // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Display the radix (defaults to 10) System.out.println(myObj.radix()); Definition and Usage The radix() method returns a number indicating the radix that the scanner uses to interpret whole numbers. The radix specifies how many different symbols can be used to represent each digit in a number. For example, a radix of 16 would allow the symbols 0 to 9 and A to F to be used as digits. radix() Syntax public int radix() public int radix() Technical Details int â® Scanner Methods"
  },
  {
    "document": "Java Scanner reset() Method â® Scanner Methods Example Reset changes made to the scanner's configuration: // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Change configuration myObj.useDelimiter(\",\"); myObj.useLocale(new Locale(\"es\")); myObj.useRadix(16); // Reset the configuration myObj.reset(); // Read configuration values System.out.println(myObj.delimiter()); System.out.println(myObj.locale()); System.out.println(myObj.radix()); // Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Change configuration myObj.useDelimiter(\",\"); myObj.useLocale(new Locale(\"es\")); myObj.useRadix(16); // Reset the configuration myObj.reset(); // Read configuration values System.out.println(myObj.delimiter()); System.out.println(myObj.locale()); System.out.println(myObj.radix()); Definition and Usage The reset() method resets all changes to the scanner's configuration. Configuration of the scanner can be changed by the useDelimiter(), useLocale() and useRadix() methods. reset() useDelimiter() useLocale() useRadix() Syntax public Scanner reset() public Scanner reset() Technical Details Scanner myObj.reset().useDelimiter(\",\"); â® Scanner Methods"
  },
  {
    "document": "Java Scanner useDelimiter() Method â® Scanner Methods Example Read comma separated items: // Create a scanner object Scanner myObj = new Scanner(\"Item 1,Item 2,Item 3\"); // Change delimiter myObj.useDelimiter(\",\"); // Read the contents of the scanner while (myObj.hasNext()) { System.out.println(myObj.next()); } // Create a scanner object Scanner myObj = new Scanner(\"Item 1,Item 2,Item 3\"); // Change delimiter myObj.useDelimiter(\",\"); // Read the contents of the scanner while (myObj.hasNext()) { System.out.println(myObj.next()); } Definition and Usage The useDelimiter() method changes the delimiter used by the scanner. A delimiter is the sequence of characters which separates tokens in the data being scanned. It is described by a regular expression given by a string or a Pattern object. useDelimiter() Pattern Learn more about regular expressions in our Java RegEx tutorial. What is a token? A token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with this method. Syntax One of the following: public Scanner useDelimiter(Pattern pattern) public Scanner useDelimiter(Pattern pattern) public Scanner useDelimiter(String pattern) public Scanner useDelimiter(String pattern) Parameter Values Pattern Technical Details Scanner myObj.useDelimiter(\",\").setRadix(16); â® Scanner Methods"
  },
  {
    "document": "Java Scanner useLocale() Method â® Scanner Methods Example Read numbers from a different locale: // Create a scanner object Scanner myObj = new Scanner(\"1.500.000\"); // Change delimiter myObj.useLocale(new Locale(\"es\")); // Read and display the number System.out.println(myObj.nextInt()); // Create a scanner object Scanner myObj = new Scanner(\"1.500.000\"); // Change delimiter myObj.useLocale(new Locale(\"es\")); // Read and display the number System.out.println(myObj.nextInt()); Definition and Usage The useLocale() method changes the locale used by the scanner. The locale determines how numbers are interpreted by deciding how digits are grouped, which character serves as a decimal point, etc. useLocale() Locale objects The useLocale() method requires a Locale object as an argument. Locale objects represent a language or country and they are used by a variety of Java classes to handle formatting and interpreting data. useLocale() Locale Locale The easiest way to get a Locale object is by using one of the objects provided by attributes of the Locale class. Locale Locale myObj.useLocale(Locale.GERMANY)); myObj.useLocale(Locale.GERMANY)); A list of available language and country attributes is shown below. Locale.CANADA Locale.CANADA_FRENCH Locale.CHINA Locale.FRANCE Locale.GERMANY Locale.ITALY Locale.JAPAN Locale.KOREA Locale.PRC Locale.TAIWAN Locale.UK Locale.US Locale.CHINESE Locale.ENGLISH Locale.FRENCH Locale.GERMAN Locale.ITALIAN Locale.JAPANESE Locale.KOREAN Locale.SIMPLIFIED_CHINESE Locale.TRADITIONAL_CHINESE If the country or language you need is not in the list then you can create a new Locale object using a language code and an optional country code. Most codes are two or three characters long and each code represents a language or a country. Locale Locale spanish = new Locale(\"es\"); Locale spain = new Locale(\"es\", \"ES\"); Locale spanish = new Locale(\"es\"); Locale spain = new Locale(\"es\", \"ES\"); Syntax public Scanner useLocale(Locale locale) public Scanner useLocale(Locale locale) Parameter Values Locale Technical Details Scanner myObj.useLocale(Language.GERMAN).useDelimiter(\",\"); â® Scanner Methods"
  },
  {
    "document": "Java Scanner useRadix() Method â® Scanner Methods Example Read a hexadecimal number: // Create a scanner object Scanner myObj = new Scanner(\"FFAD01\"); // Change radix myObj.useRadix(16); // Read and display the number System.out.println(myObj.nextInt()); // Create a scanner object Scanner myObj = new Scanner(\"FFAD01\"); // Change radix myObj.useRadix(16); // Read and display the number System.out.println(myObj.nextInt()); Definition and Usage The useRadix() method changes the radix used by the scanner. The radix specifies how many different symbols can be used to represent each digit in a number. For example, a radix of 16 would allow the symbols 0 to 9 and A to F to be used as digits. useRadix() Syntax public Scanner useRadix(int radix) public Scanner useRadix(int radix) Parameter Values int Technical Details Scanner myObj.useRadix(16).useDelimiter(\",\"); â® Scanner Methods"
  },
  {
    "document": "Java Iterator Interface Java Iterator Methods The Iterator interface provides methods to access and iterate through collections: Iterator Note: The next() method uses the type of the iterator's items as its return value. This type is referred to as T in the table. next()"
  },
  {
    "document": "Java Errors and Exception Types Errors and Exception Types The table below shows a list of common Error and Exception types in Java: Error Exception null"
  },
  {
    "document": "Java Examples Java Syntax Java Comments Java Variables Java Data Types Java Type Casting Java Operators Java Strings Java Math Java Booleans Java If...Else (Conditions) Java Switch Java Loops Java Arrays Java Methods Java Classes and Objects Java Modifiers Java Encapsulation Java Packages Java Inheritance Java Inner Classes Java Abstraction & Interfaces Java Enums Java User Input Java Dates Java ArrayList Java HashMap Java HashSet Java Iterator Java Wrapper Classes Java Exceptions (Try...Catch) Java Regular Expressions Java Threads Java Files"
  },
  {
    "document": "Java Online Compiler Java Compiler (Editor) With our online Java compiler, you can edit Java code, and view the result in your browser. public class Main { public static void main(String[] args) { System.out.println(\"Hello World! \"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World! \"); } } Hello World! Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to create your own Java applications, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host Java applications. You can change the website's look and how it works by editing the code right in your web browser. It's easy to use and doesn't require any setup. The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your Java knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes Java, but you can use it for other languages too. New languages are added all the time: If you don't know Java, we suggest that you read our Java Tutorial from scratch. Easy Package Management Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation. Build Powerful Websites You can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share Your Website With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "Java Exercises Exercises Test your Java skills with exercises from all categories: Syntax Output Text Output Numbers Comments Variables Print Variables Multiple Variables Variable Names Data Types Numbers Boolean Types Characters Type Casting Operators Strings String Concatenation Strings and Numbers Special Characters Math Booleans If If Else Else If Short Hand If Else Switch While Loops Do While Loops For Loops Nested Loops For-Each Loops Break and Continue Arrays Arrays and Loops Multidimensional Arrays Methods Method Parameters Return Values Method Overloading Scope Recursion OOP Classes/Objects Class Attributes Class Methods Constructors Modifiers Encapsulation Packages Inheritance Polymorphism Inner Classes Abstraction Interface Enums User Input Date ArrayList LinkedList List Sorting HashMap HashSet Iterator Wrapper Classes Exceptions Regular Expressions Threads Lambda Expressions Advanced Sorting Files Create and Write to Files Read Files Delete Files Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Java Quiz You can test your Java skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Java. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Java Quiz â¯ If you don't know Java, we suggest that you read our Java Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Java Server Create Java Server Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "Java Syllabus Introduction The W3Schools Java Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of Java. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn Java step by step, from the introduction to creating your first application with Java. Get Started With Java Â» Learning Outcomes Note: Are you a teacher teaching Java? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are Java Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn Java for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment Java, like any other coding language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit Java code and view the result. Example public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } Try it Yourself Â» If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Java code and other backend languages. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account Java Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The Java exam is a test that summarizes the W3Schools Java syllabus. After passing the exam you get the \"Certified Java Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach Java? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "Java Study Plan Introduction The Java study plan helps you teach your students Java step-by-step. Creating a study plan for Java is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Java to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach Java. The Java training materials is available for you to include and use in your study plan: Java Syllabus With the Java Syllabus, your students will start with the basics, like understanding variables, data types, and simple object-oriented programming concepts, and move to more advanced topics, like working with classes, inheritance, and handling exceptions. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about Java Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 5-week Java study plan could look like: Image of Sample Java study plan: Ready to get started? Start with Java Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach Java programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "W3Schools Java Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "JavaScript Tutorial Learn JavaScript JavaScript is the world's most popular programming language. JavaScript is the programming language of the Web. JavaScript is easy to learn. This tutorial will teach you JavaScript from basic to advanced. Examples in Each Chapter With our \"Try it Yourself\" editor, you can edit the source code and view the result. Example My First JavaScript  Try it Yourself Â» Use the Menu We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign â°. Learn by Examples Examples are better than 1000 words. Examples are often easier to understand than text explanations. This tutorial supplements all explanations with clarifying \"Try it Yourself\" examples. If you try all the examples, you will learn a lot about JavaScript, in a very short time! Why Study JavaScript? JavaScript is one of the 3 languages all web developers must learn: 1. HTML to define the content of web pages 2. CSS to specify the layout of web pages 3. JavaScript to program the behavior of web pages This tutorial covers every version of JavaScript: Learning Speed In this tutorial, the learning speed is your choice. Everything is up to you. If you are struggling, take a break, or re-read the material. Always make sure you understand all the \"Try-it-Yourself\" examples. The only way to become a clever programmer is to: Practice. Practice. Practice. Code. Code. Code ! Commonly Asked Questions You don't have to get or download JavaScript. JavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone. JavaScript is free to use for everyone. JavaScript Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all JavaScript Exercises JavaScript Quiz Test Test your JavaScript skills at W3Schools! Start JavaScript Quiz! Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. JavaScript References W3Schools maintains a complete JavaScript reference, including all HTML and browser objects. The reference contains examples for all properties, methods and events, and is continuously updated according to the latest web standards. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "JavaScript Introduction What is JavaScript? JavaScript is the programming language of the web. It can update and change both HTML and CSS. It can calculate, manipulate and validate data. Why Study JavaScript? JavaScript is one of the 3 languages all web developers must learn: 1. HTML to define the content of web pages 2. CSS to specify the layout of web pages 3. JavaScript to program the behavior of web pages JavaScript Can Change HTML Content One of many JavaScript HTML methods is getElementById(). getElementById() The example below \"finds\" an HTML element (with id=\"demo\"), and changes the element content (innerHTML) to \"Hello JavaScript\": Example JavaScript accepts both double and single quotes: Example JavaScript Can Change HTML Attribute Values In this example JavaScript changes the value of the src (source) attribute of an <img> tag: src <img> The Light Bulb Try it Yourself Â» JavaScript Can Change HTML Styles (CSS) Changing the style of an HTML element, is a variant of changing an HTML attribute: Example JavaScript Can Hide HTML Elements Hiding HTML elements can be done by changing the display style: display Example JavaScript Can Show HTML Elements Showing hidden HTML elements can also be done by changing the display style: display Example Did You Know? JavaScript and Java are completely different languages, both in concept and design. JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997. ECMA-262 is the official name of the standard. ECMAScript is the official name of the language. Video: JavaScript Introduction"
  },
  {
    "document": "JavaScript Where To The <script> Tag In HTML, JavaScript code is inserted between <script> and </script> tags. <script> </script> Example Try it Yourself Â» Old JavaScript examples may use a type attribute: <script type=\"text/javascript\">. The type attribute is not required. JavaScript is the default scripting language in HTML. JavaScript Functions and Events A JavaScript function is a block of JavaScript code, that can be executed when \"called\" for. function For example, a function can be called when an event occurs, like when the user clicks a button. You will learn much more about functions and events in later chapters. JavaScript in <head> or <body> You can place any number of scripts in an HTML document. Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both. <body> <head> JavaScript in <head> In this example, a JavaScript function is placed in the <head> section of an HTML page. function <head> The function is invoked (called) when a button is clicked: Example <h2>Demo JavaScript in Head</h2> <p id=\"demo\">A Paragraph</p><button type=\"button\" onclick=\"myFunction()\">Try it</button> </body> </html> JavaScript in <body> In this example, a JavaScript function is placed in the <body> section of an HTML page. function <body> The function is invoked (called) when a button is clicked: Example Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display. External JavaScript Scripts can also be placed in external files: External file: myScript.js External scripts are practical when the same code is used in many different web pages. JavaScript files have the file extension .js. To use an external script, put the name of the script file in the src (source) attribute of a <script> tag: src <script> Example You can place an external script reference in <head> or <body> as you like. <head> <body> The script will behave as if it was located exactly where the <script> tag is located. <script> External scripts cannot contain <script> tags. <script> External JavaScript Advantages Placing scripts in external files has some advantages: To add several script files to one page - use several script tags: Example External References An external script can be referenced in 3 different ways: This example uses a full URL to link to myScript.js: Example Try it Yourself Â» This example uses a file path to link to myScript.js: Example Try it Yourself Â» This example uses no path to link to myScript.js: Example Try it Yourself Â» You can read more about file paths in the chapter HTML File Paths. Video: JavaScript Where to?"
  },
  {
    "document": "JavaScript Output JavaScript Display Possibilities JavaScript can \"display\" data in different ways: innerHTML innerText document.write() window.alert() console.log() Using innerHTML To access an HTML element, you can use the document.getElementById(id) method. document.getElementById(id) Use the id attribute to identify the HTML element. id Then use the innerHTML property to change the HTML content of the HTML element: innerHTML Example Note Changing the innerHTML property of an HTML element is the most common way to display data in HTML. Using innerText To access an HTML element, use the document.getElementById(id) method. document.getElementById(id) Then use the innerText property to change the inner text of the HTML element: innerText Example Note Use innerHTML when you want to change an HTML element. Use innerText when you only want to change the plain text. Using document.write() For testing purposes, it is convenient to use document.write(): document.write() Example Using document.write() after an HTML document is loaded, will delete all existing HTML: Example The document.write() method should only be used for testing. Using window.alert() You can use an alert box to display data: Example You can skip the window keyword. window In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional: window Example Using console.log() For debugging purposes, you can call the console.log() method in the browser to display data. console.log() You will learn more about debugging in a later chapter. Example JavaScript Print JavaScript does not have any print object or print methods. You cannot access output devices from JavaScript. The only exception is that you can call the window.print() method in the browser to print the content of the current window. window.print() Example Video: JavaScript Output"
  },
  {
    "document": "JavaScript Statements Statements Example JavaScript Programs A computer program is a list of \"instructions\" to be \"executed\" by a computer. In a programming language, these programming instructions are called statements. A JavaScript program is a list of programming statements. In HTML, JavaScript programs are executed by the web browser. JavaScript Statements JavaScript statements are composed of: Values, Operators, Expressions, Keywords, and Comments. This statement tells the browser to write \"Hello Dolly.\" inside an HTML element with id=\"demo\": Example Most JavaScript programs contain many JavaScript statements. The statements are executed, one by one, in the same order as they are written. JavaScript programs (and JavaScript statements) are often called JavaScript code. Semicolons ; Semicolons separate JavaScript statements. Add a semicolon at the end of each executable statement: Examples When separated by semicolons, multiple statements on one line are allowed: On the web, you might see examples without semicolons. Ending statements with semicolon is not required, but highly recommended. JavaScript White Space JavaScript ignores multiple spaces. You can add white space to your script to make it more readable. The following lines are equivalent: A good practice is to put spaces around operators ( = + - * / ): JavaScript Line Length and Line Breaks For best readability, programmers often like to avoid code lines longer than 80 characters. If a JavaScript statement does not fit on one line, the best place to break it is after an operator: Example JavaScript Code Blocks JavaScript statements can be grouped together in code blocks, inside curly brackets {...}. The purpose of code blocks is to define statements to be executed together. One place you will find statements grouped together in blocks, is in JavaScript functions: Example In this tutorial we use 2 spaces of indentation for code blocks. You will learn more about functions later in this tutorial. JavaScript Keywords JavaScript statements often start with a keyword to identify the JavaScript action to be performed. Our Reserved Words Reference lists all JavaScript keywords. Here is a list of some of the keywords you will learn about in this tutorial: JavaScript keywords are reserved words. Reserved words cannot be used as names for variables. Video: JavaScript Statements"
  },
  {
    "document": "JavaScript Syntax JavaScript syntax is the set of rules, how JavaScript programs are constructed: JavaScript Values The JavaScript syntax defines two types of values: Fixed values are called Literals. Variable values are called Variables. JavaScript Literals The two most important syntax rules for fixed values are: 1. Numbers are written with or without decimals: 2. Strings are text, written within double or single quotes: JavaScript Variables In a programming language, variables are used to store data values. JavaScript uses the keywords var, let and const to declare variables. var let const An equal sign is used to assign values to variables. In this example, x is defined as a variable. Then, x is assigned (given) the value 6: JavaScript Operators JavaScript uses arithmetic operators ( + - * / ) to compute values: + - * / JavaScript uses an assignment operator ( = ) to assign values to variables: = JavaScript Expressions An expression is a combination of values, variables, and operators, which computes to a value. The computation is called an evaluation. For example, 5 * 10 evaluates to 50: Expressions can also contain variable values: The values can be of various types, such as numbers and strings. For example, \"John\" + \" \" + \"Doe\", evaluates to \"John Doe\": JavaScript Keywords JavaScript keywords are used to identify actions to be performed. The let keyword tells the browser to create variables: let The var keyword also tells the browser to create variables: var In these examples, using var or let will produce the same result. var let You will learn more about var and let later in this tutorial. var let JavaScript Comments Not all JavaScript statements are \"executed\". Code after double slashes // or between /* and */ is treated as a comment. // /* */ Comments are ignored, and will not be executed: You will learn more about comments in a later chapter. JavaScript Identifiers / Names Identifiers are JavaScript names. Identifiers are used to name variables and keywords, and functions. The rules for legal names are the same in most programming languages. A JavaScript name must begin with: Subsequent characters may be letters, digits, underscores, or dollar signs. Note Numbers are not allowed as the first character in names. This way JavaScript can easily distinguish identifiers from numbers. JavaScript is Case Sensitive All JavaScript identifiers are case sensitive. The variables lastName and lastname, are two different variables: lastName lastname JavaScript does not interpret LET or Let as the keyword let. JavaScript and Camel Case Historically, programmers have used different ways of joining multiple words into one variable name: Hyphens: first-name, last-name, master-card, inter-city. Hyphens are not allowed in JavaScript. They are reserved for subtractions. Underscore: first_name, last_name, master_card, inter_city. Upper Camel Case (Pascal Case): FirstName, LastName, MasterCard, InterCity. Lower Camel Case: JavaScript programmers tend to use camel case that starts with a lowercase letter: firstName, lastName, masterCard, interCity. JavaScript Character Set JavaScript uses the Unicode character set."
  },
  {
    "document": "Unicode covers (almost) all the characters, punctuations, and symbols in the world. For a closer look, please study our Complete Unicode Reference. Video: JavaScript Syntax â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Lower Camel Case: JavaScript programmers tend to use camel case that starts with a lowercase letter: firstName, lastName, masterCard, interCity. JavaScript Character Set JavaScript uses the Unicode character set. Unicode covers (almost) all the characters, punctuations, and symbols in the world. For a closer look, please study our Complete Unicode Reference. Video: JavaScript Syntax"
  },
  {
    "document": "JavaScript Comments JavaScript comments can be used to explain JavaScript code, and to make it more readable. JavaScript comments can also be used to prevent execution, when testing alternative code. Single Line Comments Single line comments start with //. // Any text between // and the end of the line will be ignored by JavaScript (will not be executed). // This example uses a single-line comment before each code line: Example This example uses a single line comment at the end of each line to explain the code: Example Multi-line Comments Multi-line comments start with /* and end with */. /* */ Any text between /* and */ will be ignored by JavaScript. /* */ This example uses a multi-line comment (a comment block) to explain the code: Example It is most common to use single line comments.Block comments are often used for formal documentation. Using Comments to Prevent Execution Using comments to prevent execution of code is suitable for code testing. Adding // in front of a code line changes the code lines from an executable line to a comment. // This example uses // to prevent execution of one of the code lines: Example This example uses a comment block to prevent execution of multiple lines: Example Video: JavaScript Comments"
  },
  {
    "document": "JavaScript Variables Variables are Containers for Storing Data JavaScript Variables can be declared in 4 ways: var let const In this first example, x, y, and z are undeclared variables. x y z They are automatically declared when first used: Example Note It is considered good programming practice to always declare variables before use. From the examples you can guess: Example using var Note The var keyword was used in all JavaScript code from 1995 to 2015. var The let and const keywords were added to JavaScript in 2015. let const The var keyword should only be used in code written for older browsers. var Example using let Example using const Mixed Example The two variables price1 and price2 are declared with the const keyword. price1 price2 const These are constant values and cannot be changed. The variable total is declared with the let keyword. total let The value total can be changed. total When to Use var, let, or const? 1. Always declare variables 2. Always use const if the value should not be changed const 3. Always use const if the type should not be changed (Arrays and Objects) const 4. Only use let if you can't use const let const 5. Only use var if you MUST support old browsers. var Just Like Algebra Just like in algebra, variables hold values: Just like in algebra, variables are used in expressions: From the example above, you can guess that the total is calculated to be 11. Note Variables are containers for storing values. JavaScript Identifiers All JavaScript variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). The general rules for constructing names for variables (unique identifiers) are: Note JavaScript identifiers are case-sensitive. The Assignment Operator In JavaScript, the equal sign (=) is an \"assignment\" operator, not an \"equal to\" operator. = This is different from algebra. The following does not make sense in algebra: In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x. (It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.) Note The \"equal to\" operator is written like == in JavaScript. == JavaScript Data Types JavaScript variables can hold numbers like 100 and text values like \"John Doe\". In programming, text values are called text strings. JavaScript can handle many types of data, but for now, just think of numbers and strings. Strings are written inside double or single quotes. Numbers are written without quotes. If you put a number in quotes, it will be treated as a text string. Example Declaring a JavaScript Variable Creating a variable in JavaScript is called \"declaring\" a variable. You declare a JavaScript variable with the var or the let keyword: var let After the declaration, the variable has no value (technically it is undefined)."
  },
  {
    "document": "undefined To assign a value to the variable, use the equal sign: You can also assign a value to the variable when you declare it: In the example below, we create a variable called carName and assign the value \"Volvo\" to it. carName Then we \"output\" the value inside an HTML paragraph with id=\"demo\": Example Note It's a good programming practice to declare all variables at the beginning of a script. One Statement, Many Variables You can declare many variables in one statement. Start the statement with let and separate the variables by comma: let Example A declaration can span multiple lines: Example Value = undefined In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input. A variable declared without a value will have the value undefined. undefined The variable carName will have the value undefined after the execution of this statement: undefined Example Re-Declaring JavaScript Variables If you re-declare a JavaScript variable declared with var, it will not lose its value. var The variable carName will still have the value \"Volvo\" after the execution of these statements: carName Example Note You cannot re-declare a variable declared with let or const. let const This will not work: JavaScript Arithmetic As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +: = + Example You can also add strings, but strings will be concatenated: Example Also try this: Example Note If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated. Now try this: Example JavaScript Dollar Sign $ Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names: Example Using the dollar sign is not very common in JavaScript, but professional programmers often use it as an alias for the main function in a JavaScript library. In the JavaScript library jQuery, for instance, the main function $ is used to select HTML elements. In jQuery $(\"p\"); means \"select all p elements\". $ $(\"p\"); JavaScript Underscore (_) Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names: Example let _lastName = \"Johnson\"; let _x = 2; let _100 = 5; Try it Yourself Â» Using the underscore is not very common in JavaScript, but a convention among professional programmers is to use it as an alias for \"private (hidden)\" variables. Video: JavaScript Variables â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names: Example Using the underscore is not very common in JavaScript, but a convention among professional programmers is to use it as an alias for \"private (hidden)\" variables. Video: JavaScript Variables"
  },
  {
    "document": "JavaScript Let The let keyword was introduced in ES6 (2015) let Variables declared with let have Block Scope let Variables declared with let must be Declared before use let Variables declared with let cannot be Redeclared in the same scope let Block Scope Before ES6 (2015), JavaScript did not have Block Scope. JavaScript had Global Scope and Function Scope. ES6 introduced the two new JavaScript keywords: let and const. let const These two keywords provided Block Scope in JavaScript: Example Variables declared inside a { } block cannot be accessed from outside the block: Global Scope Variables declared with the var always have Global Scope. var Variables declared with the var keyword can NOT have block scope: var Example Variables declared with varinside a { } block can be accessed from outside the block: var Cannot be Redeclared Variables defined with let can not be redeclared. let You can not accidentally redeclare a variable declared with let. let With let you can not do this: let Variables defined with var can be redeclared. var With var you can do this: var Redeclaring Variables Redeclaring a variable using the var keyword can impose problems. var Redeclaring a variable inside a block will also redeclare the variable outside the block: Example Redeclaring a variable using the let keyword can solve this problem. let Redeclaring a variable inside a block will not redeclare the variable outside the block: Example Difference Between var, let and const What is Good? let and const have block scope. let const let and const can not be redeclared. let const let and const must be declared before use. let const let and const does not bind to this. let const this let and const are not hoisted. let const What is Not Good? var does not have to be declared. var var is hoisted. var var binds to this. var Browser Support The let and const keywords are not supported in Internet Explorer 11 or earlier. let const The following table defines the first browser versions with full support: Redeclaring Redeclaring a JavaScript variable with var is allowed anywhere in a program: var Example With let, redeclaring a variable in the same block is NOT allowed: let Example Redeclaring a variable with let, in another block, IS allowed: let Example Let Hoisting Variables defined with var are hoisted to the top and can be initialized at any time. Meaning: You can use the variable before it is declared: Example This is OK: carName = \"Volvo\"; var carName; Try it Yourself Â» If you want to learn more about hoisting, study the chapter JavaScript Hoisting. Variables defined with let are also hoisted to the top of the block, but not initialized. Meaning: Using a let variable before it is declared will result in a ReferenceError: Example carName = \"Saab\"; let carName = \"Volvo\"; Try it Yourself Â» Video: JavaScript let â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up var Meaning: You can use the variable before it is declared: Example This is OK: If you want to learn more about hoisting, study the chapter JavaScript Hoisting. Variables defined with let are also hoisted to the top of the block, but not initialized. Meaning: Using a let variable before it is declared will result in a ReferenceError: Example carName = \"Saab\"; let carName = \"Volvo\"; Try it Yourself Â» Video: JavaScript let â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Variables defined with let are also hoisted to the top of the block, but not initialized. let Meaning: Using a let variable before it is declared will result in a ReferenceError: let ReferenceError Example Video: JavaScript let"
  },
  {
    "document": "JavaScript Const The const keyword was introduced in ES6 (2015) const Variables defined with const cannot be Redeclared const Variables defined with const cannot be Reassigned const Variables defined with const have Block Scope const Cannot be Reassigned A variable defined with the const keyword cannot be reassigned: const Example Must be Assigned JavaScript const variables must be assigned a value when they are declared: const Correct Incorrect When to use JavaScript const? Always declare a variable with const when you know that the value should not be changed. const Use const when you declare: const Constant Objects and Arrays The keyword const is a little misleading. const It does not define a constant value. It defines a constant reference to a value. Because of this you can NOT: But you CAN: Constant Arrays You can change the elements of a constant array: Example But you can NOT reassign the array: Example Constant Objects You can change the properties of a constant object: Example But you can NOT reassign the object: Example Difference Between var, let and const What is Good? let and const have block scope. let const let and const can not be redeclared. let const let and const must be declared before use. let const let and const does not bind to this. let const this let and const are not hoisted. let const What is Not Good? var does not have to be declared. var var is hoisted. var var binds to this. var Browser Support The let and const keywords are not supported in Internet Explorer 11 or earlier. let const The following table defines the first browser versions with full support: Block Scope Declaring a variable with const is similar to let when it comes to Block Scope. const let The x declared in the block, in this example, is not the same as the x declared outside the block: Example You can learn more about block scope in the chapter JavaScript Scope. Redeclaring Redeclaring a JavaScript var variable is allowed anywhere in a program: var Example Redeclaring an existing var or let variable to const, in the same scope, is not allowed: var let const Example Reassigning an existing const variable, in the same scope, is not allowed: const Example Redeclaring a variable with const, in another scope, or in another block, is allowed: const Example Hoisting Variables defined with var are hoisted to the top and can be initialized at any time. var Meaning: You can use the variable before it is declared: Example This is OK: If you want to learn more about hoisting, study the chapter JavaScript Hoisting. Variables defined with const are also hoisted to the top, but not initialized. Meaning: Using a const variable before it is declared will result in a ReferenceError: Example alert (carName); const carName = \"Volvo\"; Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up Variables defined with const are also hoisted to the top, but not initialized. const Meaning: Using a const variable before it is declared will result in a ReferenceError: const ReferenceError Example"
  },
  {
    "document": "JavaScript Operators Javascript operators are used to perform different types of mathematical and logical computations. Examples: The Assignment Operator = assigns values The Addition Operator + adds values The Multiplication Operator * multiplies values The Comparison Operator > compares values JavaScript Assignment The Assignment Operator (=) assigns a value to a variable: = Assignment Examples JavaScript Addition The Addition Operator (+) adds numbers: + Adding JavaScript Multiplication The Multiplication Operator (*) multiplies numbers: * Multiplying Types of JavaScript Operators There are different types of JavaScript operators: JavaScript Arithmetic Operators Arithmetic Operators are used to perform arithmetic on numbers: Arithmetic Operators Example Note Arithmetic operators are fully described in the JS Arithmetic chapter. JavaScript Assignment Operators Assignment operators assign values to JavaScript variables. The Addition Assignment Operator (+=) adds a value to a variable. += Assignment Note Assignment operators are fully described in the JS Assignment chapter. JavaScript Comparison Operators Note Comparison operators are fully described in the JS Comparisons chapter. JavaScript String Comparison All the comparison operators above can also be used on strings: Example Note that strings are compared alphabetically: Example JavaScript String Addition The + can also be used to add (concatenate) strings: + Example The += assignment operator can also be used to add (concatenate) strings: += Example The result of text1 will be: What a very nice day Note When used on strings, the + operator is called the concatenation operator. Adding Strings and Numbers Adding two numbers, will return the sum as a number like 5 + 5 = 10. Adding a number and a string, will return the sum as a concatenated string like 5 + \"5\" = \"55\". Example The result of x, y, and z will be: 10 55 Hello5 Note If you add a number and a string, the result will be a string! JavaScript Logical Operators Note Logical operators are fully described in the JS Comparisons chapter. JavaScript Type Operators Note Type operators are fully described in the JS Type Conversion chapter. JavaScript Bitwise Operators Bit operators work on 32 bits numbers. The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers. Because of this, in JavaScript, ~ 5 will not return 10. It will return -6. ~00000000000000000000000000000101 will return 11111111111111111111111111111010 Bitwise operators are fully described in the JS Bitwise chapter."
  },
  {
    "document": "JavaScript Arithmetic JavaScript Arithmetic Operators Arithmetic operators perform arithmetic on numbers (literals or variables). Arithmetic Operations A typical arithmetic operation operates on two numbers. The two numbers can be literals: Example or variables: Example or expressions: Example Operators and Operands The numbers (in an arithmetic operation) are called operands. The operation (to be performed between the two operands) is defined by an operator. Adding The addition operator (+) adds numbers: + Example Subtracting The subtraction operator (-) subtracts numbers. - Example Multiplying The multiplication operator (*) multiplies numbers. * Example Dividing The division operator (/) divides numbers. / Example Remainder The modulus operator (%) returns the division remainder. % Example In arithmetic, the division of two integers produces a quotient and a remainder. In mathematics, the result of a modulo operation is the remainder of an arithmetic division. Incrementing The increment operator (++) increments numbers. ++ Example Decrementing The decrement operator (--) decrements numbers. -- Example Exponentiation The exponentiation operator (**) raises the first operand to the power of the second operand. ** Example x ** y produces the same result as Math.pow(x,y): Math.pow(x,y) Example Operator Precedence Operator precedence describes the order in which operations are performed in an arithmetic expression. Example Is the result of example above the same as 150 * 3, or is it the same as 100 + 150? Is the addition or the multiplication done first? As in traditional school mathematics, the multiplication is done first. Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-). * / + - And (as in school mathematics) the precedence can be changed by using parentheses. When using parentheses, the operations inside the parentheses are computed first: Example When many operations have the same precedence (like addition and subtraction or multiplication and division), they are computed from left to right: Examples Note For a full list of operator precedence values go to: JavaScript Operator Precedence Values."
  },
  {
    "document": "JavaScript Assignment JavaScript Assignment Operators Assignment operators assign values to JavaScript variables. Shift Assignment Operators Bitwise Assignment Operators Logical Assignment Operators Note The Logical assignment operators are ES2020. The = Operator The Simple Assignment Operator assigns a value to a variable. Simple Assignment Examples The += Operator The Addition Assignment Operator adds a value to a variable. Addition Assignment Examples The -= Operator The Subtraction Assignment Operator subtracts a value from a variable. Subtraction Assignment Example The *= Operator The Multiplication Assignment Operator multiplies a variable. Multiplication Assignment Example The **= Operator The Exponentiation Assignment Operator raises a variable to the power of the operand. Exponentiation Assignment Example The /= Operator The Division Assignment Operator divides a variable. Division Assignment Example The %= Operator The Remainder Assignment Operator assigns a remainder to a variable. Remainder Assignment Example The <<= Operator The Left Shift Assignment Operator left shifts a variable. Left Shift Assignment Example The >>= Operator The Right Shift Assignment Operator right shifts a variable (signed). Right Shift Assignment Example The >>>= Operator The Unsigned Right Shift Assignment Operator right shifts a variable (unsigned). Unsigned Right Shift Assignment Example The &= Operator The Bitwise AND Assignment Operator does a bitwise AND operation on two operands and assigns the result to the the variable. Bitwise AND Assignment Example The |= Operator The Bitwise OR Assignment Operator does a bitwise OR operation on two operands and assigns the result to the variable. Bitwise OR Assignment Example The ^= Operator The Bitwise XOR Assignment Operator does a bitwise XOR operation on two operands and assigns the result to the variable. Bitwise XOR Assignment Example The &&= Operator The Logical AND assignment operator is used between two values. If the first value is true, the second value is assigned. Logical AND Assignment Example The &&= operator is an ES2020 feature. &&= The ||= Operator The Logical OR assignment operator is used between two values. If the first value is false, the second value is assigned. Logical OR Assignment Example The ||= operator is an ES2020 feature. ||= The ? ?= Operator The Nullish coalescing assignment operator is used between two values. If the first value is undefined or null, the second value is assigned. Nullish Coalescing Assignment Example The ? ?= operator is an ES2020 feature. ? ?="
  },
  {
    "document": "JavaScript Data Types JavaScript has 8 Datatypes String Number Bigint Boolean Undefined Null Symbol Object The Object Datatype The object data type can contain both built-in objects, and user defined objects: Built-in object types can be: objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more. Examples Note A JavaScript variable can hold any type of data. The Concept of Data Types In programming, data types is an important concept. To be able to operate on variables, it is important to know something about the type. Without data types, a computer cannot safely solve this: Does it make any sense to add \"Volvo\" to sixteen? Will it produce an error or will it produce a result? JavaScript will treat the example above as: Note When adding a number and a string, JavaScript will treat the number as a string. Example Example JavaScript evaluates expressions from left to right. Different sequences can produce different results: JavaScript: Result: 20Volvo JavaScript: Result: Volvo164 In the first example, JavaScript treats 16 and 4 as numbers, until it reaches \"Volvo\". In the second example, since the first operand is a string, all operands are treated as strings. JavaScript Types are Dynamic JavaScript has dynamic types. This means that the same variable can be used to hold different data types: Example JavaScript Strings A string (or a text string) is a series of characters like \"John Doe\". Strings are written with quotes. You can use single or double quotes: Example You can use quotes inside a string, as long as they don't match the quotes surrounding the string: Example You will learn more about strings later in this tutorial. JavaScript Numbers All JavaScript numbers are stored as decimal numbers (floating point). Numbers can be written with, or without decimals: Example Exponential Notation Extra large or extra small numbers can be written with scientific (exponential) notation: Example Note Most programming languages have many number types: Whole numbers (integers): byte (8-bit), short (16-bit), int (32-bit), long (64-bit) Real numbers (floating-point): float (32-bit), double (64-bit). Javascript numbers are always one type: double (64-bit floating point). You will learn more about numbers later in this tutorial. JavaScript BigInt All JavaScript numbers are stored in a 64-bit floating-point format. JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number. Example You will learn more about BigInt later in this tutorial. JavaScript Booleans Booleans can only have two values: true or false. true false Example Booleans are often used in conditional testing. You will learn more about booleans later in this tutorial. JavaScript Arrays JavaScript arrays are written with square brackets. Array items are separated by commas. The following code declares (creates) an array called cars, containing three items (car names): cars Example Array indexes are zero-based, which means the first item is [0], second is [1], and so on. You will learn more about arrays later in this tutorial."
  },
  {
    "document": "JavaScript Objects JavaScript objects are written with curly braces {}. {} Object properties are written as name:value pairs, separated by commas. Example The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor. You will learn more about objects later in this tutorial. The typeof Operator You can use the JavaScript typeof operator to find the type of a JavaScript variable. typeof The typeof operator returns the type of a variable or an expression: typeof Example Example You will learn more about typeof later in this tutorial. Undefined In JavaScript, a variable without a value, has the value undefined. The type is also undefined. undefined undefined Example Any variable can be emptied, by setting the value to undefined. The type will also be undefined. undefined undefined Example Empty Values An empty value has nothing to do with undefined. undefined An empty string has both a legal value and a type. Example"
  },
  {
    "document": "JavaScript Functions A JavaScript function is a block of code designed to perform a particular task. A JavaScript function is executed when \"something\" invokes it (calls it). Example JavaScript Function Syntax A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses (). function Function names can contain letters, digits, underscores, and dollar signs (same rules as variables). The parentheses may include parameter names separated by commas: (parameter1, parameter2, ...) The code to be executed, by the function, is placed inside curly brackets: {} Function parameters are listed inside the parentheses () in the function definition. Function arguments are the values received by the function when it is invoked. Inside the function, the arguments (the parameters) behave as local variables. Function Invocation The code inside the function will execute when \"something\" invokes (calls) the function: You will learn a lot more about function invocation later in this tutorial. Function Return When JavaScript reaches a return statement, the function will stop executing. return If the function was invoked from a statement, JavaScript will \"return\" to execute the code after the invoking statement. Functions often compute a return value. The return value is \"returned\" back to the \"caller\": Example Calculate the product of two numbers, and return the result: Why Functions? With functions you can reuse code You can write code that can be used many times. You can use the same code with different arguments, to produce different results. The () Operator The () operator invokes (calls) the function: Example Convert Fahrenheit to Celsius: Accessing a function with incorrect parameters can return an incorrect answer: Example Accessing a function without () returns the function and not the function result: Example Note As you see from the examples above, toCelsius refers to the function object, and toCelsius() refers to the function result. toCelsius toCelsius() Functions Used as Variable Values Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations. Example Instead of using a variable to store the return value of a function: You can use the function directly, as a variable value: You will learn a lot more about functions later in this tutorial. Local Variables Variables declared within a JavaScript function, become LOCAL to the function. Local variables can only be accessed from within the function. Example Since local variables are only recognized inside their functions, variables with the same name can be used in different functions. Local variables are created when a function starts, and deleted when the function is completed."
  },
  {
    "document": "JavaScript Objects Real Life Objects In real life, objects are things like: houses, cars, people, animals, or any other subjects. Here is a car object example: Object Properties A real life car has properties like weight and color: car.name = Fiat, car.model = 500, car.weight = 850kg, car.color = white. Car objects have the same properties, but the values differ from car to car. Object Methods A real life car has methods like start and stop: car.start(), car.drive(), car.brake(), car.stop(). Car objects have the same methods, but the methods are performed at different times. JavaScript Variables JavaScript variables are containers for data values. This code assigns a simple value (Fiat) to a variable named car: Example JavaScript Objects Objects are variables too. But objects can contain many values. This code assigns many values (Fiat, 500, white) to an object named car: Example Note: It is a common practice to declare objects with the const keyword. Learn more about using const with objects in the chapter: JS Const. JavaScript Object Definition How to Define a JavaScript Object new JavaScript Object Literal An object literal is a list of name:value pairs inside curly braces {}. Note: name:value pairs are also called key:value pairs. object literals are also called object initializers. Creating a JavaScript Object These examples create a JavaScript object with 4 properties: Examples Spaces and line breaks are not important. An object initializer can span multiple lines: This example creates an empty JavaScript object, and then adds 4 properties: Using the new Keyword This example create a new JavaScript object using new Object(), and then adds 4 properties: new Object() Example Note: The examples above do exactly the same. But, there is no need to use new Object(). new Object() For readability, simplicity and execution speed, use the object literal method. Object Properties The named values, in JavaScript objects, are called properties. Objects written as name value pairs are similar to: Accessing Object Properties You can access object properties in two ways: Examples JavaScript Object Methods Methods are actions that can be performed on objects. Methods are function definitions stored as property values. Example In the example above, this refers to the person object: this this.firstName means the firstName property of person. this.lastName means the lastName property of person. In JavaScript, Objects are King. Objects are containers for Properties and Methods. Properties are named Values. Methods are Functions stored as Properties. Properties can be primitive values, functions, or even other objects. In JavaScript, almost \"everything\" is an object. All JavaScript values, except primitives, are objects. JavaScript Primitives A primitive value is a value that has no properties or methods. 3.14 is a primitive value A primitive data type is data that has a primitive value. JavaScript defines 7 types of primitive data types: string number boolean null undefined symbol bigint Immutable Primitive values are immutable (they are hardcoded and cannot be changed). if x = 3.14, you can change the value of x, but you cannot change the value of 3.14."
  },
  {
    "document": "JavaScript Objects are Mutable Objects are mutable: They are addressed by reference, not by value. If person is an object, the following statement will not create a copy of person: The object x is not a copy of person. The object x is person. The object x and the object person share the same memory address. Any changes to x will also change person: Example Note: You will learn a lot more about objects in the following chapters."
  },
  {
    "document": "JavaScript Object Properties An Object is an Unordered Collection of Properties Properties are the most important part of JavaScript objects. Properties can be changed, added, deleted, and some are read only. Accessing JavaScript Properties The syntax for accessing the property of an object is: or or Examples Adding New Properties You can add new properties to an existing object by simply giving it a value: Example Deleting Properties The delete keyword deletes a property from an object: delete Example or delete person[\"age\"]; Example Note: The delete keyword deletes both the value of the property and the property itself. delete After deletion, the property cannot be used before it is added back again. Nested Objects Property values in an object can be other objects: Example You can access nested objects using the dot notation or the bracket notation: Examples Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Object Methods Object methods are actions that can be performed on objects. A method is a function definition stored as a property value. Example In the example above, this refers to the person object: this this.firstName means the firstName property of person. this.lastName means the lastName property of person. Accessing Object Methods You access an object method with the following syntax: If you invoke the fullName property with (), it will execute as a function: Example If you access the fullName property without (), it will return the function definition: Example Adding a Method to an Object Adding a new method to an object is easy: Example Using JavaScript Methods This example uses the JavaScript toUpperCase() method to convert a text to uppercase: toUpperCase() Example Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Display Objects How to Display JavaScript Objects? Displaying a JavaScript object will output [object Object]. Example Some solutions to display JavaScript objects are: Displaying the Object Properties by name Displaying the Object Properties in a Loop Displaying the Object using Object.values() Displaying the Object using JSON.stringify() Displaying Object Properties The properties of an object can be displayed as a string: Example Displaying Properties in a Loop The properties of an object can be collected in a loop: Example Note: You must use person[x] in the loop. person.x will not work (Because x is the loop variable). Using Object.values() Object.values() creates an array from the property values: Object.values() Using Object.entries() Object.entries() makes it simple to use objects in loops: Object.entries() Example Using JSON.stringify() JavaScript objects can be converted to a string with JSON method JSON.stringify(). JSON.stringify() JSON.stringify() is included in JavaScript and supported in all major browsers. JSON.stringify() Note: The result will be a string written in JSON notation: {\"name\":\"John\",\"age\":50,\"city\":\"New York\"} Example Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Object Constructors Object Constructor Functions Sometimes we need to create many objects of the same type. To create an object type we use an object constructor function. It is considered good practice to name constructor functions with an upper-case first letter. Object Type Person Note: In the constructor function, this has no value. this The value of this will become the new object when a new object is created. this See Also: The JavaScript this Tutorial Now we can use new Person() to create many new Person objects: new Person() Example Property Default Values A value given to a property will be a default value for all objects created by the constructor: Example Adding a Property to an Object Adding a property to a created object is easy: Example Note: The new property will be added to myFather. Not to any other Person Objects. Adding a Property to a Constructor You can NOT add a new property to an object constructor: Example To add a new property, you must add it to the constructor function prototype: Example Constructor Function Methods A constructor function can also have methods: Example Adding a Method to an Object Adding a method to a created object is easy: Example Note: The new method will be added to myMother. Not to any other Person Objects. Adding a Method to a Constructor You cannot add a new method to an object constructor function. This code will produce a TypeError: Example TypeError: myMother.changeName is not a function TypeError: myMother.changeName is not a function Adding a new method must be done to the constructor function prototype: Example Note: The changeName() function assigns the value of name to the person's lastName property, substituting this with myMother. name lastName this myMother Built-in JavaScript Constructors JavaScript has built-in constructors for all native objects: Note: The Math() object is not in the list. Math is a global object. The new keyword cannot be used on Math. Math() Math new Math Did You Know? Use object literals {} instead of new Object(). {} new Object() Use array literals [] instead of new Array(). [] new Array() Use pattern literals /()/ instead of new RegExp(). /()/ new RegExp() Use function expressions () {} instead of new Function(). () {} new Function() Example Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Events HTML events are \"things\" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can \"react\" on these events. HTML Events An HTML event can be something the browser does, or something a user does. Here are some examples of HTML events: Often, when events happen, you may want to do something. JavaScript lets you execute code when events are detected. HTML allows event handler attributes, with JavaScript code, to be added to HTML elements. With single quotes: With double quotes: In the following example, an onclick attribute (with code), is added to a <button> element: onclick <button> Example In the example above, the JavaScript code changes the content of the element with id=\"demo\". In the next example, the code changes the content of its own element (using this.innerHTML): this.innerHTML Example JavaScript code is often several lines long. It is more common to see event attributes calling functions: Example Common HTML Events Here is a list of some common HTML events: The list is much longer: W3Schools JavaScript Reference HTML DOM Events. JavaScript Event Handlers Event handlers can be used to handle and verify user input, user actions, and browser actions: Many different methods can be used to let JavaScript work with events: You will learn a lot more about events and event handlers in the HTML DOM chapters."
  },
  {
    "document": "JavaScript Strings Strings are for storing text Strings are written with quotes Using Quotes A JavaScript string is zero or more characters written inside quotes. Example You can use single or double quotes: Example Note Strings created with single or double quotes work the same. There is no difference between the two. Quotes Inside Quotes You can use quotes inside a string, as long as they don't match the quotes surrounding the string: Example Template Strings Templates were introduced with ES6 (JavaScript 2016). Templates are strings enclosed in backticks (`This is a template string`). Templates allow single and double quotes inside a string: Example Try it Yourself Â» Note Templates are not supported in Internet Explorer. String Length To find the length of a string, use the built-in length property: length Example Escape Characters Because strings must be written within quotes, JavaScript will misunderstand this string: The string will be chopped to \"We are the so-called \". To solve this problem, you can use an backslash escape character. The backslash escape character (\\) turns special characters into string characters: \\ Examples \\\" inserts a double quote in a string: let text = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» \\' inserts a single quote in a string: let text= 'It\\'s alright. '; Try it Yourself Â» \\\\ inserts a backslash in a string: let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» let text = \"We are the so-called \\\"Vikings\\\" from the north. \"; Try it Yourself Â» \\' inserts a single quote in a string: let text= 'It\\'s alright. '; Try it Yourself Â» \\\\ inserts a backslash in a string: let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» \\' inserts a single quote in a string: let text= 'It\\'s alright. '; Try it Yourself Â» \\\\ inserts a backslash in a string: let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» let text= 'It\\'s alright. '; Try it Yourself Â» \\\\ inserts a backslash in a string: let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» \\\\ inserts a backslash in a string: let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» let text = \"The character \\\\ is called backslash. \"; Try it Yourself Â» Six other escape sequences are valid in JavaScript: Note The 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Lines For readability, programmers often like to avoid long code lines. A safe way to break up a statement is after an operator: Example A safe way to break up a string is by using string addition: Example Template Strings Templates were introduced with ES6 (JavaScript 2016). Templates are strings enclosed in backticks (`This is a template string`)."
  },
  {
    "document": "Templates allow multiline strings: Example Try it Yourself Â» Note Templates are not supported in Internet Explorer. JavaScript Strings as Objects Normally, JavaScript strings are primitive values, created from literals: But strings can also be defined as objects with the keyword new: new Example Do not create String objects. The new keyword complicates the code and slows down execution speed. new String objects can produce unexpected results: When using the == operator, x and y are equal: == When using the === operator, x and y are not equal: let x = \"John\"; let y = new String(\"John\"); Try it Yourself Â» === Note the difference between (x==y) and (x===y). (x==y) (x===y) (x == y) true or false? (x == y) (x === y) true or false? (x === y) Comparing two JavaScript objects always returns false. Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods."
  },
  {
    "document": "JavaScript String Methods Basic String Methods Javascript strings are primitive and immutable: All string methods produce a new string without altering the original string. See Also: JavaScript String Length The length property returns the length of a string: length Example Extracting String Characters There are 4 methods for extracting string characters: at(position) charAt(position) charCodeAt(position) JavaScript String charAt() The charAt() method returns the character at a specified index (position) in a string: charAt() Example JavaScript String charCodeAt() The charCodeAt() method returns the code of the character at a specified index in a string: charCodeAt() The method returns a UTF-16 code (an integer between 0 and 65535). Example JavaScript String at() ES2022 introduced the string method at(): at() Examples Get the third letter of name: Get the third letter of name: The at() method returns the character at a specified index (position) in a string. at() The at() method is supported in all modern browsers since March 2022: at() Note The at() method is a new addition to JavaScript. at() It allows the use of negative indexes while charAt() do not. charAt() myString.at(-2) charAt(myString.length-2) Browser Support at() is an ES2022 feature. at() JavaScript 2022 (ES2022) is supported in all modern browsers since March 2023: Property Access [ ] Example Note Property access might be a little unpredictable: Example Extracting String Parts There are 3 methods for extracting a part of a string: slice(start, end) substring(start, end) substr(start, length) JavaScript String slice() slice() extracts a part of a string and returns the extracted part in a new string. slice() The method takes 2 parameters: start position, and end position (end not included). Example Slice out a portion of a string from position 7 to position 13: Note JavaScript counts positions from zero. First position is 0. Second position is 1. Examples If you omit the second parameter, the method will slice out the rest of the string: If a parameter is negative, the position is counted from the end of the string: This example slices out a portion of a string from position -12 to position -6: JavaScript String substring() substring() is similar to slice(). substring() slice() The difference is that start and end values less than 0 are treated as 0 in substring(). substring() Example If you omit the second parameter, substring() will slice out the rest of the string. substring() JavaScript String substr() substr() is similar to slice(). substr() slice() The difference is that the second parameter specifies the length of the extracted part. Warning The substr() method is removed (deprecated) in the latest JavaScript standard. substr() Use substring() or slice() instead. substring() slice() Example If you omit the second parameter, substr() will slice out the rest of the string. substr() Example If the first parameter is negative, the position counts from the end of the string."
  },
  {
    "document": "Example Converting to Upper and Lower Case A string is converted to upper case with toUpperCase(): toUpperCase() A string is converted to lower case with toLowerCase(): toLowerCase() JavaScript String toUpperCase() Example JavaScript String toLowerCase() Example JavaScript String concat() concat() joins two or more strings: concat() Example The concat() method can be used instead of the plus operator. These two lines do the same: concat() Example Note All string methods return a new string. They don't modify the original string. Formally said: Strings are immutable: Strings cannot be changed, only replaced. JavaScript String trim() The trim() method removes whitespace from both sides of a string: trim() Example JavaScript String trimStart() ECMAScript 2019 added the String method trimStart() to JavaScript. The trimStart() method works like trim(), but removes whitespace only from the start of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimStart(); Try it Yourself Â» JavaScript String trimStart() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript String trimEnd() ECMAScript 2019 added the string method trimEnd() to JavaScript. The trimEnd() method works like trim(), but removes whitespace only from the end of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimEnd(); Try it Yourself Â» JavaScript String trimEnd() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript String Padding ECMAScript 2017 added two new string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string. JavaScript String padStart() The padStart() method pads a string from the start. It pads a string with another string (multiple times) until it reaches a given length. Examples Pad a string with \"0\" until it reaches the length 4: let text = \"5\"; let padded = text.padStart(4,\"0\"); Try it Yourself Â» Pad a string with \"x\" until it reaches the length 4: let text = \"5\"; let padded = text.padStart(4,\"x\"); Try it Yourself Â» Note The padStart() method is a string method. To pad a number, convert the number to a string first. See the example below. Example let numb = 5; let text = numb.toString(); let padded = text.padStart(4,\"0\"); Try it Yourself Â» Browser Support padStart() is an ECMAScript 2017 feature. ES2017 is supported in all modern browsers since September 2017: Chrome 58 Edge 15 Firefox 52 Safari 11 Opera 45 Apr 2017 Apr 2017 Mar 2017 Sep 2017 May 2017 padStart() is not supported in Internet Explorer. JavaScript String padEnd() The padEnd() method pads a string from the end. It pads a string with another string (multiple times) until it reaches a given length."
  },
  {
    "document": "Examples let text = \"5\"; let padded = text.padEnd(4,\"0\"); Try it Yourself Â» let text = \"5\"; let padded = text.padEnd(4,\"x\"); Try it Yourself Â» Note The padEnd() method is a string method. To pad a number, convert the number to a string first. See the example below. Example let numb = 5; let text = numb.toString(); let padded = text.padEnd(4,\"0\"); Try it Yourself Â» Browser Support padEnd() is an ECMAScript 2017 feature. ES2017 is supported in all modern browsers since September 2017: Chrome 58 Edge 15 Firefox 52 Safari 11 Opera 45 Apr 2017 Apr 2017 Mar 2017 Sep 2017 May 2017 padEnd() is not supported in Internet Explorer. JavaScript String repeat() The repeat() method returns a string with a number of copies of a string. The repeat() method returns a new string. The repeat() method does not change the original string. Examples Create copies of a text: let text = \"Hello world! \"; let result = text.repeat(2); Try it Yourself Â» let text = \"Hello world! \"; let result = text.repeat(4); Try it Yourself Â» Syntax string.repeat(count) Parameters Parameter Description countRequired. The number of copies wanted. Return Value Type Description StringA new string containing the copies. Browser Support repeat() is an ES6 feature (JavaScript 2015). ES6 is fully supported in all modern browsers since June 2017: Chrome 51 Edge 15 Firefox 54 Safari 10 Opera 38 May 2016 Apr 2017 Jun 2017 Sep 2016 Jun 2016 repeat() is not supported in Internet Explorer. Replacing String Content The replace() method replaces a specified value with another value in a string: Example let text = \"Please visit Microsoft! \"; let newText = text.replace(\"Microsoft\", \"W3Schools\"); Try it Yourself Â» Note The replace() method does not change the string it is called on. The replace() method returns a new string. The replace() method replaces only the first match If you want to replace all matches, use a regular expression with the /g flag set. See examples below. By default, the replace() method replaces only the first match: Example let text = \"Please visit Microsoft and Microsoft! \"; let newText = text.replace(\"Microsoft\", \"W3Schools\"); Try it Yourself Â» By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work: Example let text = \"Please visit Microsoft! \"; let newText = text.replace(\"MICROSOFT\", \"W3Schools\"); Try it Yourself Â» To replace case insensitive, use a regular expression with an /i flag (insensitive): Example let text = \"Please visit Microsoft! \"; let newText = text.replace(/MICROSOFT/i, \"W3Schools\"); Try it Yourself Â» Note Regular expressions are written without quotes. To replace all matches, use a regular expression with a /g flag (global match): Example let text = \"Please visit Microsoft and Microsoft! \"; let newText = text.replace(/Microsoft/g, \"W3Schools\"); Try it Yourself Â» Note You will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions."
  },
  {
    "document": "JavaScript String ReplaceAll() In 2021, JavaScript introduced the string method replaceAll(): Example text = text.replaceAll(\"Cats\",\"Dogs\"); text = text.replaceAll(\"cats\",\"dogs\"); Try it Yourself Â» The replaceAll() method allows you to specify a regular expression instead of a string to be replaced. If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. Example text = text.replaceAll(/Cats/g,\"Dogs\"); text = text.replaceAll(/cats/g,\"dogs\"); Try it Yourself Â» Note replaceAll() is an ES2021 feature. replaceAll() does not work in Internet Explorer. Converting a String to an Array If you want to work with a string as an array, you can convert it to an array. JavaScript String split() A string can be converted to an array with the split() method: Example text.split(\",\") // Split on commas text.split(\" \") // Split on spaces text.split(\"|\") // Split on pipe Try it Yourself Â» If the separator is omitted, the returned array will contain the whole string in index [0]. If the separator is \"\", the returned array will be an array of single characters: Example text.split(\"\") Try it Yourself Â» Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up trimStart() The trimStart() method works like trim(), but removes whitespace only from the start of a string. trimStart() trim() Example JavaScript String trimStart() is supported in all modern browsers since January 2020: trimStart() JavaScript String trimEnd() ECMAScript 2019 added the string method trimEnd() to JavaScript. The trimEnd() method works like trim(), but removes whitespace only from the end of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimEnd(); Try it Yourself Â» JavaScript String trimEnd() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript String Padding ECMAScript 2017 added two new string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string. JavaScript String padStart() The padStart() method pads a string from the start. It pads a string with another string (multiple times) until it reaches a given length. Examples Pad a string with \"0\" until it reaches the length 4: let text = \"5\"; let padded = text.padStart(4,\"0\"); Try it Yourself Â» Pad a string with \"x\" until it reaches the length 4: let text = \"5\"; let padded = text.padStart(4,\"x\"); Try it Yourself Â» Note The padStart() method is a string method. To pad a number, convert the number to a string first. See the example below. Example let numb = 5; let text = numb.toString(); let padded = text.padStart(4,\"0\"); Try it Yourself Â» Browser Support padStart() is an ECMAScript 2017 feature."
  },
  {
    "document": "ES2017 is supported in all modern browsers since September 2017: Chrome 58 Edge 15 Firefox 52 Safari 11 Opera 45 Apr 2017 Apr 2017 Mar 2017 Sep 2017 May 2017 padStart() is not supported in Internet Explorer. JavaScript String padEnd() The padEnd() method pads a string from the end. It pads a string with another string (multiple times) until it reaches a given length. Examples let text = \"5\"; let padded = text.padEnd(4,\"0\"); Try it Yourself Â» let text = \"5\"; let padded = text.padEnd(4,\"x\"); Try it Yourself Â» Note The padEnd() method is a string method. To pad a number, convert the number to a string first. See the example below. Example let numb = 5; let text = numb.toString(); let padded = text.padEnd(4,\"0\"); Try it Yourself Â» Browser Support padEnd() is an ECMAScript 2017 feature. ES2017 is supported in all modern browsers since September 2017: Chrome 58 Edge 15 Firefox 52 Safari 11 Opera 45 Apr 2017 Apr 2017 Mar 2017 Sep 2017 May 2017 padEnd() is not supported in Internet Explorer. JavaScript String repeat() The repeat() method returns a string with a number of copies of a string. The repeat() method returns a new string. The repeat() method does not change the original string. Examples Create copies of a text: let text = \"Hello world! \"; let result = text.repeat(2); Try it Yourself Â» let text = \"Hello world! \"; let result = text.repeat(4); Try it Yourself Â» Syntax string.repeat(count) Parameters Parameter Description countRequired. The number of copies wanted. Return Value Type Description StringA new string containing the copies. Browser Support repeat() is an ES6 feature (JavaScript 2015). ES6 is fully supported in all modern browsers since June 2017: Chrome 51 Edge 15 Firefox 54 Safari 10 Opera 38 May 2016 Apr 2017 Jun 2017 Sep 2016 Jun 2016 repeat() is not supported in Internet Explorer. Replacing String Content The replace() method replaces a specified value with another value in a string: Example let text = \"Please visit Microsoft! \"; let newText = text.replace(\"Microsoft\", \"W3Schools\"); Try it Yourself Â» Note The replace() method does not change the string it is called on. The replace() method returns a new string. The replace() method replaces only the first match If you want to replace all matches, use a regular expression with the /g flag set. See examples below. By default, the replace() method replaces only the first match: Example let text = \"Please visit Microsoft and Microsoft! \"; let newText = text.replace(\"Microsoft\", \"W3Schools\"); Try it Yourself Â» By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work: Example let text = \"Please visit Microsoft! \"; let newText = text.replace(\"MICROSOFT\", \"W3Schools\"); Try it Yourself Â» To replace case insensitive, use a regular expression with an /i flag (insensitive): Example let text = \"Please visit Microsoft! \"; let newText = text.replace(/MICROSOFT/i, \"W3Schools\"); Try it Yourself Â» Note Regular expressions are written without quotes."
  },
  {
    "document": "To replace all matches, use a regular expression with a /g flag (global match): Example let text = \"Please visit Microsoft and Microsoft! \"; let newText = text.replace(/Microsoft/g, \"W3Schools\"); Try it Yourself Â» Note You will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions. JavaScript String ReplaceAll() In 2021, JavaScript introduced the string method replaceAll(): Example text = text.replaceAll(\"Cats\",\"Dogs\"); text = text.replaceAll(\"cats\",\"dogs\"); Try it Yourself Â» The replaceAll() method allows you to specify a regular expression instead of a string to be replaced. If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. Example text = text.replaceAll(/Cats/g,\"Dogs\"); text = text.replaceAll(/cats/g,\"dogs\"); Try it Yourself Â» Note replaceAll() is an ES2021 feature. replaceAll() does not work in Internet Explorer. Converting a String to an Array If you want to work with a string as an array, you can convert it to an array. JavaScript String split() A string can be converted to an array with the split() method: Example text.split(\",\") // Split on commas text.split(\" \") // Split on spaces text.split(\"|\") // Split on pipe Try it Yourself Â» If the separator is omitted, the returned array will contain the whole string in index [0]. If the separator is \"\", the returned array will be an array of single characters: Example text.split(\"\") Try it Yourself Â» Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up trimEnd() The trimEnd() method works like trim(), but removes whitespace only from the end of a string. trimEnd() trim() Example JavaScript String trimEnd() is supported in all modern browsers since January 2020: trimEnd() JavaScript String Padding ECMAScript 2017 added two new string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string. padStart() padEnd() JavaScript String padStart() The padStart() method pads a string from the start. padStart() It pads a string with another string (multiple times) until it reaches a given length. Examples Pad a string with \"0\" until it reaches the length 4: Pad a string with \"x\" until it reaches the length 4: Note The padStart() method is a string method. padStart() To pad a number, convert the number to a string first. See the example below. Example Browser Support padStart() is an ECMAScript 2017 feature. padStart() ES2017 is supported in all modern browsers since September 2017: padStart() is not supported in Internet Explorer. padStart() JavaScript String padEnd() The padEnd() method pads a string from the end. padEnd() It pads a string with another string (multiple times) until it reaches a given length. Examples Note The padEnd() method is a string method. padEnd() To pad a number, convert the number to a string first. See the example below. Example Browser Support padEnd() is an ECMAScript 2017 feature."
  },
  {
    "document": "padEnd() ES2017 is supported in all modern browsers since September 2017: padEnd() is not supported in Internet Explorer. padEnd() JavaScript String repeat() The repeat() method returns a string with a number of copies of a string. repeat() The repeat() method returns a new string. repeat() The repeat() method does not change the original string. repeat() Examples Create copies of a text: Syntax Parameters Return Value Browser Support repeat() is an ES6 feature (JavaScript 2015). repeat() ES6 is fully supported in all modern browsers since June 2017: repeat() is not supported in Internet Explorer. repeat() Replacing String Content The replace() method replaces a specified value with another value in a string: replace() Example Note The replace() method does not change the string it is called on. replace() The replace() method returns a new string. replace() The replace() method replaces only the first match replace() If you want to replace all matches, use a regular expression with the /g flag set. See examples below. By default, the replace() method replaces only the first match: replace() Example Try it Yourself Â» By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work: replace() Example Try it Yourself Â» To replace case insensitive, use a regular expression with an /i flag (insensitive): /i Example Try it Yourself Â» Note Regular expressions are written without quotes. To replace all matches, use a regular expression with a /g flag (global match): /g Example Try it Yourself Â» Note You will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions. JavaScript String ReplaceAll() In 2021, JavaScript introduced the string method replaceAll(): replaceAll() Example The replaceAll() method allows you to specify a regular expression instead of a string to be replaced. replaceAll() If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. Example Note replaceAll() is an ES2021 feature. replaceAll() replaceAll() does not work in Internet Explorer. replaceAll() Converting a String to an Array If you want to work with a string as an array, you can convert it to an array. JavaScript String split() A string can be converted to an array with the split() method: split() Example If the separator is omitted, the returned array will contain the whole string in index [0]. If the separator is \"\", the returned array will be an array of single characters: Example Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods."
  },
  {
    "document": "JavaScript String Search String Search Methods See Also: JavaScript String indexOf() The indexOf() method returns the index (position) of the first occurrence of a string in a string, or it returns -1 if the string is not found: indexOf() Example Note JavaScript counts positions from zero. 0 is the first position in a string, 1 is the second, 2 is the third, ... JavaScript String lastIndexOf() The lastIndexOf() method returns the index of the last occurrence of a specified text in a string: lastIndexOf() Example Both indexOf(), and lastIndexOf() return -1 if the text is not found: indexOf() lastIndexOf() Example Both methods accept a second parameter as the starting position for the search: Example The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string. lastIndexOf() 15 Example JavaScript String search() The search() method searches a string for a string (or a regular expression) and returns the position of the match: search() Examples Did You Notice? The two methods, indexOf() and search(), are equal? indexOf() search() They accept the same arguments (parameters), and return the same value? The two methods are NOT equal. These are the differences: search() indexOf() You will learn more about regular expressions in a later chapter. JavaScript String match() The match() method returns an array containing the results of matching a string against a string (or a regular expression). match() Examples Perform a search for \"ain\": Perform a search for \"ain\": Perform a global search for \"ain\": Perform a global, case-insensitive search for \"ain\": Note If a regular expression does not include the g modifier (global search), match() will return only the first match in the string. match() Read more about regular expressions in the chapter JS RegExp. JavaScript String matchAll() The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression). matchAll() Example If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. Example If you want to search case insensitive, the insensitive flag (i) must be set: Example Notes matchAll() is an ES2020 feature. matchAll() matchAll() does not work in Internet Explorer. matchAll() JavaScript String includes() The includes() method returns true if a string contains a specified value. includes() Otherwise it returns false. false Examples Check if a string includes \"world\": Check if a string includes \"world\". Start at position 12: Notes includes() is case sensitive. includes() includes() is an ES6 feature. includes() includes() is not supported in Internet Explorer. includes() JavaScript String startsWith() The startsWith() method returns true if a string begins with a specified value. startsWith() true Otherwise it returns false: false Examples Returns true: Returns false: A start position for the search can be specified: Returns false: Returns true: Notes startsWith() is case sensitive. startsWith() startsWith() is an ES6 feature. startsWith() startsWith() is not supported in Internet Explorer."
  },
  {
    "document": "startsWith() JavaScript String endsWith() The endsWith() method returns true if a string ends with a specified value. endsWith() true Otherwise it returns false: false Examples Check if a string ends with \"Doe\": Check if the 11 first characters of a string ends with \"world\": Try it Yourself Â» Notes endsWith() is case sensitive. endsWith() endsWith() is an ES6 feature. endsWith() endsWith() is not supported in Internet Explorer. endsWith() Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods."
  },
  {
    "document": "JavaScript Template Strings String Templates Template Strings Template Literals Beloved child has many names Back-Tics Syntax Template Strings use back-ticks (``) rather than the quotes (\"\") to define a string: Example Try it Yourself Â» Quotes Inside Strings Template Strings allow both single and double quotes inside a string: Example Try it Yourself Â» Multiline Strings Template Strings allow multiline strings: Example Try it Yourself Â» Interpolation Template String provide an easy way to interpolate variables and expressions into strings. The method is called string interpolation. The syntax is: Variable Substitutions Template Strings allow variables in strings: Example Try it Yourself Â» Automatic replacing of variables with real values is called string interpolation. Expression Substitution Template Strings allow expressions in strings: Example Try it Yourself Â» Automatic replacing of expressions with real values is called string interpolation. HTML Templates Example Try it Yourself Â» Browser Support Template Strings is an ES6 feature (JavaScript 2015). Template Strings ES6 is fully supported in all modern browsers since June 2017: Template Strings is not supported in Internet Explorer. Template Strings Complete String Reference For a complete String reference, go to our: Complete JavaScript String Reference. The reference contains descriptions and examples of all string properties and methods."
  },
  {
    "document": "JavaScript Numbers JavaScript has only one type of number. Numbers can be written with or without decimals. Example Try it Yourself Â» Extra large or extra small numbers can be written with scientific (exponent) notation: Example Try it Yourself Â» JavaScript Numbers are Always 64-bit Floating Point Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc. JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard. This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63: Integer Precision Integers (numbers without a period or exponent notation) are accurate up to 15 digits. Example The maximum number of decimals is 17. Floating Precision Floating point arithmetic is not always 100% accurate: Try it Yourself Â» To solve the problem above, it helps to multiply and divide: Adding Numbers and Strings WARNING ! ! JavaScript uses the + operator for both addition and concatenation. Numbers are added. Strings are concatenated. If you add two numbers, the result will be a number: Example If you add two strings, the result will be a string concatenation: Example If you add a number and a string, the result will be a string concatenation: Example If you add a string and a number, the result will be a string concatenation: Example A common mistake is to expect this result to be 30: Example A common mistake is to expect this result to be 102030: Example The JavaScript interpreter works from left to right. First 10 + 20 is added because x and y are both numbers. Then 30 + \"30\" is concatenated because z is a string. Numeric Strings JavaScript strings can have numeric content: JavaScript will try to convert strings to numbers in all numeric operations: This will work: Try it Yourself Â» This will also work: Try it Yourself Â» And this will work: Try it Yourself Â» But this will not work: Try it Yourself Â» In the last example JavaScript uses the + operator to concatenate the strings. NaN - Not a Number NaN is a JavaScript reserved word indicating that a number is not a legal number. NaN Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number): NaN Example Try it Yourself Â» However, if the string is numeric, the result will be a number: Example You can use the global JavaScript function isNaN() to find out if a value is a not a number: isNaN() Example Watch out for NaN."
  },
  {
    "document": "If you use NaN in a mathematical operation, the result will also be NaN: NaN NaN NaN Example Or the result might be a concatenation like NaN5: Example NaN is a number: typeof NaN returns number: NaN typeof NaN number Example Infinity Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number. Infinity -Infinity Example Division by 0 (zero) also generates Infinity: Infinity Example Infinity is a number: typeof Infinity returns number. Infinity typeof Infinity number Example Hexadecimal JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x. Example Never write a number with a leading zero (like 07).Some JavaScript versions interpret numbers as octal if they are written with a leading zero. By default, JavaScript displays numbers as base 10 decimals. But you can use the toString() method to output numbers from base 2 to base 36. toString() Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2. Example JavaScript Numbers as Objects Normally JavaScript numbers are primitive values created from literals: But numbers can also be defined as objects with the keyword new: new Example Do not create Number objects. The new keyword complicates the code and slows down execution speed. new Number Objects can produce unexpected results: When using the == operator, x and y are equal: == When using the === operator, x and y are not equal. === Note the difference between (x==y) and (x===y). (x==y) (x===y) (x == y) true or false? (x == y) (x === y) true or false? (x === y) Comparing two JavaScript objects always returns false. Complete JavaScript Number Reference For a complete Number reference, visit our: Complete JavaScript Number Reference. The reference contains descriptions and examples of all Number properties and methods."
  },
  {
    "document": "JavaScript BigInt JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number. BigInt Number JavaScript Integer Accuracy JavaScript integers are only accurate up to 15 digits: Integer Precision In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard). With this standard, large integer cannot be exactly represented and will be rounded. Because of this, JavaScript can only safely represent integers: Up to 9007199254740991 +(253-1) and Down to -9007199254740991 -(253-1). Integer values outside this range lose precision. How to Create a BigInt To create a BigInt, append n to the end of an integer or call BigInt(): BigInt BigInt() Examples BigInt: A new JavaScript Datatype The JavaScript typeof a BigInt is \"bigint\": typeof BigInt Example BigInt is the second numeric data type in JavaScript (after Number). BigInt Number With BigInt the total number of supported data types in JavaScript is 8: BigInt 1. String 2. Number 3. Bigint 4. Boolean 5. Undefined 6. Null 7. Symbol 8. Object BigInt Operators Operators that can be used on a JavaScript Number can also be used on a BigInt. Number BigInt BigInt Multiplication Example Notes Arithmetic between a BigInt and a Number is not allowed (type conversion lose information). BigInt Number Unsigned right shift (>>>) can not be done on a BigInt (it does not have a fixed width). BigInt BigInt Decimals A BigInt can not have decimals. BigInt BigInt Division Example BigInt Hex, Octal and Binary BigInt can also be written in hexadecimal, octal, or binary notation: BigInt BigInt Hex Example Precision Curiosity Rounding can compromise program security: MAX_SAFE_INTEGER Example Browser Support BigInt is supported in all browsers since September 2020: BigInt Minimum and Maximum Safe Integers ES6 added max and min properties to the Number object: MAX_SAFE_INTEGER MIN_SAFE_INTEGER MAX_SAFE_INTEGER Example MIN_SAFE_INTEGER Example New Number Methods ES6 also added 2 new methods to the Number object: Number.isInteger() Number.isSafeInteger() The Number.isInteger() Method The Number.isInteger() method returns true if the argument is an integer. Number.isInteger() true Example: isInteger() The Number.isSafeInteger() Method A safe integer is an integer that can be exactly represented as a double precision number. The Number.isSafeInteger() method returns true if the argument is a safe integer. Number.isSafeInteger() true Example isSafeInteger() Safe integers are all integers from -(253 - 1) to +(253 - 1). This is safe: 9007199254740991. This is not safe: 9007199254740992."
  },
  {
    "document": "JavaScript Number Methods JavaScript Number Methods These number methods can be used on all JavaScript numbers: The toString() Method The toString() method returns a number as a string. toString() All number methods can be used on any type of numbers (literals, variables, or expressions): Example The toExponential() Method toExponential() returns a string, with a number rounded and written using exponential notation. toExponential() A parameter defines the number of characters behind the decimal point: Example The parameter is optional. If you don't specify it, JavaScript will not round the number. The toFixed() Method toFixed() returns a string, with the number written with a specified number of decimals: toFixed() Example toFixed(2) is perfect for working with money. toFixed(2) The toPrecision() Method toPrecision() returns a string, with a number written with a specified length: toPrecision() Example The valueOf() Method valueOf() returns a number as a number. valueOf() Example In JavaScript, a number can be a primitive value (typeof = number) or an object (typeof = object). The valueOf() method is used internally in JavaScript to convert Number objects to primitive values. valueOf() There is no reason to use it in your code. All JavaScript data types have a valueOf() and a toString() method. valueOf() toString() Converting Variables to Numbers There are 3 JavaScript methods that can be used to convert a variable to a number: The methods above are not number methods. They are global JavaScript methods. The Number() Method The Number() method can be used to convert JavaScript variables to numbers: Number() Example If the number cannot be converted, NaN (Not a Number) is returned. NaN The Number() Method Used on Dates Number() can also convert a date to a number. Number() Example Note The Date() method returns the number of milliseconds since 1.1.1970. Date() The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000: Example Example The parseInt() Method parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned: parseInt() Example If the number cannot be converted, NaN (Not a Number) is returned. NaN The parseFloat() Method parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned: parseFloat() Example If the number cannot be converted, NaN (Not a Number) is returned. NaN Number Object Methods These object methods belong to the Number object: Number Methods Cannot be Used on Variables The number methods above belong to the JavaScript Number Object. These methods can only be accessed like Number.isInteger(). Number.isInteger() Using X.isInteger() where X is a variable, will result in an error: TypeError X.isInteger is not a function. TypeError X.isInteger is not a function The Number.isInteger() Method The Number.isInteger() method returns true if the argument is an integer. Number.isInteger() true Example The Number.isSafeInteger() Method A safe integer is an integer that can be exactly represented as a double precision number. The Number.isSafeInteger() method returns true if the argument is a safe integer."
  },
  {
    "document": "Number.isSafeInteger() true Example Safe integers are all integers from -(253 - 1) to +(253 - 1). This is safe: 9007199254740991. This is not safe: 9007199254740992. The Number.parseFloat() Method Number.parseFloat() parses a string and returns a number. Number.parseFloat() Spaces are allowed. Only the first number is returned: Example If the number cannot be converted, NaN (Not a Number) is returned. NaN Note The Number methods Number.parseInt() and Number.parseFloat() are the same as the Global methods parseInt() and parseFloat(). Number.parseInt() Number.parseFloat() parseInt() parseFloat() The purpose is modularization of globals (to make it easier to use the same JavaScript code outside the browser). The Number.parseInt() Method Number.parseInt() parses a string and returns a whole number. Number.parseInt() Spaces are allowed. Only the first number is returned: Example If the number cannot be converted, NaN (Not a Number) is returned. NaN Complete JavaScript Number Reference For a complete Number reference, visit our: Complete JavaScript Number Reference. The reference contains descriptions and examples of all Number properties and methods."
  },
  {
    "document": "JavaScript Number Properties JavaScript EPSILON Number.EPSILON is the difference between the smallest floating point number greater than 1 and 1. Number.EPSILON Example Note Number.EPSILON is an ES6 feature. Number.EPSILON It does not work in Internet Explorer. JavaScript MAX_VALUE Number.MAX_VALUE is a constant representing the largest possible number in JavaScript. Number.MAX_VALUE Example Number Properties Cannot be Used on Variables Number properties belong to the JavaScript Number Object. These properties can only be accessed as Number.MAX_VALUE. Number.MAX_VALUE Using x.MAX_VALUE, where x is a variable or a value, will return undefined: undefined Example JavaScript MIN_VALUE Number.MIN_VALUE is a constant representing the lowest possible number in JavaScript. Number.MIN_VALUE Example JavaScript MAX_SAFE_INTEGER Number.MAX_SAFE_INTEGER represents the maximum safe integer in JavaScript. Number.MAX_SAFE_INTEGER Number.MAX_SAFE_INTEGER is (253 - 1). Number.MAX_SAFE_INTEGER Example JavaScript MIN_SAFE_INTEGER Number.MIN_SAFE_INTEGER represents the minimum safe integer in JavaScript. Number.MIN_SAFE_INTEGER Number.MIN_SAFE_INTEGER is -(253 - 1). Number.MIN_SAFE_INTEGER Example Note MAX_SAFE_INTEGER and MIN_SAFE_INTEGER are ES6 features. MAX_SAFE_INTEGER MIN_SAFE_INTEGER They do not work in Internet Explorer. JavaScript POSITIVE_INFINITY Example POSITIVE_INFINITY is returned on overflow: POSITIVE_INFINITY JavaScript NEGATIVE_INFINITY Example NEGATIVE_INFINITY is returned on overflow: NEGATIVE_INFINITY JavaScript NaN - Not a Number NaN is a JavaScript reserved word for a number that is not a legal number. NaN Examples Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number): NaN Try it Yourself Â» Complete JavaScript Number Reference For a complete Number reference, visit our: Complete JavaScript Number Reference. The reference contains descriptions and examples of all Number properties and methods."
  },
  {
    "document": "JavaScript Arrays An array is a special variable, which can hold more than one value: Why Use Arrays? If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this: However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300? The solution is an array! An array can hold many values under a single name, and you can access the values by referring to an index number. Creating an Array Using an array literal is the easiest way to create a JavaScript Array. Syntax: It is a common practice to declare arrays with the const keyword. Learn more about const with arrays in the chapter: JS Array Const. Example Spaces and line breaks are not important. A declaration can span multiple lines: Example You can also create an array, and then provide the elements: Example Using the JavaScript Keyword new The following example also creates an Array, and assigns values to it: Example The two examples above do exactly the same. There is no need to use new Array(). new Array() For simplicity, readability and execution speed, use the array literal method. Accessing Array Elements You access an array element by referring to the index number: Note: Array indexes start with 0. [0] is the first element. [1] is the second element. Changing an Array Element This statement changes the value of the first element in cars: cars Example Converting an Array to a String The JavaScript method toString() converts an array to a string of (comma separated) array values. toString() Example Result: Access the Full Array With JavaScript, the full array can be accessed by referring to the array name: Example Arrays are Objects Arrays are a special type of objects. The typeof operator in JavaScript returns \"object\" for arrays. typeof But, JavaScript arrays are best described as arrays. Arrays use numbers to access its \"elements\". In this example, person[0] returns John: person[0] Array: Objects use names to access its \"members\". In this example, person.firstName returns John: person.firstName Object: Array Elements Can Be Objects JavaScript variables can be objects. Arrays are special kinds of objects. Because of this, you can have variables of different types in the same Array. You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array: Array Properties and Methods The real strength of JavaScript arrays are the built-in array properties and methods: Array methods are covered in the next chapters. The length Property The length property of an array returns the length of an array (the number of array elements). length Example The length property is always one more than the highest array index."
  },
  {
    "document": "length Accessing the First Array Element Example Accessing the Last Array Element Example Looping Array Elements One way to loop through an array, is using a for loop: for Example You can also use the Array.forEach() function: Array.forEach() Example Adding Array Elements The easiest way to add a new element to an array is using the push() method: push() Example New element can also be added to an array using the length property: length Example WARNING ! Adding elements with high indexes can create undefined \"holes\" in an array: Adding elements with high indexes can create undefined \"holes\" in an array: Example Associative Arrays Many programming languages support arrays with named indexes. Arrays with named indexes are called associative arrays (or hashes). JavaScript does not support arrays with named indexes. In JavaScript, arrays always use numbered indexes. Example WARNING ! ! If you use named indexes, JavaScript will redefine the array to an object. After that, some array methods and properties will produce incorrect results. Example: The Difference Between Arrays and Objects In JavaScript, arrays use numbered indexes. In JavaScript, objects use named indexes. Arrays are a special kind of objects, with numbered indexes. When to Use Arrays. When to use Objects. JavaScript new Array() JavaScript has a built-in array constructor new Array(). new Array() But you can safely use [] instead. [] These two different statements both create a new empty array named points: These two different statements both create a new array containing 6 numbers: The new keyword can produce some unexpected results: new A Common Error is not the same as: How to Recognize an Array A common question is: How do I know if a variable is an array? The problem is that the JavaScript operator typeof returns \"object\": typeof object The typeof operator returns object because a JavaScript array is an object. Solution 1: To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray(): Array.isArray() Solution 2: The instanceof operator returns true if an object is created by a given constructor: instanceof Nested Arrays and Objects Values in objects can be arrays, and values in arrays can be objects: Example To access arrays inside arrays, use a for-in loop for each array: Example Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Array Methods Basic Array Methods See Also: JavaScript Array length The length property returns the length (size) of an array: length Example JavaScript Array toString() The JavaScript method toString() converts an array to a string of (comma separated) array values. toString() Example Result: JavaScript Array at() ES2022 intoduced the array method at(): at() Examples Get the third element of fruits using at(): Get the third element of fruits using []: The at() method returns an indexed element from an array. at() The at() method returns the same as []. at() [] The at() method is supported in all modern browsers since March 2022: at() Note Many languages allow negative bracket indexing like [-1] to access elements from the end of an object / array / string. negative bracket indexing This is not possible in JavaScript, because [] is used for accessing both arrays and objects. obj[-1] refers to the value of key -1, not to the last property of the object. The at() method was introduced in ES2022 to solve this problem. at() JavaScript Array join() The join() method also joins all array elements into a string. join() It behaves just like toString(), but in addition you can specify the separator: toString() Example Result: Popping and Pushing When you work with arrays, it is easy to remove elements and add new elements. This is what popping and pushing is: Popping items out of an array, or pushing items into an array. JavaScript Array pop() The pop() method removes the last element from an array: pop() Example The pop() method returns the value that was \"popped out\": pop() Example JavaScript Array push() The push() method adds a new element to an array (at the end): push() Example The push() method returns the new array length: push() Example Shifting Elements Shifting is equivalent to popping, but working on the first element instead of the last. JavaScript Array shift() The shift() method removes the first array element and \"shifts\" all other elements to a lower index. shift() Example The shift() method returns the value that was \"shifted out\": shift() Example JavaScript Array unshift() The unshift() method adds a new element to an array (at the beginning), and \"unshifts\" older elements: unshift() Example The unshift() method returns the new array length: unshift() Example Changing Elements Array elements are accessed using their index number: Array indexes start with 0: [0] is the first array element[1] is the second[2] is the third ... Example JavaScript Array length The length property provides an easy way to append a new element to an array: length Example JavaScript Array delete() Warning ! Using delete() leaves undefined holes in the array. delete() undefined Use pop() or shift() instead. Example Merging Arrays (Concatenating) In programming languages, concatenation means joining strings end-to-end. Concatenation \"snow\" and \"ball\" gives \"snowball\". Concatenating arrays means joining arrays end-to-end."
  },
  {
    "document": "JavaScript Array concat() The concat() method creates a new array by merging (concatenating) existing arrays: concat() Example (Merging Two Arrays) Note The concat() method does not change the existing arrays. It always returns a new array. concat() The concat() method can take any number of array arguments. concat() Example (Merging Three Arrays) The concat() method can also take strings as arguments: concat() Example (Merging an Array with Values) Array copyWithin() The copyWithin() method copies array elements to another position in an array: copyWithin() Examples Copy to index 2, all elements from index 0: Copy to index 2, the elements from index 0 to 2: Note The copyWithin() method overwrites the existing values. copyWithin() The copyWithin() method does not add items to the array. copyWithin() The copyWithin() method does not change the length of the array. copyWithin() Flattening an Array Flattening an array is the process of reducing the dimensionality of an array. Flattening is useful when you want to convert a multi-dimensional array into a one-dimensional array. JavaScript Array flat() ES2019 Introduced the Array flat() method. The flat() method creates a new array with sub-array elements concatenated to a specified depth. flat() Example Browser Support JavaScript Array flat() is supported in all modern browsers since January 2020: flat() JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. flatMap() The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. flatMap() Example Browser Support JavaScript Array flatMap() is supported in all modern browsers since January 2020: flatMap() Splicing and Slicing Arrays The splice() method adds new items to an array. splice() The slice() method slices out a piece of an array. slice() JavaScript Array splice() The splice() method can be used to add new items to an array: splice() Example The first parameter (2) defines the position where new elements should be added (spliced in). The second parameter (0) defines how many elements should be removed. The rest of the parameters (\"Lemon\" , \"Kiwi\") define the new elements to be added. The splice() method returns an array with the deleted items: splice() Example Using splice() to Remove Elements With clever parameter setting, you can use splice() to remove elements without leaving \"holes\" in the array: splice() Example The first parameter (0) defines the position where new elements should be added (spliced in). The second parameter (1) defines how many elements should be removed. The rest of the parameters are omitted. No new elements will be added. JavaScript Array toSpliced() ES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array. The difference between the new toSpliced() method and the old splice() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array."
  },
  {
    "document": "Example JavaScript Array slice() The slice() method slices out a piece of an array into a new array: slice() Example Slice out a part of an array starting from array element 1 (\"Orange\"): Note The slice() method creates a new array. slice() The slice() method does not remove any elements from the source array. slice() Example Slice out a part of an array starting from array element 3 (\"Apple\"): The slice() method can take two arguments like slice(1, 3). slice() slice(1, 3) The method then selects elements from the start argument, and up to (but not including) the end argument. Example If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array. slice() Example Automatic toString() JavaScript automatically converts an array to a comma separated string when a primitive value is expected. This is always the case when you try to output an array. These two examples will produce the same result: Example Example Note All JavaScript objects have a toString() method. Searching Arrays Searching arrays are covered in the next chapter of this tutorial. Sorting Arrays Sorting arrays covers the methods used to sort arraysg. Iterating Arrays Iterating arrays covers methods that operate on all array elements. Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Array Search Array Find and Search Methods See Also: JavaScript Array indexOf() The indexOf() method searches an array for an element value and returns its position. indexOf() Note: The first item has position 0, the second item has position 1, and so on. Example Search an array for the item \"Apple\": Syntax Array.indexOf() returns -1 if the item is not found. Array.indexOf() If the item is present more than once, it returns the position of the first occurrence. JavaScript Array lastIndexOf() Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element. Array.lastIndexOf() Array.indexOf() Example Search an array for the item \"Apple\": Syntax JavaScript Array includes() ECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf). Array.includes() Example Syntax Array.includes() allows to check for NaN values. Unlike Array.indexOf(). Browser Support includes() is an ECMAScript 2016 feature. includes() ES 2016 is fully supported in all modern browsers since March 2017: includes() is not supported in Internet Explorer. includes() JavaScript Array find() The find() method returns the value of the first array element that passes a test function. find() This example finds (returns the value of) the first element that is larger than 18: Example Note that the function takes 3 arguments: Browser Support find() is an ES6 feature (JavaScript 2015). find() ES6 is fully supported in all modern browsers since June 2017: find() is not supported in Internet Explorer. find() JavaScript Array findIndex() The findIndex() method returns the index of the first array element that passes a test function. findIndex() This example finds the index of the first element that is larger than 18: Example Note that the function takes 3 arguments: Browser Support findIndex() is an ES6 feature (JavaScript 2015). findIndex() ES6 is fully supported in all modern browsers since June 2017: findIndex() is not supported in Internet Explorer. findIndex() JavaScript Array findLast() Method ES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition. Example Browser Support findLast() is an ES2023 feature. findLast() It is supported in all modern browsers since July 2023: JavaScript Array findLastIndex() Method The findLastIndex() method finds the index of the last element that satisfies a condition. Example Browser Support findLastIndex() is an ES2023 feature. findLastIndex() It is supported in all modern browsers since July 2023: Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Sorting Arrays Array Sort Methods Alphabetic Sort See Also: Numeric Sort Sorting an Array The sort() method sorts an array alphabetically: sort() Example Reversing an Array The reverse() method reverses the elements in an array: reverse() Example By combining sort() and reverse(), you can sort an array in descending order: sort() reverse() Example JavaScript Array toSorted() Method ES2023 added the toSorted() method as a safe way to sort an array without altering the original array. toSorted() The difference between toSorted() and sort() is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array. toSorted() sort() Example JavaScript Array toReversed() Method ES2023 added the toReversed() method as a safe way to reverse an array without altering the original array. toReversed() The difference between toReversed() and reverse() is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array. toReversed() reverse() Example Numeric Sort By default, the sort() function sorts values as strings. sort() This works well for strings (\"Apple\" comes before \"Banana\"). If numbers are sorted as strings, \"25\" is bigger than \"100\", because \"2\" is bigger than \"1\". Because of this, the sort() method will produce incorrect result when sorting numbers. sort() You can fix this by providing a compare function: Example Use the same trick to sort an array descending: Example The Compare Function The purpose of the compare function is to define an alternative sort order. The compare function should return a negative, zero, or positive value, depending on the arguments: When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value. sort() If the result is negative, a is sorted before b. a b If the result is positive, b is sorted before a. b a If the result is 0, no changes are done with the sort order of the two values. Example: The compare function compares all the values in the array, two values at a time (a, b). (a, b) When comparing 40 and 100, the sort() method calls the compare function(40, 100). sort() The function calculates 40 - 100 (a - b), and since the result is negative (-60), the sort function will sort 40 as a value lower than 100. (a - b) You can use this code snippet to experiment with numerically and alphabetically sorting: Sorting an Array in Random Order Using a sort function, like explained above, you can sort an numeric array in random order Example Try it Yourself Â» The Fisher Yates Method The points.sort() method in the example above is not accurate. It will favor some numbers over others. The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!"
  },
  {
    "document": "In JavaScript the method can be translated to this: Example Try it Yourself Â» Find the Lowest (or Highest) Array Value There are no built-in functions for finding the max or min value in an array. To find the lowest or highest value you have 3 options: Find Min or Max with sort() After you have sorted an array, you can use the index to obtain the highest and lowest values. Example Example Note Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value. Using Math.min() on an Array You can use Math.min.apply to find the lowest number in an array: Math.min.apply Example Try it Yourself Â» Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3). Math.min.apply(null, [1, 2, 3]) Math.min(1, 2, 3) Using Math.max() on an Array You can use Math.max.apply to find the highest number in an array: Math.max.apply Example Try it Yourself Â» Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3). Math.max.apply(null, [1, 2, 3]) Math.max(1, 2, 3) JavaScript Array Minimum Method There is no built-in function for finding the lowest value in a JavaScript array. The fastest code to find the lowest number is to use a home made method. This function loops through an array comparing each value with the lowest value found: Example (Find Min) Try it Yourself Â» JavaScript Array Maximum Method There is no built-in function for finding the highest value in a JavaScript array. The fastest code to find the highest number is to use a home made method. This function loops through an array comparing each value with the highest value found: Example (Find Max) Try it Yourself Â» Sorting Object Arrays JavaScript arrays often contain objects: Example Even if objects have properties of different data types, the sort() method can be used to sort the array. sort() The solution is to write a compare function to compare the property values: Example Comparing string properties is a little more complex: Example Stable Array sort() ES2019 revised the Array sort() method. sort() Before 2019, the specification allowed unstable sorting algorithms such as QuickSort. After ES2019, browsers must use a stable sorting algorithm: When sorting elements on a value, the elements must keep their relative position to other elements with the same value. Example In the example above, when sorting on price, the result is not allowed to come out with the names in an other relative position like this: Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Array Iteration Array Iteration Methods Array iteration methods operate on every array item: See Also: JavaScript Array forEach() The forEach() method calls a function (a callback function) once for each array element. forEach() Example Note that the function takes 3 arguments: The example above uses only the value parameter. The example can be rewritten to: Example JavaScript Array map() The map() method creates a new array by performing a function on each array element. map() The map() method does not execute the function for array elements without values. map() The map() method does not change the original array. map() This example multiplies each array value by 2: Example Note that the function takes 3 arguments: When a callback function uses only the value parameter, the index and array parameters can be omitted: Example JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. flatMap() The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. flatMap() Example Browser Support JavaScript Array flatMap() is supported in all modern browsers since January 2020: flatMap() JavaScript Array filter() The filter() method creates a new array with array elements that pass a test. filter() This example creates a new array from elements with a value larger than 18: Example Note that the function takes 3 arguments: In the example above, the callback function does not use the index and array parameters, so they can be omitted: Example JavaScript Array reduce() The reduce() method runs a function on each array element to produce (reduce it to) a single value. reduce() The reduce() method works from left-to-right in the array. See also reduceRight(). reduce() reduceRight() The reduce() method does not reduce the original array. reduce() This example finds the sum of all numbers in an array: Example Note that the function takes 4 arguments: The example above does not use the index and array parameters. It can be rewritten to: Example The reduce() method can accept an initial value: reduce() Example JavaScript Array reduceRight() The reduceRight() method runs a function on each array element to produce (reduce it to) a single value. reduceRight() The reduceRight() works from right-to-left in the array. See also reduce(). reduceRight() reduce() The reduceRight() method does not reduce the original array. reduceRight() This example finds the sum of all numbers in an array: Example Note that the function takes 4 arguments: The example above does not use the index and array parameters. It can be rewritten to: Example JavaScript Array every() The every() method checks if all array values pass a test. every() This example checks if all array values are larger than 18: Example Note that the function takes 3 arguments: When a callback function uses the first parameter only (value), the other parameters can be omitted: Example JavaScript Array some() The some() method checks if some array values pass a test."
  },
  {
    "document": "some() This example checks if some array values are larger than 18: Example Note that the function takes 3 arguments: JavaScript Array.from() The Array.from() method returns an Array object from any object with a length property or any iterable object. Array.from() Example Create an Array from a String: Browser Support from() is an ES6 feature (JavaScript 2015). from() ES6 is fully supported in all modern browsers since June 2017: from() is not supported in Internet Explorer. from() JavaScript Array keys() The Array.keys() method returns an Array Iterator object with the keys of an array. Array.keys() Example Create an Array Iterator object, containing the keys of the array: Browser Support keys() is an ES6 feature (JavaScript 2015). keys() ES6 is fully supported in all modern browsers since June 2017: keys() is not supported in Internet Explorer. keys() JavaScript Array entries() Example Create an Array Iterator, and then iterate over the key/value pairs: The entries() method returns an Array Iterator object with key/value pairs: entries() [0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"] The entries() method does not change the original array. entries() Browser Support entries() is an ES6 feature (JavaScript 2015). entries() ES6 is fully supported in all modern browsers since June 2017: entries() is not supported in Internet Explorer. entries() JavaScript Array with() Method ES2023 added the Array with() method as a safe way to update elements in an array without altering the original array. Example JavaScript Array Spread (...) The ... operator expands an iterable (like an array) into more elements: Example const q1 = [\"Jan\", \"Feb\", \"Mar\"]; const q2 = [\"Apr\", \"May\", \"Jun\"]; const q3 = [\"Jul\", \"Aug\", \"Sep\"]; const q4 = [\"Oct\", \"Nov\", \"Des\"]; const year = [...q1, ...q2, ...q3, ...q4]; Try it Yourself Â» Browser Support ... is an ES6 feature (JavaScript 2015). ES6 is fully supported in all modern browsers since June 2017: Chrome 51 Edge 15 Firefox 54 Safari 10 Opera 38 May 2016 Apr 2017 Jun 2017 Sep 2016 Jun 2016 ... is not supported in Internet Explorer. Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Browser Support ... is an ES6 feature (JavaScript 2015). ... ES6 is fully supported in all modern browsers since June 2017: ... is not supported in Internet Explorer. ... Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Array Const ECMAScript 2015 (ES6) In 2015, JavaScript introduced an important new keyword: const. const It has become a common practice to declare arrays using const: const Example Cannot be Reassigned An array declared with const cannot be reassigned: const Example Arrays are Not Constants The keyword const is a little misleading. const It does NOT define a constant array. It defines a constant reference to an array. Because of this, we can still change the elements of a constant array. Elements Can be Reassigned You can change the elements of a constant array: Example Browser Support The const keyword is not supported in Internet Explorer 10 or earlier. const The following table defines the first browser versions with full support for the const keyword: const Assigned when Declared JavaScript const variables must be assigned a value when they are declared: Meaning: An array declared with const must be initialized when it is declared. Using const without initializing the array is a syntax error: Example This will not work: const cars; cars = [\"Saab\", \"Volvo\", \"BMW\"]; Arrays declared with var can be initialized at any time. You can even use the array before it is declared: Example This is OK: cars = [\"Saab\", \"Volvo\", \"BMW\"]; var cars; Try it Yourself Â» Const Block Scope An array declared with const has Block Scope. An array declared in a block is not the same as an array declared outside the block: Example const cars = [\"Saab\", \"Volvo\", \"BMW\"]; // Here cars[0] is \"Saab\" { const cars = [\"Toyota\", \"Volvo\", \"BMW\"]; // Here cars[0] is \"Toyota\" } // Here cars[0] is \"Saab\" Try it Yourself Â» An array declared with var does not have block scope: Example var cars = [\"Saab\", \"Volvo\", \"BMW\"]; // Here cars[0] is \"Saab\" { var cars = [\"Toyota\", \"Volvo\", \"BMW\"]; // Here cars[0] is \"Toyota\" } // Here cars[0] is \"Toyota\" Try it Yourself Â» You can learn more about Block Scope in the chapter: JavaScript Scope."
  },
  {
    "document": "Redeclaring Arrays Redeclaring an array declared with var is allowed anywhere in a program: Example var cars = [\"Volvo\", \"BMW\"]; // Allowed var cars = [\"Toyota\", \"BMW\"]; // Allowed cars = [\"Volvo\", \"Saab\"]; // Allowed Redeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed: Example var cars = [\"Volvo\", \"BMW\"]; // Allowed const cars = [\"Volvo\", \"BMW\"]; // Not allowed { var cars = [\"Volvo\", \"BMW\"]; // Allowed const cars = [\"Volvo\", \"BMW\"]; // Not allowed } Redeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed: Example const cars = [\"Volvo\", \"BMW\"]; // Allowed const cars = [\"Volvo\", \"BMW\"]; // Not allowed var cars = [\"Volvo\", \"BMW\"]; // Not allowed cars = [\"Volvo\", \"BMW\"]; // Not allowed { const cars = [\"Volvo\", \"BMW\"]; // Allowed const cars = [\"Volvo\", \"BMW\"]; // Not allowed var cars = [\"Volvo\", \"BMW\"]; // Not allowed cars = [\"Volvo\", \"BMW\"]; // Not allowed } Redeclaring an array with const, in another scope, or in another block, is allowed: Example const cars = [\"Volvo\", \"BMW\"]; // Allowed { const cars = [\"Volvo\", \"BMW\"]; // Allowed } { const cars = [\"Volvo\", \"BMW\"]; // Allowed } Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up const Meaning: An array declared with const must be initialized when it is declared. const Using const without initializing the array is a syntax error: const Example This will not work: Arrays declared with var can be initialized at any time. var You can even use the array before it is declared: Example This is OK: Const Block Scope An array declared with const has Block Scope. const An array declared in a block is not the same as an array declared outside the block: Example An array declared with var does not have block scope: var Example You can learn more about Block Scope in the chapter: JavaScript Scope. Redeclaring Arrays Redeclaring an array declared with var is allowed anywhere in a program: var Example Redeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed: const Example Redeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed: const Example Redeclaring an array with const, in another scope, or in another block, is allowed: const Example Complete Array Reference For a complete Array reference, go to our: Complete JavaScript Array Reference. The reference contains descriptions and examples of all Array properties and methods."
  },
  {
    "document": "JavaScript Date Objects JavaScript Date Objects let us work with dates:  Examples Note Date objects are static. The \"clock\" is not \"running\". The computer clock is ticking, date objects are not. JavaScript Date Output By default, JavaScript will use the browser's time zone and display a date as a full text string:  You will learn much more about how to display dates, later in this tutorial. Creating Date Objects Date objects are created with the new Date() constructor. new Date() There are 9 ways to create a new date object: JavaScript new Date() new Date() creates a date object with the current date and time: new Date() Example new Date(date string) new Date(date string) creates a date object from a date string: new Date(date string) Examples Date string formats are described in the next chapter. new Date(year, month, ...) new Date(year, month, ...) creates a date object with a specified date and time. new Date(year, month, ...) 7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order): Example Note JavaScript counts months from 0 to 11: January = 0. December = 11. Specifying a month higher than 11, will not result in an error but add the overflow to the next year: Specifying: Is the same as: Specifying a day higher than max, will not result in an error but add the overflow to the next month: Specifying: Is the same as: Using 6, 4, 3, or 2 Numbers 6 numbers specify year, month, day, hour, minute, second: Example 5 numbers specify year, month, day, hour, and minute: Example 4 numbers specify year, month, day, and hour: Example 3 numbers specify year, month, and day: Example 2 numbers specify year and month: Example You cannot omit month. If you supply only one parameter it will be treated as milliseconds. Example Previous Century One and two digit years will be interpreted as 19xx: Example Example JavaScript Stores Dates as Milliseconds JavaScript stores dates as number of milliseconds since January 01, 1970. Zero time is January 01, 1970 00:00:00 UTC. One day (24 hours) is 86 400 000 milliseconds. Now the time is: milliseconds past January 01, 1970 new Date(milliseconds) new Date(milliseconds) creates a new date object as milliseconds plus zero time: new Date(milliseconds) Examples 01 January 1970 plus 100 000 000 000 milliseconds is: January 01 1970 minus 100 000 000 000 milliseconds is: January 01 1970 plus 24 hours is: 01 January 1970 plus 0 milliseconds is: Date Methods When a date object is created, a number of methods allow you to operate on it. Date methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of date objects, using either local time or UTC (universal, or GMT) time. Date methods and time zones are covered in the next chapters. Displaying Dates JavaScript will (by default) output dates using the toString() method. This is a string representation of the date, including the time zone."
  },
  {
    "document": "The format is specified in the ECMAScript specification: Example When you display a date object in HTML, it is automatically converted to a string, with the toString() method. toString() Example The toDateString() method converts a date to a more readable format: toDateString() Example The toUTCString() method converts a date to a string using the UTC standard: toUTCString() Example The toISOString() method converts a date to a string using the ISO standard: toISOString() Example Complete JavaScript Date Reference For a complete Date reference, go to our: Complete JavaScript Date Reference. The reference contains descriptions and examples of all Date properties and methods."
  },
  {
    "document": "JavaScript Date Formats JavaScript Date Input There are generally 3 types of JavaScript date input formats: The ISO format follows a strict standard in JavaScript. The other formats are not so well defined and might be browser specific. JavaScript Date Output Independent of input format, JavaScript will (by default) output dates in full text string format: JavaScript ISO Dates ISO 8601 is the international standard for the representation of dates and times. The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format: Example (Complete date) The computed date will be relative to your time zone.Depending on your time zone, the result above will vary between March 24 and March 25. ISO Dates (Year and Month) ISO dates can be written without specifying the day (YYYY-MM): Example Time zones will vary the result above between February 28 and March 01. ISO Dates (Only Year) ISO dates can be written without month and day (YYYY): Example Time zones will vary the result above between December 31 2014 and January 01 2015. ISO Dates (Date-Time) ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ): Example Date and time is separated with a capital T. UTC time is defined with a capital letter Z. If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead: Example UTC (Universal Time Coordinated) is the same as GMT (Greenwich Mean Time). Omitting T or Z in a date-time string can give different results in different browsers. Time Zones When setting a date, without specifying the time zone, JavaScript will use the browser's time zone. When getting a date, without specifying the time zone, the result is converted to the browser's time zone. In other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US. JavaScript Short Dates. Short dates are written with an \"MM/DD/YYYY\" syntax like this: Example WARNINGS ! In some browsers, months or days with no leading zeroes may produce an error: The behavior of \"YYYY/MM/DD\" is undefined.Some browsers will try to guess the format. Some will return NaN. The behavior of \"DD-MM-YYYY\" is also undefined.Some browsers will try to guess the format. Some will return NaN. JavaScript Long Dates. Long dates are most often written with a \"MMM DD YYYY\" syntax like this: Example Month and day can be in any order: Example And, month can be written in full (January), or abbreviated (Jan): Example Example Commas are ignored. Names are case insensitive: Example Date Input - Parsing Dates If you have a valid date string, you can use the Date.parse() method to convert it to milliseconds."
  },
  {
    "document": "Date.parse() Date.parse() returns the number of milliseconds between the date and January 1, 1970: Date.parse() Example You can then use the number of milliseconds to convert it to a date object: Example Complete JavaScript Date Reference For a complete Date reference, go to our: Complete JavaScript Date Reference. The reference contains descriptions and examples of all Date properties and methods."
  },
  {
    "document": "JavaScript Get Date Methods The new Date() Constructor In JavaScript, date objects are created with new Date(). new Date() new Date() returns a date object with the current date and time. new Date() Get the Current Time Date Get Methods Note 1 The get methods above return Local time. Universal time (UTC) is documented at the bottom of this page. Note 2 The get methods return information from existing date objects. In a date object, the time is static. The \"clock\" is not \"running\". The time in a date object is NOT the same as current time. The getFullYear() Method The getFullYear() method returns the year of a date as a four digit number: getFullYear() Examples Warning ! Old JavaScript code might use the non-standard method getYear(). getYear() is supposed to return a 2-digit year. getYear() is deprecated. Do not use it! The getMonth() Method The getMonth() method returns the month of a date as a number (0-11). getMonth() Note In JavaScript, January is month number 0, February is number 1, ... Finally, December is month number 11. Examples Note You can use an array of names to return the month as a name: Examples The getDate() Method The getDate() method returns the day of a date as a number (1-31): getDate() Examples The getHours() Method The getHours() method returns the hours of a date as a number (0-23): getHours() Examples The getMinutes() Method The getMinutes() method returns the minutes of a date as a number (0-59): getMinutes() Examples The getSeconds() Method The getSeconds() method returns the seconds of a date as a number (0-59): getSeconds() Examples The getMilliseconds() Method The getMilliseconds() method returns the milliseconds of a date as a number (0-999): getMilliseconds() Examples The getDay() Method The getDay() method returns the weekday of a date as a number (0-6). getDay() Note In JavaScript, the first day of the week (day 0) is Sunday. Some countries in the world consider the first day of the week to be Monday. Examples Note You can use an array of names, and getDay() to return weekday as a name: getDay() Examples The getTime() Method The getTime() method returns the number of milliseconds since January 1, 1970: getTime() Examples The Date.now() Method Date.now() returns the number of milliseconds since January 1, 1970. Date.now() Examples Calculate the number of years since 1970/01/01: Date.now() is a static method of the Date object. Date.now() You cannot use it on a date object like myDate.now(). myDate.now() The syntax is always Date.now(). Date.now() UTC Date Get Methods UTC methods use UTC time (Coordinated Universal Time). UTC time is the same as GMT (Greenwich Mean Time). The difference between Local time and UTC time can be up to 24 hours. The getTimezoneOffset() Method The getTimezoneOffset() method returns the difference (in minutes) between local time an UTC time: getTimezoneOffset() Example Complete JavaScript Date Reference For a complete Date reference, go to our: Complete JavaScript Date Reference. The reference contains descriptions and examples of all Date properties and methods."
  },
  {
    "document": "JavaScript Set Date Methods Set Date methods let you set date values (years, months, days, hours, minutes, seconds, milliseconds) for a Date Object. Set Date Methods Set Date methods are used for setting a part of a date: The setFullYear() Method The setFullYear() method sets the year of a date object. In this example to 2020: setFullYear() Example The setFullYear() method can optionally set month and day: setFullYear() Example The setMonth() Method The setMonth() method sets the month of a date object (0-11): setMonth() Example The setDate() Method The setDate() method sets the day of a date object (1-31): setDate() Example The setDate() method can also be used to add days to a date: setDate() Example Note If adding days shifts the month or year, the changes are handled automatically by the Date object. The setHours() Method The setHours() method sets the hours of a date object (0-23): setHours() Example The setHours() method can also be used to set minutes and seconds. setHours() Example The setMinutes() Method The setMinutes() method sets the minutes of a date object (0-59): setMinutes() Example The setSeconds() Method The setSeconds() method sets the seconds of a date object (0-59): setSeconds() Example Compare Dates Dates can easily be compared. The following example compares today's date with January 14, 2100: Example Note JavaScript counts months from 0 to 11. January is 0. December is 11. Complete JavaScript Date Reference For a complete Date reference, go to our: Complete JavaScript Date Reference. The reference contains descriptions and examples of all Date properties and methods."
  },
  {
    "document": "JavaScript Math Object The JavaScript Math object allows you to perform mathematical tasks on numbers. Example The Math Object Unlike other objects, the Math object has no constructor. The Math object is static. All methods and properties can be used without creating a Math object first. Math Properties (Constants) The syntax for any Math property is : Math.property. Math.property JavaScript provides 8 mathematical constants that can be accessed as Math properties: Example Math Methods The syntax for Math any methods is : Math.method(number) Math.method(number) Number to Integer There are 4 common methods to round a number to an integer: Math.round() Math.round(x) returns the nearest integer: Math.round(x) Examples Math.ceil() Math.ceil(x) returns the value of x rounded up to its nearest integer: Math.ceil(x) Example Math.floor() Math.floor(x) returns the value of x rounded down to its nearest integer: Math.floor(x) Example Math.trunc() Math.trunc(x) returns the integer part of x: Math.trunc(x) Example Math.sign() Math.sign(x) returns if x is negative, null or positive: Math.sign(x) Example Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6. Math.pow() Math.pow(x, y) returns the value of x to the power of y: Math.pow(x, y) Example Math.sqrt() Math.sqrt(x) returns the square root of x: Math.sqrt(x) Example Math.abs() Math.abs(x) returns the absolute (positive) value of x: Math.abs(x) Example Math.sin() Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians). Math.sin(x) If you want to use degrees instead of radians, you have to convert degrees to radians: Angle in radians = Angle in degrees x PI / 180. Example Math.cos() Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians). Math.cos(x) If you want to use degrees instead of radians, you have to convert degrees to radians: Angle in radians = Angle in degrees x PI / 180. Example Math.min() and Math.max() Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments: Math.min() Math.max() Example Example Math.random() Math.random() returns a random number between 0 (inclusive), and 1 (exclusive): Math.random() Example You will learn more about Math.random() in the next chapter of this tutorial. Math.random() The Math.log() Method Math.log(x) returns the natural logarithm of x. Math.log(x) The natural logarithm returns the time needed to reach a certain level of growth: Examples Math.E and Math.log() are twins. How many times must we multiply Math.E to get 10? The Math.log2() Method Math.log2(x) returns the base 2 logarithm of x. Math.log2(x) How many times must we multiply 2 to get 8? The Math.log10() Method Math.log10(x) returns the base 10 logarithm of x. Math.log10(x) How many times must we multiply 10 to get 1000? JavaScript Math Methods Complete Math Reference For a complete reference, go to our Complete Math Object Reference. The reference contains descriptions and examples of all Math properties and methods."
  },
  {
    "document": "JavaScript Random Math.random() Math.random() returns a random number between 0 (inclusive), and 1 (exclusive): Math.random() Example Math.random() always returns a number lower than 1. Math.random() JavaScript Random Integers Math.random() used with Math.floor() can be used to return random integers. Math.random() Math.floor() There is no such thing as JavaScript integers. We are talking about numbers with no decimals here. Example Example Example Example Example Example A Proper Random Function As you can see from the examples above, it might be a good idea to create a proper random function to use for all random integer purposes. This JavaScript function always returns a random number between min (included) and max (excluded): Example This JavaScript function always returns a random number between min and max (both included): Example"
  },
  {
    "document": "JavaScript Booleans A JavaScript Boolean represents one of two values: true or false. Boolean Values Very often, in programming, you will need a data type that can only have one of two values, like For this, JavaScript has a Boolean data type. It can only take the values true or false. The Boolean() Function You can use the Boolean() function to find out if an expression (or a variable) is true: Boolean() Example Or even easier: Example Comparisons and Conditions The chapter JS Comparisons gives a full overview of comparison operators. The chapter JS If Else gives a full overview of conditional statements. Here are some examples: The Boolean value of an expression is the basis for all JavaScript comparisons and conditions. Everything With a \"Value\" is True Examples Everything Without a \"Value\" is False The Boolean value of 0 (zero) is false: The Boolean value of -0 (minus zero) is false: The Boolean value of \"\" (empty string) is false: The Boolean value of undefined is false: The Boolean value of null is false: The Boolean value of false is (you guessed it) false: The Boolean value of NaN is false: JavaScript Booleans as Objects Normally JavaScript booleans are primitive values created from literals: But booleans can also be defined as objects with the keyword new: new Example Do not create Boolean objects. The new keyword complicates the code and slows down execution speed. new Boolean objects can produce unexpected results: When using the == operator, x and y are equal: == When using the === operator, x and y are not equal: === Note the difference between (x==y) and (x===y). (x == y) true or false? (x == y) (x === y) true or false? (x === y) Comparing two JavaScript objects always return false. Complete Boolean Reference For a complete reference, go to our Complete JavaScript Boolean Reference. The reference contains descriptions and examples of all Boolean properties and methods."
  },
  {
    "document": "JavaScript Comparison and Logical Operators Comparison and Logical operators are used to test for true or false. true false Comparison Operators Comparison operators are used in logical statements to determine equality or difference between variables or values. Given that x = 5, the table below explains the comparison operators: x = 5 How Can it be Used Comparison operators can be used in conditional statements to compare values and take action depending on the result: You will learn more about the use of conditional statements in the next chapter of this tutorial. Logical Operators Logical operators are used to determine the logic between variables or values. Given that x = 6 and y = 3, the table below explains the logical operators: x = 6 y = 3 Conditional (Ternary) Operator JavaScript also contains a conditional operator that assigns a value to a variable based on some condition. Syntax Example If the variable age is a value below 18, the value of the variable voteable will be \"Too young\", otherwise the value of voteable will be \"Old enough\". Comparing Different Types Comparing data of different types may give unexpected results. When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false. NaN false When comparing two strings, \"2\" will be greater than \"12\", because (alphabetically) 1 is less than 2. To secure a proper result, variables should be converted to the proper type before comparison: The Nullish Coalescing Operator (??) The ? ? operator returns the first argument if it is not nullish (null or undefined). ? ? null undefined Otherwise it returns the second argument. Example The nullish operator is supported in all browsers since March 2020: The Optional Chaining Operator (?.) The ?. operator returns undefined if an object is undefined or null (instead of throwing an error). ?. undefined undefined null Example The optional chaining operator is supported in all browsers since March 2020:"
  },
  {
    "document": "JavaScript if, else, and else if Conditional statements are used to perform different actions based on different conditions. Conditional Statements Very often when you write code, you want to perform different actions for different decisions. You can use conditional statements in your code to do this. In JavaScript we have the following conditional statements: if else else if switch The switch statement is described in the next chapter. switch The if Statement Use the if statement to specify a block of JavaScript code to be executed if a condition is true. if Syntax Note that if is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error. if Example Make a \"Good day\" greeting if the hour is less than 18:00: The result of greeting will be:  The else Statement Use the else statement to specify a block of code to be executed if the condition is false. else Example If the hour is less than 18, create a \"Good day\" greeting, otherwise \"Good evening\": The result of greeting will be:  The else if Statement Use the else if statement to specify a new condition if the first condition is false. else if Syntax Example If time is less than 10:00, create a \"Good morning\" greeting, if not, but time is less than 20:00, create a \"Good day\" greeting, otherwise a \"Good evening\": The result of greeting will be:  Example This example will write a link to either W3Schools or to the World Wildlife Foundation (WWF). By using a random number, there is a 50% chance for each of the links."
  },
  {
    "document": "JavaScript Switch Statement The switch statement is used to perform different actions based on different conditions. switch The JavaScript Switch Statement Use the switch statement to select one of many code blocks to be executed. switch Syntax This is how it works: Example The getDay() method returns the weekday as a number between 0 and 6. getDay() (Sunday=0, Monday=1, Tuesday=2 ..) This example uses the weekday number to calculate the weekday name: The result of day will be:  The break Keyword When JavaScript reaches a break keyword, it breaks out of the switch block. break This will stop the execution inside the switch block. It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway. Note: If you omit the break statement, the next case will be executed even if the evaluation does not match the case. The default Keyword The default keyword specifies the code to run if there is no case match: default Example The getDay() method returns the weekday as a number between 0 and 6. getDay() If today is neither Saturday (6) nor Sunday (0), write a default message: The result of text will be:  The default case does not have to be the last case in a switch block: default Example If default is not the last case in the switch block, remember to end the default case with a break. default Common Code Blocks Sometimes you will want different switch cases to use the same code. In this example case 4 and 5 share the same code block, and 0 and 6 share another code block: Example Switching Details If multiple cases matches a case value, the first case is selected. If no matching cases are found, the program continues to the default label. If no default label is found, the program continues to the statement(s) after the switch. Strict Comparison Switch cases use strict comparison (===). The values must be of the same type to match. A strict comparison can only be true if the operands are of the same type. In this example there will be no match for x: Example"
  },
  {
    "document": "JavaScript For Loop Loops can execute a block of code a number of times. JavaScript Loops Loops are handy, if you want to run the same code over and over again, each time with a different value. Often this is the case when working with arrays: Instead of writing: You can write: Different Kinds of Loops JavaScript supports different kinds of loops: for for/in for/of while do/while The For Loop The for statement creates a loop with 3 optional expressions: for Expression 1 is executed (one time) before the execution of the code block. Expression 2 defines the condition for executing the code block. Expression 3 is executed (every time) after the code block has been executed. Example From the example above, you can read: Expression 1 sets a variable before the loop starts (let i = 0). Expression 2 defines the condition for the loop to run (i must be less than 5). Expression 3 increases a value (i++) each time the code block in the loop has been executed. How to use Expression 1 Expression 1 is used to initialize the variable(s) used in the loop (let i = 0). But, expression 1 is optional. You can omit expression 1 when your values are set before the loop starts: Example You can intiate many values in expression 1 (separated by comma): Example How to use Expression 2 Expression 2 is used to evaluate the condition of the initial variable (i < len). But, expression 2 is also optional. If expression 2 returns true, the loop will start over again. If it returns false, the loop will end. Note If you omit expression 2, you must provide a break inside the loop. Otherwise the loop will never end. This will crash your browser. Read about breaks in a later chapter of this tutorial. How to use Expression 3 Expression 3 increments the value of the initial variable (i++). But, expression 3 is also optional. Expression 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else. Expression 3 can also be omitted (like when you increment your values inside the loop): Example Loop Scope Using var in a loop: var Example Using let in a loop: let Example In the first example, using var, the variable declared in the loop redeclares the variable outside the loop. var In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop. let When let is used to declare the i variable in a loop, the i variable will only be visible within the loop. let For/Of and For/In Loops The for/in loop and the for/of loop are explained in the next chapter. for/in for/of While Loops The while loop and the do/while are explained in the next chapters. while do/while"
  },
  {
    "document": "JavaScript For In The For In Loop The JavaScript for in statement loops through the properties of an Object: for in Syntax Example Example Explained For In Over Arrays The JavaScript for in statement can also loop over the properties of an Array: for in Syntax Example Do not use for in over an Array if the index order is important. The index order is implementation-dependent, and array values may not be accessed in the order you expect. It is better to use a for loop, a for of loop, or Array.forEach() when the order is important. Array.forEach() The forEach() method calls a function (a callback function) once for each array element. forEach() Example Note that the function takes 3 arguments: The example above uses only the value parameter. It can be rewritten to: Example"
  },
  {
    "document": "JavaScript For Of The For Of Loop The JavaScript for of statement loops through the values of an iterable object. for of It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more: Syntax variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var. const let var iterable - An object that has iterable properties. Browser Support For/of was added to JavaScript in 2015 (ES6) Safari 7 was the first browser to support for of: For/of is not supported in Internet Explorer. Looping over an Array Example Looping over a String Example The While Loop The while loop and the do/while loop are explained in the next chapter. while do/while"
  },
  {
    "document": "JavaScript While Loop Loops can execute a block of code as long as a specified condition is true. The While Loop The while loop loops through a block of code as long as a specified condition is true. while Syntax Example In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10: Example If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser. The Do While Loop The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. do while Syntax Example The example below uses a do while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: do while Example Do not forget to increase the variable used in the condition, otherwise the loop will never end! Comparing For and While If you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted. The loop in this example uses a for loop to collect the car names from the cars array: for Example The loop in this example uses a while loop to collect the car names from the cars array: while Example"
  },
  {
    "document": "JavaScript Break and Continue The break statement \"jumps out\" of a loop. break The continue statement \"jumps over\" one iteration in the loop. continue The Break Statement You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch() statement. break switch() The break statement can also be used to jump out of a loop: break Example In the example above, the break statement ends the loop (\"breaks\" the loop) when the loop counter (i) is 3. break The Continue Statement The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. continue This example skips the value of 3: Example JavaScript Labels To label JavaScript statements you precede the statements with a label name and a colon: The break and the continue statements are the only JavaScript statements that can \"jump out of\" a code block. break continue Syntax: The continue statement (with or without a label reference) can only be used to skip one loop iteration. continue The break statement, without a label reference, can only be used to jump out of a loop or a switch. break With a label reference, the break statement can be used to jump out of any code block: Example A code block is a block of code between { and }."
  },
  {
    "document": "JavaScript Iterables Iterables are iterable objects (like Arrays). Iterables can be accessed with simple and efficient code. Iterables can be iterated over with for..of loops for..of The For Of Loop The JavaScript for..of statement loops through the elements of an iterable object. for..of Syntax Iterating Iterating is easy to understand. It simply means looping over a sequence of elements. Here are some easy examples: Iterating Over a String You can use a for..of loop to iterate over the elements of a string: for..of Example Iterating Over an Array You can use a for..of loop to iterate over the elements of an Array: for..of Example 1 Example 2 Iterating Over a Set You can use a for..of loop to iterate over the elements of a Set: for..of Example Note Sets and Maps are covered in the next chapters. Iterating Over a Map You can use a for..of loop to iterate over the elements of a Map: for..of Example JavaScript Iterators The iterator protocol defines how to produce a sequence of values from an object. An object becomes an iterator when it implements a next() method. next() The next() method must return an object with two properties: value (the next value) done (true or false) value The value returned by the iterator (Can be omitted if done is true) done true if the iterator has completed false if the iterator has produced a new value Note Technically, iterables must implement the Symbol.iterator method. String, Array, TypedArray, Map and Set are all iterables, because their prototype objects have a Symbol.iterator method. Home Made Iterable This iterable returns never ending: 10,20,30,40,.... Everytime next() is called: Example // Home Made Iterable function myNumbers() { let n = 0; return { next: function() { n += 10; return {value:n, done:false}; } }; } // Create Iterable const n = myNumbers(); n.next(); // Returns 10 n.next(); // Returns 20 n.next(); // Returns 30 Try it Yourself Â» The problem with a home made iterable: It does not support the JavaScript for..of statement. A JavaScript iterable is an object that has a Symbol.iterator. The Symbol.iterator is a function that returns a next() function. An iterable can be iterated over with the code: for (const x of iterable) { } Example // Create an Object myNumbers = {}; // Make it Iterable myNumbers[Symbol.iterator] = function() { let n = 0; done = false; return { next() { n += 10; if (n == 100) {done = true} return {value:n, done:done}; } }; } Now you can use for..of for (const num of myNumbers) { // Any Code Here } Try it Yourself Â» The Symbol.iterator method is called automatically by for..of. But we can also do it \"manually\": Example let iterator = myNumbers[Symbol.iterator](); while (true) { const result = iterator.next(); if (result.done) break; // Any Code Here } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up next() Note Technically, iterables must implement the Symbol.iterator method."
  },
  {
    "document": "Symbol.iterator String, Array, TypedArray, Map and Set are all iterables, because their prototype objects have a Symbol.iterator method. Home Made Iterable This iterable returns never ending: 10,20,30,40,.... Everytime next() is called: next() Example The problem with a home made iterable: It does not support the JavaScript for..of statement. for..of A JavaScript iterable is an object that has a Symbol.iterator. The Symbol.iterator is a function that returns a next() function. Symbol.iterator next() An iterable can be iterated over with the code: for (const x of iterable) { } Example // Create an Object myNumbers = {}; // Make it Iterable myNumbers[Symbol.iterator] = function() { let n = 0; done = false; return { next() { n += 10; if (n == 100) {done = true} return {value:n, done:done}; } }; } Now you can use for..of for (const num of myNumbers) { // Any Code Here } Try it Yourself Â» The Symbol.iterator method is called automatically by for..of. But we can also do it \"manually\": Example let iterator = myNumbers[Symbol.iterator](); while (true) { const result = iterator.next(); if (result.done) break; // Any Code Here } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up for (const x of iterable) { } Example Now you can use for..of for..of The Symbol.iterator method is called automatically by for..of. But we can also do it \"manually\": Example let iterator = myNumbers[Symbol.iterator](); while (true) { const result = iterator.next(); if (result.done) break; // Any Code Here } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up for..of But we can also do it \"manually\": Example let iterator = myNumbers[Symbol.iterator](); while (true) { const result = iterator.next(); if (result.done) break; // Any Code Here } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example"
  },
  {
    "document": "JavaScript Sets A JavaScript Set is a collection of unique values. Each value can only occur once in a Set. The values can be of any type, primitive values or objects. How to Create a Set You can create a JavaScript Set by: new Set() add() The new Set() Method Pass an array to the new Set() constructor: new Set() Example Create a Set and add values: Example Create a Set and add variables: Example The add() Method Example If you add equal elements, only the first will be saved: Example Listing the Elements You can list all Set elements (values) with a for..of loop: Example Sets are Objects typeof returns object: typeof instanceof Set returns true: instanceof Set Complete Set Reference For a complete reference, go to our: Complete JavaScript Set Reference. The reference contains descriptions and examples of all Set Properties and Methods. Browser Support Set is an ES6 feature (JavaScript 2015). Set ES6 is fully supported in all modern browsers since June 2017: Set is not supported in Internet Explorer. Set"
  },
  {
    "document": "JavaScript Set Methods The new Set() Method Pass an array to the new Set() constructor: new Set() Example The add() Method Example If you add equal elements, only the first will be saved: Example Listing Set Elements You can list all Set elements (values) with a for..of loop: Example The has() Method The has() method returns true if a specified value exists in a set. has() true Example The forEach() Method The forEach() method invokes a function for each Set element: forEach() Example The values() Method The values() method returns an Iterator object with the values in a Set: values() Example 1 Example 2 The keys() Method The keys() method returns an Iterator object with the values in a Set: keys() Note A Set has no keys, so keys() returns the same as values(). keys() values() This makes Sets compatible with Maps. Example 1 Example 2 The entries() Method The entries() method returns an Iterator with [value,value] pairs from a Set. entries() Note The entries() method is supposed to return a [key,value] pair from an object. entries() A Set has no keys, so the entries() method returns [value,value]. entries() This makes Sets compatible with Maps. Example 1 Example 2 Complete Set Reference For a complete reference, go to our: Complete JavaScript Set Reference. The reference contains descriptions and examples of all Set Properties and Methods."
  },
  {
    "document": "JavaScript Maps A Map holds key-value pairs where the keys can be any datatype. A Map remembers the original insertion order of the keys. How to Create a Map You can create a JavaScript Map by: new Map() Map.set() The new Map() Method You can create a Map by passing an Array to the new Map() constructor: new Map() Example The set() Method You can add elements to a Map with the set() method: set() Example The set() method can also be used to change existing Map values: set() Example The get() Method The get() method gets the value of a key in a Map: get() Example Maps are Objects typeof returns object: typeof Example instanceof Map returns true: instanceof Example JavaScript Objects vs Maps Complete Map Reference For a complete reference, go to our: Complete JavaScript Map Reference. The reference contains descriptions and examples of all Map Properties and Methods. Browser Support Map is an ES6 feature (JavaScript 2015). Map ES6 is fully supported in all modern browsers since June 2017: Map is not supported in Internet Explorer. Map"
  },
  {
    "document": "JavaScript Map Methods The new Map() Method You can create a map by passing an array to the new Map() constructor: new Map() Example Map.get() You get the value of a key in a map with the get() method get() Example Map.set() You can add elements to a map with the set() method: set() Example The set() method can also be used to change existing map values: set() Example Map.size The size property returns the number of elements in a map: size Example Map.delete() The delete() method removes a map element: delete() Example Map.clear() The clear() method removes all the elements from a map: clear() Example Map.has() The has() method returns true if a key exists in a map: has() Example Try This: Map.forEach() The forEach() method invokes a callback for each key/value pair in a map: forEach() Example Map.entries() The entries() method returns an iterator object with the [key,values] in a map: entries() Example Map.keys() The keys() method returns an iterator object with the keys in a map: keys() Example Map.values() The values() method returns an iterator object with the values in a map: values() Example You can use the values() method to sum the values in a map: values() Example Objects as Keys Being able to use objects as keys is an important Map feature. Example Remember: The key is an object (apples), not a string (\"apples\"): Example JavaScript Map.groupBy() ES2024 added the Map.groupBy() method to JavaScript. Map.groupBy() The Map.groupBy() method groups elements of an object according to string values returned from a callback function. Map.groupBy() The Map.groupBy() method does not change the original object. Map.groupBy() Example Browser Support Map.groupby() is an ES2024 feature. Map.groupby() It is supported in new browsers since March 2024: Warning ES2024 features are relatively new. Older browsers may need an alternative code (Polyfill) Object.groupBy() vs Map.groupBy() The difference between Object.groupBy() and Map.groupBy() is: Object.groupBy() groups elements into a JavaScript object. Map.groupBy() groups elements into a Map object. Complete Map Reference For a complete reference, go to our: Complete JavaScript Map Reference. The reference contains descriptions and examples of all Map Properties and Methods."
  },
  {
    "document": "JavaScript typeof The typeof Operator The typeof operator returns the data type of a JavaScript variable. Primitive Data Types In JavaScript, a primitive value is a single value with no properties or methods. JavaScript has 7 primitive data types: The typeof operator returns the type of a variable or an expression. typeof Examples Note: In JavaScript, null is a primitive value. However, typeof returns \"object\". null typeof This is a well-known bug in JavaScript and has historical reasons. Complex Data Types A complex data type can store multiple values and/or different data types together. JavaScript has one complex data type: All other complex types like arrays, functions, sets, and maps are just different types of objects. The typeof operator returns only two types: typeof Example Note: The typeof operator returns object for all types of objects: objects arrays sets maps You cannot use typeof to determine if a JavaScript object is an array or a date. typeof You cannot use typeof to determine if a JavaScript object is an array or a date. typeof How to Recognize an Array How to know if a variable is an array? ECMAScript 5 (2009) defined a new method for this: Array.isArray(): Array.isArray() Example The instanceof Operator The instanceof operator returns true if an object is an instance of a specified object type: instanceof true Examples Undefined Variables The typeof of an undefined variable is undefined. Example typeof car; Try it Yourself Â» The typeof of a variable with no value is undefined. The value is also undefined. Example let car; typeof car; Try it Yourself Â» Any variable can be emptied, by setting the value to undefined. The type will also be undefined. Example let car = \"Volvo\"; car = undefined; Try it Yourself Â» Empty Values An empty value has nothing to do with undefined. An empty string has both a legal value and a type. Example let car = \"\"; typeof car; Try it Yourself Â» Null In JavaScript null is \"nothing\". It is supposed to be something that doesn't exist. Unfortunately, in JavaScript, the data type of null is an object. You can empty an object by setting it to null: Example // Create an Object let person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}; person = null; // Now value is null, but type is still an object Try it Yourself Â» You can also empty an object by setting it to undefined: Example let person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}; person = undefined; // Now both value and type is undefined Try it Yourself Â» Difference Between Undefined and Null undefined and null are equal in value but different in type: typeof undefined // undefinedtypeof null // objectnull === undefined // falsenull == undefined // true Try it Yourself Â» The constructor Property The constructor property returns the constructor function for all JavaScript variables."
  },
  {
    "document": "Example // Returns function Object() {[native code]}: {name:'John',age:34}.constructor // Returns function Array() {[native code]}: [1,2,3,4].constructor // Returns function Date() {[native code]}: new Date().constructor // Returns function Set() {[native code]}: new Set().constructor // Returns function Map() {[native code]}: new Map().constructor // Returns function Function() {[native code]}: function () {}.constructor Try it Yourself Â» With the constructor, you can check if an object is an Array: Example (myArray.constructor === Array); Try it Yourself Â» With the constructor, you can check if an object is a Date: Example (myDate.constructor === Date); Try it Yourself Â» All Together typeof \"John\" // Returns \"string\" typeof (\"John\"+\"Doe\") // Returns \"string\" typeof 3.14 // Returns \"number\" typeof (33 + 66) // Returns \"number\" typeof NaN // Returns \"number\" typeof 1234n // Returns \"bigint\" typeof true // Returns \"boolean\" typeof false // Returns \"boolean\" typeof {name:'John'} // Returns \"object\" typeof [1,2,3,4] // Returns \"object\" typeof {} // Returns \"object\" typeof [] // Returns \"object\" typeof new Object() // Returns \"object\" typeof new Array() // Returns \"object\" typeof new Date() // Returns \"object\" typeof new Set() // Returns \"object\" typeof new Map() // Returns \"object\" typeof function () {} // Returns \"function\" typeof x // Returns \"undefined\" typeof null // Returns \"object\" Try it Yourself Â» Note: The data type of NaN (Not a Number) is number ! The void Operator The void operator evaluates an expression and returns undefined. This operator is often used to obtain the undefined primitive value, using \"void(0)\" (useful when evaluating an expression without using the return value). Example <a href=\"javascript:void(0);\"> Useless link</a> <a href=\"javascript:void(document.body.style.backgroundColor='red');\"> Click me to change the background color of body to red</a> Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up typeof undefined Example The typeof of a variable with no value is undefined. The value is also undefined. typeof undefined undefined Example Any variable can be emptied, by setting the value to undefined. undefined The type will also be undefined. undefined Example Empty Values An empty value has nothing to do with undefined. undefined An empty string has both a legal value and a type. Example Null In JavaScript null is \"nothing\". It is supposed to be something that doesn't exist. null Unfortunately, in JavaScript, the data type of null is an object. null You can empty an object by setting it to null: null Example You can also empty an object by setting it to undefined: undefined Example Difference Between Undefined and Null undefined and null are equal in value but different in type: undefined null The constructor Property The constructor property returns the constructor function for all JavaScript variables. constructor Example With the constructor, you can check if an object is an Array: Example Try it Yourself Â» With the constructor, you can check if an object is a Date: Example Try it Yourself Â» All Together Note: The data type of NaN (Not a Number) is number !"
  },
  {
    "document": "The void Operator The void operator evaluates an expression and returns undefined. This operator is often used to obtain the undefined primitive value, using \"void(0)\" (useful when evaluating an expression without using the return value). Example"
  },
  {
    "document": "JavaScript Type Conversion JavaScript Type Conversion JavaScript variables can be converted to a new variable and another data type: Converting Strings to Numbers The global method Number() converts a variable (or a value) into a number. Number() A numeric string (like \"3.14\") converts to a number (like 3.14). An empty string (like \"\") converts to 0. A non numeric string (like \"John\") converts to NaN (Not a Number). NaN Examples These will convert: These will not convert: Number Methods In the chapter Number Methods, you will find more methods that can be used to convert strings to numbers: The Unary + Operator The unary + operator can be used to convert a variable to a number: Example If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number): NaN Example Converting Numbers to Strings The global method String() can convert numbers to strings. String() It can be used on any type of numbers, literals, variables, or expressions: Example The Number method toString() does the same. toString() Example More Methods In the chapter Number Methods, you will find more methods that can be used to convert numbers to strings: Converting Dates to Numbers The global method Number() can be used to convert dates to numbers. Number() The date method getTime() does the same. getTime() Converting Dates to Strings The global method String() can convert dates to strings. String() The Date method toString() does the same. toString() Example In the chapter Date Methods, you will find more methods that can be used to convert dates to strings: Converting Booleans to Numbers The global method Number() can also convert booleans to numbers. Number() Converting Booleans to Strings The global method String() can convert booleans to strings. String() The Boolean method toString() does the same. toString() Automatic Type Conversion When JavaScript tries to operate on a \"wrong\" data type, it will try to convert the value to a \"right\" type. The result is not always what you expect: Automatic String Conversion JavaScript automatically calls the variable's toString() function when you try to \"output\" an object or a variable: toString() Numbers and booleans are also converted, but this is not very visible: JavaScript Type Conversion Table This table shows the result of converting different JavaScript values to Number, String, and Boolean: Values in quotes indicate string values. Red values indicate values (some) programmers might not expect."
  },
  {
    "document": "JavaScript Destructuring Destructuring Assignment Syntax The destructuring assignment syntax unpack object properties into variables: It can also unpack arrays and any other iterables: Object Destructuring Example The order of the properties does not matter: Example Note: Destructuring is not destructive. Destructuring does not change the original object. Object Default Values For potentially missing properties we can set default values: Example Object Property Alias Example String Destructuring One use for destructuring is unpacking string characters. Example Note: Destructuring can be used with any iterables. Array Destructuring We can pick up array variables into our own variables: Example Skipping Array Values We can skip array values using two or more commas: Example Array Position Values We can pick up values from specific index locations of an array: Example The Rest Property You can end a destructuring syntax with a rest property. This syntax will store all remaining values into a new array: Example Destructuring Maps Example Swapping JavaScript Variables You can swap the values of two variables using a destructuring assignment: Example"
  },
  {
    "document": "JavaScript Bitwise Operations JavaScript Bitwise Operators Examples JavaScript Uses 32 bits Bitwise Operands JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers. Before a bitwise operation is performed, JavaScript converts numbers to 32 bits signed integers. After the bitwise operation is performed, the result is converted back to 64 bits JavaScript numbers. The examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10. Since JavaScript uses 32 bits signed integers, it will not return 10. It will return -6. 00000000000000000000000000000101 (5) 11111111111111111111111111111010 (~5 = -6) A signed integer uses the leftmost bit as the minus sign. JavaScript Bitwise AND When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1. JavaScript Bitwise OR When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1: JavaScript Bitwise XOR When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different: JavaScript Bitwise AND (&) Bitwise AND returns 1 only if both bits are 1: Example JavaScript Bitwise OR (|) Bitwise OR returns 1 if one of the bits is 1: Example JavaScript Bitwise XOR (^) Bitwise XOR returns 1 if the bits are different: Example JavaScript Bitwise NOT (~) Example JavaScript (Zero Fill) Bitwise Left Shift (<<) This is a zero fill left shift. One or more zero bits are pushed in from the right, and the leftmost bits fall off: Example JavaScript (Sign Preserving) Bitwise Right Shift (>>) This is a sign preserving right shift. Copies of the leftmost bit are pushed in from the left, and the rightmost bits fall off: Example JavaScript (Zero Fill) Right Shift (>>>) This is a zero fill right shift. One or more zero bits are pushed in from the left, and the rightmost bits fall off: Example Binary Numbers Binary numbers with only one bit set are easy to understand: Setting a few more bits reveals the binary pattern: JavaScript binary numbers are stored in two's complement format. This means that a negative number is the bitwise NOT of the number plus 1: Joke: There are only 10 types of people in the world: those who understand binary and those who don't. Converting Decimal to Binary Example Converting Binary to Decimal Example"
  },
  {
    "document": "JavaScript Regular Expressions A regular expression is a sequence of characters that forms a search pattern. The search pattern can be used for text search and text replace operations. What Is a Regular Expression? A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. A regular expression can be a single character, or a more complicated pattern. Regular expressions can be used to perform all types of text search and text replace operations. Syntax Example Example explained: /w3schools/i is a regular expression. w3schools is a pattern (to be used in a search). i is a modifier (modifies the search to be case-insensitive). Using String Methods In JavaScript, regular expressions are often used with the two string methods: search() and replace(). search() replace() The search() method uses an expression to search for a match, and returns the position of the match. search() The replace() method returns a modified string where the pattern is replaced. replace() Using String search() With a String The search() method searches a string for a specified value and returns the position of the match: search() Example Use a string to do a search for \"W3schools\" in a string: The result in n will be: 6 Try it Yourself Â» Using String search() With a Regular Expression Example Use a regular expression to do a case-insensitive search for \"w3schools\" in a string: The result in n will be: 6 Try it Yourself Â» Using String replace() With a String The replace() method replaces a specified value with another value in a string: replace() Use String replace() With a Regular Expression Example Use a case insensitive regular expression to replace Microsoft with W3Schools in a string: The result in res will be: Visit W3Schools! Did You Notice? Regular expression arguments (instead of string arguments) can be used in the methods above. Regular expressions can make your search much more powerful (case insensitive for example). Regular Expression Modifiers Modifiers can be used to perform case-insensitive more global searches: Regular Expression Patterns Brackets are used to find a range of characters: Metacharacters are characters with a special meaning: Quantifiers define quantities: Using the RegExp Object In JavaScript, the RegExp object is a regular expression object with predefined properties and methods. Using test() The test() method is a RegExp expression method. test() It searches a string for a pattern, and returns true or false, depending on the result. The following example searches a string for the character \"e\": Example Since there is an \"e\" in the string, the output of the code above will be: true Try it Yourself Â» You don't have to put the regular expression in a variable first. The two lines above can be shortened to one: Using exec() The exec() method is a RegExp expression method. exec() It searches a string for a specified pattern, and returns the found text as an object."
  },
  {
    "document": "If no match is found, it returns an empty (null) object. The following example searches a string for the character \"e\": Example Complete RegExp Reference For a complete reference, go to our Complete JavaScript RegExp Reference. The reference contains descriptions and examples of all RegExp properties and methods."
  },
  {
    "document": "JavaScript Operator Precedence Operator precedence describes the order in which operations are performed in an arithmetic expression. Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-). * / + - As in traditional mathematics, multiplication is done first: When using parentheses, operations inside the parentheses are computed first: Operations with the same precedence (like * and /) are computed from left to right: Operator Precedence Values"
  },
  {
    "document": "JavaScript Errors Throw, and Try...Catch...Finally The try statement defines a code block to run (to try). try The catch statement defines a code block to handle any error. catch The finally statement defines a code block to run regardless of the result. finally The throw statement defines a custom error. throw Errors Will Happen! When executing JavaScript code, different errors can occur. Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things. Example In this example we misspelled \"alert\" as \"adddlert\" to deliberately produce an error: JavaScript catches adddlert as an error, and executes the catch code to handle it. JavaScript try and catch The try statement allows you to define a block of code to be tested for errors while it is being executed. try The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. catch The JavaScript statements try and catch come in pairs: try catch JavaScript Throws Errors When an error occurs, JavaScript will normally stop and generate an error message. The technical term for this is: JavaScript will throw an exception (throw an error). JavaScript will actually create an Error object with two properties: name and message. The throw Statement The throw statement allows you to create a custom error. throw Technically you can throw an exception (throw an error). The exception can be a JavaScript String, a Number, a Boolean or an Object: String Number Boolean Object If you use throw together with try and catch, you can control program flow and generate custom error messages. throw try catch Input Validation Example This example examines input. If the value is wrong, an exception (err) is thrown. The exception (err) is caught by the catch statement and a custom error message is displayed: HTML Validation The code above is just an example. Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes: You can read more about forms validation in a later chapter of this tutorial. The finally Statement The finally statement lets you execute code, after try and catch, regardless of the result: finally Syntax Example The Error Object JavaScript has a built in error object that provides error information when an error occurs. The error object provides two useful properties: name and message. Error Object Properties Error Name Values Six different values can be returned by the error name property: The six different values are described below. Eval Error An EvalError indicates an error in the eval() function. EvalError Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead. Range Error A RangeError is thrown if you use a number that is outside the range of legal values. RangeError For example: You cannot set the number of significant digits of a number to 500."
  },
  {
    "document": "Example Reference Error A ReferenceError is thrown if you use (reference) a variable that has not been declared: ReferenceError Example Syntax Error A SyntaxError is thrown if you try to evaluate code with a syntax error. SyntaxError Example Type Error A TypeError is thrown if an operand or argument is incompatible with the type expected by an operator or function. TypeError Example URI (Uniform Resource Identifier) Error A URIError is thrown if you use illegal characters in a URI function: URIError Example Non-Standard Error Object Properties Mozilla and Microsoft define some non-standard error object properties: fileName (Mozilla) lineNumber (Mozilla) columnNumber (Mozilla) stack (Mozilla) description (Microsoft) number (Microsoft) Do not use these properties in public web sites. They will not work in all browsers. Complete Error Reference For a complete reference of the Error object, go to our Complete JavaScript Error Reference."
  },
  {
    "document": "JavaScript Scope Scope determines the accessibility (visibility) of variables. JavaScript variables have 3 types of scope: Block Scope Before ES6 (2015), JavaScript variables had only Global Scope and Function Scope. ES6 introduced two important new JavaScript keywords: let and const. let const These two keywords provide Block Scope in JavaScript. Variables declared inside a { } block cannot be accessed from outside the block: Example Variables declared with the var keyword can NOT have block scope. var Variables declared inside a { } block can be accessed from outside the block. Example Local Scope Variables declared within a JavaScript function, are LOCAL to the function: Example Local variables have Function Scope: They can only be accessed from within the function. Since local variables are only recognized inside their functions, variables with the same name can be used in different functions. Local variables are created when a function starts, and deleted when the function is completed. Function Scope JavaScript has function scope: Each function creates a new scope. Variables defined inside a function are not accessible (visible) from outside the function. Variables declared with var, let and const are quite similar when declared inside a function. var let const They all have Function Scope: Global JavaScript Variables A variable declared outside a function, becomes GLOBAL. Example A global variable has Global Scope: All scripts and functions on a web page can access it. Global Scope Variables declared Globally (outside any function) have Global Scope. Global variables can be accessed from anywhere in a JavaScript program. Variables declared with var, let and const are quite similar when declared outside a block. var let const They all have Global Scope: JavaScript Variables In JavaScript, objects and functions are also variables. Scope determines the accessibility of variables, objects, and functions from different parts of the code. Automatically Global If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable. This code example will declare a global variable carName, even if the value is assigned inside a function. carName Example Strict Mode All modern browsers support running JavaScript in \"Strict Mode\". You will learn more about how to use strict mode in a later chapter of this tutorial. In \"Strict Mode\", undeclared variables are not automatically global. Global Variables in HTML With JavaScript, the global scope is the JavaScript environment. In HTML, the global scope is the window object. Global variables defined with the var keyword belong to the window object: var Example Global variables defined with the let keyword do not belong to the window object: let Example Warning Do NOT create global variables unless you intend to. Your global variables (or functions) can overwrite window variables (or functions).Any function, including the window object, can overwrite your global variables and functions. The Lifetime of JavaScript Variables The lifetime of a JavaScript variable starts when it is declared. Function (local) variables are deleted when the function is completed."
  },
  {
    "document": "In a web browser, global variables are deleted when you close the browser window (or tab). Function Arguments Function arguments (parameters) work as local variables inside functions."
  },
  {
    "document": "JavaScript Hoisting Hoisting is JavaScript's default behavior of moving declarations to the top. JavaScript Declarations are Hoisted In JavaScript, a variable can be declared after it has been used. In other words; a variable can be used before it has been declared. Example 1 gives the same result as Example 2: Example 1 Example 2 To understand this, you have to understand the term \"hoisting\". Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function). The let and const Keywords Variables defined with let and const are hoisted to the top of the block, but not initialized.Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared. Using a let variable before it is declared will result in a ReferenceError. The variable is in a \"temporal dead zone\" from the start of the block until it is declared: Example This will result in a ReferenceError: carName = \"Volvo\"; let carName; Try it Yourself Â» Using a const variable before it is declared, is a syntax error, so the code will simply not run. Example This code will not run. carName = \"Volvo\"; const carName; Try it Yourself Â» Read more about let and const in JS Let / Const. JavaScript Initializations are Not Hoisted JavaScript only hoists declarations, not initializations. Example 1 does not give the same result as Example 2: Example 1 var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y Try it Yourself Â» Example 2 var x = 5; // Initialize x elem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y var y = 7; // Initialize y Try it Yourself Â» Does it make sense that y is undefined in the last example? This is because only the declaration (var y), not the initialization (=7) is hoisted to the top. Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined. Example 2 is the same as writing: Example var x = 5; // Initialize x var y; // Declare y elem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y y = 7; // Assign 7 to y Try it Yourself Â» Declare Your Variables At the Top ! Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript. If a developer doesn't understand hoisting, programs may contain bugs (errors). To avoid bugs, always declare all variables at the beginning of every scope. Since this is how JavaScript interprets the code, it is always a good rule."
  },
  {
    "document": "JavaScript in strict mode does not allow variables to be used if they are not declared.Study \"use strict\" in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up let const Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared. Using a let variable before it is declared will result in a ReferenceError. The variable is in a \"temporal dead zone\" from the start of the block until it is declared: Example This will result in a ReferenceError: carName = \"Volvo\"; let carName; Try it Yourself Â» Using a const variable before it is declared, is a syntax error, so the code will simply not run. Example This code will not run. carName = \"Volvo\"; const carName; Try it Yourself Â» Read more about let and const in JS Let / Const. JavaScript Initializations are Not Hoisted JavaScript only hoists declarations, not initializations. Example 1 does not give the same result as Example 2: Example 1 var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y Try it Yourself Â» Example 2 var x = 5; // Initialize x elem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y var y = 7; // Initialize y Try it Yourself Â» Does it make sense that y is undefined in the last example? This is because only the declaration (var y), not the initialization (=7) is hoisted to the top. Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined. Example 2 is the same as writing: Example var x = 5; // Initialize x var y; // Declare y elem = document.getElementById(\"demo\"); // Find an element elem.innerHTML = x + \" \" + y; // Display x and y y = 7; // Assign 7 to y Try it Yourself Â» Declare Your Variables At the Top ! Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript. If a developer doesn't understand hoisting, programs may contain bugs (errors). To avoid bugs, always declare all variables at the beginning of every scope. Since this is how JavaScript interprets the code, it is always a good rule. JavaScript in strict mode does not allow variables to be used if they are not declared.Study \"use strict\" in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Using a let variable before it is declared will result in a ReferenceError."
  },
  {
    "document": "let ReferenceError The variable is in a \"temporal dead zone\" from the start of the block until it is declared: Example ReferenceError Using a const variable before it is declared, is a syntax error, so the code will simply not run. const Example This code will not run. Read more about let and const in JS Let / Const. JavaScript Initializations are Not Hoisted JavaScript only hoists declarations, not initializations. Example 1 does not give the same result as Example 2: Example 1 Example 2 Does it make sense that y is undefined in the last example? This is because only the declaration (var y), not the initialization (=7) is hoisted to the top. Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined. Example 2 is the same as writing: Example Declare Your Variables At the Top ! Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript. If a developer doesn't understand hoisting, programs may contain bugs (errors). To avoid bugs, always declare all variables at the beginning of every scope. Since this is how JavaScript interprets the code, it is always a good rule. JavaScript in strict mode does not allow variables to be used if they are not declared.Study \"use strict\" in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up To avoid bugs, always declare all variables at the beginning of every scope. Since this is how JavaScript interprets the code, it is always a good rule. JavaScript in strict mode does not allow variables to be used if they are not declared.Study \"use strict\" in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Since this is how JavaScript interprets the code, it is always a good rule. JavaScript in strict mode does not allow variables to be used if they are not declared.Study \"use strict\" in the next chapter."
  },
  {
    "document": "JavaScript Use Strict \"use strict\"; Defines that JavaScript code should be executed in \"strict mode\". \"use strict\"; The \"use strict\" Directive The \"use strict\" directive was new in ECMAScript version 5. \"use strict\" It is not a statement, but a literal expression, ignored by earlier versions of JavaScript. The purpose of \"use strict\" is to indicate that the code should be executed in \"strict mode\". \"use strict\" With strict mode, you can not, for example, use undeclared variables. All modern browsers support \"use strict\" except Internet Explorer 9 and lower: The numbers in the table specify the first browser version that fully supports the directive. You can use strict mode in all your programs. It helps you to write cleaner code, like preventing you from using undeclared variables. \"use strict\" is just a string, so IE 9 will not throw an error even if it does not understand it. \"use strict\" Declaring Strict Mode Strict mode is declared by adding \"use strict\"; to the beginning of a script or a function. Declared at the beginning of a script, it has global scope (all code in the script will execute in strict mode): Example Example Declared inside a function, it has local scope (only the code inside the function is in strict mode): The \"use strict\"; Syntax The syntax, for declaring strict mode, was designed to be compatible with older versions of JavaScript. Compiling a numeric literal (4 + 5;) or a string literal (\"John Doe\";) in a JavaScript program has no side effects. It simply compiles to a non existing variable and dies. So \"use strict\"; only matters to new compilers that \"understand\" the meaning of it. \"use strict\"; Why Strict Mode? Strict mode makes it easier to write \"secure\" JavaScript. Strict mode changes previously accepted \"bad syntax\" into real errors. As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable. In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties. In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error. Not Allowed in Strict Mode Using a variable, without declaring it, is not allowed: Try it Yourself Â» Objects are variables too. Using an object, without declaring it, is not allowed: Try it Yourself Â» Deleting a variable (or object) is not allowed. Try it Yourself Â» Deleting a function is not allowed."
  },
  {
    "document": "Try it Yourself Â» Duplicating a parameter name is not allowed: Try it Yourself Â» Octal numeric literals are not allowed: Try it Yourself Â» Octal escape characters are not allowed: Try it Yourself Â» Writing to a read-only property is not allowed: Try it Yourself Â» Writing to a get-only property is not allowed: Try it Yourself Â» Deleting an undeletable property is not allowed: Try it Yourself Â» The word eval cannot be used as a variable: eval Try it Yourself Â» The word arguments cannot be used as a variable: arguments Try it Yourself Â» The with statement is not allowed: with Try it Yourself Â» For security reasons, eval() is not allowed to create variables in the scope from which it was called. eval() In strict mode, a variable can not be used before it is declared: Try it Yourself Â» In strict mode, eval() can not declare a variable using the var keyword: Try it Yourself Â» eval() can not declare a variable using the let keyword: Try it Yourself Â» The this keyword in functions behaves differently in strict mode. this The this keyword refers to the object that called the function. this If the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window): undefined Try it Yourself Â» Future Proof! Keywords reserved for future JavaScript versions can NOT be used as variable names in strict mode. These are: Try it Yourself Â» Watch Out! The \"use strict\" directive is only recognized at the beginning of a script or a function."
  },
  {
    "document": "The JavaScript this Keyword Example What is this? In JavaScript, the this keyword refers to an object. this The this keyword refers to different objects depending on how it is used: this this this this this undefined this call() apply() bind() this Note this is not a variable. It is a keyword. You cannot change the value of this. this this this in a Method When used in an object method, this refers to the object. this In the example on top of this page, this refers to the person object. this Because the fullName method is a method of the person object. this Alone When used alone, this refers to the global object. this Because this is running in the global scope. this In a browser window the global object is [object Window]: [object Window] Example In strict mode, when used alone, this also refers to the global object: this Example this in a Function (Default) In a function, the global object is the default binding for this. this In a browser window the global object is [object Window]: [object Window] Example this in a Function (Strict) JavaScript strict mode does not allow default binding. So, when used in a function, in strict mode, this is undefined. this undefined Example this in Event Handlers In HTML event handlers, this refers to the HTML element that received the event: this Example Try it Yourself Â» Object Method Binding In these examples, this is the person object: this Example Example i.e. this.firstName is the firstName property of this (the person object). Explicit Function Binding The call() and apply() methods are predefined JavaScript methods. call() apply() They can both be used to call an object method with another object as argument. See Also: The Function call() Method The Function apply() Method The Function bind() Method The example below calls person1.fullName with person2 as an argument, this refers to person2, even if fullName is a method of person1: Example Try it Yourself Â» Function Borrowing With the bind() method, an object can borrow a method from another object. bind() This example creates 2 objects (person and member). The member object borrows the fullname method from the person object: Example This Precedence To determine which object this refers to; use the following precedence of order. this Is this in a function being called using bind()? this Is this in a function being called using apply()? this Is this in a function being called using call()? this Is this in an object function (method)? Is this in a function in the global scope. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up this Is this in a function in the global scope. this"
  },
  {
    "document": "JavaScript Arrow Function Arrow functions were introduced in ES6. Arrow functions allow us to write shorter function syntax:  Try it Yourself Â» Before Arrow: Try it Yourself Â» With Arrow Function: Try it Yourself Â» It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and the return keyword: return Arrow Functions Return Value by Default: Try it Yourself Â» Note: This works only if the function has only one statement. If you have parameters, you pass them inside the parentheses: Arrow Function With Parameters: Try it Yourself Â» In fact, if you have only one parameter, you can skip the parentheses as well: Arrow Function Without Parentheses: Try it Yourself Â» What About this? this The handling of this is also different in arrow functions compared to regular functions. this In short, with arrow functions there are no binding of this. this In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever. this With arrow functions the this keyword always represents the object that defined the arrow function. this Let us take a look at two examples to understand the difference. Both examples call a method twice, first when the page loads, and once again when the user clicks a button. The first example uses a regular function, and the second example uses an arrow function. The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the \"owner\" of the function. Example With a regular function this represents the object that calls the function: this Try it Yourself Â» Example With an arrow function this represents the owner of the function: this Try it Yourself Â» Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions. Browser Support The following table defines the first browser versions with full support for Arrow Functions in JavaScript:"
  },
  {
    "document": "JavaScript Classes ECMAScript 2015, also known as ES6, introduced JavaScript Classes. JavaScript Classes are templates for JavaScript Objects. JavaScript Class Syntax Use the keyword class to create a class. class Always add a method named constructor(): constructor() Syntax Example The example above creates a class named \"Car\". The class has two initial properties: \"name\" and \"year\". A JavaScript class is not an object. It is a template for JavaScript objects. Using a Class When you have a class, you can use the class to create objects: Example Try it Yourself Â» The example above uses the Car class to create two Car objects. The constructor method is called automatically when a new object is created. The Constructor Method The constructor method is a special method: If you do not define a constructor method, JavaScript will add an empty constructor method. Class Methods Class methods are created with the same syntax as object methods. Use the keyword class to create a class. class Always add a constructor() method. constructor() Then add any number of methods. Syntax Create a Class method named \"age\", that returns the Car age: Example Try it Yourself Â» You can send parameters to Class methods: Example Try it Yourself Â» Browser Support The following table defines the first browser version with full support for Classes in JavaScript: You will learn a lot more about JavaScript Classes later in this tutorial."
  },
  {
    "document": "JavaScript Modules Modules JavaScript modules allow you to break up your code into separate files. This makes it easier to maintain a code-base. Modules are imported from external files with the import statement. import Modules also rely on type=\"module\" in the <script> tag. type=\"module\" Example Try it Yourself Â» Export Modules with functions or variables can be stored in any external file. There are two types of exports: Named Exports and Default Exports. Named Exports Let us create a file named person.js, and fill it with the things we want to export. person.js You can create named exports two ways. In-line individually, or all at once at the bottom. In-line individually: person.js person.js All at once at the bottom: person.js person.js Default Exports Let us create another file, named message.js, and use it for demonstrating default export. message.js You can only have one default export in a file. Example message.js message.js Import You can import modules into a file in two ways, based on if they are named exports or default exports. Named exports are constructed using curly braces. Default exports are not. Import from named exports Import named exports from the file person.js: Try it Yourself Â» Import from default exports Import a default export from the file message.js: Try it Yourself Â» Note Modules only work with the HTTP(s) protocol. A web-page opened via the file:// protocol cannot use import / export."
  },
  {
    "document": "JavaScript JSON JSON is a format for storing and transporting data. JSON is often used when data is sent from a server to a web page. What is JSON? * The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written in any programming language. JSON Example This JSON syntax defines an employees object: an array of 3 employee records (objects): JSON Example The JSON Format Evaluates to JavaScript Objects The JSON format is syntactically identical to the code for creating JavaScript objects. Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects. JSON Syntax Rules JSON Data - A Name and a Value JSON data is written as name/value pairs, just like JavaScript object properties. A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value: JSON names require double quotes. JavaScript names do not. JSON Objects JSON objects are written inside curly braces. Just like in JavaScript, objects can contain multiple name/value pairs: JSON Arrays JSON arrays are written inside square brackets. Just like in JavaScript, an array can contain objects: In the example above, the object \"employees\" is an array. It contains three objects. Each object is a record of a person (with a first name and a last name). Converting a JSON Text to a JavaScript Object A common use of JSON is to read data from a web server, and display the data in a web page. For simplicity, this can be demonstrated using a string as input. First, create a JavaScript string containing JSON syntax: Then, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object: JSON.parse() Finally, use the new JavaScript object in your page: Example You can read more about JSON in our JSON tutorial."
  },
  {
    "document": "JavaScript Debugging Errors can (will) happen, every time you write some new computer code. Code Debugging Programming code might contain syntax errors, or logical errors. Many of these errors are difficult to diagnose. Often, when programming code contains errors, nothing will happen. There are no error messages, and you will get no indications where to search for errors. Searching for (and fixing) errors in programming code is called code debugging. JavaScript Debuggers Debugging is not easy. But fortunately, all modern browsers have a built-in JavaScript debugger. Built-in debuggers can be turned on and off, forcing errors to be reported to the user. With a debugger, you can also set breakpoints (places where code execution can be stopped), and examine variables while the code is executing. Normally (otherwise follow the steps at the bottom of this page), you activate debugging in your browser with the F12 key, and select \"Console\" in the debugger menu. The console.log() Method If your browser supports debugging, you can use console.log() to display JavaScript values in the debugger window: console.log() Example Tip: Read more about the console.log() method in our JavaScript Console Reference. console.log() Setting Breakpoints In the debugger window, you can set breakpoints in the JavaScript code. At each breakpoint, JavaScript will stop executing, and let you examine JavaScript values. After examining values, you can resume the execution of code (typically with a play button). The debugger Keyword The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function. debugger This has the same function as setting a breakpoint in the debugger. If no debugging is available, the debugger statement has no effect. With the debugger turned on, this code will stop executing before it executes the third line. Example Major Browsers' Debugging Tools Normally, you activate debugging in your browser with F12, and select \"Console\" in the debugger menu. Otherwise follow these steps: Chrome Firefox Edge Opera Safari Did You Know? Debugging is the process of testing, finding, and reducing bugs (errors) in computer programs. The first known computer bug was a real bug (an insect) stuck in the electronics."
  },
  {
    "document": "JavaScript Style Guide Always use the same coding conventions for all your JavaScript projects. JavaScript Coding Conventions Coding conventions are style guidelines for programming. They typically cover: Coding conventions secure quality: Coding conventions can be documented rules for teams to follow, or just be your individual coding practice. This page describes the general JavaScript code conventions used by W3Schools. You should also read the next chapter \"Best Practices\", and learn how to avoid coding pitfalls. Variable Names At W3schools we use camelCase for identifier names (variables and functions). All names start with a letter. At the bottom of this page, you will find a wider discussion about naming rules. Spaces Around Operators Always put spaces around operators ( = + - * / ), and after commas: Examples: Code Indentation Always use 2 spaces for indentation of code blocks: Functions: Do not use tabs (tabulators) for indentation. Different editors interpret tabs differently. Statement Rules General rules for simple statements: Examples: General rules for complex (compound) statements: Functions: Loops: Conditionals: Object Rules General rules for object definitions: Example Short objects can be written compressed, on one line, using spaces only between properties, like this: Line Length < 80 For readability, avoid lines longer than 80 characters. If a JavaScript statement does not fit on one line, the best place to break it, is after an operator or a comma. Example Naming Conventions Always use the same naming convention for all your code. For example: Should you use hyp-hens, camelCase, or under_scores in variable names? This is a question programmers often discuss. The answer depends on who you ask: Hyphens in HTML and CSS: HTML5 attributes can start with data- (data-quantity, data-price). CSS uses hyphens in property-names (font-size). Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names. Underscores: Many programmers prefer to use underscores (date_of_birth), especially in SQL databases. Underscores are often used in PHP documentation. PascalCase: PascalCase is often preferred by C programmers. camelCase: camelCase is used by JavaScript itself, by jQuery, and other JavaScript libraries. Do not start names with a $ sign. It will put you in conflict with many JavaScript library names. Loading JavaScript in HTML Use simple syntax for loading external scripts (the type attribute is not necessary): Accessing HTML Elements A consequence of using \"untidy\" HTML styles, might result in JavaScript errors. These two JavaScript statements will produce different results: If possible, use the same naming convention (as JavaScript) in HTML. Visit the HTML Style Guide. File Extensions HTML files should have a .html extension (.htm is allowed). CSS files should have a .css extension. JavaScript files should have a .js extension. Use Lower Case File Names Most web servers (Apache, Unix) are case sensitive about file names: london.jpg cannot be accessed as London.jpg. Other web servers (Microsoft, IIS) are not case sensitive: london.jpg can be accessed as London.jpg or london.jpg. If you use a mix of upper and lower case, you have to be extremely consistent."
  },
  {
    "document": "If you move from a case insensitive, to a case sensitive server, even small errors can break your web site. To avoid these problems, always use lower case file names (if possible). Performance Coding conventions are not used by computers. Most rules have little impact on the execution of programs. Indentation and extra spaces are not significant in small scripts. For code in development, readability should be preferred. Larger production scripts should be minimized. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up CSS files should have a .css extension. JavaScript files should have a .js extension. Use Lower Case File Names Most web servers (Apache, Unix) are case sensitive about file names: london.jpg cannot be accessed as London.jpg. Other web servers (Microsoft, IIS) are not case sensitive: london.jpg can be accessed as London.jpg or london.jpg. If you use a mix of upper and lower case, you have to be extremely consistent. If you move from a case insensitive, to a case sensitive server, even small errors can break your web site. To avoid these problems, always use lower case file names (if possible). Performance Coding conventions are not used by computers. Most rules have little impact on the execution of programs. Indentation and extra spaces are not significant in small scripts. For code in development, readability should be preferred. Larger production scripts should be minimized."
  },
  {
    "document": "JavaScript Best Practices Avoid global variables, avoid new, avoid ==, avoid eval() new == eval() Avoid Global Variables Minimize the use of global variables. This includes all data types, objects, and functions. Global variables and functions can be overwritten by other scripts. Use local variables instead, and learn how to use closures. Always Declare Local Variables All variables used in a function should be declared as local variables. Local variables must be declared with the var, the let, or the const keyword, otherwise they will become global variables. var let const Strict mode does not allow undeclared variables. Declarations on Top It is a good coding practice to put all declarations at the top of each script or function. This will: This also goes for loop variables: Initialize Variables It is a good coding practice to initialize variables when you declare them. This will: Initializing variables provides an idea of the intended use (and intended data type). Declare Objects with const Declaring objects with const will prevent any accidental change of type: Example Declare Arrays with const Declaring arrays with const will prevent any accidential change of type: Example Don't Use new Object() \"\" new String() 0 new Number() false new Boolean() {} new Object() [] new Array() /()/ new RegExp() function (){} new Function() Example Beware of Automatic Type Conversions JavaScript is loosely typed. A variable can contain all data types. A variable can change its data type: Example Beware that numbers can accidentally be converted to strings or NaN (Not a Number). NaN When doing mathematical operations, JavaScript can convert numbers to strings: Example Subtracting a string from a string, does not generate an error but returns NaN (Not a Number): NaN Example Use === Comparison The == comparison operator always converts (to matching types) before comparison. == The === operator forces comparison of values and type: === Example Use Parameter Defaults If a function is called with a missing argument, the value of the missing argument is set to undefined. undefined Undefined values can break your code. It is a good habit to assign default values to arguments. Example ECMAScript 2015 allows default parameters in the function definition: function (a=1, b=1) { /*function code*/ } Read more about function parameters and arguments at Function Parameters End Your Switches with Defaults Always end your switch statements with a default. Even if you think there is no need for it. switch default Example Avoid Number, String, and Boolean as Objects Always treat numbers, strings, or booleans as primitive values. Not as objects. Declaring these types as objects, slows down execution speed, and produces nasty side effects: Example Or even worse: Example Avoid Using eval() The eval() function is used to run text as code. In almost all cases, it should not be necessary to use it. eval() Because it allows arbitrary code to be run, it also represents a security problem."
  },
  {
    "document": "JavaScript Common Mistakes This chapter points out some common JavaScript mistakes. Accidentally Using the Assignment Operator JavaScript programs may generate unexpected results if a programmer accidentally uses an assignment operator (=), instead of a comparison operator (==) in an if statement. = == This if statement returns false (as expected) because x is not equal to 10: if false This if statement returns true (maybe not as expected), because 10 is true: if true This if statement returns false (maybe not as expected), because 0 is false: if false An assignment always returns the value of the assignment. Expecting Loose Comparison In regular comparison, data type does not matter. This if statement returns true: if In strict comparison, data type does matter. This if statement returns false: if It is a common mistake to forget that switch statements use strict comparison: switch This case switch will display an alert: case switch This case switch will not display an alert: case switch Confusing Addition & Concatenation Addition is about adding numbers. Concatenation is about adding strings. In JavaScript both operations use the same + operator. + Because of this, adding a number as a number will produce a different result from adding a number as a string: When adding two variables, it can be difficult to anticipate the result: Misunderstanding Floats All numbers in JavaScript are stored as 64-bits Floating point numbers (Floats). All programming languages, including JavaScript, have difficulties with precise floating point values: To solve the problem above, it helps to multiply and divide: Example Breaking a JavaScript String JavaScript will allow you to break a statement into two lines: Example 1 But, breaking a statement in the middle of a string will not work: Example 2 You must use a \"backslash\" if you must break a statement in a string: Example 3 Misplacing Semicolon Because of a misplaced semicolon, this code block will execute regardless of the value of x: Breaking a Return Statement It is a default JavaScript behavior to close a statement automatically at the end of a line. Because of this, these two examples will return the same result: Example 1 Example 2 JavaScript will also allow you to break a statement into two lines. Because of this, example 3 will also return the same result: Example 3 But, what will happen if you break the return statement in two lines like this: Example 4 The function will return undefined! undefined Why? Because JavaScript thought you meant: Example 5 Explanation If a statement is incomplete like: JavaScript will try to complete the statement by reading the next line: But since this statement is complete: JavaScript will automatically close it like this: This happens because closing (ending) statements with semicolon is optional in JavaScript. JavaScript will close the return statement at the end of the line, because it is a complete statement. Never break a return statement. Accessing Arrays with Named Indexes Many programming languages support arrays with named indexes."
  },
  {
    "document": "Arrays with named indexes are called associative arrays (or hashes). JavaScript does not support arrays with named indexes. In JavaScript, arrays use numbered indexes: Example In JavaScript, objects use named indexes. If you use a named index, when accessing an array, JavaScript will redefine the array to a standard object. After the automatic redefinition, array methods and properties will produce undefined or incorrect results: Example: Ending Definitions with a Comma Trailing commas in object and array definition are legal in ECMAScript 5. Object Example: Array Example: WARNING ! ! Internet Explorer 8 will crash. JSON does not allow trailing commas. JSON: JSON: Undefined is Not Null JavaScript objects, variables, properties, and methods can be undefined. undefined In addition, empty JavaScript objects can have the value null. null This can make it a little bit difficult to test if an object is empty. You can test if an object exists by testing if the type is undefined: undefined Example: But you cannot test if an object is null, because this will throw an error if the object is undefined: null undefined Incorrect: To solve this problem, you must test if an object is not null, and not undefined. null undefined But this can still throw an error: Incorrect: Because of this, you must test for not undefined before you can test for not null: undefined null Correct:"
  },
  {
    "document": "JavaScript Performance How to speed up your JavaScript code. Reduce Activity in Loops Loops are often used in programming. Each statement in a loop, including the for statement, is executed for each iteration of the loop. Statements or assignments that can be placed outside the loop will make the loop run faster. Bad: Better Code: The bad code accesses the length property of an array each time the loop is iterated. The better code accesses the length property outside the loop and makes the loop run faster. Reduce DOM Access Accessing the HTML DOM is very slow, compared to other JavaScript statements. If you expect to access a DOM element several times, access it once, and use it as a local variable: Example Reduce DOM Size Keep the number of elements in the HTML DOM small. This will always improve page loading, and speed up rendering (page display), especially on smaller devices. Every attempt to search the DOM (like getElementsByTagName) will benefit from a smaller DOM. Avoid Unnecessary Variables Don't create new variables if you don't plan to save values. Often you can replace code like this: With this: Delay JavaScript Loading Putting your scripts at the bottom of the page body lets the browser load the page first. While a script is downloading, the browser will not start any other downloads. In addition all parsing and rendering activity might be blocked. The HTTP specification defines that browsers should not download more than two components in parallel. An alternative is to use defer=\"true\" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts. defer=\"true\" If possible, you can add your script to the page by code, after the page has loaded: Example Avoid Using with Avoid using the with keyword. It has a negative effect on speed. It also clutters up JavaScript scopes. with The with keyword is not allowed in strict mode. with"
  },
  {
    "document": "JavaScript Reserved Words You can read more about the different JavaScript versions in the chapter JS Versions. Removed Reserved Words Do not use these words as variables. ECMAScript 5/6 does not have full support in all browsers. JavaScript Objects, Properties, and Methods Java Reserved Words Other Reserved Words JavaScript can be used as the programming language in many applications. HTML Event Handlers In addition you should avoid using the name of all HTML event handlers."
  },
  {
    "document": "JavaScript Versions JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997. ECMAScript is the official name of the language. ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6. Since 2016, versions are named by year (ECMAScript 2016, 2017, 2018, 2019, 2020). ECMAScript Editions This tutorial covers every version of JavaScript: Browser Support ECMAScript 1 - 6 is fully supported in all modern browsers. Browser Support for ES5 (2009) * Internet Explorer 9 does not support ECMAScript 5 \"use strict\". Browser Support for ES6 (2015) Internet Explorer does not support ECMAScript 2015. Browser Support for ECMAScript 2016"
  },
  {
    "document": "JavaScript ES5 ECMAScript 2009, also known as ES5, was the first major revision to JavaScript. This chapter describes the most important features of ES5. ES5 Features Browser Support ES5 (JavaScript 2009) fully supported in all modern browsers since July 2013: The \"use strict\" Directive \"use strict\" defines that the JavaScript code should be executed in \"strict mode\". \"use strict\" With strict mode you can, for example, not use undeclared variables. You can use strict mode in all your programs. It helps you to write cleaner code, like preventing you from using undeclared variables. \"use strict\" is just a string expression. Old browsers will not throw an error if they don't understand it. \"use strict\" Read more in JS Strict Mode. Property Access on Strings The charAt() method returns the character at a specified index (position) in a string: charAt() Example ES5 allows property access on strings: Example Property access on string might be a little unpredictable. Read more in JS String Methods. Strings Over Multiple Lines Example The \\ method might not have universal support.Older browsers might treat the spaces around the backslash differently. Some older browsers do not allow spaces behind the \\ character. A safer way to break up a string literal, is to use string addition: Example Reserved Words as Property Names ES5 allows reserved words as property names: Object Example String trim() The trim() method removes whitespace from both sides of a string. trim() Example Read more in JS String Methods. Array.isArray() The isArray() method checks whether an object is an array. isArray() Example Read more in JS Arrays. Array forEach() The forEach() method calls a function once for each array element. forEach() Example Learn more in JS Array Iteration Methods. Array map() This example multiplies each array value by 2: Example Learn more in JS Array Iteration Methods. Array filter() This example creates a new array from elements with a value larger than 18: Example Learn more in JS Array Iteration Methods. Array reduce() This example finds the sum of all numbers in an array: Example Learn more in JS Array Iteration Methods. Array reduceRight() This example also finds the sum of all numbers in an array: Example Learn more in JS Array Iteration Methods. Array every() This example checks if all values are over 18: Example Learn more in JS Array Iteration Methods. Array some() This example checks if some values are over 18: Example Learn more in JS Array Iteration Methods. Array indexOf() Search an array for an element value and returns its position. Example Learn more in JS Array Iteration Methods. Array lastIndexOf() lastIndexOf() is the same as indexOf(), but searches from the end of the array. lastIndexOf() indexOf() Example Learn more in JS Array Iteration Methods. JSON.parse() A common use of JSON is to receive data from a web server. Imagine you received this text string from a web server: The JavaScript function JSON.parse() is used to convert the text into a JavaScript object: JSON.parse() Read more in our JSON Tutorial."
  },
  {
    "document": "JSON.stringify() A common use of JSON is to send data to a web server. When sending data to a web server, the data has to be a string. Imagine we have this object in JavaScript: Use the JavaScript function JSON.stringify() to convert it into a string. JSON.stringify() The result will be a string following the JSON notation. myJSON is now a string, and ready to be sent to a server: Example Read more in our JSON Tutorial. Date.now() Date.now() returns the number of milliseconds since zero date (January 1. 1970 00:00:00 UTC). Date.now() Example Date.now() returns the same as getTime() performed on a Date object. Date.now() Date Learn more in JS Dates. Date toISOString() The toISOString() method converts a Date object to a string, using the ISO standard format: toISOString() Example Date toJSON() toJSON() converts a Date object into a string, formatted as a JSON date. toJSON() JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ: Example Property Getters and Setters ES5 lets you define object methods with a syntax that looks like getting or setting a property. This example creates a getter for a property called fullName: Example This example creates a setter and a getter for the language property: Example This example uses a setter to secure upper case updates of language: Example Learn more about Gettes and Setters in JS Object Accessors Object.defineProperty() Object.defineProperty() is a new Object method in ES5. Object.defineProperty() It lets you define an object property and/or change a property's value and/or metadata. Example Next example is the same code, except it hides the language property from enumeration: Example This example creates a setter and a getter to secure upper case updates of language: Example Object.create() The Object.create() method creates an object from an existing object. Object.create() Example Object.keys() The Object.keys() method returns an array with the keys of an object. Object.keys() Example Object Management ES5 added new Object management methods to JavaScript: Managing Objects Learn more in Object Management. Object Protection ES5 added Object protection methods to JavaScript: Protecting Objects Learn more in Object Protection. Function Bind() With the bind() method, an object can borrow a method from another object. bind() This example creates 2 objects (person and member). The member object borrows the fullname method from the person object: Example Learn more in Function bind(). Trailing Commas ES5 allows trailing commas in object and array definitions: Object Example Array Example WARNING ! !! JSON does not allow trailing commas. JSON Objects: JSON Arrays:"
  },
  {
    "document": "Javascript ES6 ECMAScript 2015 was the second major revision to JavaScript. ECMAScript 2015 is also known as ES6 and ECMAScript 6. This chapter describes the most important features of ES6. New Features in ES6 Browser Support for ES6 (2015) ES6 is fully supported in all modern browsers since June 2017: ES6 is not supported in Internet Explorer. JavaScript let The let keyword allows you to declare a variable with block scope. let Example Read more about let in the chapter: JavaScript Let. let JavaScript const The const keyword allows you to declare a constant (a JavaScript variable with a constant value). const Constants are similar to let variables, except that the value cannot be changed. Example Read more about const in the chapter: JavaScript Const. const Arrow Functions Arrow functions allows a short syntax for writing function expressions. You don't need the function keyword, the return keyword, and the curly brackets. function return Example Arrow functions do not have their own this. They are not well suited for defining object methods. this Arrow functions are not hoisted. They must be defined before they are used. Using const is safer than using var, because a function expression is always a constant value. const var You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them: return Example Learn more about Arrow Functions in the chapter: JavaScript Arrow Function. Object Destructuring Destructuring assignment makes it easy to assign array values and object properties to variables. Example Note: When destructuring an object, you must use the same name for the variables as the corresponding object keys (names). The order of the keys (names) does not matter. Array Destructuring Destructuring assignment makes it easy to assign array values and object properties to variables. Example The Spread (...) Operator The ... operator expands an iterable (like an array) into more elements: Example const q1 = [\"Jan\", \"Feb\", \"Mar\"]; const q2 = [\"Apr\", \"May\", \"Jun\"]; const q3 = [\"Jul\", \"Aug\", \"Sep\"]; const q4 = [\"Oct\", \"Nov\", \"May\"]; const year = [...q1, ...q2, ...q3, ...q4]; Try it Yourself Â» The ... operator can be used to expand an iterable into more arguments for function calls: Example const numbers = [23,55,21,87,56]; let maxValue = Math.max(...numbers); Try it Yourself Â» The For/Of Loop The JavaScript for/of statement loops through the values of an iterable objects. for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more. The for/of loop has the following syntax: for (variable of iterable) { // code block to be executed } variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var. iterable - An object that has iterable properties."
  },
  {
    "document": "Looping over an Array Example const cars = [\"BMW\", \"Volvo\", \"Mini\"]; let text = \"\"; for (let x of cars) { text += x + \" \"; } Try it Yourself Â» Looping over a String Example let language = \"JavaScript\"; let text = \"\"; for (let x of language) { text += x + \" \"; } Try it Yourself Â» Learn more in the chapter: JavaScript Loop For/In/Of. JavaScript Maps Being able to use an Object as a key is an important Map feature. Example const fruits = new Map([ [\"apples\", 500], [\"bananas\", 300], [\"oranges\", 200] ]); Try it Yourself Â» Learn more about Map objects, and the difference between a Map and an Array, in the the chapter: JavaScript Maps. JavaScript Sets Example // Create a Set const letters = new Set(); // Add some values to the Set letters.add(\"a\"); letters.add(\"b\"); letters.add(\"c\"); Try it Yourself Â» Learn more about Set objects in the the chapter: JavaScript Sets. JavaScript Classes JavaScript Classes are templates for JavaScript Objects. Use the keyword class to create a class. Always add a method named constructor(): Syntax class ClassName { constructor() { ... } } Example class Car { constructor(name, year) { this.name = name; this.year = year; } } The example above creates a class named \"Car\". The class has two initial properties: \"name\" and \"year\". A JavaScript class is not an object. It is a template for JavaScript objects. Using a Class When you have a class, you can use the class to create objects: Example const myCar1 = new Car(\"Ford\", 2014); const myCar2 = new Car(\"Audi\", 2019); Try it Yourself Â» Learn more about classes in the the chapter: JavaScript Classes. JavaScript Promises A Promise is a JavaScript object that links \"Producing Code\" and \"Consuming Code\". \"Producing Code\" can take some time and \"Consuming Code\" must wait for the result. Promise Syntax const myPromise = new Promise(function(myResolve, myReject) { // \"Producing Code\" (May take some time) myResolve(); // when successful myReject(); // when error }); // \"Consuming Code\" (Must wait for a fulfilled Promise). myPromise.then( function(value) { /* code if successful */ }, function(error) { /* code if some error */ } ); Example Using a Promise const myPromise = new Promise(function(myResolve, myReject) { setTimeout(function() { myResolve(\"I love You ! ! \"); }, 3000);}); myPromise.then(function(value) { document.getElementById(\"demo\").innerHTML = value; }); Try it Yourself Â» Learn more about Promises in the the chapter: JavaScript Promises. The Symbol Type A JavaScript Symbol is a primitive data type just like Number, String, or Boolean. It represents a unique \"hidden\" identifier that no other code can accidentally access. For instance, if different coders want to add a person.id property to a person object belonging to a third-party code, they could mix each others values."
  },
  {
    "document": "Using Symbol() to create a unique identifiers, solves this problem: Example const person = { firstName: \"John\", lastName: \"Doe\", age: 50, eyeColor: \"blue\" }; let id = Symbol('id'); person[id] = 140353; // Now person[id] = 140353 // but person.id is still undefined Try it Yourself Â» Note Symbols are always unique. If you create two symbols with the same description they will have different values: Symbol(\"id\") == Symbol(\"id\"); // false Default Parameter Values ES6 allows function parameters to have default values. Example function myFunction(x, y = 10) { // y is 10 if not passed or undefined return x + y;}myFunction(5); // will return 15 Try it Yourself Â» Function Rest Parameter The rest parameter (...) allows a function to treat an indefinite number of arguments as an array: Example function sum(...args) { let sum = 0; for (let arg of args) sum += arg; return sum; } let x = sum(4, 9, 16, 25, 29, 100, 66, 77); Try it Yourself Â» String.includes() The includes() method returns true if a string contains a specified value, otherwise false: Example let text = \"Hello world, welcome to the universe. \"; text.includes(\"world\") // Returns true Try it Yourself Â» String.startsWith() The startsWith() method returns true if a string begins with a specified value, otherwise false: Example let text = \"Hello world, welcome to the universe. \"; text.startsWith(\"Hello\") // Returns true Try it Yourself Â» String.endsWith() The endsWith() method returns true if a string ends with a specified value, otherwise false: Example var text = \"John Doe\"; text.endsWith(\"Doe\") // Returns true Try it Yourself Â» Array entries() Example Create an Array Iterator, and then iterate over the key/value pairs: const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]; const f = fruits.entries();for (let x of f) { document.getElementById(\"demo\").innerHTML += x;} Try it Yourself Â» The entries() method returns an Array Iterator object with key/value pairs: [0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"] The entries() method does not change the original array. Array.from() The Array.from() method returns an Array object from any object with a length property or any iterable object. Example Create an Array from a String: Array.from(\"ABCDEFG\") // Returns [A,B,C,D,E,F,G] Try it Yourself Â» Array keys() The keys() method returns an Array Iterator object with the keys of an array. Example Create an Array Iterator object, containing the keys of the array: const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]; const keys = fruits.keys(); let text = \"\"; for (let x of keys) { text += x + \"<br>\";} Try it Yourself Â» Array find() The find() method returns the value of the first array element that passes a test function."
  },
  {
    "document": "This example finds (returns the value of ) the first element that is larger than 18: Example const numbers = [4, 9, 16, 25, 29];let first = numbers.find(myFunction);function myFunction(value, index, array) { return value > 18;} Try it Yourself Â» Note that the function takes 3 arguments: The item value The item index The array itself Array findIndex() The findIndex() method returns the index of the first array element that passes a test function. This example finds the index of the first element that is larger than 18: Example const numbers = [4, 9, 16, 25, 29];let first = numbers.findIndex(myFunction);function myFunction(value, index, array) { return value > 18;} Try it Yourself Â» Note that the function takes 3 arguments: The item value The item index The array itself New Math Methods ES6 added the following methods to the Math object: Math.trunc() Math.sign() Math.cbrt() Math.log2() Math.log10() The Math.trunc() Method Math.trunc(x) returns the integer part of x: Example Math.trunc(4.9); // returns 4 Math.trunc(4.7); // returns 4 Math.trunc(4.4); // returns 4 Math.trunc(4.2); // returns 4 Math.trunc(-4.2); // returns -4 Try it Yourself Â» The Math.sign() Method Math.sign(x) returns if x is negative, null or positive: Example Math.sign(-4); // returns -1 Math.sign(0); // returns 0 Math.sign(4); // returns 1 Try it Yourself Â» The Math.cbrt() Method Math.cbrt(x) returns the cube root of x: Example Math.cbrt(8); // returns 2 Math.cbrt(64); // returns 4 Math.cbrt(125); // returns 5 Try it Yourself Â» The Math.log2() Method Math.log2(x) returns the base 2 logarithm of x: Example Math.log2(2); // returns 1 Try it Yourself Â» The Math.log10() Method Math.log10(x) returns the base 10 logarithm of x: Example Math.log10(10); // returns 1 Try it Yourself Â» New Number Properties ES6 added the following properties to the Number object: EPSILON MIN_SAFE_INTEGER MAX_SAFE_INTEGER EPSILON Example let x = Number.EPSILON; Try it Yourself Â» MIN_SAFE_INTEGER Example let x = Number.MIN_SAFE_INTEGER; Try it Yourself Â» MAX_SAFE_INTEGER Example let x = Number.MAX_SAFE_INTEGER; Try it Yourself Â» The Number.isInteger() Method The Number.isInteger() method returns true if the argument is an integer. Example Number.isInteger(10); // returns true Number.isInteger(10.5); // returns false Try it Yourself Â» The Number.isSafeInteger() Method A safe integer is an integer that can be exactly represented as a double precision number. The Number.isSafeInteger() method returns true if the argument is a safe integer. Example Number.isSafeInteger(10); // returns true Number.isSafeInteger(12345678901234567890); // returns false Try it Yourself Â» Safe integers are all integers from -(253 - 1) to +(253 - 1). This is safe: 9007199254740991. This is not safe: 9007199254740992. New Global Methods ES6 added 2 new global number methods: isFinite() isNaN() The isFinite() Method The global isFinite() method returns false if the argument is Infinity or NaN. Otherwise it returns true: Example isFinite(10/0); // returns false isFinite(10/1); // returns true Try it Yourself Â» The isNaN() Method The global isNaN() method returns true if the argument is NaN."
  },
  {
    "document": "Otherwise it returns false: Example isNaN(\"Hello\"); // returns true Try it Yourself Â» Modules Modules are imported in two different ways: Import from named exports Import named exports from the file person.js: import { name, age } from \"./person.js\"; Try it Yourself Â» Import from default exports Import a default export from the file message.js: import message from \"./message.js\"; Try it Yourself Â» Learn more about Modules in: JavaScript Modules. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example The ... operator can be used to expand an iterable into more arguments for function calls: Example The For/Of Loop The JavaScript for/of statement loops through the values of an iterable objects. for/of for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more. for/of The for/of loop has the following syntax: for/of variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var. const let var iterable - An object that has iterable properties. Looping over an Array Example Looping over a String Example Learn more in the chapter: JavaScript Loop For/In/Of. JavaScript Maps Being able to use an Object as a key is an important Map feature. Example Learn more about Map objects, and the difference between a Map and an Array, in the the chapter: JavaScript Maps. JavaScript Sets Example Learn more about Set objects in the the chapter: JavaScript Sets. JavaScript Classes JavaScript Classes are templates for JavaScript Objects. Use the keyword class to create a class. class Always add a method named constructor(): constructor() Syntax Example The example above creates a class named \"Car\". The class has two initial properties: \"name\" and \"year\". A JavaScript class is not an object. It is a template for JavaScript objects. Using a Class When you have a class, you can use the class to create objects: Example Try it Yourself Â» Learn more about classes in the the chapter: JavaScript Classes. JavaScript Promises A Promise is a JavaScript object that links \"Producing Code\" and \"Consuming Code\". \"Producing Code\" can take some time and \"Consuming Code\" must wait for the result. Promise Syntax Example Using a Promise Try it Yourself Â» Learn more about Promises in the the chapter: JavaScript Promises. The Symbol Type A JavaScript Symbol is a primitive data type just like Number, String, or Boolean. It represents a unique \"hidden\" identifier that no other code can accidentally access. For instance, if different coders want to add a person.id property to a person object belonging to a third-party code, they could mix each others values. Using Symbol() to create a unique identifiers, solves this problem: Example Note Symbols are always unique. If you create two symbols with the same description they will have different values: Default Parameter Values ES6 allows function parameters to have default values."
  },
  {
    "document": "Example Function Rest Parameter The rest parameter (...) allows a function to treat an indefinite number of arguments as an array: Example String.includes() The includes() method returns true if a string contains a specified value, otherwise false: includes() true false Example String.startsWith() The startsWith() method returns true if a string begins with a specified value, otherwise false: startsWith() true false Example String.endsWith() The endsWith() method returns true if a string ends with a specified value, otherwise false: endsWith() true false Example Array entries() Example Create an Array Iterator, and then iterate over the key/value pairs: The entries() method returns an Array Iterator object with key/value pairs: entries() [0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"] The entries() method does not change the original array. entries() Array.from() The Array.from() method returns an Array object from any object with a length property or any iterable object. Array.from() Example Create an Array from a String: Array keys() The keys() method returns an Array Iterator object with the keys of an array. keys() Example Create an Array Iterator object, containing the keys of the array: Array find() The find() method returns the value of the first array element that passes a test function. find() This example finds (returns the value of ) the first element that is larger than 18: Example Note that the function takes 3 arguments: Array findIndex() The findIndex() method returns the index of the first array element that passes a test function. findIndex() This example finds the index of the first element that is larger than 18: Example Note that the function takes 3 arguments: New Math Methods ES6 added the following methods to the Math object: Math.trunc() Math.sign() Math.cbrt() Math.log2() Math.log10() The Math.trunc() Method Math.trunc(x) returns the integer part of x: Math.trunc(x) Example The Math.sign() Method Math.sign(x) returns if x is negative, null or positive: Math.sign(x) Example The Math.cbrt() Method Math.cbrt(x) returns the cube root of x: Math.cbrt(x) Example The Math.log2() Method Math.log2(x) returns the base 2 logarithm of x: Math.log2(x) Example The Math.log10() Method Math.log10(x) returns the base 10 logarithm of x: Math.log10(x) Example New Number Properties ES6 added the following properties to the Number object: EPSILON MIN_SAFE_INTEGER MAX_SAFE_INTEGER EPSILON Example MIN_SAFE_INTEGER Example MAX_SAFE_INTEGER Example The Number.isInteger() Method The Number.isInteger() method returns true if the argument is an integer. Number.isInteger() true Example The Number.isSafeInteger() Method A safe integer is an integer that can be exactly represented as a double precision number. The Number.isSafeInteger() method returns true if the argument is a safe integer. Number.isSafeInteger() true Example Safe integers are all integers from -(253 - 1) to +(253 - 1). This is safe: 9007199254740991. This is not safe: 9007199254740992. New Global Methods ES6 added 2 new global number methods: isFinite() isNaN() The isFinite() Method The global isFinite() method returns false if the argument is Infinity or NaN. isFinite() false Infinity NaN Otherwise it returns true: true Example The isNaN() Method The global isNaN() method returns true if the argument is NaN."
  },
  {
    "document": "Otherwise it returns false: isNaN() true NaN false Example Modules Modules are imported in two different ways: Import from named exports Import named exports from the file person.js: Try it Yourself Â» Import from default exports Import a default export from the file message.js: Try it Yourself Â» Learn more about Modules in: JavaScript Modules."
  },
  {
    "document": "ECMAScript 2016 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ECMAScript 2016 This chapter introduces the new features in ECMAScript 2016: Browser Support ES 2016 is fully supported in all modern browsers since March 2017: ES 2016 is not supported in Internet Explorer. Exponentiation Operator The exponentiation operator (**) raises the first operand to the power of the second operand. ** Example x ** y produces the same result as Math.pow(x, y): x ** y Math.pow(x, y) Example Exponentiation Assignment **= Example The Exponentiation Operator is supported in all modern browsers since March 2017: JavaScript Array includes() ECMAScript 2016 introduced Array.includes to arrays. Array.includes This allows us to check if an element is present in an array: Example Array.includes is supported in all modern browsers since August 2016: Array.includes"
  },
  {
    "document": "ECMAScript 2017 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ECMAScript 2017 This chapter introduces the new features in ECMAScript 2017: ES 2017 is fully supported in all modern browsers since September 2017: JavaScript String Padding ECMAScript 2017 added two string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string. padStart() padEnd() Examples JavaScript string padding is supported in all modern browsers since April 2017: JavaScript Object Entries ECMAScript 2017 added the Object.entries() method to objects. Object.entries() Object.entries() returns an array of the key/value pairs in an object: Object.entries() Example Object.entries() makes it simple to use objects in loops: Object.entries() Example Object.entries() also makes it simple to convert objects to maps: Object.entries() Example Object.entries() is supported in all modern browsers since March 2017: Object.entries() JavaScript Object Values Object.values() is similar to Object.entries(), but returns a single dimension array of the object values: Object.values() Object.entries() Example Object.values() is supported in all modern browsers since March 2017: Object.values() JavaScript Async Functions Waiting for a Timeout Try it Yourself Â» Async functions are supported in all modern browsers since September 2017: JavaScript Trailing Commas JavaScript allows trailing commas wherever a comma-separated list of values is accepted. In Array and Object Literals, Function Calls, Parameters, Imports and Exports. Example Trailing commas are supported in all modern browsers since May 2017:"
  },
  {
    "document": "ECMAScript 2018 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ECMAScript 2018 This chapter introduces the new features in ECMAScript 2018: JavaScript Asynchronous Iteration ECMAScript 2018 added asynchronous iterators and iterables. With asynchronous iterables, we can use the await keyword in for/of loops. Example for await () {} JavaScript asynchronous iteration is supported in all modern browsers since January 2020: Chrome 63 Edge 79 Firefox 57 Safari 11 Opera 50 Dec 2017 Jan 2020 Nov 2017 Sep 2017 Jan 2018 JavaScript Promise.finally ECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally: Example let myPromise = new Promise(); myPromise.then(); myPromise.catch(); myPromise.finally(); Promise.finally is supported in all modern browsers since November 2018: Chrome 63 Edge 18 Firefox 58 Safari 11.1 Opera 50 Dec 2017 Nov 2018 Jan 2018 Mar 2018 Jan 2018 JavaScript Object Rest Properties ECMAScript 2018 added rest properties. This allows us to destruct an object and collect the leftovers onto a new object: Example let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 }; x; // 1 y; // 2 z; // { a: 3, b: 4 } Object rest properties is supported in all modern browsers since January 2020: Chrome 60 Edge 79 Firefox 55 Safari 11.1 Opera 47 Jul 2017 Jan 2020 Aug 2017 Mar 2018 Aug 2017 New JavaScript RegExp Features ECMAScript 2018 added 4 new RegExp features: Unicode Property Escapes (\\p{...}) Lookbehind Assertions (?<= ) and (?<! ) Named Capture Groups s (dotAll) Flag The new RegExp features is supported in all modern browsers since June 2020: Chrome 64 Edge 79 Firefox 78 Safari 12 Opera 51 Jan 2018 Jan 2020 Jun 2020 Sep 2018 Feb 2018 JavaScript Threads In JavaScript you use the Web Workers API to create threads. Worker threads are used to execute code in the background so that the main program can continue execution. Worker threads run simultaneously with the main program. Simultaneous execution of different parts of a program can be time-saving. JavaScript Shared Memory Shared memory is a feature that allows threads (different parts of a program) to access and update the same data in the same memory. Instead of passing data between threads, you can pass a SharedArrayBuffer object that points to the memory where data is saved. SharedArrayBuffer A SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up await for/of Example JavaScript asynchronous iteration is supported in all modern browsers since January 2020: JavaScript Promise.finally ECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally: Promise.finally Example Promise.finally is supported in all modern browsers since November 2018: Promise.finally JavaScript Object Rest Properties ECMAScript 2018 added rest properties."
  },
  {
    "document": "This allows us to destruct an object and collect the leftovers onto a new object: Example Object rest properties is supported in all modern browsers since January 2020: New JavaScript RegExp Features ECMAScript 2018 added 4 new RegExp features: The new RegExp features is supported in all modern browsers since June 2020: JavaScript Threads In JavaScript you use the Web Workers API to create threads. Worker threads are used to execute code in the background so that the main program can continue execution. Worker threads run simultaneously with the main program. Simultaneous execution of different parts of a program can be time-saving. JavaScript Shared Memory Shared memory is a feature that allows threads (different parts of a program) to access and update the same data in the same memory. Instead of passing data between threads, you can pass a SharedArrayBuffer object that points to the memory where data is saved. SharedArrayBuffer A SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object."
  },
  {
    "document": "ECMAScript 2019 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ES2019 JavaScript String trimStart() ES2019 added the String method trimStart() to JavaScript. The trimStart() method works like trim(), but removes whitespace only from the start of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimStart(); Try it Yourself Â» JavaScript String trimStart() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript String trimEnd() ES2019 added the String method trimEnd() to JavaScript. The trimEnd() method works like trim(), but removes whitespace only from the end of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimEnd(); Try it Yourself Â» JavaScript String trimEnd() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript Object fromEntries() ES2019 added the Object method fromEntries() to JavaScript. The fromEntries() method creates an object from iterable key / value pairs. Example const fruits = [ [\"apples\", 300], [\"pears\", 900], [\"bananas\", 500] ]; const myObj = Object.fromEntries(fruits); Try it Yourself Â» JavaScript Object fromEntries() is supported in all modern browsers since January 2020: Chrome 73 Edge 79 Firefox 63 Safari 12.1 Opera 60 Mar 2019 Jan 2020 Oct 2018 Mar 2019 Apr 2019 Optional catch Binding From ES2019 you can omit the catch parameter if you don't need it:. Example Before 2019: try { // code } catch (err) { // code } After 2019: try { // code } catch { // code } Optional catch binding is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 58 Safari 11.1 Opera 53 Apr 2018 Jan 2020 Jan 2018 Mar 2018 May 2018 JavaScript Array flat() ES2019 added the Array flat() method to JavaScript. The flat() method creates a new array by flattening a nested array. Example const myArr = [[1,2],[3,4],[5,6]]; const newArr = myArr.flat(); Try it Yourself Â» JavaScript Array flat() is supported in all modern browsers since January 2020: Chrome 69 Edge 79 Firefox 62 Safari 12 Opera 56 Sep 2018 Jan 2020 Sep 2018 Sep 2018 Sep 2018 JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. Example const myArr = [1, 2, 3, 4, 5, 6]; const newArr = myArr.flatMap(x => [x, x * 10]); Try it Yourself Â» Stable Array sort() ES2019 revised the Array sort() method. Before 2019, the specification allowed unstable sorting algorithms such as QuickSort. After ES2019, browsers must use a stable sorting algorithm: When sorting elements on a value, the elements must keep their relative position to other elements with the same value."
  },
  {
    "document": "Example const myArr = [ {name:\"X00\",price:100 }, {name:\"X01\",price:100 }, {name:\"X02\",price:100 }, {name:\"X03\",price:100 }, {name:\"X04\",price:110 }, {name:\"X05\",price:110 }, {name:\"X06\",price:110 }, {name:\"X07\",price:110 } ]; Try it Yourself Â» In the example above, when sorting on price, the result should not have names in a different relative position, such as this: X01 100 X03 100 X00 100 X03 100 X05 110 X04 110 X06 110 X07 110 Revised JSON.stringify() ES2019 revised the JSON stringify() method. Before 2019, JSON could not stringify character encoded with \\. Example let text = JSON.stringify(\"\\u26D4\"); Try it Yourself Â» Before ES2019, using JSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF) returned broken Unicode characters like ï¿½ï¿½ï¿½. After this revision, strings with UTF-8 code points convert safely with JSON.stringify(), and back to the original using JSON.parse(). Separator Symbols Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals. Before 2019, these were treated as line terminators and resulted in error exceptions: Example // This is valid in ES2019: let text = \"\\u2028\"; Try it Yourself Â» Note Now, JavaScript and JSON have equal rules. Before ES2019: text = JSON.parse('\"\\u2028\"') would parse to ''. text = '\"\\u2028\"' would give syntax error. Revised Function toString() ES2019 revised the Function toString() method. The toString() method returns a string representing the source code of a function. From 2019, toString() must return the source code of the function including comments, spaces, and syntax details. Before 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written. Example function myFunction(p1, p2) { return p1 * p2; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up trimStart() The trimStart() method works like trim(), but removes whitespace only from the start of a string. trimStart() trim() Example JavaScript String trimStart() is supported in all modern browsers since January 2020: trimStart() JavaScript String trimEnd() ES2019 added the String method trimEnd() to JavaScript. The trimEnd() method works like trim(), but removes whitespace only from the end of a string. Example let text1 = \" Hello World! \"; let text2 = text1.trimEnd(); Try it Yourself Â» JavaScript String trimEnd() is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 61 Safari 12 Opera 50 Apr 2018 Jan 2020 Jun 2018 Sep 2018 May 2018 JavaScript Object fromEntries() ES2019 added the Object method fromEntries() to JavaScript. The fromEntries() method creates an object from iterable key / value pairs. Example const fruits = [ [\"apples\", 300], [\"pears\", 900], [\"bananas\", 500] ]; const myObj = Object.fromEntries(fruits); Try it Yourself Â» JavaScript Object fromEntries() is supported in all modern browsers since January 2020: Chrome 73 Edge 79 Firefox 63 Safari 12.1 Opera 60 Mar 2019 Jan 2020 Oct 2018 Mar 2019 Apr 2019 Optional catch Binding From ES2019 you can omit the catch parameter if you don't need it:."
  },
  {
    "document": "Example Before 2019: try { // code } catch (err) { // code } After 2019: try { // code } catch { // code } Optional catch binding is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 58 Safari 11.1 Opera 53 Apr 2018 Jan 2020 Jan 2018 Mar 2018 May 2018 JavaScript Array flat() ES2019 added the Array flat() method to JavaScript. The flat() method creates a new array by flattening a nested array. Example const myArr = [[1,2],[3,4],[5,6]]; const newArr = myArr.flat(); Try it Yourself Â» JavaScript Array flat() is supported in all modern browsers since January 2020: Chrome 69 Edge 79 Firefox 62 Safari 12 Opera 56 Sep 2018 Jan 2020 Sep 2018 Sep 2018 Sep 2018 JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. Example const myArr = [1, 2, 3, 4, 5, 6]; const newArr = myArr.flatMap(x => [x, x * 10]); Try it Yourself Â» Stable Array sort() ES2019 revised the Array sort() method. Before 2019, the specification allowed unstable sorting algorithms such as QuickSort. After ES2019, browsers must use a stable sorting algorithm: When sorting elements on a value, the elements must keep their relative position to other elements with the same value. Example const myArr = [ {name:\"X00\",price:100 }, {name:\"X01\",price:100 }, {name:\"X02\",price:100 }, {name:\"X03\",price:100 }, {name:\"X04\",price:110 }, {name:\"X05\",price:110 }, {name:\"X06\",price:110 }, {name:\"X07\",price:110 } ]; Try it Yourself Â» In the example above, when sorting on price, the result should not have names in a different relative position, such as this: X01 100 X03 100 X00 100 X03 100 X05 110 X04 110 X06 110 X07 110 Revised JSON.stringify() ES2019 revised the JSON stringify() method. Before 2019, JSON could not stringify character encoded with \\. Example let text = JSON.stringify(\"\\u26D4\"); Try it Yourself Â» Before ES2019, using JSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF) returned broken Unicode characters like ï¿½ï¿½ï¿½. After this revision, strings with UTF-8 code points convert safely with JSON.stringify(), and back to the original using JSON.parse(). Separator Symbols Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals. Before 2019, these were treated as line terminators and resulted in error exceptions: Example // This is valid in ES2019: let text = \"\\u2028\"; Try it Yourself Â» Note Now, JavaScript and JSON have equal rules. Before ES2019: text = JSON.parse('\"\\u2028\"') would parse to ''. text = '\"\\u2028\"' would give syntax error. Revised Function toString() ES2019 revised the Function toString() method. The toString() method returns a string representing the source code of a function. From 2019, toString() must return the source code of the function including comments, spaces, and syntax details. Before 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written."
  },
  {
    "document": "Example function myFunction(p1, p2) { return p1 * p2; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up trimEnd() The trimEnd() method works like trim(), but removes whitespace only from the end of a string. trimEnd() trim() Example JavaScript String trimEnd() is supported in all modern browsers since January 2020: trimEnd() JavaScript Object fromEntries() ES2019 added the Object method fromEntries() to JavaScript. The fromEntries() method creates an object from iterable key / value pairs. Example const fruits = [ [\"apples\", 300], [\"pears\", 900], [\"bananas\", 500] ]; const myObj = Object.fromEntries(fruits); Try it Yourself Â» JavaScript Object fromEntries() is supported in all modern browsers since January 2020: Chrome 73 Edge 79 Firefox 63 Safari 12.1 Opera 60 Mar 2019 Jan 2020 Oct 2018 Mar 2019 Apr 2019 Optional catch Binding From ES2019 you can omit the catch parameter if you don't need it:. Example Before 2019: try { // code } catch (err) { // code } After 2019: try { // code } catch { // code } Optional catch binding is supported in all modern browsers since January 2020: Chrome 66 Edge 79 Firefox 58 Safari 11.1 Opera 53 Apr 2018 Jan 2020 Jan 2018 Mar 2018 May 2018 JavaScript Array flat() ES2019 added the Array flat() method to JavaScript. The flat() method creates a new array by flattening a nested array. Example const myArr = [[1,2],[3,4],[5,6]]; const newArr = myArr.flat(); Try it Yourself Â» JavaScript Array flat() is supported in all modern browsers since January 2020: Chrome 69 Edge 79 Firefox 62 Safari 12 Opera 56 Sep 2018 Jan 2020 Sep 2018 Sep 2018 Sep 2018 JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. Example const myArr = [1, 2, 3, 4, 5, 6]; const newArr = myArr.flatMap(x => [x, x * 10]); Try it Yourself Â» Stable Array sort() ES2019 revised the Array sort() method. Before 2019, the specification allowed unstable sorting algorithms such as QuickSort. After ES2019, browsers must use a stable sorting algorithm: When sorting elements on a value, the elements must keep their relative position to other elements with the same value. Example const myArr = [ {name:\"X00\",price:100 }, {name:\"X01\",price:100 }, {name:\"X02\",price:100 }, {name:\"X03\",price:100 }, {name:\"X04\",price:110 }, {name:\"X05\",price:110 }, {name:\"X06\",price:110 }, {name:\"X07\",price:110 } ]; Try it Yourself Â» In the example above, when sorting on price, the result should not have names in a different relative position, such as this: X01 100 X03 100 X00 100 X03 100 X05 110 X04 110 X06 110 X07 110 Revised JSON.stringify() ES2019 revised the JSON stringify() method. Before 2019, JSON could not stringify character encoded with \\. Example let text = JSON.stringify(\"\\u26D4\"); Try it Yourself Â» Before ES2019, using JSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF) returned broken Unicode characters like ï¿½ï¿½ï¿½."
  },
  {
    "document": "After this revision, strings with UTF-8 code points convert safely with JSON.stringify(), and back to the original using JSON.parse(). Separator Symbols Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals. Before 2019, these were treated as line terminators and resulted in error exceptions: Example // This is valid in ES2019: let text = \"\\u2028\"; Try it Yourself Â» Note Now, JavaScript and JSON have equal rules. Before ES2019: text = JSON.parse('\"\\u2028\"') would parse to ''. text = '\"\\u2028\"' would give syntax error. Revised Function toString() ES2019 revised the Function toString() method. The toString() method returns a string representing the source code of a function. From 2019, toString() must return the source code of the function including comments, spaces, and syntax details. Before 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written. Example function myFunction(p1, p2) { return p1 * p2; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up fromEntries() The fromEntries() method creates an object from iterable key / value pairs. fromEntries() Example JavaScript Object fromEntries() is supported in all modern browsers since January 2020: fromEntries() Optional catch Binding From ES2019 you can omit the catch parameter if you don't need it:. Example Before 2019: After 2019: Optional catch binding is supported in all modern browsers since January 2020: JavaScript Array flat() ES2019 added the Array flat() method to JavaScript. flat() The flat() method creates a new array by flattening a nested array. flat() Example JavaScript Array flat() is supported in all modern browsers since January 2020: flat() JavaScript Array flatMap() ES2019 added the Array flatMap() method to JavaScript. flatMap() The flatMap() method first maps all elements of an array and then creates a new array by flattening the array. flatMap() Example Stable Array sort() ES2019 revised the Array sort() method. sort() Before 2019, the specification allowed unstable sorting algorithms such as QuickSort. After ES2019, browsers must use a stable sorting algorithm: When sorting elements on a value, the elements must keep their relative position to other elements with the same value. Example In the example above, when sorting on price, the result should not have names in a different relative position, such as this: Revised JSON.stringify() ES2019 revised the JSON stringify() method. stringify() Before 2019, JSON could not stringify character encoded with \\. Example Before ES2019, using JSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF) returned broken Unicode characters like ï¿½ï¿½ï¿½. JSON.stringify() After this revision, strings with UTF-8 code points convert safely with JSON.stringify(), and back to the original using JSON.parse(). Separator Symbols Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals."
  },
  {
    "document": "Before 2019, these were treated as line terminators and resulted in error exceptions: Example // This is valid in ES2019: let text = \"\\u2028\"; Try it Yourself Â» Note Now, JavaScript and JSON have equal rules. Before ES2019: text = JSON.parse('\"\\u2028\"') would parse to ''. text = '\"\\u2028\"' would give syntax error. Revised Function toString() ES2019 revised the Function toString() method. The toString() method returns a string representing the source code of a function. From 2019, toString() must return the source code of the function including comments, spaces, and syntax details. Before 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written. Example function myFunction(p1, p2) { return p1 * p2; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up JSON.stringify() JSON.parse() Separator Symbols Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals. Before 2019, these were treated as line terminators and resulted in error exceptions: Example Note Now, JavaScript and JSON have equal rules. Before ES2019: text = JSON.parse('\"\\u2028\"') would parse to ''. text = '\"\\u2028\"' would give syntax error. Revised Function toString() ES2019 revised the Function toString() method. toString() The toString() method returns a string representing the source code of a function. toString() From 2019, toString() must return the source code of the function including comments, spaces, and syntax details. Before 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written. Example"
  },
  {
    "document": "ECMAScript 2020 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ES2020 Warning These features are relatively new. Older browsers may need an alternative code (Polyfill) JavaScript BigInt JavaScript BigInt variables are used to store big integer values that are too big to be represented by a a normal JavaScript Number. BigInt Number JavaScript integers are only accurate up to about 15 digits. Integer Example BigInt Example To create a BigInt, append n to the end of an integer or call BigInt(): BigInt BigInt() Example The JavaScript typeof a BigInt is \"bigint\": typeof BigInt Example BigInt is supported in all modern browsers since September 2020: BigInt JavaScript String matchAll() Before ES2020 there was no string method that could be used to search for all occurrences of a string in a string. Example If the parameter is a regular expression, the global flag (g) must be set set, otherwise a TypeError is thrown. Example If you want to search case insensitive, the insensitive flag (i) must be set: Example Note ES2021 introduced the string method replaceAll(). The Nullish Coalescing Operator (??) The ? ? operator returns the first argument if it is not nullish (null or undefined). ? ? null undefined Otherwise it returns the second. Example The nullish operator is supported in all modern browsers since March 2020: The Optional Chaining Operator (?.) The Optional Chaining Operator returns undefined if an object is undefined or null (instead of throwing an error). undefined undefined null Example The ?.= operator is supported in all modern browsers since March 2020: ?.= The &&= Operator The Logical AND Assignment Operator is used between two values. If the first value is true, the second value is assigned. true Logical AND Assignment Example The &&= operator is supported in all modern browsers since September 2020: &&= The ||= Operator The Logical OR Assignment Operator is used between two values. If the first value is false, the second value is assigned. false Logical OR Assignment Example The ||= operator is supported in all modern browsers since September 2020: ||= The ? ?= Operator The Nullish Coalescing Assignment Operator is used between two values. If the first value is undefined or null, the second value is assigned. undefined null Nullish Coalescing Assignment Example The ? ?= operator is supported in all modern browsers since September 2020: ? ?= JavaScript Promise.allSettled() The Promise.allSettled() method returns a single Promise from a list of promises. Promise.allSettled() Example Promise.allSettled() is supported in all modern browsers since March 2020: Promise.allSettled()"
  },
  {
    "document": "ECMAScript 2021 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... New Features in ES2021 Warning These features are relatively new. Older browsers may need an alternative code (Polyfill) JavaScript Promise.any() Example Promise.any() is supported in all modern browsers since September 2020: Promise.any() JavaScript String ReplaceAll() ES2021 introduced the string method replaceAll(): replaceAll() Example The replaceAll() method allows you to specify a regular expression instead of a string to be replaced. replaceAll() If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. Example Note ES2020 introduced the string method matchAll(). JavaScript Numeric Separator (_) ES2021 intoduced the numeric separator (_) to make numbers more readable: Example The numeric separator is only for visual use. Example The numeric separator can be placed anywhere in a number: Example Note The numeric separator is not allowed at the beginning or at the end of a number. In JavaScript only variables can start with _. The numeric separator is supported in all modern browsers since January 2020:"
  },
  {
    "document": "ECMAScript 2022 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020, 2022. New Features in ES2022 Warning These features are relatively new. Older browsers may need an alternative code (Polyfill) JavaScript Array at() ES2022 intoduced the array method at(): at() Examples Get the third element of fruits: Get the third element of fruits: The at() method returns an indexed element from an array. at() The at() method returns the same as []. at() [] The at() method is supported in all modern browsers since March 2022: at() Note Many languages allows negative bracket indexing like [-1] to access elements from the end of an object / array / string. negative bracket indexing This is not possible in JavaScript, because [] is used for accessing both arrays and objects. obj[-1] refers to the value of key -1, not to the last property of the object. The at() method was introduced in ES2022 to solve this problem. at() JavaScript String at() ES2022 intoduced the string method at(): at() Examples Get the third letter of name: Get the third letter of name: The at() method returns an indexed element from an string. at() The at() method returns the same as []. at() [] The at() method is supported in all modern browsers since March 2022: at() RegExp d Modifier ES2022 added the /d modifier to express the start and end of the match. Example RegExp Modifiers are used to spescfy case-insensitive, and other global searches: Object hasOwn ES2022 provides a safe way to check if a property is the own property of an object. Object.hasOwn() is similar to Object.prototype.hasOwnProperty but supports all object types. Object.hasOwn() Object.prototype.hasOwnProperty Example Error Cause ES2022 let you specify the reason behind an error with error.cause. error.cause Example JavaScript await import JavasSript modules can now wait for resources that require import before running: JavaScript Class Field Declarations Class Field Declarations is supported in all modern browsers since April 2021: JavaScript Private Methods and Fields Private Methods and Fields is supported in all modern browsers since June 2021:"
  },
  {
    "document": "ECMAScript 2023 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... The 14th edition, ECMAScript 2023, was published in June 2023. New Features in ES2023 Warning These features are relatively new. Older browsers may need an alternative code (Polyfill) JavaScript Array findLast() Method ES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition. Example JavaScript Array findLastIndex() Method The findLastIndex() method finds the index of the last element that satisfies a condition. Example JavaScript Array toReversed() Method ES2023 added the Array toReversed() method as a safe way to reverse an array without altering the original array. The difference between the new toReversed() method and the old reverse() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array. Example JavaScript Array toSorted() Method ES2023 added the Array toSorted() method as a safe way to sort an array without altering the original array. The difference between the new toSorted() method and the old sort() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array. Example JavaScript Array toSpliced() Method ES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array. The difference between the new toSpliced() method and the old splice() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array. Example JavaScript Array with() Method ES2023 added the Array with() method as a safe way to update elements in an array without altering the original array. Example #! JavaScript Shebang A Shebang is a number sign and an exclamation mark (#!) at the beginning of a script: The example above tells the operating system to use the node program to run the script. Now, you can run JavaScript code with ./fileName.js instead of node fileName.js. ./fileName.js node fileName.js #! is also called sharp-exclamation, hashbang, pound-bang, or hash-pling."
  },
  {
    "document": "ECMAScript 2024 JavaScript Version Numbers Old ECMAScript versions was named by numbers: ES5 and ES6. From 2016, versions are named by year: ES2016, 2018, 2020 ... The 15th edition, ECMAScript 2024, is published in July 2024. New Features in ES2024 Warning These features are relatively new. Older browsers may need an alternative code (Polyfill) JavaScript Object.groupBy() Example Description The Object.groupBy() method groups elements of an object according to string values returned from a callback function. Object.groupBy() The Object.groupBy() method does not change the original object. Object.groupBy() Note: The elements in the original and in the returned object are the same. Changes will be reflected in both the original and in the returned object. JavaScript Map.groupBy() Example Description The Map.groupBy() method groups elements of an object according to string values returned from a callback function. Map.groupBy() The Map.groupBy() method does not change the original object. Map.groupBy() Note: The elements in the original and in the returned object are the same. Changes will be reflected in both the original and in the returned object. Object.groupBy() vs Map.groupBy() The difference between Object.groupBy() and Map.groupBy() is: Object.groupBy() groups elements into a JavaScript object. Map.groupBy() groups elements into a Map object. JavaScript Temporal.PlainDate() Example JavaScript Temporal.PlainTime() Example JavaScript Temporal.PlainMonthDay() Example JavaScript Temporal.YearMonth() Example"
  },
  {
    "document": "Internet Explorer Retirement Microsoft ended all support for Internet Explorer June 15, 2022. Internet Explorer Retirement Dates: Source ... Earlier Announcements Windows 11 Removes Internet Explorer Internet Explorer is disabled in Windows 11 Windows 10 Replaces Internet Explorer Internet Explorer is \"replaced\" by Edge in Windows 10 Internet Explorer Retires IE 11 goes out of support on June 15 2022 Microsoft Edge Legacy Edge was the default browser for Windows 10. It was built with Microsoft's browser engine EdgeHTML and their Chakra JavaScript engine. The first versions of Edge (12-18), are now referred to as \"Edge Legacy\". The Microsoft support for Edge Legacy ended on March 9, 2021. Future Windows updates will replace Edge Legacy with The New Edge. Retirement dates published August 17, 2020: 31-12-2020Azure DevOps Services stops supporting Edge Legacy 09-03-2021End of Windows updates for Edge Legacy 13-04-2021Future Windows updates will remove Edge Legacy Source ... The New Edge The new Microsoft Edge is Chromium based with Blink and V8 engines. It was released in January 2020, and is available for Windows 7, 8, and 10. It can also be downloaded for macOS, iOS, and Android. The new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle). Google Google Ad Manager As of March 28, 2022, Google Ad Manager no longer supports ad serving for Internet Explorer versions 11 and below. Source ... Google Search As of October 1, 2021, Google Search no longer supports Internet Explorer 11. Source ... Google Workspace As of March 15, 2021, Google Workspace no longer supports Internet Explorer 11. Source ... Old Operating Systems Internet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy for these products: SystemDefault Browser Windows 7Internet Explorer 11 Windows 8.XInternet Explorer 11 Windows 10Internet Explorer 11 Windows Server 2012Internet Explorer 11 Windows Server 2012 R2Internet Explorer 11 Windows Server 2016Internet Explorer 11 Windows Embedded Standard 7Internet Explorer 11 Windows Embedded POSReady 7Internet Explorer 11 Windows Thin PCInternet Explorer 11 Windows Embedded 8 StandardInternet Explorer 11 Windows 8.1 Industry UpdateInternet Explorer 11 Old Applications Some old PCs (like in public libraries) are still using Internet Explorer. Some legacy web applications are using Internet Explorer. Some legacy web applications are using Internet Explorer runtime DLLs. Some AJAX based applications are using Microsoft ActiveX components. In order to ease the migration from Internet Explorer, Microsoft Edge offers Internet Explorer Mode, providing backward compatibility and enabling customers to continue to run legacy web applications. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up The Microsoft support for Edge Legacy ended on March 9, 2021. Future Windows updates will replace Edge Legacy with The New Edge. Source ... The New Edge The new Microsoft Edge is Chromium based with Blink and V8 engines. It was released in January 2020, and is available for Windows 7, 8, and 10. It can also be downloaded for macOS, iOS, and Android."
  },
  {
    "document": "The new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle). Google Google Ad Manager As of March 28, 2022, Google Ad Manager no longer supports ad serving for Internet Explorer versions 11 and below. Source ... Google Search As of October 1, 2021, Google Search no longer supports Internet Explorer 11. Source ... Google Workspace As of March 15, 2021, Google Workspace no longer supports Internet Explorer 11. Source ... Old Operating Systems Internet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy for these products: Old Applications Some old PCs (like in public libraries) are still using Internet Explorer. Some legacy web applications are using Internet Explorer. Some legacy web applications are using Internet Explorer runtime DLLs. Some AJAX based applications are using Microsoft ActiveX components. In order to ease the migration from Internet Explorer, Microsoft Edge offers Internet Explorer Mode, providing backward compatibility and enabling customers to continue to run legacy web applications."
  },
  {
    "document": "JavaScript History JavaScript / ECMAScript JavaScript was invented by Brendan Eich in 1995. It was developed for Netscape 2, and became the ECMA-262 standard in 1997. After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser. Mozilla's latest version was 1.8.5. (Identical to ES5). Internet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1). Note * Internet Explorer 9 did not support ES5 \"use strict\". ** Internet Explorer 11 does not support ES6. The ECMA Technical Committee 39 In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization, and a technical committee (TC39) was created to develop the language. ECMA-262 Edition 1 was released in June 1997. From ES4 to ES6 When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into 2 very different camps: The ECMAScript 3.1 Camp: Microsoft and Yahoo who wanted an incremental upgrade from ES3. The ECMAScript 4 Camp: Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade. August 13 2008, Brendan Eich wrote an email: It's no secret that the JavaScript standards body, Ecma's Technical Committee 39, has been split for over a year, with some members favoring ES4, a major fourth edition to ECMA-262, and others advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3) specification. Now, I'm happy to report, the split is over. The solution was to work together: ECMAScript 4 was renamed to ES5 ES5 should be an incremental upgrade of ECMAScript 3. Features of ECMAScript 4 should be picked up in later versions. TC39 should develop a new major release, bigger in scope than ES5. The planned new release (ES6) was codenamed \"Harmony\" (Because of the split it created?). ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully compliant by July 2013: Chrome 23 IE10 / Edge Firefox 21 Safari 6 Opera 15 Nov 2012 Sep 2012 May 2013 Jul 2012 Jul 2013 ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March 2017: Chrome 51 Edge 14 Firefox 52 Safari 10 Opera 38 May 2016 Aug 2016 Mar 2017 Sep 2016 Jun 2016 â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up The ECMAScript 3.1 Camp: Microsoft and Yahoo who wanted an incremental upgrade from ES3. The ECMAScript 4 Camp: Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade. August 13 2008, Brendan Eich wrote an email: It's no secret that the JavaScript standards body, Ecma's Technical Committee 39, has been split for over a year, with some members favoring ES4, a major fourth edition to ECMA-262, and others advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3) specification. Now, I'm happy to report, the split is over."
  },
  {
    "document": "The solution was to work together: The planned new release (ES6) was codenamed \"Harmony\" (Because of the split it created?). ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully compliant by July 2013: ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March 2017:"
  },
  {
    "document": "JavaScript Object Definition Methods for Defining JavaScript Objects new Object.assign() Object.create() Object.fromEntries() JavaScript Object Literal An object literal is a list of property names:values inside curly braces {}. Note: An object literal is also called an object initializer. Creating a JavaScript Object Examples Create an empty JavaScript object using {}, and add 4 properties: {} Create an empty JavaScript object using new Object(), and add 4 properties: new Object() Note: The examples above do exactly the same. But, there is no need to use new Object(). new Object() For readability, simplicity and execution speed, use the object literal method. Object Constructor Functions Sometimes we need to create many objects of the same type. To create an object type we use an object constructor function. It is considered good practice to name constructor functions with an upper-case first letter. Object Type Person Note: In the constructor function, this has no value. this The value of this will become the new object when a new object is created. this See Also: The JavaScript this Tutorial Now we can use new Person() to create many new Person objects: new Person() Example Property Default Values A value given to a property will be a default value for all objects created by the constructor: Example JavaScript Object Methods JavaScript Object Methods can be grouped into: General Methods JavaScript General Object Methods Property Management Methods JavaScript Property Management Methods Object Protection Methods Using const The most common way to protect an object from being changed is by using the const keyword. const With const you can not re-assign the object, but you can still change the value of a property, delete a property or create a new property. const JavaScript Object Protection Methods"
  },
  {
    "document": "JavaScript Object Prototypes All JavaScript objects inherit properties and methods from a prototype. In the previous chapter we learned how to use an object constructor: Example We also learned that you can not add a new property to an existing object constructor: Example To add a new property to a constructor, you must add it to the constructor function: Example Prototype Inheritance All JavaScript objects inherit properties and methods from a prototype: Date Date.prototype Array Array.prototype Person Person.prototype The Object.prototype is on the top of the prototype inheritance chain: Object.prototype Date objects, Array objects, and Person objects inherit from Object.prototype. Date Array Person Object.prototype Adding Properties and Methods to Objects Sometimes you want to add new properties (or methods) to all existing objects of a given type. Sometimes you want to add new properties (or methods) to an object constructor. Using the prototype Property The JavaScript prototype property allows you to add new properties to object constructors: prototype Example The JavaScript prototype property also allows you to add new methods to objects constructors: prototype Example Only modify your own prototypes. Never modify the prototypes of standard JavaScript objects."
  },
  {
    "document": "JavaScript Object Methods General Methods JavaScript Object.assign() The Object.assign() method copies properties from one or more source objects to a target object. Object.assign() Example JavaScript Object.entries() ECMAScript 2017 added the Object.entries() method to objects. Object.entries() Object.entries() returns an array of the key/value pairs in an object: Object.entries() Example Object.entries() makes it simple to use objects in loops: Object.entries() Example Object.entries() also makes it simple to convert objects to maps: Object.entries() Example Object.entries() is supported in all modern browsers since March 2017: Object.entries() JavaScript Object.fromEntries() The fromEntries() method creates an object from a list of key/value pairs. fromEntries() Example JavaScript Object.values() Object.values() is similar to Object.entries(), but returns a single dimension array of the object values: Object.values() Object.entries() Example Object.values() is supported in all modern browsers since March 2017: Object.values() JavaScript Object.groupBy() ES2024 added the Object.groupBy() method to JavaScript. Object.groupBy() The Object.groupBy() method groups elements of an object according to string values returned from a callback function. Object.groupBy() The Object.groupBy() method does not change the original object. Object.groupBy() Example Browser Support Object.groupby() is an ES2024 feature. Object.groupby() It is supported in new browsers since March 2024: Warning ES2024 features are relatively new. Older browsers may need an alternative code (Polyfill) Object.groupBy() vs Map.groupBy() The difference between Object.groupBy() and Map.groupBy() is: Object.groupBy() groups elements into a JavaScript object. Map.groupBy() groups elements into a Map object. JavaScript Object.keys() The Object.keys() method returns an array with the keys of an object. Object.keys() Example JavaScript for...in Loop The JavaScript for...in statement loops through the properties of an object. for...in Syntax The block of code inside of the for...in loop will be executed once for each property. for...in Looping through the properties of an object: Example Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Object Properties Property Management Methods JavaScript Object.defineProperty() The Object.defineProperty() method can be used to: Object.defineProperty() Syntax: Adding a new Property This example adds a new property to an object: Example Changing a Property Value This example changes a property value: Example Property Attributes All properties have a name. In addition they also have a value. The value is one of the property's attributes. Other attributes are: enumerable, configurable, and writable. These attributes define how the property can be accessed (is it readable?, is it writable?) In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable). ( ECMAScript 5 has methods for both getting and setting all property attributes) Changing Meta Data The following property meta data can be changed: Getters and setters can also be changed: This example makes language read-only: This example makes language not enumerable: JavaScript getOwnPropertyNames() The Object.getOwnPropertyNames() method can: Object.getOwnPropertyNames() Syntax List all Object Properties This example gets all properties of an object: Example Object.getOwnPropertyNames() will also list properties that is not enumerable: Object.getOwnPropertyNames() Example JavaScript Object.keys() The Object.keys() method can: Object.keys() Syntax List Enumerable Object Properties This example uses Object.keys() insted of Object.getOwnPropertyNames(): Object.keys() Object.getOwnPropertyNames() Example Note The getOwnPropertyNames() method returns all properties. The Object.keys() method returns all enumerable properties. If you define object properties without enumerable:false, the two methods will return the same. Adding Getters and Setters The Object.defineProperty() method can also be used to add Getters and Setters: Object.defineProperty() Example A Counter Example Example Prototype Properties JavaScript objects inherit the properties of their prototype. The delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype. delete Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Object Accessors JavaScript Accessors (Getters and Setters) ECMAScript 5 (ES5 2009) introduced Getter and Setters. Getters and setters allow you to define Object Accessors (Computed Properties). JavaScript Getter (The get Keyword) This example uses a lang property to get the value of the language property. lang get language Example JavaScript Setter (The set Keyword) This example uses a lang property to set the value of the language property. lang set language Example JavaScript Function or Getter? What is the differences between these two examples? Example 1 Example 2 Example 1 access fullName as a function: person.fullName(). Example 2 access fullName as a property: person.fullName. The second example provides a simpler syntax. Data Quality JavaScript can secure better data quality when using getters and setters. Using the lang property, in this example, returns the value of the language property in upper case: lang language Example Using the lang property, in this example, stores an upper case value in the language property: lang language Example Why Using Getters and Setters? Object.defineProperty() The Object.defineProperty() method can also be used to add Getters and Setters: Object.defineProperty() A Counter Example Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Object Protection Object Protection Methods Using const The most common way to protect an object from being changed is by using the const keyword. const With const you can not re-assign the object, but you can still change the value of a property, delete a property or create a new property. const JavaScript Object.preventExtensions() The Object.preventExtensions() method prevents adding properties to an object. Object.preventExtensions() Example Since arrays are objects, arrays can be prevented from extensions too: Example JavaScript Object.isExtensible() You can use Object.isExtensible() to check if an object is extensible. Object.isExtensible() The Object.isExtensible() returns true if an object is extensible. Object.isExtensible() Examples JavaScript Object.seal() The Object.seal() method prevents additions or deletions of new properties. Object.seal() The Object.seal() method makes existing properties non-configurable. Object.seal() The Object.isSealed() method can be used to check if an object is sealed. Object.isSealed() Note The Object.seal() method will fail silently in non-strict mode and throw a TypeError in strict mode. Object.seal() Example Since arrays are objects, arrays can be sealed too: Example JavaScript Object.isSealed() The Object.isSealed() method can be used to check if an object is sealed. Object.isSealed() The Object.isSealed() returns true if an object is sealed. Object.isSealed() Examples JavaScript Object.freeze() The Object.freeze() method prevents any changes to an object. Object.freeze() Frozen objects are read-only. No modification, addition or deletion of properties are allowed. Note The Object.freeze() method will fail silently in non-strict mode and throw a TypeError in strict mode. Object.freeze() Example Since arrays are objects, arrays can be frozen too: Example JavaScript Object.isFrozen() The Object.isFrozen() method can be used to check if an object is frozen. Object.isFrozen() The Object.isFrozen() returns true if an object is frozen. Object.isFrozen() Examples Complete Object Reference For a complete reference, go to our: Complete JavaScript Object Reference. The reference contains descriptions and examples of all Object Properties and Methods."
  },
  {
    "document": "JavaScript Function Definitions JavaScript functions are defined with the function keyword. function You can use a function declaration or a function expression. Function Declarations Earlier in this tutorial, you learned that functions are declared with the following syntax: Declared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are invoked (called upon). Example Semicolons are used to separate executable JavaScript statements. Since a function declaration is not an executable statement, it is not common to end it with a semicolon. Function Expressions A JavaScript function can also be defined using an expression. A function expression can be stored in a variable: Example After a function expression has been stored in a variable, the variable can be used as a function: Example The function above is actually an anonymous function (a function without a name). Functions stored in variables do not need function names. They are always invoked (called) using the variable name. The function above ends with a semicolon because it is a part of an executable statement. The Function() Constructor As you have seen in the previous examples, JavaScript functions are defined with the function keyword. function Functions can also be defined with a built-in JavaScript function constructor called Function(). Function() Example You actually don't have to use the function constructor. The example above is the same as writing: Example Most of the time, you can avoid using the new keyword in JavaScript. new Function Hoisting Earlier in this tutorial, you learned about \"hoisting\" (JavaScript Hoisting). Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope. Hoisting applies to variable declarations and to function declarations. Because of this, JavaScript functions can be called before they are declared: Functions defined using an expression are not hoisted. Self-Invoking Functions Function expressions can be made \"self-invoking\". A self-invoking expression is invoked (started) automatically, without being called. Function expressions will execute automatically if the expression is followed by (). You cannot self-invoke a function declaration. You have to add parentheses around the function to indicate that it is a function expression: Example The function above is actually an anonymous self-invoking function (function without name). Functions Can Be Used as Values JavaScript functions can be used as values: Example JavaScript functions can be used in expressions: Example Functions are Objects The typeof operator in JavaScript returns \"function\" for functions. typeof But, JavaScript functions can best be described as objects. JavaScript functions have both properties and methods. The arguments.length property returns the number of arguments received when the function was invoked: arguments.length Example The toString() method returns the function as a string: toString() Example A function defined as the property of an object, is called a method to the object. A function designed to create new objects, is called an object constructor. Arrow Functions Arrow functions allows a short syntax for writing function expressions. You don't need the function keyword, the return keyword, and the curly brackets."
  },
  {
    "document": "function return Example Arrow functions do not have their own this. They are not well suited for defining object methods. this Arrow functions are not hoisted. They must be defined before they are used. Using const is safer than using var, because a function expression is always constant value. const var You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them: return Example Arrow functions are not supported in IE11 or earlier."
  },
  {
    "document": "JavaScript Function Parameters A JavaScript function does not perform any checking on parameter values (arguments). function Function Parameters and Arguments Earlier in this tutorial, you learned that functions can have parameters: Function parameters are the names listed in the function definition. Function arguments are the real values passed to (and received by) the function. Parameter Rules JavaScript function definitions do not specify data types for parameters. JavaScript functions do not perform type checking on the passed arguments. JavaScript functions do not check the number of arguments received. Default Parameters If a function is called with missing arguments (less than declared), the missing values are set to undefined. undefined Sometimes this is acceptable, but sometimes it is better to assign a default value to the parameter: Example Default Parameter Values ES6 allows function parameters to have default values. Example If y is not passed or undefined, then y = 10. Function Rest Parameter The rest parameter (...) allows a function to treat an indefinite number of arguments as an array: Example The Arguments Object JavaScript functions have a built-in object called the arguments object. The argument object contains an array of the arguments used when the function was called (invoked). This way you can simply use a function to find (for instance) the highest value in a list of numbers: Example Or create a function to sum all input values: Example If a function is called with too many arguments (more than declared), these arguments can be reached using the arguments object. Arguments are Passed by Value The parameters, in a function call, are the function's arguments. JavaScript arguments are passed by value: The function only gets to know the values, not the argument's locations. If a function changes an argument's value, it does not change the parameter's original value. Changes to arguments are not visible (reflected) outside the function. Objects are Passed by Reference In JavaScript, object references are values. Because of this, objects will behave like they are passed by reference: If a function changes an object property, it changes the original value. Changes to object properties are visible (reflected) outside the function."
  },
  {
    "document": "JavaScript Function Invocation The code inside a JavaScript function will execute when \"something\" invokes it. function Invoking a JavaScript Function The code inside a function is not executed when the function is defined. The code inside a function is executed when the function is invoked. It is common to use the term \"call a function\" instead of \"invoke a function\". It is also common to say \"call upon a function\", \"start a function\", or \"execute a function\". In this tutorial, we will use invoke, because a JavaScript function can be invoked without being called. Invoking a Function as a Function Example The function above does not belong to any object. But in JavaScript there is always a default global object. In HTML the default global object is the HTML page itself, so the function above \"belongs\" to the HTML page. In a browser the page object is the browser window. The function above automatically becomes a window function. Note This is a common way to invoke a JavaScript function, but not a very good practice. Global variables, methods, or functions can easily create name conflicts and bugs in the global object. myFunction() and window.myFunction() is the same function: Example What is this? In JavaScript, the this keyword refers to an object. this The this keyword refers to different objects depending on how it is used: this this this this this undefined this call() apply() bind() this Note this is not a variable. It is a keyword. You cannot change the value of this. this this See Also: The JavaScript this Tutorial The Global Object When a function is called without an owner object, the value of this becomes the global object. this In a web browser the global object is the browser window. This example returns the window object as the value of this: this Example Invoking a function as a global function, causes the value of this to be the global object. Using the window object as a variable can easily crash your program. Invoking a Function as a Method In JavaScript you can define functions as object methods. The following example creates an object (myObject), with two properties (firstName and lastName), and a method (fullName): Example The fullName method is a function. The function belongs to the object. myObject is the owner of the function. The thing called this, is the object that \"owns\" the JavaScript code. In this case the value of this is myObject. this this Test it! Change the fullName method to return the value of this: this Example Invoking a function as an object method, causes the value of this to be the object itself. this Invoking a Function with the Constructor If a function invocation is preceded with the new keyword, it is a constructor invocation. new It looks like you create a new function, but since JavaScript functions are objects you actually create a new object: Example A constructor invocation creates a new object."
  },
  {
    "document": "The new object inherits the properties and methods from its constructor. The this keyword in the constructor does not have a value. The value of this will be the new object created when the function is invoked. this this"
  },
  {
    "document": "JavaScript Function call() Method Reuse With the call() method, you can write a method that can be used on different objects. call() All Functions are Methods In JavaScript all functions are object methods. If a function is not a method of a JavaScript object, it is a function of the global object (see previous chapter). The example below creates an object with 3 properties, firstName, lastName, fullName. Example In the example above, this refers to the person object. this this.firstName means the firstName property of this. Same as: this.firstName means the firstName property of person. What is this? In JavaScript, the this keyword refers to an object. this The this keyword refers to different objects depending on how it is used: this this this this this undefined this call() apply() bind() this Note this is not a variable. It is a keyword. You cannot change the value of this. this this See Also: The JavaScript this Tutorial The JavaScript call() Method The call() method is a predefined JavaScript method. call() It can be used to invoke (call) a method with an object as an argument (parameter). Note With call(), an object can use a method belonging to another object. call() This example calls the fullName method of person, using it on person1: Example Try it Yourself Â» This example calls the fullName method of person, using it on person2: Example Try it Yourself Â» The call() Method with Arguments The call() method can accept arguments: call() Example Try it Yourself Â»"
  },
  {
    "document": "JavaScript Function apply() Method Reuse With the apply() method, you can write a method that can be used on different objects. apply() The JavaScript apply() Method The apply() method is similar to the call() method (previous chapter). apply() call() In this example the fullName method of person is applied on person1: Example Try it Yourself Â» The Difference Between call() and apply() The difference is: The call() method takes arguments separately. call() The apply() method takes arguments as an array. apply() The apply() method is very handy if you want to use an array instead of an argument list. The apply() Method with Arguments The apply() method accepts arguments in an array: apply() Example Try it Yourself Â» Compared with the call() method: call() Example Try it Yourself Â» Simulate a Max Method on Arrays You can find the largest number (in a list of numbers) using the Math.max() method: Math.max() Example Try it Yourself Â» Since JavaScript arrays do not have a max() method, you can apply the Math.max() method instead. Math.max() Example Try it Yourself Â» The first argument (null) does not matter. It is not used in this example. These examples will give the same result: Example Try it Yourself Â» Example Try it Yourself Â» Example Try it Yourself Â» JavaScript Strict Mode In JavaScript strict mode, if the first argument of the apply() method is not an object, it becomes the owner (object) of the invoked function. In \"non-strict\" mode, it becomes the global object. apply()"
  },
  {
    "document": "JavaScript Function bind() Function Borrowing With the bind() method, an object can borrow a method from another object. bind() The example below creates 2 objects (person and member). The member object borrows the fullname method from the person object: Example Preserving this Sometimes the bind() method has to be used to prevent losing this. bind() In the following example, the person object has a display method. In the display method, this refers to the person object: Example When a function is used as a callback, this is lost. This example will try to display the person name after 3 seconds, but it will display undefined instead: Example The bind() method solves this problem. bind() In the following example, the bind() method is used to bind person.display to person. bind() This example will display the person name after 3 seconds: Example What is this? In JavaScript, the this keyword refers to an object. this The this keyword refers to different objects depending on how it is used: this this this this this undefined this call() apply() bind() this Note this is not a variable. It is a keyword. You cannot change the value of this. this this See Also: The JavaScript this Tutorial"
  },
  {
    "document": "JavaScript Closures JavaScript variables can belong to: The local scope or The global scope Global variables can be made local (private) with closures. Closures makes it possible for a function to have \"private\" variables. Local Variables A local variable is a \"private\" variable defined inside a function. A function can access all variables in the local scope. function Example a is a local variable defined inside the function: Global Variables A global variable is a \"public\" variable defined outside a function. A function can access all variables in the global scope: function Example a is global variable defined outside the function: In a web page, global variables belong to the page. Global variables can be used (or changed) by all scripts in the page. A local variable can only be used inside the function where it is defined. It is private and hidden from other functions and other scripting code. Global and local variables with the same name are different variables. Modifying one, does not modify the other. Note Undeclared variables (created without a keyword var, let, const), are always global, even if they are created inside a function. var let const Example The variable a is a global variable because it is undeclared: Variable Lifetime Global variables live until the page is discarded, like when you navigate to another page or close the window. Local variables have short lives. They are created when the function is invoked, and deleted when the function is finished. A Counter Dilemma Suppose you want to use a variable for counting something, and you want this counter to be available to everyone (all functions). You could use a global variable, and a function to increase the counter: function Example Warning ! There is a problem with the solution above: Any code on the page can change the counter, without calling add(). The counter should be local to the add() function, to prevent other code from changing it: add() Example It did not work because we display the global counter instead of the local counter. We can remove the global counter and access the local counter by letting the function return it: Example It did not work because we reset the local counter every time we call the function. Solution A JavaScript inner function can solve this. JavaScript Nested Functions All functions have access to the global scope. In fact, in JavaScript, all functions have access to the scope \"above\" them. JavaScript supports nested functions. Nested functions have access to the scope \"above\" them. Example The inner function plus() has access to the counter variable in the parent function: plus() counter This could have solved the counter dilemma, if we could reach the plus() function from the outside. plus() We also need to find a way to execute counter = 0 only once. counter = 0 Solution We need a closure. JavaScript Closures Example Example Explained The variable add is assigned to the return value of a function. add The function only runs once."
  },
  {
    "document": "It sets the counter to zero (0), and returns a function expression. This way add becomes a function. The \"wonderful\" part is that it can access the counter in its parent scope. This is called a closure. It makes it possible for a function to have \"private\" variables. The counter is protected by the scope of the myCounter function, and can only be changed using the add function. Conclusion A closure is a function that has access to the parent scope, after the parent function has closed. Closures has historically been used to: Note Old JavaScript code will often contain closures, but modern JavaScript will not use closures as frequently as before. ECMAScript 2015 and subsequent JavaScript versions have introduced new language features that provide alternatives to closures. While closures are a powerful concept in JavaScript, new JavaScript features make some use cases for closures less necessary."
  },
  {
    "document": "JavaScript Classes ECMAScript 2015, also known as ES6, introduced JavaScript Classes. JavaScript Classes are templates for JavaScript Objects. JavaScript Class Syntax Use the keyword class to create a class. class Always add a method named constructor(): constructor() Syntax Example The example above creates a class named \"Car\". The class has two initial properties: \"name\" and \"year\". A JavaScript class is not an object. It is a template for JavaScript objects. Using a Class When you have a class, you can use the class to create objects: Example Try it Yourself Â» The example above uses the Car class to create two Car objects. The constructor method is called automatically when a new object is created. The Constructor Method The constructor method is a special method: If you do not define a constructor method, JavaScript will add an empty constructor method. Class Methods Class methods are created with the same syntax as object methods. Use the keyword class to create a class. class Always add a constructor() method. constructor() Then add any number of methods. Syntax Create a Class method named \"age\", that returns the Car age: Example Try it Yourself Â» You can send parameters to Class methods: Example Try it Yourself Â» Browser Support The following table defines the first browser version with full support for Classes in JavaScript: \"use strict\" The syntax in classes must be written in \"strict mode\". You will get an error if you do not follow the \"strict mode\" rules. Example In \"strict mode\" you will get an error if you use a variable without declaring it: Learn more about \"strict mode\" in: JS Strict Mode."
  },
  {
    "document": "JavaScript Class Inheritance Class Inheritance To create a class inheritance, use the extends keyword. extends A class created with a class inheritance inherits all the methods from another class: Example Create a class named \"Model\" which will inherit the methods from the \"Car\" class: Try it Yourself Â» The super() method refers to the parent class. super() By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods. super() Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class. Getters and Setters Classes also allow you to use getters and setters. It can be smart to use getters and setters for your properties, especially if you want to do something special with the value before returning them, or before you set them. To add getters and setters in the class, use the get and set keywords. get set Example Create a getter and a setter for the \"carname\" property: Try it Yourself Â» Note: even if the getter is a method, you do not use parentheses when you want to get the property value. The name of the getter/setter method cannot be the same as the name of the property, in this case carname. carname Many programmers use an underscore character _ before the property name to separate the getter/setter from the actual property: Example You can use the underscore character to separate the getter/setter from the actual property: class Car { constructor(brand) { this._carname = brand; } get carname() { return this._carname; } set carname(x) { this._carname = x; }}const myCar = new Car(\"Ford\"); document.getElementById(\"demo\").innerHTML = myCar.carname; Try it Yourself Â» To use a setter, use the same syntax as when you set a property value, without parentheses: Example Use a setter to change the carname to \"Volvo\": class Car { constructor(brand) { this._carname = brand; } get carname() { return this._carname; } set carname(x) { this._carname = x; }}const myCar = new Car(\"Ford\"); myCar.carname = \"Volvo\"; document.getElementById(\"demo\").innerHTML = myCar.carname; Try it Yourself Â» Hoisting Unlike functions, and other JavaScript declarations, class declarations are not hoisted. That means that you must declare a class before you can use it: Example //You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car { constructor(brand) { this.carname = brand; }}//Now you can use the class:const myCar = new Car(\"Ford\") Try it Yourself Â» Note: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top). â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up Many programmers use an underscore character _ before the property name to separate the getter/setter from the actual property: _ Example You can use the underscore character to separate the getter/setter from the actual property: Try it Yourself Â» To use a setter, use the same syntax as when you set a property value, without parentheses: Example Use a setter to change the carname to \"Volvo\": Try it Yourself Â» Hoisting Unlike functions, and other JavaScript declarations, class declarations are not hoisted. That means that you must declare a class before you can use it: Example Note: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top)."
  },
  {
    "document": "JavaScript Static Methods Static class methods are defined on the class itself. You cannot call a static method on an object, only on an object class. static  Example Try it Yourself Â» If you want to use the myCar object inside the static method, you can send it as a parameter: static Example Try it Yourself Â»"
  },
  {
    "document": "JavaScript Callbacks \"I will call back later!\" A callback is a function passed as an argument to another function This technique allows a function to call another function A callback function can run after another function has finished Function Sequence JavaScript functions are executed in the sequence they are called. Not in the sequence they are defined. This example will end up displaying \"Goodbye\": Example Try it Yourself Â» This example will end up displaying \"Hello\": Example Try it Yourself Â» Sequence Control Sometimes you would like to have better control over when to execute a function. Suppose you want to do a calculation, and then display the result. You could call a calculator function (myCalculator), save the result, and then call another function (myDisplayer) to display the result: myCalculator myDisplayer Example Try it Yourself Â» Or, you could call a calculator function (myCalculator), and let the calculator function call the display function (myDisplayer): myCalculator myDisplayer Example Try it Yourself Â» The problem with the first example above, is that you have to call two functions to display the result. The problem with the second example, is that you cannot prevent the calculator function from displaying the result. Now it is time to bring in a callback. JavaScript Callbacks A callback is a function passed as an argument to another function. Using a callback, you could call the calculator function (myCalculator) with a callback (myCallback), and let the calculator function run the callback after the calculation is finished: myCalculator myCallback Example In the example above, myDisplayer is a called a callback function. It is passed to myCalculator() as an argument. Note When you pass a function as an argument, remember not to use parenthesis. Right: myCalculator(5, 5, myDisplayer); Wrong: myCalculator(5, 5, myDisplayer()); Example // Create an Array const myNumbers = [4, 1, -20, -7, 5, 9, -6]; // Call removeNeg with a callback const posNumbers = removeNeg(myNumbers, (x) => x >= 0); // Display Result document.getElementById(\"demo\").innerHTML = posNumbers; // Keep only positive numbers function removeNeg(numbers, callback) { const myArray = []; for (const x of numbers) { if (callback(x)) { myArray.push(x); } } return myArray; } Try it Yourself Â» In the example above, (x) => x >= 0 is a callback function. It is passed to removeNeg() as an argument. When to Use a Callback? The examples above are not very exciting. They are simplified to teach you the callback syntax. Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load). Asynchronous functions are covered in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up myDisplayer It is passed to myCalculator() as an argument. myCalculator() Note When you pass a function as an argument, remember not to use parenthesis. Right: myCalculator(5, 5, myDisplayer); Wrong: myCalculator(5, 5, myDisplayer()); Example In the example above, (x) => x >= 0 is a callback function."
  },
  {
    "document": "It is passed to removeNeg() as an argument. When to Use a Callback? The examples above are not very exciting. They are simplified to teach you the callback syntax. Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load). Asynchronous functions are covered in the next chapter. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up (x) => x >= 0 It is passed to removeNeg() as an argument. removeNeg() When to Use a Callback? The examples above are not very exciting. They are simplified to teach you the callback syntax. Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load). Asynchronous functions are covered in the next chapter."
  },
  {
    "document": "Asynchronous JavaScript \"I will finish later!\" Functions running in parallel with other functions are called asynchronous A good example is JavaScript setTimeout() Asynchronous JavaScript The examples used in the previous chapter, was very simplified. The purpose of the examples was to demonstrate the syntax of callback functions: Example Try it Yourself Â» In the example above, myDisplayer is the name of a function. myDisplayer It is passed to myCalculator() as an argument. myCalculator() In the real world, callbacks are most often used with asynchronous functions. A typical example is JavaScript setTimeout(). setTimeout() Waiting for a Timeout When using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out: setTimeout() Example Try it Yourself Â» In the example above, myFunction is used as a callback. myFunction myFunction is passed to setTimeout() as an argument. myFunction setTimeout() 3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds. myFunction() Note When you pass a function as an argument, remember not to use parenthesis. Right: setTimeout(myFunction, 3000); Wrong: setTimeout(myFunction(), 3000); Instead of passing the name of a function as an argument to another function, you can always pass a whole function instead: Example Try it Yourself Â» In the example above, function(){ myFunction(\"I love You ! !! \"); } is used as a callback. It is a complete function. The complete function is passed to setTimeout() as an argument. function(){ myFunction(\"I love You ! !! \"); } 3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds. myFunction() Waiting for Intervals: When using the JavaScript function setInterval(), you can specify a callback function to be executed for each interval: setInterval() Example Try it Yourself Â» In the example above, myFunction is used as a callback. myFunction myFunction is passed to setInterval() as an argument. myFunction setInterval() 1000 is the number of milliseconds between intervals, so myFunction() will be called every second. myFunction() Callback Alternatives With asynchronous programming, JavaScript programs can start long-running tasks, and continue running other tasks in parallel. But, asynchronus programmes are difficult to write and difficult to debug. Because of this, most modern asynchronous JavaScript methods don't use callbacks. Instead, in JavaScript, asynchronous programming is solved using Promises instead. Note You will learn about promises in the next chapter of this tutorial."
  },
  {
    "document": "JavaScript Promises \"I Promise a Result!\" \"Producing code\" is code that can take some time \"Consuming code\" is code that must wait for the result A Promise is an Object that links Producing code and Consuming code JavaScript Promise Object A Promise contains both the producing code and calls to the consuming code: Promise Syntax When the producing code obtains the result, it should call one of the two callbacks: WhenCall SuccessmyResolve(result value) ErrormyReject(error object) Promise Object Properties A JavaScript Promise object can be: Pending Fulfilled Rejected The Promise object supports two properties: state and result. While a Promise object is \"pending\" (working), the result is undefined. When a Promise object is \"fulfilled\", the result is a value. When a Promise object is \"rejected\", the result is an error object. myPromise.statemyPromise.result \"pending\"undefined \"fulfilled\"a result value \"rejected\"an error object You cannot access the Promise properties state and result. You must use a Promise method to handle promises. Promise How To Here is how to use a Promise: myPromise.then( function(value) { /* code if successful */ }, function(error) { /* code if some error */ } ); Promise.then() takes two arguments, a callback for success and another for failure. Both are optional, so you can add a callback for success or failure only. Example function myDisplayer(some) { document.getElementById(\"demo\").innerHTML = some;} let myPromise = new Promise(function(myResolve, myReject) { let x = 0; // The producing code (this may take some time) if (x == 0) { myResolve(\"OK\"); } else { myReject(\"Error\"); } }); myPromise.then( function(value) {myDisplayer(value);}, function(error) {myDisplayer(error);}); Try it Yourself Â» JavaScript Promise Examples To demonstrate the use of promises, we will use the callback examples from the previous chapter: Waiting for a Timeout Waiting for a File Waiting for a Timeout Example Using Callback setTimeout(function() { myFunction(\"I love You ! !! \"); }, 3000); function myFunction(value) { document.getElementById(\"demo\").innerHTML = value; } Try it Yourself Â» Example Using Promise let myPromise = new Promise(function(myResolve, myReject) { setTimeout(function() { myResolve(\"I love You ! ! \"); }, 3000);}); myPromise.then(function(value) { document.getElementById(\"demo\").innerHTML = value; }); Try it Yourself Â» Waiting for a file Example using Callback function getFile(myCallback) { let req = new XMLHttpRequest(); req.open('GET', \"mycar.html\"); req.onload = function() { if (req.status == 200) { myCallback(req.responseText); } else { myCallback(\"Error: \" + req.status); } } req.send(); } getFile(myDisplayer); Try it Yourself Â» Example using Promise let myPromise = new Promise(function(myResolve, myReject) { let req = new XMLHttpRequest(); req.open('GET', \"mycar.html\"); req.onload = function() { if (req.status == 200) { myResolve(req.response); } else { myReject(\"File not Found\"); } }; req.send(); }); myPromise.then( function(value) {myDisplayer(value);}, function(error) {myDisplayer(error);} ); Try it Yourself Â» Browser Support ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object. The following table defines the first browser version with full support for Promise objects: Chrome 33 Edge 12 Firefox 29 Safari 7.1 Opera 20 Feb, 2014 Jul, 2015 Apr, 2014 Sep, 2014 Mar, 2014 â® Previous Next â¯ â +1 Track your progress - it's free!"
  },
  {
    "document": "Log in Sign Up Promise Object Properties A JavaScript Promise object can be: The Promise object supports two properties: state and result. While a Promise object is \"pending\" (working), the result is undefined. When a Promise object is \"fulfilled\", the result is a value. When a Promise object is \"rejected\", the result is an error object. You cannot access the Promise properties state and result. You must use a Promise method to handle promises. Promise How To Here is how to use a Promise: Promise.then() takes two arguments, a callback for success and another for failure. Both are optional, so you can add a callback for success or failure only. Example Try it Yourself Â» JavaScript Promise Examples To demonstrate the use of promises, we will use the callback examples from the previous chapter: Waiting for a Timeout Example Using Callback Try it Yourself Â» Example Using Promise Try it Yourself Â» Waiting for a file Example using Callback Try it Yourself Â» Example using Promise Try it Yourself Â» Browser Support ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object. The following table defines the first browser version with full support for Promise objects:"
  },
  {
    "document": "JavaScript Async \"async and await make promises easier to write\" async makes a function return a Promise await makes a function wait for a Promise Async Syntax The keyword async before a function makes the function return a promise: async Example Is the same as: Here is how to use the Promise: Example Try it Yourself Â» Or simpler, since you expect a normal value (a normal response, not an error): Example Try it Yourself Â» Await Syntax The await keyword can only be used inside an async function. await async The await keyword makes the function pause the execution and wait for a resolved promise before it continues: await Example Let's go slowly and learn how to use it. Basic Syntax Try it Yourself Â» The two arguments (resolve and reject) are pre-defined by JavaScript. We will not create them, but call one of them when the executor function is ready. Very often we will not need a reject function. Example without reject Try it Yourself Â» Waiting for a Timeout Try it Yourself Â» Waiting for a File Try it Yourself Â» Browser Support ECMAScript 2017 introduced the JavaScript keywords async and await. async await The following table defines the first browser version with full support for both:"
  },
  {
    "document": "JavaScript HTML DOM With the HTML DOM, JavaScript can access and change all the elements of an HTML document. The HTML DOM (Document Object Model) When a web page is loaded, the browser creates a Document Object Model of the page. The HTML DOM model is constructed as a tree of Objects: The HTML DOM Tree of Objects With the object model, JavaScript gets all the power it needs to create dynamic HTML: What You Will Learn In the next chapters of this tutorial you will learn: What is the DOM? The DOM is a W3C (World Wide Web Consortium) standard. The DOM defines a standard for accessing documents: \"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.\" The W3C DOM standard is separated into 3 different parts: What is the HTML DOM? The HTML DOM is a standard object model and programming interface for HTML. It defines: In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements."
  },
  {
    "document": "JavaScript - HTML DOM Methods HTML DOM methods are actions you can perform (on HTML Elements). HTML DOM properties are values (of HTML Elements) that you can set or change. The DOM Programming Interface The HTML DOM can be accessed with JavaScript (and with other programming languages). In the DOM, all HTML elements are defined as objects. The programming interface is the properties and methods of each object. A property is a value that you can get or set (like changing the content of an HTML element). A method is an action you can do (like add or deleting an HTML element). Example The following example changes the content (the innerHTML) of the <p> element with id=\"demo\": innerHTML <p> id=\"demo\" Example In the example above, getElementById is a method, while innerHTML is a property. getElementById innerHTML The getElementById Method The most common way to access an HTML element is to use the id of the element. id In the example above the getElementById method used id=\"demo\" to find the element. getElementById id=\"demo\" The innerHTML Property The easiest way to get the content of an element is by using the innerHTML property. innerHTML The innerHTML property is useful for getting or replacing the content of HTML elements. innerHTML The innerHTML property can be used to get or change any HTML element, including <html> and <body>. innerHTML <html> <body>"
  },
  {
    "document": "JavaScript HTML DOM Document The HTML DOM document object is the owner of all other objects in your web page. The HTML DOM Document Object The document object represents your web page. If you want to access any element in an HTML page, you always start with accessing the document object. Below are some examples of how you can use the document object to access and manipulate HTML. Finding HTML Elements Changing HTML Elements Adding and Deleting Elements Adding Events Handlers Finding HTML Objects The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5. Later, in HTML DOM Level 3, more objects, collections, and properties were added."
  },
  {
    "document": "JavaScript HTML DOM Elements This page teaches you how to find and access HTML elements in an HTML page. Finding HTML Elements Often, with JavaScript, you want to manipulate HTML elements. To do so, you have to find the elements first. There are several ways to do this: Finding HTML Element by Id The easiest way to find an HTML element in the DOM, is by using the element id. This example finds the element with id=\"intro\": id=\"intro\" Example If the element is found, the method will return the element as an object (in element). If the element is not found, element will contain null. null Finding HTML Elements by Tag Name This example finds all <p> elements: <p> Example This example finds the element with id=\"main\", and then finds all <p> elements inside \"main\": id=\"main\" <p> \"main\" Example Finding HTML Elements by Class Name If you want to find all HTML elements with the same class name, use getElementsByClassName(). getElementsByClassName() This example returns a list of all elements with class=\"intro\". class=\"intro\" Example Finding HTML Elements by CSS Selectors If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method. querySelectorAll() This example returns a list of all <p> elements with class=\"intro\". <p> class=\"intro\" Example Finding HTML Elements by HTML Object Collections This example finds the form element with id=\"frm1\", in the forms collection, and displays all element values: id=\"frm1\" Example The following HTML objects (and object collections) are also accessible:"
  },
  {
    "document": "JavaScript HTML DOM - Changing HTML The HTML DOM allows JavaScript to change the content of HTML elements. Changing HTML Content The easiest way to modify the content of an HTML element is by using the innerHTML property. innerHTML To change the content of an HTML element, use this syntax: This example changes the content of a <p> element: <p> Example Example explained: <p> id=\"p1\" id=\"p1\" innerHTML This example changes the content of an <h1> element: <h1> Example Example explained: <h1> id=\"id01\" id=\"id01\" innerHTML Changing the Value of an Attribute To change the value of an HTML attribute, use this syntax: This example changes the value of the src attribute of an <img> element: <img> Example Example explained: <img> id=\"myImage\" id=\"myImage\" src Dynamic HTML content JavaScript can create dynamic HTML content:  Example document.write() In JavaScript, document.write() can be used to write directly to the HTML output stream: document.write() Example Never use document.write() after the document is loaded. It will overwrite the document. document.write()"
  },
  {
    "document": "JavaScript Forms JavaScript Form Validation HTML form validation can be done by JavaScript. If a form field (fname) is empty, this function alerts a message, and returns false, to prevent the form from being submitted: JavaScript Example The function can be called when the form is submitted: HTML Form Example JavaScript Can Validate Numeric Input JavaScript is often used to validate numeric input: Please input a number between 1 and 10  Automatic HTML Form Validation HTML form validation can be performed automatically by the browser: If a form field (fname) is empty, the required attribute prevents this form from being submitted: required HTML Form Example Automatic HTML form validation does not work in Internet Explorer 9 or earlier. Data Validation Data validation is the process of ensuring that user input is clean, correct, and useful. Typical validation tasks are: Most often, the purpose of data validation is to ensure correct user input. Validation can be defined by many different methods, and deployed in many different ways. Server side validation is performed by a web server, after input has been sent to the server. Client side validation is performed by a web browser, before input is sent to a web server. HTML Constraint Validation HTML5 introduced a new HTML validation concept called constraint validation. HTML constraint validation is based on: Constraint Validation HTML Input Attributes For a full list, go to HTML Input Attributes. Constraint Validation CSS Pseudo Selectors For a full list, go to CSS Pseudo Classes."
  },
  {
    "document": "JavaScript HTML DOM - Changing CSS The HTML DOM allows JavaScript to change the style of HTML elements. Changing HTML Style To change the style of an HTML element, use this syntax: The following example changes the style of a <p> element: <p> Example Using Events The HTML DOM allows you to execute code when an event occurs. Events are generated by the browser when \"things happen\" to HTML elements: You will learn more about events in the next chapter of this tutorial. This example changes the style of the HTML element with id=\"id1\", when the user clicks a button: id=\"id1\" Example More Examples Visibility How to make an element invisible. Do you want to show the element or not? HTML DOM Style Object Reference For all HTML DOM style properties, look at our complete HTML DOM Style Object Reference."
  },
  {
    "document": "JavaScript HTML DOM Animation Learn to create HTML animations using JavaScript. A Basic Web Page To demonstrate how to create HTML animations with JavaScript, we will use a simple web page: Example Create an Animation Container All animations should be relative to a container element. Example Style the Elements The container element should be created with style = \"position: relative\". position: relative The animation element should be created with style = \"position: absolute\". position: absolute Example Animation Code JavaScript animations are done by programming gradual changes in an element's style. The changes are called by a timer. When the timer interval is small, the animation looks continuous. The basic code is: Example Create the Full Animation Using JavaScript Example"
  },
  {
    "document": "JavaScript HTML DOM Events HTML DOM allows JavaScript to react to HTML events: Reacting to Events A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element. To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute: Examples of HTML events: In this example, the content of the <h1> element is changed when a user clicks on it: <h1> Example In this example, a function is called from the event handler: Example HTML Event Attributes To assign events to HTML elements you can use event attributes. Example Assign an onclick event to a button element: In the example above, a function named displayDate will be executed when the button is clicked. displayDate Assign Events Using the HTML DOM The HTML DOM allows you to assign events to HTML elements using JavaScript: Example Assign an onclick event to a button element: In the example above, a function named displayDate is assigned to an HTML element with the id=\"myBtn\". displayDate id=\"myBtn\" The function will be executed when the button is clicked. The onload and onunload Events The onload and onunload events are triggered when the user enters or leaves the page. onload onunload The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information. onload The onload and onunload events can be used to deal with cookies. onload onunload Example The oninput Event The oninput event is often to some action while the user input data. oninput Below is an example of how to use the oninput to change the content of an input field. Example The onchange Event The onchange event is often used in combination with validation of input fields. onchange Below is an example of how to use the onchange. The upperCase() function will be called when a user changes the content of an input field. upperCase() Example The onmouseover and onmouseout Events The onmouseover and onmouseout events can be used to trigger a function when the user mouses over, or out of, an HTML element: onmouseover onmouseout Try it Yourself Â» The onmousedown, onmouseup and onclick Events The onmousedown, onmouseup, and onclick events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered. onmousedown onmouseup onclick Try it Yourself Â» More Examples onmousedown and onmouseup Change an image when a user holds down the mouse button. onload Display an alert box when the page has finished loading. onfocus Change the background-color of an input field when it gets focus. Mouse Events Change the color of an element when the cursor moves over it. HTML DOM Event Object Reference For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
  },
  {
    "document": "JavaScript HTML DOM EventListener The addEventListener() method Example Add an event listener that fires when a user clicks a button: The addEventListener() method attaches an event handler to the specified element. addEventListener() The addEventListener() method attaches an event handler to an element without overwriting existing event handlers. addEventListener() You can add many event handlers to one element. You can add many event handlers of the same type to one element, i.e two \"click\" events. You can add event listeners to any DOM object not only HTML elements. i.e the window object. The addEventListener() method makes it easier to control how the event reacts to bubbling. addEventListener() When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup. addEventListener() You can easily remove an event listener by using the removeEventListener() method. removeEventListener() Syntax The first parameter is the type of the event (like \"click\" or \"mousedown\" or any other HTML DOM Event.) click mousedown The second parameter is the function we want to call when the event occurs. The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional. Note that you don't use the \"on\" prefix for the event; use \"click\" instead of \"onclick\". click onclick Add an Event Handler to an Element Example Alert \"Hello World!\" when the user clicks on an element: You can also refer to an external \"named\" function: Example Alert \"Hello World!\" when the user clicks on an element: Add Many Event Handlers to the Same Element The addEventListener() method allows you to add many events to the same element, without overwriting existing events: addEventListener() Example You can add events of different types to the same element: Example Add an Event Handler to the window Object The addEventListener() method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the xmlHttpRequest object. addEventListener() xmlHttpRequest Example Add an event listener that fires when a user resizes the window: Passing Parameters When passing parameter values, use an \"anonymous function\" that calls the specified function with the parameters: Example Event Bubbling or Event Capturing? There are two ways of event propagation in the HTML DOM, bubbling and capturing. Event propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \"click\" event should be handled first? In bubbling the inner most element's event is handled first and then the outer: the <p> element's click event is handled first, then the <div> element's click event. In capturing the outer most element's event is handled first and then the inner: the <div> element's click event will be handled first, then the <p> element's click event."
  },
  {
    "document": "With the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter: The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation. Example The removeEventListener() method The removeEventListener() method removes event handlers that have been attached with the addEventListener() method: removeEventListener() Example HTML DOM Event Object Reference For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
  },
  {
    "document": "JavaScript HTML DOM Navigation With the HTML DOM, you can navigate the node tree using node relationships. DOM Nodes According to the W3C HTML DOM standard, everything in an HTML document is a node: With the HTML DOM, all nodes in the node tree can be accessed by JavaScript. New nodes can be created, and all nodes can be modified or deleted. Node Relationships The nodes in the node tree have a hierarchical relationship to each other. The terms parent, child, and sibling are used to describe the relationships. From the HTML above you can read: <html> <html> <html> <head> <body> <head> <html> <body> <html> and: <head> <title> <title> <body> <h1> <p> <h1> <p> <h1> <p> Navigating Between Nodes You can use the following node properties to navigate between nodes with JavaScript: parentNode childNodes[nodenumber] firstChild lastChild nextSibling previousSibling Child Nodes and Node Values A common error in DOM processing is to expect an element node to contain text. Example: The element node <title> (in the example above) does not contain text. <title> It contains a text node with the value \"DOM Tutorial\". The value of the text node can be accessed by the node's innerHTML property: myTitle = document.getElementById(\"demo\").innerHTML; Accessing the innerHTML property is the same as accessing the nodeValue of the first child: myTitle = document.getElementById(\"demo\").firstChild.nodeValue; Accessing the first child can also be done like this: myTitle = document.getElementById(\"demo\").childNodes[0].nodeValue; All the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element: Example <html> <body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p> <script> document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").innerHTML; </script> </body> </html> Try it Yourself Â» Example <html> <body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p> <script> document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").firstChild.nodeValue; </script> </body> </html> Try it Yourself Â» Example <html> <body><h1 id=\"id01\">My First Page</h1><p id=\"id02\">Hello!</p> <script> document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").childNodes[0].nodeValue; </script> </body> </html> Try it Yourself Â» InnerHTML In this tutorial we use the innerHTML property to retrieve the content of an HTML element. However, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM. DOM Root Nodes There are two special properties that allow access to the full document: document.body - The body of the document document.documentElement - The full document Example <html> <body> <h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = document.body.innerHTML;</script> </body> </html> Try it Yourself Â» Example <html> <body> <h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p> <p id=\"demo\"></p><script> document.getElementById(\"demo\").innerHTML = document.documentElement.innerHTML;</script> </body> </html> Try it Yourself Â» The nodeName Property The nodeName property specifies the name of a node. nodeName is read-only nodeName of an element node is the same as the tag name nodeName of an attribute node is the attribute name nodeName of a text node is always #text nodeName of the document node is always #document Example <h1 id=\"id01\">My First Page</h1> <p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").nodeName;</script> Try it Yourself Â» Note: nodeName always contains the uppercase tag name of an HTML element. The nodeValue Property The nodeValue property specifies the value of a node."
  },
  {
    "document": "nodeValue for element nodes is null nodeValue for text nodes is the text itself nodeValue for attribute nodes is the attribute value The nodeType Property The nodeType property is read only. It returns the type of a node. Example <h1 id=\"id01\">My First Page</h1> <p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").nodeType;</script> Try it Yourself Â» The most important nodeType properties are: Node Type Example ELEMENT_NODE 1 <h1 class=\"heading\">W3Schools</h1> ATTRIBUTE_NODE 2 class = \"heading\" (deprecated) TEXT_NODE 3 W3Schools COMMENT_NODE 8 <!-- This is a comment --> DOCUMENT_NODE 9 The HTML document itself (the parent of <html>) DOCUMENT_TYPE_NODE 10 <!Doctype html> Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM. â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up innerHTML Accessing the innerHTML property is the same as accessing the nodeValue of the first child: nodeValue Accessing the first child can also be done like this: All the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element: <h1> <p> Example Example Example InnerHTML In this tutorial we use the innerHTML property to retrieve the content of an HTML element. However, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM. DOM Root Nodes There are two special properties that allow access to the full document: document.body document.documentElement Example Example The nodeName Property The nodeName property specifies the name of a node. nodeName Example Note: nodeName always contains the uppercase tag name of an HTML element. nodeName The nodeValue Property The nodeValue property specifies the value of a node. nodeValue null The nodeType Property The nodeType property is read only. It returns the type of a node. nodeType Example The most important nodeType properties are: Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM."
  },
  {
    "document": "JavaScript HTML DOM Elements (Nodes) Adding and Removing Nodes (HTML Elements) Creating New HTML Elements (Nodes) To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element. Example Example Explained This code creates a new <p> element: <p> To add text to the <p> element, you must create a text node first. This code creates a text node: <p> Then you must append the text node to the <p> element: <p> Finally you must append the new element to an existing element. This code finds an existing element: This code appends the new element to the existing element: Creating new HTML Elements - insertBefore() The appendChild() method in the previous example, appended the new element as the last child of the parent. appendChild() If you don't want that you can use the insertBefore() method: insertBefore() Example Removing Existing HTML Elements To remove an HTML element, use the remove() method: remove() Example Example Explained The HTML document contains a <div> element with two child nodes (two <p> elements): <div> <p> Find the element you want to remove: Then execute the remove() method on that element: The remove() method does not work in older browsers, see the example below on how to use removeChild() instead. remove() removeChild() Removing a Child Node For browsers that does not support the remove() method, you have to find the parent node to remove an element: remove() Example Example Explained This HTML document contains a <div> element with two child nodes (two <p> elements): <div> <p> Find the element with id=\"div1\": id=\"div1\" Find the <p> element with id=\"p1\": <p> id=\"p1\" Remove the child from the parent: Here is a common workaround: Find the child you want to remove, and use its parentNode property to find the parent: parentNode Replacing HTML Elements To replace an element to the HTML DOM, use the replaceChild() method: replaceChild() Example"
  },
  {
    "document": "JavaScript HTML DOM Collections The HTMLCollection Object The getElementsByTagName() method returns an HTMLCollection object. getElementsByTagName() HTMLCollection An HTMLCollection object is an array-like list (collection) of HTML elements. HTMLCollection The following code selects all <p> elements in a document: <p> Example The elements in the collection can be accessed by an index number. To access the second <p> element you can write: Note: The index starts at 0. HTML HTMLCollection Length The length property defines the number of elements in an HTMLCollection: length HTMLCollection Example The length property is useful when you want to loop through the elements in a collection: length Example Change the text color of all <p> elements: An HTMLCollection is NOT an array! An HTMLCollection may look like an array, but it is not. You can loop through the list and refer to the elements with a number (just like an array). However, you cannot use array methods like valueOf(), pop(), push(), or join() on an HTMLCollection."
  },
  {
    "document": "JavaScript HTML DOM Node Lists The HTML DOM NodeList Object A NodeList object is a list (collection) of nodes extracted from a document. NodeList A NodeList object is almost the same as an HTMLCollection object. NodeList HTMLCollection Some (older) browsers return a NodeList object instead of an HTMLCollection for methods like getElementsByClassName(). getElementsByClassName() All browsers return a NodeList object for the property childNodes. childNodes Most browsers return a NodeList object for the method querySelectorAll(). querySelectorAll() The following code selects all <p> nodes in a document: <p> Example The elements in the NodeList can be accessed by an index number. To access the second <p> node you can write: Note: The index starts at 0. HTML DOM Node List Length The length property defines the number of nodes in a node list: length Example The length property is useful when you want to loop through the nodes in a node list: length Example Change the color of all <p> elements in a node list: The Difference Between an HTMLCollection and a NodeList A NodeList and an HTMLcollection is very much the same thing. Both are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0. Both have a length property that returns the number of elements in the list (collection). An HTMLCollection is a collection of document elements. A NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes). HTMLCollection items can be accessed by their name, id, or index number. NodeList items can only be accessed by their index number. An HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change. A NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change. The getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection. getElementsByClassName() getElementsByTagName() The querySelectorAll() method returns a static NodeList. querySelectorAll() The childNodes property returns a live NodeList. childNodes Not an Array! A NodeList may look like an array, but it is not. You can loop through a NodeList and refer to its nodes by index. But, you cannot use Array methods like push(), pop(), or join() on a NodeList."
  },
  {
    "document": "JavaScript Window - The Browser Object Model The Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser. The Browser Object Model (BOM) There are no official standards for the Browser Object Model (BOM). Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM. The Window Object The window object is supported by all browsers. It represents the browser's window. window All global JavaScript objects, functions, and variables automatically become members of the window object. Global variables are properties of the window object. Global functions are methods of the window object. Even the document object (of the HTML DOM) is a property of the window object: is the same as: Window Size Two properties can be used to determine the size of the browser window. Both properties return the sizes in pixels: window.innerHeight window.innerWidth The browser window (the browser viewport) is NOT including toolbars and scrollbars. Example Other Window Methods Some other methods: window.open() window.close() window.moveTo() window.resizeTo()"
  },
  {
    "document": "JavaScript Window Screen The window.screen object contains information about the user's screen. Window Screen The window.screen object can be written without the window prefix. window.screen Properties: screen.width screen.height screen.availWidth screen.availHeight screen.colorDepth screen.pixelDepth Window Screen Width The screen.width property returns the width of the visitor's screen in pixels. screen.width Example Display the width of the screen in pixels: Result will be:  Window Screen Height The screen.height property returns the height of the visitor's screen in pixels. screen.height Example Display the height of the screen in pixels: Result will be:  Window Screen Available Width The screen.availWidth property returns the width of the visitor's screen, in pixels, minus interface features like the Windows Taskbar. screen.availWidth Example Display the available width of the screen in pixels: Result will be:  Window Screen Available Height The screen.availHeight property returns the height of the visitor's screen, in pixels, minus interface features like the Windows Taskbar. screen.availHeight Example Display the available height of the screen in pixels: Result will be:  Window Screen Color Depth The screen.colorDepth property returns the number of bits used to display one color. screen.colorDepth All modern computers use 24 bit or 32 bit hardware for color resolution: Older computers used 16 bits: 65,536 different \"High Colors\" resolution. Very old computers, and old cell phones used 8 bits: 256 different \"VGA colors\". Example Display the color depth of the screen in bits: Result will be:  The #rrggbb (rgb) values used in HTML represents \"True Colors\" (16,777,216 different colors) Window Screen Pixel Depth The screen.pixelDepth property returns the pixel depth of the screen. screen.pixelDepth Example Display the pixel depth of the screen in bits: Result will be:  For modern computers, Color Depth and Pixel Depth are equal."
  },
  {
    "document": "JavaScript Window Location The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page. window.location Window Location The window.location object can be written without the window prefix. window.location Some examples: window.location.href window.location.hostname window.location.pathname window.location.protocol window.location.assign() Window Location Href The window.location.href property returns the URL of the current page. window.location.href Example Display the href (URL) of the current page: Result is:  Window Location Hostname The window.location.hostname property returns the name of the internet host (of the current page). window.location.hostname Example Display the name of the host: Result is:  Window Location Pathname The window.location.pathname property returns the pathname of the current page. window.location.pathname Example Display the path name of the current URL: Result is:  Window Location Protocol The window.location.protocol property returns the web protocol of the page. window.location.protocol Example Display the web protocol: Result is:  Window Location Port The window.location.port property returns the number of the internet host port (of the current page). window.location.port Example Display the name of the host: Result is:  Most browsers will not display default port numbers (80 for http and 443 for https) Window Location Assign The window.location.assign() method loads a new document. window.location.assign() Example Load a new document:"
  },
  {
    "document": "JavaScript Window History The window.history object contains the browsers history. window.history Window History The window.history object can be written without the window prefix. window.history To protect the privacy of the users, there are limitations to how JavaScript can access this object. Some methods: history.back() history.forward() Window History Back The history.back() method loads the previous URL in the history list. history.back() This is the same as clicking the Back button in the browser. Example Create a back button on a page: The output of the code above will be: Window History Forward The history.forward() method loads the next URL in the history list. history.forward() This is the same as clicking the Forward button in the browser. Example Create a forward button on a page: The output of the code above will be:"
  },
  {
    "document": "JavaScript Window Navigator The Navigator Object The navigator object contains information about the visitor's browser. navigator It can be written with or without the window prefix like: windows.navigator or just navigator windows.navigator navigator Browser Cookies The cookieEnabled property returns true if cookies are enabled, otherwise false: cookieEnabled Example The Browser Language The language property returns the browser's language: language Example Is The Browser Online? The onLine property returns true if the browser is online: onLine Example Browser Application Name The appName property returns the application name of the browser: appName Example Warning This property is removed (deprecated) in the latest web standard. Most browsers (Chrome, Edge, Firefox, Safari) returns Netscape as appName. appName Browser Application Code Name The appCodeName property returns the application code name of the browser: appCodeName Example Warning This property is removed (deprecated) in the latest web standard. Most browsers (Chrome, Edge, Firefox, Safari) returns Mozilla as appCodeName. appCodeName The Browser Engine The product property returns the product name of the browser engine: product Example Warning This property is removed (deprecated) in the latest web standard. Most browsers returns Gecko as product. The Browser Version The appVersion property returns version information about the browser: appVersion Example Warning This property is removed (deprecated) in the latest web standard. Do not rely on appVersion to return the correct browser version. appVersion The Browser Agent The userAgent property returns the user-agent header sent by the browser to the server: userAgent Example Warning The information from the navigator object can often be misleading. The navigator object should not be used to detect browser versions because: The Browser Platform The platform property returns the browser platform (operating system): platform Example Warning This property is removed (deprecated) in the latest web standard. Do not rely on platform to return the correct browser platform in all browsers. platform Is Java Enabled? The javaEnabled() method returns true if Java is enabled: javaEnabled() Example Warning This method is removed (deprecated) in the latest web standard. javaEnabled() always returns false. javaEnabled() false"
  },
  {
    "document": "JavaScript Popup Boxes JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box. Alert Box An alert box is often used if you want to make sure information comes through to the user. When an alert box pops up, the user will have to click \"OK\" to proceed. Syntax The window.alert() method can be written without the window prefix. window.alert() Example Confirm Box A confirm box is often used if you want the user to verify or accept something. When a confirm box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed. If the user clicks \"OK\", the box returns true. If the user clicks \"Cancel\", the box returns false. Syntax The window.confirm() method can be written without the window prefix. window.confirm() Example Prompt Box A prompt box is often used if you want the user to input a value before entering a page. When a prompt box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed after entering an input value. If the user clicks \"OK\" the box returns the input value. If the user clicks \"Cancel\" the box returns null. Syntax The window.prompt() method can be written without the window prefix. window.prompt() Example Line Breaks To display line breaks inside a popup box, use a back-slash followed by the character n. Example"
  },
  {
    "document": "JavaScript Timing Events JavaScript can be executed in time-intervals. This is called timing events. Timing Events The window object allows execution of code at specified time intervals. window These time intervals are called timing events. The two key methods to use with JavaScript are: setTimeout(function, milliseconds setInterval(function, milliseconds The setTimeout() and setInterval() are both methods of the HTML DOM Window object. setTimeout() setInterval() The setTimeout() Method The window.setTimeout() method can be written without the window prefix. window.setTimeout() The first parameter is a function to be executed. The second parameter indicates the number of milliseconds before execution. Example Click a button. Wait 3 seconds, and the page will alert \"Hello\": How to Stop the Execution? The clearTimeout() method stops the execution of the function specified in setTimeout(). clearTimeout() The window.clearTimeout() method can be written without the window prefix. window.clearTimeout() The clearTimeout() method uses the variable returned from setTimeout(): clearTimeout() setTimeout() If the function has not already been executed, you can stop the execution by calling the clearTimeout() method: clearTimeout() Example Same example as above, but with an added \"Stop\" button: The setInterval() Method The setInterval() method repeats a given function at every given time-interval. setInterval() The window.setInterval() method can be written without the window prefix. window.setInterval() The first parameter is the function to be executed. The second parameter indicates the length of the time-interval between each execution. This example executes a function called \"myTimer\" once every second (like a digital watch). Example Display the current time: There are 1000 milliseconds in one second. How to Stop the Execution? The clearInterval() method stops the executions of the function specified in the setInterval() method. clearInterval() The window.clearInterval() method can be written without the window prefix. window.clearInterval() The clearInterval() method uses the variable returned from setInterval(): clearInterval() setInterval() Example Same example as above, but we have added a \"Stop time\" button: More Examples Another simple timing A clock created with a timing event"
  },
  {
    "document": "JavaScript Cookies Cookies let you store user information in web pages. What are Cookies? Cookies are data, stored in small text files, on your computer. When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user. Cookies were invented to solve the problem \"how to remember information about the user\": Cookies are saved in name-value pairs like: When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to \"remember\" information about users. None of the examples below will work if your browser has local cookies support turned off. Create a Cookie with JavaScript JavaScript can create, read, and delete cookies with the document.cookie property. document.cookie With JavaScript, a cookie can be created like this: You can also add an expiry date (in UTC time). By default, the cookie is deleted when the browser is closed: With a path parameter, you can tell the browser what path the cookie belongs to. By default, the cookie belongs to the current page. Read a Cookie with JavaScript With JavaScript, cookies can be read like this: document.cookie will return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value; document.cookie Change a Cookie with JavaScript With JavaScript, you can change a cookie the same way as you create it: The old cookie is overwritten. Delete a Cookie with JavaScript Deleting a cookie is very simple. You don't have to specify a cookie value when you delete a cookie. Just set the expires parameter to a past date: You should define the cookie path to ensure that you delete the right cookie. Some browsers will not let you delete a cookie if you don't specify the path. The Cookie String The document.cookie property looks like a normal text string. But it is not. document.cookie Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it. If you set a new cookie, older cookies are not overwritten. The new cookie is added to document.cookie, so if you read document.cookie again you will get something like: cookie1 = value; cookie2 = value; Display All Cookies Create Cookie 1 Create Cookie 2 Delete Cookie 1 Delete Cookie 2 If you want to find the value of one specified cookie, you must write a JavaScript function that searches for the cookie value in the cookie string. JavaScript Cookie Example In the example to follow, we will create a cookie that stores the name of a visitor. The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie. The next time the visitor arrives at the same page, he/she will get a welcome message."
  },
  {
    "document": "For the example we will create 3 JavaScript functions: A Function to Set a Cookie First, we create a function that stores the name of the visitor in a cookie variable: function Example Example explained: The parameters of the function above are the name of the cookie (cname), the value of the cookie (cvalue), and the number of days until the cookie should expire (exdays). The function sets a cookie by adding together the cookiename, the cookie value, and the expires string. A Function to Get a Cookie Then, we create a function that returns the value of a specified cookie: function Example Function explained: Take the cookiename as parameter (cname). Create a variable (name) with the text to search for (cname + \"=\"). Decode the cookie string, to handle cookies with special characters, e.g. '$' Split document.cookie on semicolons into an array called ca (ca = decodedCookie.split(';')). Loop through the ca array (i = 0; i < ca.length; i++), and read out each value c = ca[i]). If the cookie is found (c.indexOf(name) == 0), return the value of the cookie (c.substring(name.length, c.length). If the cookie is not found, return \"\". A Function to Check a Cookie Last, we create the function that checks if a cookie is set. If the cookie is set it will display a greeting. If the cookie is not set, it will display a prompt box, asking for the name of the user, and stores the username cookie for 365 days, by calling the setCookie function: setCookie Example All Together Now Example The example above runs the checkCookie() function when the page loads. checkCookie()"
  },
  {
    "document": "Web APIs - Introduction A Web API is a developer's dream. What is Web API? API stands for Application Programming Interface. A Web API is an application programming interface for the Web. A Browser API can extend the functionality of a web browser. A Server API can extend the functionality of a web server. Browser APIs All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data. For example, the Geolocation API can return the coordinates of where the browser is located. Example Get the latitude and longitude of the user's position: Third Party APIs Third party APIs are not built into your browser. To use these APIs, you will have to download the code from the Web. Examples:"
  },
  {
    "document": "JavaScript Validation API Constraint Validation DOM Methods If an input field contains invalid data, display a message: The checkValidity() Method Constraint Validation DOM Properties Validity Properties The validity property of an input element contains a number of properties related to the validity of data: Examples If the number in an input field is greater than 100 (the input's max attribute), display a message: max The rangeOverflow Property If the number in an input field is less than 100 (the input's min attribute), display a message: min The rangeUnderflow Property"
  },
  {
    "document": "Web History API The Web History API provides easy methods to access the windows.history object. The window.history object contains the URLs (Web Sites) visited by the user. The Web History API is supported in all browsers: The History back() Method The back() method loads the previous URL in the windows.history list. It is the same as clicking the \"back arrow\" in your browser. Example Go Back The History go() Method The go() method loads a specific URL from the history list: Example Go Back 2 Pages History Object Properties History Object Methods"
  },
  {
    "document": "Web Storage API The Web Storage API is a simple syntax for storing and retrieving data in the browser. It is very easy to use: Example The Web Storage API is supported in all browsers: The localStorage Object The localStorage object provides access to a local storage for a particular Web Site. It allows you to store, read, add, modify, and delete data items for that domain. The data is stored with no expiration date, and will not be deleted when the browser is closed. The data will be available for days, weeks, and years. The setItem() Method The localStorage.setItem() method stores a data item in a storage. It takes a name and a value as parameters: Example The getItem() Method The localStorage.getItem() method retrieves a data item from the storage. It takes a name as parameter: Example The sessionStorage Object The sessionStorage object is identical to the localStorage object. The difference is that the sessionStorage object stores data for one session. The data is deleted when the browser is closed. Example The setItem() Method The sessionStorage.setItem() method stores a data item in a storage. It takes a name and a value as parameters: Example The getItem() Method The sessionStorage.getItem() method retrieves a data item from the storage. It takes a name as parameter: Example Storage Object Properties and Methods Related Pages for Web Storage API"
  },
  {
    "document": "Web Workers API A web worker is a JavaScript running in the background, without affecting the performance of the page. What is a Web Worker? When executing scripts in an HTML page, the page becomes unresponsive until the script is finished. A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background. Browser Support The numbers in the table specify the first browser versions that fully support Web Workers: Web Workers Example The example below creates a simple web worker that count numbers in the background: Example Start Worker Stop Worker Check Web Worker Support Before creating a web worker, check whether the user's browser supports it: Create a Web Worker File Now, let's create our web worker in an external JavaScript. Here, we create a script that counts. The script is stored in the \"demo_workers.js\" file: The important part of the code above is the postMessage() method - which is used to post a message back to the HTML page. postMessage() Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks. Create a Web Worker Object Now that we have the web worker file, we need to call it from an HTML page. The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \"demo_workers.js\": Then we can send and receive messages from the web worker. Add an \"onmessage\" event listener to the web worker. When the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data. Terminate a Web Worker When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated. To terminate a web worker, and free browser/computer resources, use the terminate() method: terminate() Reuse the Web Worker If you set the worker variable to undefined, after it has been terminated, you can reuse the code: Full Web Worker Example Code We have already seen the Worker code in the .js file. Below is the code for the HTML page: Example Web Workers and the DOM Since web workers are in external files, they do not have access to the following JavaScript objects:"
  },
  {
    "document": "JavaScript Fetch API The Fetch API interface allows web browser to make HTTP requests to web servers. ð No need for XMLHttpRequest anymore. Browser Support The numbers in the table specify the first browser versions that fully support Fetch API: A Fetch API Example The example below fetches a file and displays the content: Example Since Fetch is based on async and await, the example above might be easier to understand like this: Example Or even better: Use understandable names instead of x and y: Example"
  },
  {
    "document": "Web Geolocation API Locate the User's Position The HTML Geolocation API is used to get the geographical position of a user. Since this can compromise privacy, the position is not available unless the user approves it. Try It Note Geolocation is most accurate for devices with GPS, like smartphones. Browser Support The Geolocation API is supported in all browsers: Note The Geolocation API will only work on secure contexts such as HTTPS. If your site is hosted on a non-secure origin (such as HTTP) the requests to get the users location will no longer function. Using the Geolocation API The getCurrentPosition() method is used to return the user's position. getCurrentPosition() The example below returns the latitude and longitude of the user's position: Example Example explained: The example above is a very basic Geolocation script, with no error handling. Handling Errors and Rejections The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location: getCurrentPosition() Example Displaying the Result in a Map To display the result in a map, you need access to a map service, like Google Maps. In the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image): Example Location-specific Information This page has demonstrated how to show a user's position on a map. Geolocation is also very useful for location-specific information, like: The getCurrentPosition() Method - Return Data The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available: getCurrentPosition() Geolocation Object - Other interesting Methods The Geolocation object also has other interesting methods: watchPosition() clearWatch() watchPosition() The example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone): watchPosition() Example"
  },
  {
    "document": "AJAX Introduction AJAX is a developer's dream, because you can: AJAX Example Let AJAX change this text Try it Yourself Â» AJAX Example Explained HTML Page The HTML page contains a <div> section and a <button>. The <div> section is used to display information from a server. The <button> calls a function (if it is clicked). The function requests data from a web server and displays it: Function loadDoc() What is AJAX? AJAX = Asynchronous JavaScript And XML. AJAX is not a programming language. AJAX just uses a combination of: XMLHttpRequest AJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text. AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. How AJAX Works  Modern Browsers (Fetch API) Modern Browsers can use Fetch API instead of the XMLHttpRequest Object. The Fetch API interface allows web browser to make HTTP requests to web servers. If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way."
  },
  {
    "document": "AJAX - The XMLHttpRequest Object The keystone of AJAX is the XMLHttpRequest object. The XMLHttpRequest Object All modern browsers support the XMLHttpRequest object. XMLHttpRequest The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. XMLHttpRequest Create an XMLHttpRequest Object All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in XMLHttpRequest object. XMLHttpRequest Syntax for creating an XMLHttpRequest object: XMLHttpRequest Define a Callback Function A callback function is a function passed as a parameter to another function. In this case, the callback function should contain the code to execute when the response is ready. Send a Request To send a request to a server, you can use the open() and send() methods of the XMLHttpRequest object: XMLHttpRequest Example Access Across Domains For security reasons, modern browsers do not allow access across domains. This means that both the web page and the XML file it tries to load, must be located on the same server. The examples on W3Schools all open XML files located on the W3Schools domain. If you want to use the example above on one of your own web pages, the XML files you load must be located on your own server. XMLHttpRequest Object Methods XMLHttpRequest Object Properties The onload Property With the XMLHttpRequest object you can define a callback function to be executed when the request receives an answer. XMLHttpRequest The function is defined in the onload property of the XMLHttpRequest object: onload XMLHttpRequest Example Multiple Callback Functions If you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task. XMLHttpRequest The function call should contain the URL and what function to call when the response is ready. Example The onreadystatechange Property The readyState property holds the status of the XMLHttpRequest. readyState The onreadystatechange property defines a callback function to be executed when the readyState changes. onreadystatechange The status property and the statusText properties hold the status of the XMLHttpRequest object. status statusText The onreadystatechange function is called every time the readyState changes. onreadystatechange When readyState is 4 and status is 200, the response is ready: readyState Example The onreadystatechange event is triggered four times (1-4), one time for each change in the readyState. onreadystatechange"
  },
  {
    "document": "AJAX - XMLHttpRequest The XMLHttpRequest object is used to request data from a server. Send a Request To a Server To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object: XMLHttpRequest The url - A File On a Server The url parameter of the open() method, is an address to a file on a server: open() The file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform actions on the server before sending the response back). Asynchronous - True or False? Server requests should be sent asynchronously. The async parameter of the open() method should be set to true: By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead: The default value for the async parameter is async = true. You can safely remove the third parameter from your code. Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop. GET or POST? GET is simpler and faster than POST, and can be used in most cases. GET POST However, always use POST requests when: GET Requests A simple GET request: GET Example In the example above, you may get a cached result. To avoid this, add a unique ID to the URL: Example If you want to send information with the GET method, add the information to the URL: GET Example How the server uses the input and how the server responds to a request, is explained in a later chapter. POST Requests A simple POST request: POST Example To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method: setRequestHeader() send() Example Synchronous Request To execute a synchronous request, change the third parameter in the open() method to false: open() false Sometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code. Since the code will wait for server completion, there is no need for an onreadystatechange function: onreadystatechange Example Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop. Modern developer tools are encouraged to warn about using synchronous requests and may throw an InvalidAccessError exception when it occurs."
  },
  {
    "document": "AJAX - Server Response Server Response Properties The responseText Property The responseText property returns the server response as a JavaScript string, and you can use it accordingly: responseText Example The responseXML Property The XMLHttpRequest object has an in-built XML parser. The responseXML property returns the server response as an XML DOM object. responseXML Using this property you can parse the response as an XML DOM object: Example Request the file cd_catalog.xml and parse the response: Server Response Methods The getAllResponseHeaders() Method The getAllResponseHeaders() method returns all header information from the server response. getAllResponseHeaders() Example The getResponseHeader() Method The getResponseHeader() method returns specific header information from the server response. getResponseHeader() Example"
  },
  {
    "document": "AJAX XML Example AJAX can be used for interactive communication with an XML file. AJAX XML Example The following example will demonstrate how a web page can fetch information from an XML file with AJAX: Example Try it Yourself Â» Example Explained When a user clicks on the \"Get CD info\" button above, the loadDoc() function is executed. loadDoc() The loadDoc() function creates an XMLHttpRequest object, adds the function to be executed when the server response is ready, and sends the request off to the server. loadDoc() XMLHttpRequest When the server response is ready, an HTML table is built, nodes (elements) are extracted from the XML file, and it finally updates the element \"demo\" with the HTML table filled with XML data: The XML File The XML file used in the example above looks like this: \"cd_catalog.xml\"."
  },
  {
    "document": "AJAX PHP Example AJAX is used to create more interactive applications. AJAX PHP Example The following example demonstrates how a web page can communicate with a web server while a user types characters in an input field: Example Start typing a name in the input field below: Suggestions: First name: Example Explained In the example above, when a user types a character in the input field, a function called showHint() is executed. showHint() The function is triggered by the onkeyup event. onkeyup Here is the code: Example Code explanation: First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function. However, if the input field is not empty, do the following: The PHP File - \"gethint.php\" The PHP file checks an array of names, and returns the corresponding name(s) to the browser:"
  },
  {
    "document": "AJAX ASP Example AJAX is used to create more interactive applications. AJAX ASP Example The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field: Example Start typing a name in the input field below: Suggestions: First name: Example Explained In the example above, when a user types a character in the input field, a function called showHint() is executed. showHint() The function is triggered by the onkeyup event. onkeyup Here is the code: Example Code explanation: First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function. However, if the input field is not empty, do the following: The ASP File - \"gethint.asp\" The ASP file checks an array of names, and returns the corresponding name(s) to the browser:"
  },
  {
    "document": "AJAX Database Example AJAX can be used for interactive communication with a database. AJAX Database Example The following example will demonstrate how a web page can fetch information from a database with AJAX: Example Try it Yourself Â» Example Explained - The showCustomer() Function When a user selects a customer in the dropdown list above, a function called showCustomer() is executed. The function is triggered by the onchange event: showCustomer() onchange showCustomer The showCustomer() function does the following: showCustomer() The AJAX Server Page The page on the server called by the JavaScript above is a PHP file called \"getcustomer.php\". The source code in \"getcustomer.php\" runs a query against a database, and returns the result in an HTML table:"
  },
  {
    "document": "XML Applications This chapter demonstrates some HTML applications using XML, HTTP, DOM, and JavaScript. The XML Document Used In this chapter we will use the XML file called \"cd_catalog.xml\". Display XML Data in an HTML Table This example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table: Example For more information about using JavaScript and the XML DOM, go to DOM Intro. Display the First CD in an HTML div Element This example uses a function to display the first CD element in an HTML element with id=\"showCD\": Example Navigate Between the CDs To navigate between the CDs in the example above, create a next() and previous() function: next() previous() Example Show Album Information When Clicking On a CD The last example shows how you can show album information when the user clicks on a CD: Example"
  },
  {
    "document": "AJAX Examples Simple Examples Examples explained Request Header Information Examples explained Request XML Files Examples explained Retrieve Server Data with PHP and ASP Examples explained Retrieve Database Information Examples explained AJAX Applications Examples explained"
  },
  {
    "document": "JSON - Introduction JSON stands for JavaScript Object Notation JSON is a text format for storing and transporting data JSON is \"self-describing\" and easy to understand JSON Example This example is a JSON string: It defines an object with 3 properties: Each property has a value. If you parse the JSON string with a JavaScript program, you can access the data as an object: What is JSON? * The JSON syntax is derived from JavaScript object notation, but the JSON format is text only. Code for reading and generating JSON exists in many programming languages. The JSON format was originally specified by Douglas Crockford. Why Use JSON? The JSON format is syntactically similar to the code for creating JavaScript objects. Because of this, a JavaScript program can easily convert JSON data into JavaScript objects. Since the format is text only, JSON data can easily be sent between computers, and used by any programming language. JavaScript has a built in function for converting JSON strings into JavaScript objects: JSON.parse() JSON.parse() JavaScript also has a built in function for converting an object into a JSON string: JSON.stringify() JSON.stringify() You can receive pure text from a server and use it as a JavaScript object. You can send a JavaScript object to a server in pure text format. You can work with data as JavaScript objects, with no complicated parsing and translations. Storing Data When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats. JSON makes it possible to store JavaScript objects as text."
  },
  {
    "document": "JSON Syntax The JSON syntax is a subset of the JavaScript syntax. JSON Syntax Rules JSON syntax is derived from JavaScript object notation syntax: JSON Data - A Name and a Value JSON data is written as name/value pairs (aka key/value pairs). A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value: Example JSON names require double quotes. JSON - Evaluates to JavaScript Objects The JSON format is almost identical to JavaScript objects. In JSON, keys must be strings, written with double quotes: JSON In JavaScript, keys can be strings, numbers, or identifier names: JavaScript JSON Values JSON Values In JSON, values must be one of the following data types: In JavaScript values can be all of the above, plus any other valid JavaScript expression, including: In JSON, string values must be written with double quotes: JSON In JavaScript, you can write string values with double or single quotes: JavaScript JavaScript Objects Because JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript. With JavaScript you can create an object and assign data to it, like this: Example You can access a JavaScript object like this: Example It can also be accessed like this: Example Data can be modified like this: Example It can also be modified like this: Example You will learn how to convert JavaScript objects into JSON later in this tutorial. JavaScript Arrays as JSON The same way JavaScript objects can be written as JSON, JavaScript arrays can also be written as JSON. You will learn more about objects and arrays later in this tutorial. JSON Files"
  },
  {
    "document": "JSON vs XML Both JSON and XML can be used to receive data from a web server. The following JSON and XML examples both define an employees object, with an array of 3 employees: JSON Example XML Example JSON is Like XML Because JSON is Unlike XML Because The biggest difference is: XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function. Why JSON is Better Than XML XML is much more difficult to parse than JSON. JSON is parsed into a ready-to-use JavaScript object. For AJAX applications, JSON is faster and easier than XML: Using XML Using JSON"
  },
  {
    "document": "JSON Data Types Valid Data Types In JSON, values must be one of the following data types: JSON values cannot be one of the following data types: JSON Strings Strings in JSON must be written in double quotes. Example JSON Numbers Numbers in JSON must be an integer or a floating point. Example JSON Objects Values in JSON can be objects. Example Objects as values in JSON must follow the JSON syntax. JSON Arrays Values in JSON can be arrays. Example JSON Booleans Values in JSON can be true/false. Example JSON null Values in JSON can be null. Example"
  },
  {
    "document": "JSON.parse() A common use of JSON is to exchange data to/from a web server. When receiving data from a web server, the data is always a string. Parse the data with JSON.parse(), and the data becomes a JavaScript object. JSON.parse() Example - Parsing JSON Imagine we received this text from a web server: Use the JavaScript function JSON.parse() to convert text into a JavaScript object: JSON.parse() Make sure the text is in JSON format, or else you will get a syntax error. Use the JavaScript object in your page: Example Array as JSON When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object. JSON.parse() Example Exceptions Parsing Dates Date objects are not allowed in JSON. If you need to include a date, write it as a string. You can convert it back into a date object later: Example Convert a string into a date: Or, you can use the second parameter, of the JSON.parse() function, called reviver. JSON.parse() The reviver parameter is a function that checks each property, before returning the value. Example Convert a string into a date, using the reviver function: Parsing Functions Functions are not allowed in JSON. If you need to include a function, write it as a string. You can convert it back into a function later: Example Convert a string into a function: You should avoid using functions in JSON, the functions will lose their scope, and you would have to use eval() to convert them back into functions. eval()"
  },
  {
    "document": "JSON.stringify() A common use of JSON is to exchange data to/from a web server. When sending data to a web server, the data has to be a string. You can convert any JavaScript datatype into a string with JSON.stringify(). JSON.stringify() Stringify a JavaScript Object Imagine we have this object in JavaScript: Use the JavaScript function JSON.stringify() to convert it into a string. JSON.stringify() The result will be a string following the JSON notation. myJSON is now a string, and ready to be sent to a server: myJSON Example You will learn how to send JSON to a server in the next chapters. Stringify a JavaScript Array It is also possible to stringify JavaScript arrays: Imagine we have this array in JavaScript: Use the JavaScript function JSON.stringify() to convert it into a string. JSON.stringify() The result will be a string following the JSON notation. myJSON is now a string, and ready to be sent to a server: myJSON Example You will learn how to send a JSON string to a server in the next chapters. Storing Data When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats. JSON makes it possible to store JavaScript objects as text. Example Storing data in local storage All Data Types JSON.stringify() can not only convert objects and arrays into JSON strings, it can convert any JavaScript value into a string. Example Stringify a Number Example Stringify a Boolean Stringify a Date In JSON, date objects are not allowed. The JSON.stringify() function will convert any Date objects into strings. JSON.stringify() Example You can convert the string back into a date object at the receiver. Stringify a Function In JSON, functions are not allowed as object values. The JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value: JSON.stringify() Example This can be omitted if you convert your functions into strings before running the JSON.stringify() function. JSON.stringify() Example If you send functions using JSON, the functions will lose their scope, and the receiver would have to use eval() to convert them back into functions."
  },
  {
    "document": "JSON Object Literals This is a JSON string: Inside the JSON string there is a JSON object literal: JSON object literals are surrounded by curly braces {}. JSON object literals contains key/value pairs. Keys and values are separated by a colon. Keys must be strings, and values must be a valid JSON data type: string number object array boolean null Each key/value pair is separated by a comma. It is a common mistake to call a JSON object literal \"a JSON object\". JSON cannot be an object. JSON is a string format. The data is only JSON when it is in a string format. When it is converted to a JavaScript variable, it becomes a JavaScript object. JavaScript Objects You can create a JavaScript object from a JSON object literal: Example myObj = {\"name\":\"John\", \"age\":30, \"car\":null}; Try it Yourself Â» Normally, you create a JavaScript object by parsing a JSON string: Example myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; myObj = JSON.parse(myJSON); Try it Yourself Â» Accessing Object Values You can access object values by using dot (.) notation: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); x = myObj.name; Try it Yourself Â» You can also access object values by using bracket ([]) notation: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); x = myObj[\"name\"]; Try it Yourself Â» Looping an Object You can loop through object properties with a for-in loop: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); let text = \"\"; for (const x in myObj) { text += x + \", \"; } Try it Yourself Â» In a for-in loop, use the bracket notation to access the property values: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); let text = \"\"; for (const x in myObj) { text += myObj[x] + \", \"; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Normally, you create a JavaScript object by parsing a JSON string: Example myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; myObj = JSON.parse(myJSON); Try it Yourself Â» Accessing Object Values You can access object values by using dot (.)"
  },
  {
    "document": "notation: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); x = myObj.name; Try it Yourself Â» You can also access object values by using bracket ([]) notation: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); x = myObj[\"name\"]; Try it Yourself Â» Looping an Object You can loop through object properties with a for-in loop: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); let text = \"\"; for (const x in myObj) { text += x + \", \"; } Try it Yourself Â» In a for-in loop, use the bracket notation to access the property values: Example const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}'; const myObj = JSON.parse(myJSON); let text = \"\"; for (const x in myObj) { text += myObj[x] + \", \"; } Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Accessing Object Values You can access object values by using dot (.) notation: Example You can also access object values by using bracket ([]) notation: Example Looping an Object You can loop through object properties with a for-in loop: Example In a for-in loop, use the bracket notation to access the property values: Example"
  },
  {
    "document": "JSON Array Literals This is a JSON string: Inside the JSON string there is a JSON array literal: Arrays in JSON are almost the same as arrays in JavaScript. In JSON, array values must be of type string, number, object, array, boolean or null. In JavaScript, array values can be all of the above, plus any other valid JavaScript expression, including functions, dates, and undefined. JavaScript Arrays You can create a JavaScript array from a literal: Example myArray = [\"Ford\", \"BMW\", \"Fiat\"]; Try it Yourself Â» You can create a JavaScript array by parsing a JSON string: Example myJSON = '[\"Ford\", \"BMW\", \"Fiat\"]'; myArray = JSON.parse(myJSON); Try it Yourself Â» Accessing Array Values You access array values by index: Example myArray[0]; Try it Yourself Â» Arrays in Objects Objects can contain arrays: Example { \"name\":\"John\", \"age\":30, \"cars\":[\"Ford\", \"BMW\", \"Fiat\"] } You access array values by index: Example myObj.cars[0]; Try it Yourself Â» Looping Through an Array You can access array values by using a for in loop: Example for (let i in myObj.cars) { x += myObj.cars[i];} Try it Yourself Â» Or you can use a for loop: Example for (let i = 0; i < myObj.cars.length; i++) { x += myObj.cars[i];} Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example You can create a JavaScript array by parsing a JSON string: Example myJSON = '[\"Ford\", \"BMW\", \"Fiat\"]'; myArray = JSON.parse(myJSON); Try it Yourself Â» Accessing Array Values You access array values by index: Example myArray[0]; Try it Yourself Â» Arrays in Objects Objects can contain arrays: Example { \"name\":\"John\", \"age\":30, \"cars\":[\"Ford\", \"BMW\", \"Fiat\"] } You access array values by index: Example myObj.cars[0]; Try it Yourself Â» Looping Through an Array You can access array values by using a for in loop: Example for (let i in myObj.cars) { x += myObj.cars[i];} Try it Yourself Â» Or you can use a for loop: Example for (let i = 0; i < myObj.cars.length; i++) { x += myObj.cars[i];} Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Accessing Array Values You access array values by index: Example Arrays in Objects Objects can contain arrays: Example You access array values by index: Example Looping Through an Array You can access array values by using a for in loop: for in Example Or you can use a for loop: for Example"
  },
  {
    "document": "JSON Server A common use of JSON is to exchange data to/from a web server. When receiving data from a web server, the data is always a string. Parse the data with JSON.parse(), and the data becomes a JavaScript object. JSON.parse() Sending Data If you have data stored in a JavaScript object, you can convert the object into JSON, and send it to a server: Example Receiving Data If you receive data in JSON format, you can easily convert it into a JavaScript object: Example JSON From a Server You can request JSON from the server by using an AJAX request As long as the response from the server is written in JSON format, you can parse the string into a JavaScript object. Example Use the XMLHttpRequest to get data from the server: Take a look at json_demo.txt Array as JSON When using the JSON.parse() on JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object. JSON.parse() Example JSON returned from a server as an array: Take a look at json_demo_array.txt"
  },
  {
    "document": "JSON PHP A common use of JSON is to read data from a web server, and display the data in a web page. This chapter will teach you how to exchange JSON data between the client and a PHP server. The PHP File PHP has some built-in functions to handle JSON. Objects in PHP can be converted into JSON by using the PHP function json_encode(): PHP file The Client JavaScript Here is a JavaScript on the client, using an AJAX call to request the PHP file from the example above: Example Use JSON.parse() to convert the result into a JavaScript object: PHP Array Arrays in PHP will also be converted into JSON when using the PHP function json_encode(): PHP file The Client JavaScript Here is a JavaScript on the client, using an AJAX call to request the PHP file from the array example above: Example Use JSON.parse() to convert the result into a JavaScript array: PHP Database PHP is a server side programming language, and can be used to access a database. Imagine you have a database on your server, and you want to send a request to it from the client where you ask for the 10 first rows in a table called \"customers\". On the client, make a JSON object that describes the numbers of rows you want to return. Before you send the request to the server, convert the JSON object into a string and send it as a parameter to the url of the PHP page: Example Use JSON.stringify() to convert the JavaScript object into JSON: Example explained: Take a look at the PHP file: PHP file PHP File explained: Use the Data Example PHP Method = POST When sending data to the server, it is often best to use the HTTP POST method. POST To send AJAX requests using the POST method, specify the method, and the correct header. POST The data sent to the server must now be an argument to the send() method: send() Example The only difference in the PHP file is the method for getting the transferred data. PHP file Use $_POST instead of $_GET:"
  },
  {
    "document": "JSON HTML JSON can very easily be translated into JavaScript. JavaScript can be used to make HTML in your web pages. HTML Table Make an HTML table with data received as JSON: Example Dynamic HTML Table Make the HTML table based on the value of a drop down menu: Choose an option: Customers Products Suppliers Example HTML Drop Down List Make an HTML drop down list with data received as JSON: Example"
  },
  {
    "document": "JSONP JSONP is a method for sending JSON data without worrying about cross-domain issues. JSONP does not use the XMLHttpRequest object. XMLHttpRequest JSONP uses the <script> tag instead. <script> JSONP Intro JSONP stands for JSON with Padding. Requesting a file from another domain can cause problems, due to cross-domain policy. Requesting an external script from another domain does not have this problem. JSONP uses this advantage, and request files using the script tag instead of the XMLHttpRequest object. XMLHttpRequest The Server File The file on the server wraps the result inside a function call: Example The result returns a call to a function named \"myFunc\" with the JSON data as a parameter. Make sure that the function exists on the client. The JavaScript function The function named \"myFunc\" is located on the client, and ready to handle JSON data: Example Creating a Dynamic Script Tag The example above will execute the \"myFunc\" function when the page is loading, based on where you put the script tag, which is not very satisfying. The script tag should only be created when needed: Example Create and insert the <script> tag when a button is clicked: Dynamic JSONP Result The examples above are still very static. Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on the information it gets. PHP file PHP File explained: JavaScript Example The \"myFunc\" function will be called from the php file: Callback Function When you have no control over the server file, how do you get the server file to call the correct function? Sometimes the server file offers a callback function as a parameter: Example The php file will call the function you pass as a callback parameter:"
  },
  {
    "document": "JavaScript / jQuery DOM Selectors jQuery vs JavaScript jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax. However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript: Finding HTML Element by Id Return the element with id=\"id01\": jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Finding HTML Elements by Tag Name Return all <p> elements: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Finding HTML Elements by Class Name Return all elements with class=\"intro\". jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Finding HTML Elements by CSS Selectors Return a list of all <p> elements with class=\"intro\". jQuery Try it Yourself Â» JavaScript Try it Yourself Â»"
  },
  {
    "document": "JavaScript / jQuery HTML Elements jQuery vs JavaScript jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax. However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript: Set Text Content Set the inner text of an HTML element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Get Text Content Get the inner text of an HTML element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Set HTML Content Set the HTML content of an element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Get HTML Content Get the HTML content of an element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â»"
  },
  {
    "document": "JavaScript / jQuery CSS Styles jQuery vs JavaScript jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax. However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript: Hiding HTML Elements Hide an HTML Element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Showing HTML Elements Show an HTML Element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Styling HTML Elements Change the font size of an HTML element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â»"
  },
  {
    "document": "JavaScript / jQuery HTML DOM jQuery vs JavaScript jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax. However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript: Removing HTML Elements Remove an HTML element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â» Get Parent Element Return the parent of an HTML element: jQuery Try it Yourself Â» JavaScript Try it Yourself Â»"
  },
  {
    "document": "JavaScript Graphics Graphic Libraries JavaScript libraries to use for all kinds of graphs: Plotly.js Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps. Learn More ... Chart.js Chart.js comes with many built-in chart types: Scatter Line Bar Radar Pie and Doughnut Polar Area Bubble Learn More ... Google Chart From simple line charts to complex tree maps, Google Chart provides a number of built-in chart types: Scatter Chart Line Chart Bar / Column Chart Area Chart Pie Chart Donut Chart Org Chart Map / Geo Chart Learn More ... â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Chart.js Chart.js comes with many built-in chart types: Learn More ... Google Chart From simple line charts to complex tree maps, Google Chart provides a number of built-in chart types: Scatter Chart Line Chart Bar / Column Chart Area Chart Pie Chart Donut Chart Org Chart Map / Geo Chart Learn More ... â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Google Chart From simple line charts to complex tree maps, Google Chart provides a number of built-in chart types: Learn More ... â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up"
  },
  {
    "document": "HTML Canvas HTML Canvas is perfect for Scatter Plots HTML Canvas is perfect for Line Graphs HTML Canvas is perfect for combining Scatter and Lines Scatter Plots Source Code Try it Yourself Â» Line Graphs Source Code Try it Yourself Â» Combined Source Code Try it Yourself Â»"
  },
  {
    "document": "Plotly.js Plotly.js is a charting library that comes with over 40 chart types: Plotly.js is free and open-source under the MIT license. It costs nothing to install and use. You can view the source, report issues and contribute using Github. Bar Charts Source Code Try it Yourself Â» Horizontal Bar Charts Source Code Try it Yourself Â» Pie Charts To display a pie instead of bars, change x and y to labels and values, and change the type to \"pie\": Try it Yourself Â» Donut Charts To display a donut instead of a pie, add a hole: Try it Yourself Â» Plotting Equations Source Code To display scatters instead, change mode to markers: Scatter Plots Source Code Try it Yourself Â» Line Graphs Source Code Try it Yourself Â» Bubble Plots Bubble Plots are Scatter Plots whose markers have variable color, size, and symbols. It is a type of 3-dimensional chart with only two axes (x and y) where the size of the bubble communicates the third dimention. Source Code Try it Yourself Â» Linear Graphs Source Code Try it Yourself Â» Multiple Lines Source Code Try it Yourself Â»"
  },
  {
    "document": "Chart.js Chart.js is an free JavaScript library for making HTML-based charts. It is one of the simplest visualization libraries for JavaScript, and comes with the many built-in chart types: How to Use Chart.js? 1. Add a link to the providing CDN (Content Delivery Network): 2. Add a <canvas> to where in the HTML you want to draw the chart: The canvas element must have a unique id. Bar Charts Source Code Try it Yourself Â» Color only one bar: Try it Yourself Â» Same color all bars: Try it Yourself Â» Color Shades: Try it Yourself Â» Horizontal Bars Just change type from \"bar\" to \"horizontalBar\": Try it Yourself Â» Pie Charts Example Try it Yourself Â» Doughnut Charts Just change type from \"pie\" to \"doughnut\": Try it Yourself Â» Scatter Plots House Prices vs. Size Source Code Try it Yourself Â» Line Graphs House Prices vs. Size Source Code Try it Yourself Â» If you set the borderColor to zero, you can scatter plot the line graph: Try it Yourself Â» Multiple Lines Source Code Try it Yourself Â» Linear Graphs Source Code Try it Yourself Â» Function Graphs Same as Linear Graph. Just change the generateData parameter(s): Try it Yourself Â»"
  },
  {
    "document": "Google Chart From simple line charts to complex hierarchical tree maps, the Google Chart gallery provides a large number of ready-to-use chart types: How to Use Google Chart? 1. Add a <div> element (with a unique id) in the HTML where you want to display the chart: 2. Add a link to the charts loader: 3. Load the Graph API, and add the function to run when the API is loaded: Bar Charts Source Code Try it Yourself Â» Pie Charts To convert a Bar Chart to a Pie chart, just replace: google.visualization.BarChartwith: google.visualization.PieChart Try it Yourself Â» 3D Pie To display the Pie in 3D, just add is3D: true to the options: Try it Yourself Â» Line Graph Source Code Try it Yourself Â» Scatter Plots To scatter plot the same data, change google.visualization to ScatterChart: Try it Yourself Â»"
  },
  {
    "document": "D3.js D3.js is a JavaScript library for manipulating HTML data. D3.js is easy to use. D3.js is easy to use. How to Use D3.js? To use D3.js in your web page, add a link to the library: This script selects the body element and appends a paragraph with the text \"Hello World! \": Try it Yourself Â» Scatter Plot Example Try it Yourself Â»"
  },
  {
    "document": "JavaScript Examples What can JavaScript do? Examples Explained Where to Insert JavaScript Where to Explained JavaScript Output Output Explained JavaScript Syntax Syntax Explained JavaScript Statements Statements Explained JavaScript Comments Comments Explained JavaScript Variables Variables Explained JavaScript Arithmetic Arithmetic Explained JavaScript Assignment Assignment Explained JavaScript String Concatenation Concatenation Explained JavaScript Data Types Data types Explained JavaScript Objects Objects Explained JavaScript Functions Functions Explained JavaScript Events Events Explained JavaScript Strings Strings Explained JavaScript Numbers Numbers Explained JavaScript Number Methods Numbers Methods Explained JavaScript Maths Maths Explained JavaScript Random Random Explained JavaScript Dates Dates Explained JavaScript Arrays Arrays Explained JavaScript Array Methods Array Methods Explained JavaScript Array Sort Array Sort Explained JavaScript Array Iteration Array Iteration Explained JavaScript Type Conversion Type Conversion Explained JavaScript Booleans Booleans Explained JavaScript Comparisons Comparisons Explained JavaScript Conditionals Conditionals Explained JavaScript Loops Loops Explained JavaScript Error Handling Errors Explained JavaScript Regular Expressions Regular Expressions Explained JavaScript Objects Objects Explained JavaScript Object Properties Object Properties Explained JSON Objects JSON Object Properties Explained JSON Arrays JSON Arrays Explained JSON Parse JSON Parse Explained JSON Stringify JSON Stringify Explained JSON PHP JSON PHP Explained JSON HTML JSON HTML Explained JSON JSONP JSON JSONP Explained"
  },
  {
    "document": "JavaScript HTML DOM Examples Examples of using JavaScript to access and manipulate DOM objects. The Document Object Document Object Explained The Anchors Collection The Links Collection The Forms Collection The Images Collection CSS Manipulation"
  },
  {
    "document": "JavaScript HTML Input Examples Examples of using JavaScript to access and manipulate HTML input objects. Button Object Form Object Option and Select Objects"
  },
  {
    "document": "JavaScript HTML Objects Examples Examples of using JavaScript to access and manipulate HTML objects. Anchor Object Area Object Base Object IFrame Object Image Object Table Objects"
  },
  {
    "document": "JavaScript HTML DOM Events Examples Examples of using JavaScript to react to events Input Events Mouse Events Click Events Load Events Others Examples explained"
  },
  {
    "document": "JavaScript Browser Objects Examples Examples of using JavaScript to access and manipulate the Browser objects. Window Object Window explained Screen Object Screen explained Location Object Location explained History Object History explained Navigator Object Navigator explained Popup Boxes Popup explained Timing Timing explained Cookies Cookies explained"
  },
  {
    "document": "JavaScript Online Editor JavaScript Editor With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser. Example 11 Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that lets you make and share your own website. You can change the website's look and how it works by editing the code right in your web browser. It's easy to use and doesn't require any setup: The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your JavaScript knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, and you can use it for other languages too. New languages are added all the time: If you do not know JavaScript, we suggest that you read our JavaScript Tutorial from scratch. Build Powerful Websites You can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share It With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "JavaScript Exercises Exercises Test your JavaScript skills with exercises from all categories: Introduction Where To Output Statements Syntax Comments Variables Let Const Operators Arithmetic Operators Assignment Operators Data Types Functions Objects Object Properties Object Methods Display Objects Object Constructors Events Strings String Methods String Search String Templates Numbers BigInt Number Methods Number Properties Arrays Array Methods Array Search Sorting Arrays Array iteration Array Const Dates Date Formats Date Get Methods Date Set Methods Math Math Random Booleans Comparisons If Else Switch For Loops For In Loops For Of Loops While Loops Break and Continue Iterables Sets Set Methods Maps Map Methods TypeOf Type Conversion Destructuring Bitwise Regular Expressions Operator Precedence Error Handling Scope Hoisting Strict Mode The this Keyword Arrow Function Classes Modules JSON Debugging HTML DOM HTML DOM Methods HTML DOM Docuement HTML DOM Elements HTML DOM HTML HTML DOM Form Validation HTML DOM CSS HTML DOM Events HTML DOM Event Listener HTML DOM Navigation HTML DOM Nodes HTML DOM Collections HTML DOM Node List Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise We have gathered a variety of React exercises from most of the chapters in our JavaScript Tutorial. The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "JavaScript Quiz Test You can test your JavaScript skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the JavaScript Quiz â¯ If you don't know JavaScript, we suggest that you read our JavaScript Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "JavaScript and HTML Website Hosting Create Website with HTML and JavaScript Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "JavaScript Syllabus Introduction The W3Schools JavaScript Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of JavaScript. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn JavaScript step by step, from the introduction to creating your first application with JavaScript. Get Started With JavaScript Â» Learning Outcomes Note: Are you a teacher teaching JavaScript? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are JavaScript Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn JavaScript for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment JavaScript, like any other programming language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit JavaScript code and view the result: Example If you want to explore more and host your JavaScript project, we have a feature called Spaces that allows you to build, test and deploy static websites for free. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account JavaScript Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The JavaScript exam is a test that summarizes the W3Schools JavaScript syllabus. After passing the exam you get the \"Certified JavaScript Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach JavaScript? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "JavaScript Study Plan Introduction The JavaScript study plan helps you teach your students JavaScript step-by-step. Creating a study plan for JavaScript is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of JavaScript to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach JavaScript. The JavaScript training materials is available for you to include and use in your study plan: JavaScript Syllabus With the JavaScript Syllabus, your students will start with the basics, like creating simple web pages, and move to more advanced topics, like adding images, links, and forms. Each chapter has examples, try-its, exercises, and quizzes to make learning easy, interactive and fun. Read more about JavaScript Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 5-week JavaScript study plan could look like: Image of Sample JavaScript study plan: Ready to get started? Start with JavaScript Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach JavaScript programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "JavaScript Interview Preparation Try W3Schools' comprehensive Front-End interview preparation feature. A tool that will help you get ready for your next interview. W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance. After the interview training you will get an evaluation of your performance that you can use to improve yourself. Get Started What to expect in a Front-End interview If you are going to a Front-End interview, there are a few things you can expect: Coding Questions: You will be asked coding questions, and you possibly also get a task to solve. Examples of technical questions: Tell me about your experience as a Front-End developer. Tell me about a personal project where you worked on implementing the user interface for a website. Examples of a task: Create a webpage that shows a greeting message to the user. Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day. If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers. Showcase your skills and projects: They would like to see projects to understand your work better. You can include current projects in your portfolio even if they are unfinished. Examples of projects to have in your portfolio: What to do before the interview Before you go to an interview, you should check out the company. It will give you a better understanding of their values and what they do. Check out: Make sure you understand the job description: Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand. You can also ask a friend or a community member to help you. There is a big community of Front-End developers on social media. Reflect on why you are the right fit for this role: Companies hire people they believe will be the right fit. Think about what value you can add to the role and the team. Write them down. It will help you discuss how you are the right candidate for the role. We have created an interview tool to help you prepare: Try it out  What is Front-End Development? Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience. Typical Languages Used in Front-End Development: Career Outlook The demand for Front-End developers is high. You can expect: The Average Salary is $112,328 in the US. Typical Job Titles for a Front-End Developer: Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more. Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!"
  },
  {
    "document": "Try W3Schools interview preparation here: Interview Preperation Best of luck!"
  },
  {
    "document": "W3Schools JavaScript Bootcamp JavaScript Bootcamp Learn More What You Will Learn HTML CSS JavaScript Self-paced Courses Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript. HTML is the standard markup language for Web pages. With HTML you can create your own Website. CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed. JavaScript is the programming language of the Web. This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification. The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification. What You Get 4x Certifications: Certificate of Completion You get sharable certificates that can be added to your CV, Resume or LinkedIn. Check out what it looks like in this example! Three Reasons to Join the Program Learn More How it Works Step 1. Course enrollment Enroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content. Step 2. Complete the course learning modules The courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam. Step 3. Take the exams The exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count. Step 4: Become certified Pass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code. Learn More"
  },
  {
    "document": "W3Schools JavaScript Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "JavaScript and HTML DOM Complete JavaScript and HTML DOM References All Properties and Methods with Full Examples Revised April 2024 JavaScript Objects with Examples Window Objects with Examples HTML DOM Objects with Examples Web APIs with Examples HTML Elements with Examples  Other JavaScript Tutorial Visit Our JavaScript Tutorial Â»"
  },
  {
    "document": "JavaScript and HTML DOM Complete JavaScript and HTML DOM References All Properties and Methods with Full Examples Revised April 2024 JavaScript Objects with Examples Window Objects with Examples HTML DOM Objects with Examples Web APIs with Examples HTML Elements with Examples  Other JavaScript Tutorial Visit Our JavaScript Tutorial Â»"
  },
  {
    "document": "MySQL Tutorial Learn MySQL MySQL is a widely used relational database management system (RDBMS). MySQL is free and open-source. MySQL is ideal for both small and large applications. Examples in Each Chapter With our online MySQL editor, you can edit the SQL statements, and click on a button to view the result. Example Click on the \"Try it Yourself\" button to see how it works. MySQL Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all MySQL Exercises MySQL Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples MySQL Quiz Test Test your MySQL skills at W3Schools! Start MySQL Quiz! Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. MySQL References At W3Schools you will find a complete reference of MySQL data types and functions: MySQL Data Types MySQL Functions"
  },
  {
    "document": "Introduction to MySQL MySQL is a very popular open-source relational database management system (RDBMS). What is MySQL? Who Uses MySQL? Show Data On Your Web Site To build a web site that shows data from a database, you will need:"
  },
  {
    "document": "MySQL RDBMS What is RDBMS? RDBMS stands for Relational Database Management System. RDBMS is a program used to maintain a relational database. RDBMS is the basis for all modern database systems such as MySQL, Microsoft SQL Server, Oracle, and Microsoft Access. RDBMS uses SQL queries to access the data in the database. What is a Database Table? A table is a collection of related data entries, and it consists of columns and rows. A column holds specific information about every record in the table. A record (or row) is each individual entry that exists in a table. Look at a selection from the Northwind \"Customers\" table: The columns in the \"Customers\" table above are: CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. The table has 5 records (rows). What is a Relational Database? A relational database defines database relationships in the form of tables. The tables are related to each other - based on data common to each. Look at the following three tables \"Customers\", \"Orders\", and \"Shippers\" from the Northwind database: Customers Table The relationship between the \"Customers\" table and the \"Orders\" table is the CustomerID column: Orders Table The relationship between the \"Orders\" table and the \"Shippers\" table is the ShipperID column: Shippers Table"
  },
  {
    "document": "MySQL SQL What is SQL? SQL is the standard language for dealing with Relational Databases. SQL is used to insert, search, update, and delete database records. How to Use SQL The following SQL statement selects all the records in the \"Customers\" table: Example Keep in Mind That... select SELECT In this tutorial we will write all SQL keywords in upper-case. Semicolon after SQL Statements? Some database systems require a semicolon at the end of each SQL statement. Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server. In this tutorial, we will use semicolon at the end of each SQL statement. Some of The Most Important SQL Commands SELECT UPDATE DELETE INSERT INTO CREATE DATABASE ALTER DATABASE CREATE TABLE ALTER TABLE DROP TABLE CREATE INDEX DROP INDEX"
  },
  {
    "document": "MySQL SELECT Statement The MySQL SELECT Statement The SELECT statement is used to select data from a database. SELECT The data returned is stored in a result table, called the result-set. SELECT Syntax Here, column1, column2, ... are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax: Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table in the Northwind sample database: SELECT Columns Example The following SQL statement selects the \"CustomerName\", \"City\", and \"Country\" columns from the \"Customers\" table: Example SELECT * Example The following SQL statement selects ALL the columns from the \"Customers\" table: Example The MySQL SELECT DISTINCT Statement The SELECT DISTINCT statement is used to return only distinct (different) values. SELECT DISTINCT Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values. SELECT DISTINCT Syntax SELECT Example Without DISTINCT The following SQL statement selects all (including the duplicates) values from the \"Country\" column in the \"Customers\" table: Example Now, let us use the SELECT DISTINCT statement and see the result. SELECT DISTINCT SELECT DISTINCT Examples The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table: Example The following SQL statement counts and returns the number of different (distinct) countries in the \"Customers\" table: Example"
  },
  {
    "document": "MySQL WHERE Clause The MySQL WHERE Clause The WHERE clause is used to filter records. WHERE It is used to extract only those records that fulfill a specified condition. WHERE Syntax Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.! WHERE SELECT UPDATE DELETE Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: WHERE Clause Example The following SQL statement selects all the customers from \"Mexico\": Example Text Fields vs. Numeric Fields SQL requires single quotes around text values (most database systems will also allow double quotes). However, numeric fields should not be enclosed in quotes: Example Operators in The WHERE Clause The following operators can be used in the WHERE clause: WHERE"
  },
  {
    "document": "MySQL AND, OR and NOT Operators The MySQL AND, OR and NOT Operators The WHERE clause can be combined with AND, OR, and NOT operators. WHERE AND OR NOT The AND and OR operators are used to filter records based on more than one condition: AND OR AND AND OR OR The NOT operator displays a record if the condition(s) is NOT TRUE. NOT AND Syntax OR Syntax NOT Syntax Demo Database The table below shows the complete \"Customers\" table from the Northwind sample database: AND Example The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\": Example OR Example The following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR \"Stuttgart\": Example The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" OR \"Spain\": Example NOT Example The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\": Example Combining AND, OR and NOT You can also combine the AND, OR and NOT operators. AND OR NOT The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city must be \"Berlin\" OR \"Stuttgart\" (use parenthesis to form complex expressions): Example The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\" and NOT \"USA\": Example"
  },
  {
    "document": "MySQL ORDER BY Keyword The MySQL ORDER BY Keyword The ORDER BY keyword is used to sort the result-set in ascending or descending order. ORDER BY The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword. ORDER BY DESC ORDER BY Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: ORDER BY Example The following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" column: Example ORDER BY DESC Example The following SQL statement selects all customers from the \"Customers\" table, sorted DESCENDING by the \"Country\" column: Example ORDER BY Several Columns Example The following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" and the \"CustomerName\" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName: Example ORDER BY Several Columns Example 2 The following SQL statement selects all customers from the \"Customers\" table, sorted ascending by the \"Country\" and descending by the \"CustomerName\" column: Example"
  },
  {
    "document": "MySQL INSERT INTO Statement The MySQL INSERT INTO Statement The INSERT INTO statement is used to insert new records in a table. INSERT INTO INSERT INTO Syntax It is possible to write the INSERT INTO statement in two ways: INSERT INTO 1. Specify both the column names and the values to be inserted: 2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows: INSERT INTO Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: INSERT INTO Example The following SQL statement inserts a new record in the \"Customers\" table: Example The selection from the \"Customers\" table will now look like this: Did you notice that we did not insert any number into the CustomerID field?The CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table. Insert Data Only in Specified Columns It is also possible to only insert data in specific columns. The following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically): Example The selection from the \"Customers\" table will now look like this:"
  },
  {
    "document": "MySQL NULL Values What is a NULL Value? A field with a NULL value is a field with no value. If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value. Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation! How to Test for NULL Values? It is not possible to test for NULL values with comparison operators, such as =, <, or <>. We will have to use the IS NULL and IS NOT NULL operators instead. IS NULL IS NOT NULL IS NULL Syntax IS NOT NULL Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: The IS NULL Operator The IS NULL operator is used to test for empty values (NULL values). IS NULL The following SQL lists all customers with a NULL value in the \"Address\" field: Example Tip: Always use IS NULL to look for NULL values. The IS NOT NULL Operator The IS NOT NULL operator is used to test for non-empty values (NOT NULL values). IS NOT NULL The following SQL lists all customers with a value in the \"Address\" field: Example"
  },
  {
    "document": "MySQL UPDATE Statement The MySQL UPDATE Statement The UPDATE statement is used to modify the existing records in a table. UPDATE UPDATE Syntax Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated! WHERE UPDATE WHERE WHERE Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: UPDATE Table The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city. Example The selection from the \"Customers\" table will now look like this: UPDATE Multiple Records It is the WHERE clause that determines how many records will be updated. WHERE The following SQL statement will update the PostalCode to 00000 for all records where country is \"Mexico\": Example The selection from the \"Customers\" table will now look like this: Update Warning! Be careful when updating records. If you omit the WHERE clause, ALL records will be updated! WHERE Example The selection from the \"Customers\" table will now look like this:"
  },
  {
    "document": "MySQL DELETE Statement The MySQL DELETE Statement The DELETE statement is used to delete existing records in a table. DELETE DELETE Syntax Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted! WHERE DELETE WHERE WHERE Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: SQL DELETE Example The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table: Example The \"Customers\" table will now look like this: Delete All Records It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact: The following SQL statement deletes all rows in the \"Customers\" table, without deleting the table: Example"
  },
  {
    "document": "MySQL LIMIT Clause The MySQL LIMIT Clause The LIMIT clause is used to specify the number of records to return. LIMIT The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance. LIMIT LIMIT Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: MySQL LIMIT Examples The following SQL statement selects the first three records from the \"Customers\" table: Example What if we want to select records 4 - 6 (inclusive)? MySQL provides a way to handle this: by using OFFSET. The SQL query below says \"return only 3 records, start on record 4 (OFFSET 3)\": Example ADD a WHERE CLAUSE The following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\": Example ADD an ORDER BY CLAUSE The following SQL statement sorts the customers by country before returning the first three records from the selection: Example"
  },
  {
    "document": "MySQL MIN() and MAX() Functions MySQL MIN() and MAX() Functions The MIN() function returns the smallest value of the selected column. MIN() The MAX() function returns the largest value of the selected column. MAX() MIN() Syntax MAX() Syntax Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: MIN() Example The following SQL statement finds the price of the cheapest product: Example MAX() Example The following SQL statement finds the price of the most expensive product: Example"
  },
  {
    "document": "MySQL COUNT(), AVG() and SUM() Functions MySQL COUNT(), AVG() and SUM() Functions The COUNT() function returns the number of rows that matches a specified criterion. COUNT() COUNT() Syntax The AVG() function returns the average value of a numeric column. AVG() AVG() Syntax The SUM() function returns the total sum of a numeric column. SUM() SUM() Syntax Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: COUNT() Example The following SQL statement finds the number of products: Example Note: NULL values are not counted. AVG() Example The following SQL statement finds the average price of all products: Example Note: NULL values are ignored. Demo Database Below is a selection from the \"OrderDetails\" table in the Northwind sample database: SUM() Example The following SQL statement finds the sum of the \"Quantity\" fields in the \"OrderDetails\" table: Example Note: NULL values are ignored."
  },
  {
    "document": "MySQL LIKE Operator The MySQL LIKE Operator The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. LIKE WHERE There are two wildcards often used in conjunction with the LIKE operator: LIKE The percent sign and the underscore can also be used in combinations! LIKE Syntax Tip: You can also combine any number of conditions using AND or OR operators. AND OR Here are some examples showing different LIKE operators with '%' and '_' wildcards: LIKE Demo Database The table below shows the complete \"Customers\" table from the Northwind sample database: SQL LIKE Examples The following SQL statement selects all customers with a CustomerName starting with \"a\": Example The following SQL statement selects all customers with a CustomerName ending with \"a\": Example The following SQL statement selects all customers with a CustomerName that have \"or\" in any position: Example The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position: Example The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length: Example The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\": Example The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\": Example"
  },
  {
    "document": "MySQL Wildcards MySQL Wildcard Characters A wildcard character is used to substitute one or more characters in a string. Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. LIKE LIKE WHERE Wildcard Characters in MySQL The wildcards can also be used in combinations! Here are some examples showing different LIKE operators with '%' and '_' wildcards: LIKE Demo Database The table below shows the complete \"Customers\" table from the Northwind sample database: Using the % Wildcard The following SQL statement selects all customers with a City starting with \"ber\": Example The following SQL statement selects all customers with a City containing the pattern \"es\": Example Using the _ Wildcard The following SQL statement selects all customers with a City starting with any character, followed by \"ondon\": Example The following SQL statement selects all customers with a City starting with \"L\", followed by any character, followed by \"n\", followed by any character, followed by \"on\": Example"
  },
  {
    "document": "MySQL IN Operator The MySQL IN Operator The IN operator allows you to specify multiple values in a WHERE clause. IN WHERE The IN operator is a shorthand for multiple OR conditions. IN OR IN Syntax or: Demo Database The table below shows the complete \"Customers\" table from the Northwind sample database: IN Operator Examples The following SQL statement selects all customers that are located in \"Germany\", \"France\" or \"UK\": Example The following SQL statement selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\": Example The following SQL statement selects all customers that are from the same countries as the suppliers: Example"
  },
  {
    "document": "MySQL BETWEEN Operator The MySQL BETWEEN Operator The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates. BETWEEN The BETWEEN operator is inclusive: begin and end values are included. BETWEEN BETWEEN Syntax Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: BETWEEN Example The following SQL statement selects all products with a price between 10 and 20: Example NOT BETWEEN Example To display the products outside the range of the previous example, use NOT BETWEEN: NOT BETWEEN Example BETWEEN with IN Example The following SQL statement selects all products with a price between 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3: Example BETWEEN Text Values Example The following SQL statement selects all products with a ProductName between \"Carnarvon Tigers\" and \"Mozzarella di Giovanni\": Example The following SQL statement selects all products with a ProductName between \"Carnarvon Tigers\" and \"Chef Anton's Cajun Seasoning\": Example NOT BETWEEN Text Values Example The following SQL statement selects all products with a ProductName not between \"Carnarvon Tigers\" and \"Mozzarella di Giovanni\": Example Sample Table Below is a selection from the \"Orders\" table in the Northwind sample database: BETWEEN Dates Example The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996': Example"
  },
  {
    "document": "MySQL Aliases MySQL Aliases Aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the AS keyword. AS Alias Column Syntax Alias Table Syntax Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Orders\" table: Alias for Columns Examples The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column: Example The following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column. Note: Single or double quotation marks are required if the alias name contains spaces: Example The following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country): Example Alias for Tables Example The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter): Example The following SQL statement is the same as above, but without aliases: Example Aliases can be useful when:"
  },
  {
    "document": "MySQL Joins MySQL Joining Tables A JOIN clause is used to combine rows from two or more tables, based on a related column between them. JOIN Let's look at a selection from the \"Orders\" table: Then, look at a selection from the \"Customers\" table: Notice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column. Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables: INNER JOIN Example and it will produce something like this: Supported Types of Joins in MySQL INNER JOIN LEFT JOIN RIGHT JOIN CROSS JOIN"
  },
  {
    "document": "MySQL INNER JOIN Keyword MySQL INNER JOIN Keyword The INNER JOIN keyword selects records that have matching values in both tables. INNER JOIN  INNER JOIN Syntax Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Orders\" table: And a selection from the \"Customers\" table: MySQL INNER JOIN Example The following SQL statement selects all orders with customer information: Example Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown! INNER JOIN JOIN Three Tables The following SQL statement selects all orders with customer and shipper information: Example"
  },
  {
    "document": "MySQL LEFT JOIN Keyword MySQL LEFT JOIN Keyword The LEFT JOIN keyword returns all records from the left table (table1), and the matching records (if any) from the right table (table2). LEFT JOIN  LEFT JOIN Syntax Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Orders\" table: MySQL LEFT JOIN Example The following SQL statement will select all customers, and any orders they might have: Example Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders). LEFT JOIN"
  },
  {
    "document": "MySQL RIGHT JOIN Keyword MySQL RIGHT JOIN Keyword The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records (if any) from the left table (table1). RIGHT JOIN  RIGHT JOIN Syntax Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Orders\" table: And a selection from the \"Employees\" table: MySQL RIGHT JOIN Example The following SQL statement will return all employees, and any orders they might have placed: Example Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders). RIGHT JOIN"
  },
  {
    "document": "MySQL CROSS JOIN Keyword SQL CROSS JOIN Keyword The CROSS JOIN keyword returns all records from both tables (table1 and table2). CROSS JOIN  CROSS JOIN Syntax Note: CROSS JOIN can potentially return very large result-sets! CROSS JOIN Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Orders\" table: MySQL CROSS JOIN Example The following SQL statement selects all customers, and all orders: Example Note: The CROSS JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well. CROSS JOIN If you add a WHERE clause (if table1 and table2 has a relationship), the CROSS JOIN will produce the same result as the INNER JOIN clause: WHERE CROSS JOIN INNER JOIN Example"
  },
  {
    "document": "MySQL Self Join MySQL Self Join A self join is a regular join, but the table is joined with itself. Self Join Syntax T1 and T2 are different table aliases for the same table. Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: MySQL Self Join Example The following SQL statement matches customers that are from the same city: Example"
  },
  {
    "document": "MySQL UNION Operator The MySQL UNION Operator The UNION operator is used to combine the result-set of two or more SELECT statements. UNION SELECT SELECT UNION SELECT UNION Syntax UNION ALL Syntax The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL: UNION UNION ALL Note: The column names in the result-set are usually equal to the column names in the first SELECT statement. SELECT Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Suppliers\" table: SQL UNION Example The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table: Example Note: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values! UNION UNION ALL SQL UNION ALL Example The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table: Example SQL UNION With WHERE The following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table: Example SQL UNION ALL With WHERE The following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table: Example Another UNION Example The following SQL statement lists all customers and suppliers: Example Notice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\"."
  },
  {
    "document": "MySQL GROUP BY Statement The MySQL GROUP BY Statement The GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\". GROUP BY The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns. GROUP BY COUNT() MAX() MIN() SUM() AVG() GROUP BY Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: MySQL GROUP BY Examples The following SQL statement lists the number of customers in each country: Example The following SQL statement lists the number of customers in each country, sorted high to low: Example Demo Database Below is a selection from the \"Orders\" table in the Northwind sample database: And a selection from the \"Shippers\" table: GROUP BY With JOIN Example The following SQL statement lists the number of orders sent by each shipper: Example"
  },
  {
    "document": "MySQL HAVING Clause The MySQL HAVING Clause The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions. HAVING WHERE HAVING Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: MySQL HAVING Examples The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers: Example The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers): Example Demo Database Below is a selection from the \"Orders\" table in the Northwind sample database: And a selection from the \"Employees\" table: More HAVING Examples The following SQL statement lists the employees that have registered more than 10 orders: Example The following SQL statement lists if the employees \"Davolio\" or \"Fuller\" have registered more than 25 orders: Example"
  },
  {
    "document": "MySQL EXISTS Operator The MySQL EXISTS Operator The EXISTS operator is used to test for the existence of any record in a subquery. EXISTS The EXISTS operator returns TRUE if the subquery returns one or more records. EXISTS EXISTS Syntax Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: And a selection from the \"Suppliers\" table: MySQL EXISTS Examples The following SQL statement returns TRUE and lists the suppliers with a product price less than 20: Example The following SQL statement returns TRUE and lists the suppliers with a product price equal to 22: Example"
  },
  {
    "document": "MySQL ANY and ALL Operators The MySQL ANY and ALL Operators The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values. ANY ALL The ANY Operator The ANY operator: ANY ANY means that the condition will be true if the operation is true for any of the values in the range. ANY ANY Syntax Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=). The ALL Operator The ALL operator: ALL SELECT WHERE HAVING ALL means that the condition will be true only if the operation is true for all values in the range. ALL ALL Syntax With SELECT ALL Syntax With WHERE or HAVING Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=). Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: And a selection from the \"OrderDetails\" table: SQL ANY Examples The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10): Example The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 99 (this will return TRUE because the Quantity column has some values larger than 99): Example The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 1000 (this will return FALSE because the Quantity column has no values larger than 1000): Example SQL ALL Examples The following SQL statement lists ALL the product names: Example The following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10): Example"
  },
  {
    "document": "MySQL INSERT INTO SELECT Statement The MySQL INSERT INTO SELECT Statement The INSERT INTO SELECT statement copies data from one table and inserts it into another table. INSERT INTO SELECT The INSERT INTO SELECT statement requires that the data types in source and target tables matches. INSERT INTO SELECT Note: The existing records in the target table are unaffected. INSERT INTO SELECT Syntax Copy all columns from one table to another table: Copy only some columns from one table into another table: Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Suppliers\" table: MySQL INSERT INTO SELECT Examples The following SQL statement copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL): Example The following SQL statement copies \"Suppliers\" into \"Customers\" (fill all columns): Example The following SQL statement copies only the German suppliers into \"Customers\": Example"
  },
  {
    "document": "MySQL CASE Statement The MySQL CASE Statement The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. CASE ELSE If there is no ELSE part and no conditions are true, it returns NULL. ELSE CASE Syntax Demo Database Below is a selection from the \"OrderDetails\" table in the Northwind sample database: MySQL CASE Examples The following SQL goes through conditions and returns a value when the first condition is met: Example The following SQL will order the customers by City. However, if City is NULL, then order by Country: Example"
  },
  {
    "document": "MySQL NULL Functions MySQL IFNULL() and COALESCE() Functions Look at the following \"Products\" table: Suppose that the \"UnitsOnOrder\" column is optional, and may contain NULL values. Look at the following SELECT statement: In the example above, if any of the \"UnitsOnOrder\" values are NULL, the result will be NULL. MySQL IFNULL() Function The MySQL IFNULL() function lets you return an alternative value if an expression is NULL. IFNULL() The example below returns 0 if the value is NULL: MySQL COALESCE() Function Or we can use the COALESCE() function, like this: COALESCE()"
  },
  {
    "document": "MySQL Comments MySQL Comments Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements. Single Line Comments Single line comments start with --. -- Any text between -- and the end of the line will be ignored (will not be executed). The following example uses a single-line comment as an explanation: Example The following example uses a single-line comment to ignore the end of a line: Example The following example uses a single-line comment to ignore a statement: Example Multi-line Comments Multi-line comments start with /* and end with */. /* */ Any text between /* and */ will be ignored. The following example uses a multi-line comment as an explanation: Example The following example uses a multi-line comment to ignore many statements: Example To ignore just a part of a statement, also use the /* */ comment. The following example uses a comment to ignore part of a line: Example The following example uses a comment to ignore part of a statement: Example"
  },
  {
    "document": "MySQL Operators MySQL Arithmetic Operators MySQL Bitwise Operators MySQL Comparison Operators MySQL Compound Operators MySQL Logical Operators"
  },
  {
    "document": "MySQL CREATE DATABASE Statement The MySQL CREATE DATABASE Statement The CREATE DATABASE statement is used to create a new SQL database. CREATE DATABASE Syntax CREATE DATABASE Example The following SQL statement creates a database called \"testDB\": Example Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES; SHOW DATABASES"
  },
  {
    "document": "MySQL DROP DATABASE Statement The MySQL DROP DATABASE Statement The DROP DATABASE statement is used to drop an existing SQL database. DROP DATABASE Syntax Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database! DROP DATABASE Example The following SQL statement drops the existing database \"testDB\": Example Tip: Make sure you have admin privilege before dropping any database. Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES; SHOW DATABASES"
  },
  {
    "document": "MySQL CREATE TABLE Statement The MySQL CREATE TABLE Statement The CREATE TABLE statement is used to create a new table in a database. CREATE TABLE Syntax The column parameters specify the names of the columns of the table. The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.). Tip: For an overview of the available data types, go to our complete Data Types Reference. MySQL CREATE TABLE Example The following example creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City: Example The PersonID column is of type int and will hold an integer. The LastName, FirstName, Address, and City columns are of type varchar and will hold characters, and the maximum length for these fields is 255 characters. The empty \"Persons\" table will now look like this: Tip: The empty \"Persons\" table can now be filled with data with the SQL INSERT INTO statement. Create Table Using Another Table A copy of an existing table can also be created using CREATE TABLE. CREATE TABLE The new table gets the same column definitions. All columns or specific columns can be selected. If you create a new table using an existing table, the new table will be filled with the existing values from the old table. Syntax The following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table): Example"
  },
  {
    "document": "MySQL DROP TABLE Statement The MySQL DROP TABLE Statement The DROP TABLE statement is used to drop an existing table in a database. DROP TABLE Syntax Note: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the table! MySQL DROP TABLE Example The following SQL statement drops the existing table \"Shippers\": Example MySQL TRUNCATE TABLE The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself. TRUNCATE TABLE Syntax"
  },
  {
    "document": "MySQL ALTER TABLE Statement MySQL ALTER TABLE Statement The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. ALTER TABLE The ALTER TABLE statement is also used to add and drop various constraints on an existing table. ALTER TABLE ALTER TABLE - ADD Column To add a column in a table, use the following syntax: The following SQL adds an \"Email\" column to the \"Customers\" table: Example ALTER TABLE - DROP COLUMN To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column): The following SQL deletes the \"Email\" column from the \"Customers\" table: Example ALTER TABLE - MODIFY COLUMN To change the data type of a column in a table, use the following syntax: MySQL ALTER TABLE Example Look at the \"Persons\" table: Now we want to add a column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: Example Notice that the new column, \"DateOfBirth\", is of type date and is going to hold a date. The data type specifies what type of data the column can hold. For a complete reference of all the data types available in MySQL, go to our complete Data Types reference. The \"Persons\" table will now look like this: Change Data Type Example Now we want to change the data type of the column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: Example Notice that the \"DateOfBirth\" column is now of type year and is going to hold a year in a two- or four-digit format. DROP COLUMN Example Next, we want to delete the column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: Example The \"Persons\" table will now look like this:"
  },
  {
    "document": "MySQL Constraints SQL constraints are used to specify rules for data in a table. Create Constraints Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement. CREATE TABLE ALTER TABLE Syntax MySQL Constraints SQL constraints are used to specify rules for the data in a table. Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted. Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table. The following constraints are commonly used in SQL: NOT NULL UNIQUE PRIMARY KEY NOT NULL UNIQUE FOREIGN KEY CHECK DEFAULT CREATE INDEX"
  },
  {
    "document": "MySQL NOT NULL Constraint MySQL NOT NULL Constraint By default, a column can hold NULL values. The NOT NULL constraint enforces a column to NOT accept NULL values. NOT NULL This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field. NOT NULL on CREATE TABLE The following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values when the \"Persons\" table is created: Example NOT NULL on ALTER TABLE To create a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL: NOT NULL Example"
  },
  {
    "document": "MySQL UNIQUE Constraint MySQL UNIQUE Constraint The UNIQUE constraint ensures that all values in a column are different. UNIQUE Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns. UNIQUE PRIMARY KEY A PRIMARY KEY constraint automatically has a UNIQUE constraint. PRIMARY KEY UNIQUE However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table. UNIQUE PRIMARY KEY UNIQUE Constraint on CREATE TABLE The following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created: UNIQUE To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: UNIQUE UNIQUE UNIQUE Constraint on ALTER TABLE To create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL: UNIQUE To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: UNIQUE UNIQUE DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: UNIQUE"
  },
  {
    "document": "MySQL PRIMARY KEY Constraint MySQL PRIMARY KEY Constraint The PRIMARY KEY constraint uniquely identifies each record in a table. PRIMARY KEY Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: PRIMARY KEY To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: PRIMARY KEY PRIMARY KEY Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName). PRIMARY KEY PRIMARY KEY on ALTER TABLE To create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL: PRIMARY KEY To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: PRIMARY KEY PRIMARY KEY Note: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain NULL values (when the table was first created). ALTER TABLE DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: PRIMARY KEY"
  },
  {
    "document": "MySQL FOREIGN KEY Constraint MySQL FOREIGN KEY Constraint The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables. FOREIGN KEY A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table. FOREIGN KEY PRIMARY KEY The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table. Look at the following two tables: Persons Table Orders Table Notice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table. The \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table. PRIMARY KEY The \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table. FOREIGN KEY The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table. FOREIGN KEY FOREIGN KEY on CREATE TABLE The following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created: FOREIGN KEY To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: FOREIGN KEY FOREIGN KEY FOREIGN KEY on ALTER TABLE To create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL: FOREIGN KEY To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: FOREIGN KEY FOREIGN KEY DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: FOREIGN KEY"
  },
  {
    "document": "MySQL CHECK Constraint MySQL CHECK Constraint The CHECK constraint is used to limit the value range that can be placed in a column. CHECK If you define a CHECK constraint on a column it will allow only certain values for this column. CHECK If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row. CHECK CHECK on CREATE TABLE The following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that the age of a person must be 18, or older: CHECK CHECK To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: CHECK CHECK CHECK on ALTER TABLE To create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL: CHECK To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: CHECK CHECK DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: CHECK"
  },
  {
    "document": "MySQL DEFAULT Constraint MySQL DEFAULT Constraint The DEFAULT constraint is used to set a default value for a column. DEFAULT The default value will be added to all new records, if no other value is specified. DEFAULT on CREATE TABLE The following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created: DEFAULT The DEFAULT constraint can also be used to insert system values, by using functions like CURRENT_DATE(): DEFAULT CURRENT_DATE() DEFAULT on ALTER TABLE To create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL: DEFAULT DROP a DEFAULT Constraint To drop a DEFAULT constraint, use the following SQL: DEFAULT"
  },
  {
    "document": "MySQL CREATE INDEX Statement MySQL CREATE INDEX Statement The CREATE INDEX statement is used to create indexes in tables. CREATE INDEX Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against. CREATE INDEX Syntax Creates an index on a table. Duplicate values are allowed: CREATE UNIQUE INDEX Syntax Creates a unique index on a table. Duplicate values are not allowed: MySQL CREATE INDEX Example The SQL statement below creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table: If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas: DROP INDEX Statement The DROP INDEX statement is used to delete an index in a table. DROP INDEX"
  },
  {
    "document": "MySQL AUTO INCREMENT Field What is an AUTO INCREMENT Field? Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table. Often this is the primary key field that we would like to be created automatically every time a new record is inserted. MySQL AUTO_INCREMENT Keyword MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature. AUTO_INCREMENT By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record. AUTO_INCREMENT The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table: To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement: AUTO_INCREMENT When we insert a new record into the \"Persons\" table, we do NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically): The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value automatically. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\"."
  },
  {
    "document": "MySQL Working With Dates MySQL Dates The most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database. As long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated. MySQL Date Data Types MySQL comes with the following data types for storing a date or a date/time value in the database: DATE DATETIME TIMESTAMP YEAR Note: The date data type are set for a column when you create a new table in your database! Working with Dates Look at the following table: Orders Table Now we want to select the records with an OrderDate of \"2008-11-11\" from the table above. We use the following SELECT statement: SELECT The result-set will look like this: Note: Two dates can easily be compared if there is no time component involved! Now, assume that the \"Orders\" table looks like this (notice the added time-component in the \"OrderDate\" column): If we use the same SELECT statement as above: SELECT we will get no result! This is because the query is looking only for dates with no time portion. Tip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!"
  },
  {
    "document": "MySQL Views MySQL CREATE VIEW Statement In SQL, a view is a virtual table based on the result-set of an SQL statement. A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database. You can add SQL statements and functions to a view and present the data as if the data were coming from one single table. A view is created with the CREATE VIEW statement. CREATE VIEW CREATE VIEW Syntax Note: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it. MySQL CREATE VIEW Examples The following SQL creates a view that shows all customers from Brazil: Example We can query the view above as follows: Example The following SQL creates a view that selects every product in the \"Products\" table with a price higher than the average price: Example We can query the view above as follows: Example MySQL Updating a View A view can be updated with the CREATE OR REPLACE VIEW statement. CREATE OR REPLACE VIEW CREATE OR REPLACE VIEW Syntax The following SQL adds the \"City\" column to the \"Brazil Customers\" view: Example MySQL Dropping a View A view is deleted with the DROP VIEW statement. DROP VIEW DROP VIEW Syntax The following SQL drops the \"Brazil Customers\" view: Example"
  },
  {
    "document": "MySQL Data Types The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on. MySQL Data Types (Version 8.0) Each column in a database table is required to have a name and a data type. An SQL developer must decide what type of data that will be stored inside each column when creating a table. The data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data. In MySQL there are three main data types: string, numeric, and date and time. String Data Types Numeric Data Types Note: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column. Date and Time Data Types"
  },
  {
    "document": "MySQL Functions MySQL has many built-in functions. This reference contains string, numeric, date, and some advanced functions in MySQL. MySQL String Functions MySQL Numeric Functions MySQL Date Functions MySQL Advanced Functions"
  },
  {
    "document": "MySQL ASCII() Function â® MySQL Functions Example Return the ASCII value of the first character in \"CustomerName\": Definition and Usage The ASCII() function returns the ASCII value for the specific character. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL CHAR_LENGTH() Function â® MySQL Functions Example Return the length of the string: Definition and Usage The CHAR_LENGTH() function return the length of a string (in characters). Note: This function is equal to the CHARACTER_LENGTH() function. Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column: â® MySQL Functions"
  },
  {
    "document": "MySQL CHARACTER_LENGTH() Function â® MySQL Functions Example Return the length of the string: Definition and Usage The CHARACTER_LENGTH() function return the length of a string (in characters). Note: This function is equal to the CHAR_LENGTH() function. Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column: â® MySQL Functions"
  },
  {
    "document": "MySQL CONCAT() Function â® MySQL Functions Example Add several strings together: Definition and Usage The CONCAT() function adds two or more expressions together. Note: Also look at the CONCAT_WS() function. Syntax Parameter Values Note: If any of the expressions is a NULL value, it returns NULL Technical Details More Examples Example Add three columns into one \"Address\" column: â® MySQL Functions"
  },
  {
    "document": "MySQL CONCAT_WS() Function â® MySQL Functions Example Add several expressions together, and add a \"-\" separator between them: Definition and Usage The CONCAT_WS() function adds two or more expressions together with a separator. Note: Also look at the CONCAT() function. Syntax Parameter Values Technical Details More Examples Example Add three columns (and add a space between them) into one \"Address\" column: â® MySQL Functions"
  },
  {
    "document": "MySQL FIELD() Function â® MySQL Functions Example Return the index position of \"q\" in the string list: Definition and Usage The FIELD() function returns the index position of a value in a list of values. This function performs a case-insensitive search. Note: If the specified value is not found in the list of values, this function will return 0. If value is NULL, this function will return 0. Syntax Parameter Values Technical Details More Examples Example Return the index position of \"c\" in the string list: Example Return the index position of \"Q\" in the string list: Example Return the index position of 5 in the numeric list: â® MySQL Functions"
  },
  {
    "document": "MySQL FIND_IN_SET() Function â® MySQL Functions Example Search for \"q\" within the list of strings: Definition and Usage The FIND_IN_SET() function returns the position of a string within a list of strings. Syntax Parameter Values Return Values Technical Details More Examples Example Search for \"a\" within the list of strings: Example Search for \"q\" within the list of strings (string list is NULL): â® MySQL Functions"
  },
  {
    "document": "MySQL FORMAT() Function â® MySQL Functions Example Format the number as \"#,###,###.##\" (and round with two decimal places): Definition and Usage The FORMAT() function formats a number to a format like \"#,###,###.##\", rounded to a specified number of decimal places, then it returns the result as a string. Syntax Parameter Values Technical Details More Examples Example Format the number as a format of \"#,###,###.##\" (and round with 0 decimal places): â® MySQL Functions"
  },
  {
    "document": "MySQL INSERT() Function â® MySQL Functions Example Insert the string \"Example\" into the string \"W3Schools.com\". Replace the first nine characters: Definition and Usage The INSERT() function inserts a string within a string at the specified position and for a certain number of characters. Syntax Parameter Values Return Values Technical Details More Examples Example Insert the string \"no\" into the string \"W3Schools.com\". Replace three characters, starting from position 11: â® MySQL Functions"
  },
  {
    "document": "MySQL INSTR() Function â® MySQL Functions Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The INSTR() function returns the position of the first occurrence of a string in another string. This function performs a case-insensitive search. Syntax Parameter Values Technical Details More Examples Example Search for \"COM\" in string \"W3Schools.com\", and return position: Example Search for \"a\" in CustomerName column, and return position: â® MySQL Functions"
  },
  {
    "document": "MySQL LCASE() Function â® MySQL Functions Example Convert the text to lower-case: Definition and Usage The LCASE() function converts a string to lower-case. Note: The LOWER() function is a synonym for the LCASE() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to lower-case: â® MySQL Functions"
  },
  {
    "document": "MySQL LEFT() Function â® MySQL Functions Example Extract 3 characters from a string (starting from left): Definition and Usage The LEFT() function extracts a number of characters from a string (starting from left). Tip: Also look at the RIGHT() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from left): â® MySQL Functions"
  },
  {
    "document": "MySQL LENGTH() Function â® MySQL Functions Example Return the length of the string, in bytes: Definition and Usage The LENGTH() function returns the length of a string (in bytes). Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column, in bytes: â® MySQL Functions"
  },
  {
    "document": "MySQL LOCATE() Function â® MySQL Functions Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The LOCATE() function returns the position of the first occurrence of a substring in a string. If the substring is not found within the original string, this function returns 0. This function performs a case-insensitive search. Note: This function is equal to the POSITION() function. Syntax Parameter Values Technical Details More Examples Example Search for \"com\" in string \"W3Schools.com\" (start at position 3), and return position: Example Search for \"a\" in CustomerName column, and return position: â® MySQL Functions"
  },
  {
    "document": "MySQL LOWER() Function â® MySQL Functions Example Convert the text to lower-case: Definition and Usage The LOWER() function converts a string to lower-case. Note: The LCASE() function is equal to the LOWER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to lower-case: â® MySQL Functions"
  },
  {
    "document": "MySQL LPAD() Function â® MySQL Functions Example Left-pad the string with \"ABC\", to a total length of 20: Definition and Usage The LPAD() function left-pads a string with another string, to a certain length. Note: Also look at the RPAD() function. Syntax Parameter Values Technical Details More Examples Example Left-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30: â® MySQL Functions"
  },
  {
    "document": "MySQL LTRIM() Function â® MySQL Functions Example Remove leading spaces from a string: Definition and Usage The LTRIM() function removes leading spaces from a string. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL MID() Function â® MySQL Functions Example Extract a substring from a string (start at position 5, extract 3 characters): Definition and Usage The MID() function extracts a substring from a string (starting at any position). Note: The MID() and SUBSTR() functions equals the SUBSTRING() function. Syntax Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): â® MySQL Functions"
  },
  {
    "document": "MySQL POSITION() Function â® MySQL Functions Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The POSITION() function returns the position of the first occurrence of a substring in a string. If the substring is not found within the original string, this function returns 0. This function performs a case-insensitive search. Note: The LOCATE() function is equal to the POSITION() function. Syntax Parameter Values Technical Details More Examples Example Search for \"COM\" in string \"W3Schools.com\", and return position: Example Search for \"a\" in CustomerName column, and return position: â® MySQL Functions"
  },
  {
    "document": "MySQL REPEAT() Function â® MySQL Functions Example Repeat a string 3 times: Definition and Usage The REPEAT() function repeats a string as many times as specified. Syntax Parameter Values Technical Details More Examples Example Repeat the text in CustomerName 2 times: Example Repeat the string 0 times: â® MySQL Functions"
  },
  {
    "document": "MySQL REPLACE() Function â® MySQL Functions Example Replace \"SQL\" with \"HTML\": Definition and Usage The REPLACE() function replaces all occurrences of a substring within a string, with a new substring. Note: This function performs a case-sensitive replacement. Syntax Parameter Values Technical Details More Examples Example Replace \"X\" with \"M\": Example Replace \"X\" with \"m\": Example Replace \"x\" with \"m\": â® MySQL Functions"
  },
  {
    "document": "MySQL REVERSE() Function â® MySQL Functions Example Reverse a string: Definition and Usage The REVERSE() function reverses a string and returns the result. Syntax Parameter Values Technical Details More Examples Example Reverse the text in CustomerName: â® MySQL Functions"
  },
  {
    "document": "MySQL RIGHT() Function â® MySQL Functions Example Extract 4 characters from a string (starting from right): Definition and Usage The RIGHT() function extracts a number of characters from a string (starting from right). Tip: Also look at the LEFT() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from right): â® MySQL Functions"
  },
  {
    "document": "MySQL RPAD() Function â® MySQL Functions Example Right-pad the string with \"ABC\", to a total length of 20: Definition and Usage The RPAD() function right-pads a string with another string, to a certain length. Note: Also look at the LPAD() function. Syntax Parameter Values Technical Details More Examples Example Right-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30: â® MySQL Functions"
  },
  {
    "document": "MySQL RTRIM() Function â® MySQL Functions Example Remove trailing spaces from a string: Definition and Usage The RTRIM() function removes trailing spaces from a string. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL SPACE() Function â® MySQL Functions Example Return a string with 10 space characters: Definition and Usage The SPACE() function returns a string of the specified number of space characters. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL STRCMP() Function â® MySQL Functions Example Compare two strings: Definition and Usage The STRCMP() function compares two strings. Syntax Parameter Values Return Values Technical Details More Examples Example Compare two strings: â® MySQL Functions"
  },
  {
    "document": "MySQL SUBSTR() Function â® MySQL Functions Example Extract a substring from a string (start at position 5, extract 3 characters): Definition and Usage The SUBSTR() function extracts a substring from a string (starting at any position). Note: The SUBSTR() and MID() functions equals to the SUBSTRING() function. Syntax OR: SUBSTR(string FROM start FOR length) Parameter Values Parameter Description string Required. The string to extract from start Required. The start position. Can be both a positive or negative number. If it is a positive number, this function extracts from the beginning of the string. If it is a negative number, this function extracts from the end of the string length Optional. The number of characters to extract. If omitted, the whole string will be returned (from the start position) Technical Details Works in: From MySQL 4.0 More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): SELECT SUBSTR(CustomerName, 2, 5) AS ExtractStringFROM Customers; Try it Yourself Â» Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): SELECT SUBSTR(\"SQL Tutorial\", -5, 5) AS ExtractString; Try it Yourself Â» â® MySQL Functions â +1 Track your progress - it's free! Log in Sign Up Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): â® MySQL Functions"
  },
  {
    "document": "MySQL SUBSTRING() Function â® MySQL Functions Example Extract a substring from a string (start at position 5, extract 3 characters): Definition and Usage The SUBSTRING() function extracts a substring from a string (starting at any position). Note: The SUBSTR() and MID() functions equals to the SUBSTRING() function. Syntax OR: SUBSTRING(string FROM start FOR length) Parameter Values Parameter Description string Required. The string to extract from start Required. The start position. Can be both a positive or negative number. If it is a positive number, this function extracts from the beginning of the string. If it is a negative number, this function extracts from the end of the string length Optional. The number of characters to extract. If omitted, the whole string will be returned (from the start position) Technical Details Works in: From MySQL 4.0 More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): SELECT SUBSTRING(CustomerName, 2, 5) AS ExtractStringFROM Customers; Try it Yourself Â» Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): SELECT SUBSTRING(\"SQL Tutorial\", -5, 5) AS ExtractString; Try it Yourself Â» â® MySQL Functions â +1 Track your progress - it's free! Log in Sign Up Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): â® MySQL Functions"
  },
  {
    "document": "MySQL SUBSTRING_INDEX() Function â® MySQL Functions Example Return a substring of a string before a specified number of delimiter occurs: Definition and Usage The SUBSTRING_INDEX() function returns a substring of a string before a specified number of delimiter occurs. Syntax Parameter Values Technical Details More Examples Example Return a substring of a string before a specified number of delimiter occurs: â® MySQL Functions"
  },
  {
    "document": "MySQL TRIM() Function â® MySQL Functions Example Remove leading and trailing spaces from a string: Definition and Usage The TRIM() function removes leading and trailing spaces from a string. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL UCASE() Function â® MySQL Functions Example Convert the text to upper-case: Definition and Usage The UCASE() function converts a string to upper-case. Note: This function is equal to the UPPER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to upper-case: â® MySQL Functions"
  },
  {
    "document": "MySQL UPPER() Function â® MySQL Functions Example Convert the text to upper-case: Definition and Usage The UPPER() function converts a string to upper-case. Note: This function is equal to the UCASE() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to upper-case: â® MySQL Functions"
  },
  {
    "document": "MySQL ABS() Function â® MySQL Functions Example Return the absolute value of a number: Definition and Usage The ABS() function returns the absolute (positive) value of a number. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL ACOS() Function â® MySQL Functions Example Return the arc cosine of a number: Definition and Usage The ACOS() function returns the arc cosine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc cosine of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL ASIN() Function â® MySQL Functions Example Return the arc sine of a number: Definition and Usage The ASIN() function returns the arc sine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc sine of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL ATAN() Function â® MySQL Functions Example Return the arc tangent of a number: Definition and Usage The ATAN() function returns the arc tangent of one or two numbers. Syntax OR: Parameter Values Technical Details More Examples Example Return the arc tangent of two values: â® MySQL Functions"
  },
  {
    "document": "MySQL ATAN2() Function â® MySQL Functions Example Return the arc tangent of two values: Definition and Usage The ATAN2() function returns the arc tangent of two numbers. Syntax Parameter Values Technical Details More Examples Example Return the arc tangent of two values: â® MySQL Functions"
  },
  {
    "document": "MySQL AVG() Function â® MySQL Functions Example Return the average value for the \"Price\" column in the \"Products\" table: Definition and Usage The AVG() function returns the average value of an expression. Note: NULL values are ignored. Syntax Parameter Values Technical Details More Examples Example Select the records that have a price above the average price: â® MySQL Functions"
  },
  {
    "document": "MySQL CEIL() Function â® MySQL Functions Example Return the smallest integer value that is greater than or equal to 25.75: Definition and Usage The CEIL() function returns the smallest integer value that is bigger than or equal to a number. Note: This function is equal to the CEILING() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest integer value that is greater than or equal to 25: â® MySQL Functions"
  },
  {
    "document": "MySQL CEILING() Function â® MySQL Functions Example Return the smallest integer value that is greater than or equal to 25.75: Definition and Usage The CEILING() function returns the smallest integer value that is bigger than or equal to a number. Note: This function is equal to the CEIL() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest integer value that is greater than or equal to 25: â® MySQL Functions"
  },
  {
    "document": "MySQL COS() Function â® MySQL Functions Example Return the cosine of a number: Definition and Usage The COS() function returns the cosine of a number. Syntax Parameter Values Technical Details More Examples Example Return the cosine of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL COT() Function â® MySQL Functions Example Return the cotangent of a number: Definition and Usage The COT() function returns the cotangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the cotangent of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL COUNT() Function â® MySQL Functions Example Return the number of products in the \"Products\" table: Definition and Usage The COUNT() function returns the number of records returned by a select query. Note: NULL values are not counted. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL DEGREES() Function â® MySQL Functions Example Convert the radian value into degrees: Definition and Usage The DEGREES() function converts a value in radians to degrees. Note: See also the RADIANS() and PI() functions. Syntax Parameter Values Technical Details More Examples Example Convert the radian value into degrees: â® MySQL Functions"
  },
  {
    "document": "MySQL DIV Function â® MySQL Functions Example Integer division (10/5): Definition and Usage The DIV function is used for integer division (x is divided by y). An integer value is returned. Syntax Parameter Values Technical Details More Examples Example Integer division (8/3): â® MySQL Functions"
  },
  {
    "document": "MySQL EXP() Function â® MySQL Functions Example Return e raised to the power of 1: Definition and Usage The EXP() function returns e raised to the power of the specified number. The constant e (2.718281...), is the base of natural logarithms. Tip: Also look at the LOG() and LN() functions. Syntax Parameter Values Technical Details More Examples Example Return e raised to the power of 2: â® MySQL Functions"
  },
  {
    "document": "MySQL FLOOR() Function â® MySQL Functions Example Return the largest integer value that is less than or equal to 25.75: Definition and Usage The FLOOR() function returns the largest integer value that is smaller than or equal to a number. Note: Also look at the ROUND(), CEIL(), CEILING(), TRUNCATE(), and DIV functions. Syntax Parameter Values Technical Details More Examples Example Return the largest integer value that is greater than or equal to 25: â® MySQL Functions"
  },
  {
    "document": "MySQL GREATEST() Function â® MySQL Functions Example Return the greatest value of the list of arguments: Definition and Usage The GREATEST() function returns the greatest value of the list of arguments. Note: See also the LEAST() function. Syntax Parameter Values Technical Details More Examples Example Return the greatest value of the list of arguments: â® MySQL Functions"
  },
  {
    "document": "MySQL LEAST() Function â® MySQL Functions Example Return the smallest value of the list of arguments: Definition and Usage The LEAST() function returns the smallest value of the list of arguments. Note: See also the GREATEST() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest value of the list of arguments: â® MySQL Functions"
  },
  {
    "document": "MySQL LN() Function â® MySQL Functions Example Return the natural logarithm of 2: Definition and Usage The LN() function returns the natural logarithm of a number. Note: See also the LOG() and EXP() functions. Syntax Parameter Values Technical Details More Examples Example Return the natural logarithm of 1: â® MySQL Functions"
  },
  {
    "document": "MySQL LOG() Function â® MySQL Functions Example Return the natural logarithm of 2: Definition and Usage The LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base. Note: See also the LN() and EXP() functions. Syntax OR: Parameter Values Technical Details More Examples Example Return the natural logarithm of 4 to a specified base (2): â® MySQL Functions"
  },
  {
    "document": "MySQL LOG10() Function â® MySQL Functions Example Return the base-10 logarithm of 2: Definition and Usage The LOG10() function returns the natural logarithm of a number to base-10. Note: See also the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return the base-10 logarithm of 4.5: â® MySQL Functions"
  },
  {
    "document": "MySQL LOG2() Function â® MySQL Functions Example Return the base-2 logarithm of 6: Definition and Usage The LOG2() function returns the natural logarithm of a number to base-2. Note: See also the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return the base-2 logarithm of 64: â® MySQL Functions"
  },
  {
    "document": "MySQL MAX() Function â® MySQL Functions Example Find the price of the most expensive product in the \"Products\" table: Definition and Usage The MAX() function returns the maximum value in a set of values. Note: See also the MIN() function. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL MIN() Function â® MySQL Functions Example Find the price of the cheapest product in the \"Products\" table: Definition and Usage The MIN() function returns the minimum value in a set of values. Note: See also the MAX() function. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL MOD() Function â® MySQL Functions Example Return the remainder of 18/4: Definition and Usage The MOD() function returns the remainder of a number divided by another number. Syntax OR: OR: Parameter Values Technical Details More Examples Example Return the remainder of 18/4: Example Return the remainder of 18/4: â® MySQL Functions"
  },
  {
    "document": "MySQL PI() Function â® MySQL Functions Example Return the value of PI: Definition and Usage The PI() function returns the value of PI. Note: See also the DEGREES() and RADIANS() functions. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL POW() Function â® MySQL Functions Example Return 4 raised to the second power: Definition and Usage The POW() function returns the value of a number raised to the power of another number. Note: This function is equal to the POWER() function. Syntax Parameter Values Technical Details More Examples Example Return 8 raised to the third power: â® MySQL Functions"
  },
  {
    "document": "MySQL POWER() Function â® MySQL Functions Example Return 4 raised to the second power: Definition and Usage The POWER() function returns the value of a number raised to the power of another number. Note: This function is equal to the POW() function. Syntax Parameter Values Technical Details More Examples Example Return 8 raised to the third power: â® MySQL Functions"
  },
  {
    "document": "MySQL RADIANS() Function â® MySQL Functions Example Convert a degree value into radians: Definition and Usage The RADIANS() function converts a degree value into radians. Note: See also the DEGREES() and PI() functions. Syntax Parameter Values Technical Details More Examples Example Convert a degree value into radians: â® MySQL Functions"
  },
  {
    "document": "MySQL RAND() Function â® MySQL Functions Example Return a random decimal number (no seed value - so it returns a completely random number >= 0 and <1): Definition and Usage The RAND() function returns a random number between 0 (inclusive) and 1 (exclusive). Syntax Parameter Values Technical Details More Examples Example Return a random decimal number (with seed value of 6): Example Return a random decimal number >= 5 and <10: Example Return a random number >= 5 and <=10: â® MySQL Functions"
  },
  {
    "document": "MySQL ROUND() Function â® MySQL Functions Example Round the number to 2 decimal places: Definition and Usage The ROUND() function rounds a number to a specified number of decimal places. Note: See also the FLOOR(), CEIL(), CEILING(), and TRUNCATE() functions. Syntax Parameter Values Technical Details More Examples Example Round the number to 0 decimal places: Example Round the Price column (to 1 decimal) in the \"Products\" table: â® MySQL Functions"
  },
  {
    "document": "MySQL SIGN() Function â® MySQL Functions Example Return the sign of a number: Definition and Usage The SIGN() function returns the sign of a number. This function will return one of the following: Syntax Parameter Values Technical Details More Examples Example Return the sign of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL SIN() Function â® MySQL Functions Example Return the sine of a number: Definition and Usage The SIN() function returns the sine of a number. Syntax Parameter Values Technical Details More Examples Example Return the sine of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL SQRT() Function â® MySQL Functions Example Return the square root of a number: Definition and Usage The SQRT() function returns the square root of a number. Syntax Parameter Values Technical Details More Examples Example Return the square root of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL SUM() Function â® MySQL Functions Example Return the sum of the \"Quantity\" field in the \"OrderDetails\" table: Definition and Usage The SUM() function calculates the sum of a set of values. Note: NULL values are ignored. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL TAN() Function â® MySQL Functions Example Return the tangent of a number: Definition and Usage The TAN() function returns the tangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the tangent of a number: â® MySQL Functions"
  },
  {
    "document": "MySQL TRUNCATE() Function â® MySQL Functions Example Return a number truncated to 2 decimal places: Definition and Usage The TRUNCATE() function truncates a number to the specified number of decimal places. Note: See also the FLOOR(), CEIL(), CEILING(), and ROUND() functions. Syntax Parameter Values Technical Details More Examples Example Return a number truncated to 0 decimal places: â® MySQL Functions"
  },
  {
    "document": "MySQL ADDDATE() Function â® MySQL Functions Example Add 10 days to a date and return the date: Definition and Usage The ADDDATE() function adds a time/date interval to a date and then returns the date. Syntax OR: Parameter Values Technical Details More Examples Example Add 15 minutes to a date and return the date: Example Subtract 3 hours to a date and return the date: Example Subtract 2 months to a date and return the date: â® MySQL Functions"
  },
  {
    "document": "MySQL ADDTIME() Function â® MySQL Functions Example Add 2 seconds to a time and return the datetime: Definition and Usage The ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime. Syntax Parameter Values Technical Details More Examples Example Add 5 seconds and 3 microseconds to a time and return the datetime: Example Add 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime: Example Add 5 days, 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime: Example Add 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the time: â® MySQL Functions"
  },
  {
    "document": "MySQL CURDATE() Function â® MySQL Functions Example Return the current date: Definition and Usage The CURDATE() function returns the current date. Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric). Note: This function equals the CURRENT_DATE() function. Syntax Technical Details More Examples Example Return the current date + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL CURRENT_DATE() Function â® MySQL Functions Example Return the current date: Definition and Usage The CURRENT_DATE() function returns the current date. Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric). Note: This function equals the CURDATE() function. Syntax Technical Details More Examples Example Return the current date + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL CURRENT_TIME() Function â® MySQL Functions Example Return current time: Definition and Usage The CURRENT_TIME() function returns the current time. Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric). Note: This function equals the CURTIME() function. Syntax Technical Details More Examples Example Return current time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL CURRENT_TIMESTAMP() Function â® MySQL Functions Example Return the current date and time: Definition and Usage The CURRENT_TIMESTAMP() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return the current date and time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL CURTIME() Function â® MySQL Functions Example Return current time: Definition and Usage The CURTIME() function returns the current time. Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric). Note: This function equals the CURRENT_TIME() function. Syntax Technical Details More Examples Example Return current time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL DATE() Function â® MySQL Functions Example Extract the date part: Definition and Usage The DATE() function extracts the date part from a datetime expression. Syntax Parameter Values Technical Details More Examples Example Extract the date part: Example Extract the date part (will return NULL): Example Extract the date part: â® MySQL Functions"
  },
  {
    "document": "MySQL DATEDIFF() Function â® MySQL Functions Example Return the number of days between two date values: Definition and Usage The DATEDIFF() function returns the number of days between two date values. Syntax Parameter Values Technical Details More Examples Example Return the number of days between two date values: Example Return the number of days between two date values: â® MySQL Functions"
  },
  {
    "document": "MySQL DATE_ADD() Function â® MySQL Functions Example Add 10 days to a date and return the date: Definition and Usage The DATE_ADD() function adds a time/date interval to a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Add 15 minutes to a date and return the date: Example Subtract 3 hours to a date and return the date: Example Subtract 2 months to a date and return the date: â® MySQL Functions"
  },
  {
    "document": "MySQL DATE_FORMAT() Function â® MySQL Functions Example Format a date: Definition and Usage The DATE_FORMAT() function formats a date as specified. Syntax Parameter Values Technical Details More Examples Example Format a date: Example Format a date: Example Format a date: â® MySQL Functions"
  },
  {
    "document": "MySQL DATE_SUB() Function â® MySQL Functions Example Subtract 10 days from a date and return the date: Definition and Usage The DATE_SUB() function subtracts a time/date interval from a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Subtract 15 minutes from a date and return the date: Example Subtract 3 hours from a date and return the date: Example Add 2 months to a date and return the date: â® MySQL Functions"
  },
  {
    "document": "MySQL DAY() Function â® MySQL Functions Example Return the day of the month for a date: Definition and Usage The DAY() function returns the day of the month for a given date (a number from 1 to 31). Note: This function equals the DAYOFMONTH() function. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for a date: Example Return the day of the month for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL DAYNAME() Function â® MySQL Functions Example Return the weekday name for a date: Definition and Usage The DAYNAME() function returns the weekday name for a given date. Syntax Parameter Values Technical Details More Examples Example Return the weekday name for a date: Example Return the weekday name for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL DAYOFMONTH() Function â® MySQL Functions Example Return the day of the month for a date: Definition and Usage The DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31). Note: This function equals the DAY() function. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for a date: Example Return the day of the month for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL DAYOFWEEK() Function â® MySQL Functions Example Return the weekday index for a date: Definition and Usage The DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7). Note: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday. Syntax Parameter Values Technical Details More Examples Example Return the weekday index for a date: Example Return the weekday index for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL DAYOFYEAR() Function â® MySQL Functions Example Return the day of the year for a date: Definition and Usage The DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to 366). Syntax Parameter Values Technical Details More Examples Example Return the day of the year for a date: Example Return the day of the year for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL EXTRACT() Function â® MySQL Functions Example Extract the month from a date: Definition and Usage The EXTRACT() function extracts a part from a given date. Syntax Parameter Values Technical Details More Examples Example Extract the week from a date: Example Extract the minute from a datetime: Example Extract the year and month from a datetime: â® MySQL Functions"
  },
  {
    "document": "MySQL FROM_DAYS() Function â® MySQL Functions Example Return a date from a numeric representation of the day: Definition and Usage The FROM_DAYS() function returns a date from a numeric datevalue. The FROM_DAYS() function is to be used only with dates within the Gregorian calendar. Note: This function is the opposite of the TO_DAYS() function. Syntax Parameter Values Technical Details More Examples Example Return a date from a numeric representation of the day: â® MySQL Functions"
  },
  {
    "document": "MySQL HOUR() Function â® MySQL Functions Example Return the hour part of a datetime: Definition and Usage The HOUR() function returns the hour part for a given date (from 0 to 838). Syntax Parameter Values Technical Details More Examples Example Return the hour part of a datetime: â® MySQL Functions"
  },
  {
    "document": "MySQL LAST_DAY() Function â® MySQL Functions Example Extract the last day of the month for the given date: Definition and Usage The LAST_DAY() function extracts the last day of the month for a given date. Syntax Parameter Values Technical Details More Examples Example Extract the last day of the month for the given date: â® MySQL Functions"
  },
  {
    "document": "MySQL LOCALTIME() Function â® MySQL Functions Example Return current date and time: Definition and Usage The LOCALTIME() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL LOCALTIMESTAMP() Function â® MySQL Functions Example Return current date and time: Definition and Usage The LOCALTIMESTAMP() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL MAKEDATE() Function â® MySQL Functions Example Create and return a date based on a year and a number of days value: Definition and Usage The MAKEDATE() function creates and returns a date based on a year and a number of days value. Syntax Parameter Values Technical Details More Examples Example Create and return a date based on a year and a number of days value: Example Create and return a date based on a year and a number of days value: Example Create and return a date based on a year and a number of days value: â® MySQL Functions"
  },
  {
    "document": "MySQL MAKETIME() Function â® MySQL Functions Example Create and return a time value based on an hour, minute, and second value: Definition and Usage The MAKETIME() function creates and returns a time based on an hour, minute, and second value. Syntax Parameter Values Technical Details More Examples Example Create and return a time value based on an hour, minute, and second value: Example Create and return a time value based on an hour, minute, and second value: Example Create and return a time value based on an hour, minute, and second value: â® MySQL Functions"
  },
  {
    "document": "MySQL MICROSECOND() Function â® MySQL Functions Example Return the microsecond part of a datetime: Definition and Usage The MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to 999999). Syntax Parameter Values Technical Details More Examples Example Return the microsecond part of a time value: â® MySQL Functions"
  },
  {
    "document": "MySQL MINUTE() Function â® MySQL Functions Example Return the minute part of a datetime value: Definition and Usage The MINUTE() function returns the minute part of a time/datetime (from 0 to 59). Syntax Parameter Values Technical Details More Examples Example Return the minute part of a time value: â® MySQL Functions"
  },
  {
    "document": "MySQL MONTH() Function â® MySQL Functions Example Return the month part of a date: Definition and Usage The MONTH() function returns the month part for a given date (a number from 1 to 12). Syntax Parameter Values Technical Details More Examples Example Return the month part of a date: Example Return the month part of the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL MONTHNAME() Function â® MySQL Functions Example Return the name of the month for a date: Definition and Usage The MONTHNAME() function returns the name of the month for a given date. Syntax Parameter Values Technical Details More Examples Example Return the name of the month for a date: Example Return the name of the month for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL NOW() Function â® MySQL Functions Example Return current date and time: Definition and Usage The NOW() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL PERIOD_ADD() Function â® MySQL Functions Example Add a specified number of months to a period: Definition and Usage The PERIOD_ADD() function adds a specified number of months to a period. The PERIOD_ADD() function will return the result formatted as YYYYMM. Syntax Parameter Values Technical Details More Examples Example Add a specified number of months to a period: Example Add a specified number of months to a period: â® MySQL Functions"
  },
  {
    "document": "MySQL PERIOD_DIFF() Function â® MySQL Functions Example Return the difference between two periods: Definition and Usage The PERIOD_DIFF() function returns the difference between two periods. The result will be in months. Note: period1 and period2 should be in the same format. Syntax Parameter Values Technical Details More Examples Example Return the difference between two periods: Example Return the difference between two periods: â® MySQL Functions"
  },
  {
    "document": "MySQL QUARTER() Function â® MySQL Functions Example Return the quarter of the year for the date: Definition and Usage The QUARTER() function returns the quarter of the year for a given date value (a number from 1 to 4). Syntax Parameter Values Technical Details More Examples Example Return the quarter of the year for the date: Example Return the quarter of the year for the date: â® MySQL Functions"
  },
  {
    "document": "MySQL SECOND() Function â® MySQL Functions Example Return the seconds part of a datetime value: Definition and Usage The SECOND() function returns the seconds part of a time/datetime (from 0 to 59). Syntax Parameter Values Technical Details More Examples Example Return the seconds part of a time value: â® MySQL Functions"
  },
  {
    "document": "MySQL SEC_TO_TIME() Function â® MySQL Functions Example Return a time value based on a specified seconds value: Definition and Usage The SEC_TO_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds. Syntax Parameter Values Technical Details More Examples Example Return a time value based on a specified seconds value: â® MySQL Functions"
  },
  {
    "document": "MySQL STR_TO_DATE() Function â® MySQL Functions Example Return a date based on a string and a format: Definition and Usage The STR_TO_DATE() function returns a date based on a string and a format. Syntax Parameter Values Technical Details More Examples Example Return a date based on a string and a format: Example Return a date based on a string and a format: Example Return a date based on a string and a format: â® MySQL Functions"
  },
  {
    "document": "MySQL SUBDATE() Function â® MySQL Functions Example Subtract 10 days from a date and return the date: Definition and Usage The SUBDATE() function subtracts a time/date interval from a date and then returns the date. Syntax OR: Parameter Values Technical Details More Examples Example Subtract 15 minutes from a date and return the date: Example Subtract 3 hours from a date and return the date: Example Add 2 months to a date and return the date: â® MySQL Functions"
  },
  {
    "document": "MySQL SUBTIME() Function â® MySQL Functions Example Subtract 5.000001 seconds and return the datetime: Definition and Usage The SUBTIME() function subtracts time from a time/datetime expression and then returns the new time/datetime. Syntax Parameter Values Technical Details More Examples Example Subtract 3 hours, 2 minutes, 5.000001 seconds and return the datetime: Example Subtract 5 seconds and return the time: Example Subtract 3 minutes and return the time: Example Add 3 hours, 2 minutes, and 5 seconds, and return the time: â® MySQL Functions"
  },
  {
    "document": "MySQL SYSDATE() Function â® MySQL Functions Example Return the current date and time: Definition and Usage The SYSDATE() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS (numeric). Syntax Technical Details More Examples Example Return the current date and time + 1: â® MySQL Functions"
  },
  {
    "document": "MySQL TIME() Function â® MySQL Functions Example Extract the time part from a time expression: Definition and Usage The TIME() function extracts the time part from a given time/datetime. Note: This function returns \"00:00:00\" if expression is not a datetime/time, or NULL if expression is NULL. Syntax Parameter Values Technical Details More Examples Example Extract the time part from the datetime expression: Example Extract the time part from the datetime expression: Example Extract the time part from NULL: â® MySQL Functions"
  },
  {
    "document": "MySQL TIME_FORMAT() Function â® MySQL Functions Example Format a time: Definition and Usage The TIME_FORMAT() function formats a time by a specified format. Syntax Parameter Values Technical Details More Examples Example Format a time: Example Format a time: Example Format a time: â® MySQL Functions"
  },
  {
    "document": "MySQL TIME_TO_SEC() Function â® MySQL Functions Example Convert a time value into seconds: Definition and Usage The TIME_TO_SEC() function converts a time value into seconds. Syntax Parameter Values Technical Details More Examples Example Convert a time value into seconds: Example Convert a time value into seconds: Example Convert a time value into seconds: â® MySQL Functions"
  },
  {
    "document": "MySQL TIMEDIFF() Function â® MySQL Functions Example Return the difference between two time expressions: Definition and Usage The TIMEDIFF() function returns the difference between two time/datetime expressions. Note: time1 and time2 should be in the same format, and the calculation is time1 - time2. Syntax Parameter Values Technical Details More Examples Example Return the difference between two datetime expressions: â® MySQL Functions"
  },
  {
    "document": "MySQL TIMESTAMP() Function â® MySQL Functions Example Return a datetime value based on the arguments: Definition and Usage The TIMESTAMP() function returns a datetime value based on a date or datetime value. Note: If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value. Syntax Parameter Values Technical Details More Examples Example Return a datetime value based on the arguments: â® MySQL Functions"
  },
  {
    "document": "MySQL TO_DAYS() Function â® MySQL Functions Example Return the number of days between the date and year 0: Definition and Usage The TO_DAYS() function returns the number of days between a date and year 0 (date \"0000-00-00\"). The TO_DAYS() function can be used only with dates within the Gregorian calendar. Note: This function is the opposite of the FROM_DAYS() function. Syntax Parameter Values Technical Details More Examples Example Return the number of days between the date and year 0: â® MySQL Functions"
  },
  {
    "document": "MySQL WEEK() Function â® MySQL Functions Example Return the week number for a date: Definition and Usage The WEEK() function returns the week number for a given date (a number from 0 to 53). Syntax Parameter Values Optional. Specifies what day the week starts on. Can be one of the following: Technical Details More Examples Example Return the week number for a date: Example Return the week number for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL WEEKDAY() Function â® MySQL Functions Example Return the weekday number for a date: Definition and Usage The WEEKDAY() function returns the weekday number for a given date. Note: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday. Syntax Parameter Values Technical Details More Examples Example Return the weekday number for a date: Example Return the weekday number for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL WEEKOFYEAR() Function â® MySQL Functions Example Return the week number for a date: Definition and Usage The WEEKOFYEAR() function returns the week number for a given date (a number from 1 to 53). Note: This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days. Tip: Also look at the WEEK() function. Syntax Parameter Values Technical Details More Examples Example Return the week number for a date: Example Return the week number for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL YEAR() Function â® MySQL Functions Example Return the year part of a date: Definition and Usage The YEAR() function returns the year part for a given date (a number from 1000 to 9999). Syntax Parameter Values Technical Details More Examples Example Return the year part of a date: Example Return the year part of the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL YEARWEEK() Function â® MySQL Functions Example Return the year and week number for a date: Definition and Usage The YEARWEEK() function returns the year and week number (a number from 0 to 53) for a given date. Syntax Parameter Values Optional. Specifies what day the week starts on. Can be one of the following: Technical Details More Examples Example Return the year and week number for a date: Example Return the year and week number for the current system date: â® MySQL Functions"
  },
  {
    "document": "MySQL BIN() Function â® MySQL Functions Example Return a binary representation of 15: Definition and Usage The BIN() function returns a binary representation of a number, as a string value. Syntax Parameter Values Technical Details More Examples Example Return a binary representation of 111: Example Return a binary representation of 8: â® MySQL Functions"
  },
  {
    "document": "MySQL BINARY Function â® MySQL Functions Example Convert a value to a binary string: Definition and Usage The BINARY function converts a value to a binary string. This function is equivalent to using CAST(value AS BINARY). Syntax Parameter Values Technical Details More Examples Example Here MySQL performs a character-by-character comparison of \"HELLO\" and \"hello\" and return 1 (because on a character-by-character basis, they are equivalent): Example Here MySQL performs a byte-by-byte comparison of \"HELLO\" and \"hello\" and return 0 (because on a byte-by-byte basis, they are NOT equivalent): â® MySQL Functions"
  },
  {
    "document": "MySQL CASE Function â® MySQL Functions Example Go through conditions and return a value when the first condition is met: Definition and Usage The CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it will return the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL. Syntax Parameter Values Technical Details More Examples The following SQL will order the customers by City. However, if City is NULL, then order by Country: Example â® MySQL Functions"
  },
  {
    "document": "MySQL CAST() Function â® MySQL Functions Example Convert a value to a DATE datatype: Definition and Usage The CAST() function converts a value (of any type) into the specified datatype. Tip: See also the CONVERT() function. Syntax Parameter Values Technical Details More Examples Example Convert a value to a CHAR datatype: Example Convert a value to a TIME datatype: Example Convert a value to a SIGNED datatype: â® MySQL Functions"
  },
  {
    "document": "MySQL COALESCE() Function â® MySQL Functions Example Return the first non-null value in a list: Definition and Usage The COALESCE() function returns the first non-null value in a list. Syntax Parameter Values Technical Details More Examples Example Return the first non-null value in a list: â® MySQL Functions"
  },
  {
    "document": "MySQL CONNECTION_ID() Function â® MySQL Functions Example Return the unique connection ID for the current connection: Definition and Usage The CONNECTION_ID() function returns the unique connection ID for the current connection. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL CONV() Function â® MySQL Functions Example Convert a number from numeric base system 10 to numeric base system 2: Definition and Usage The CONV() function converts a number from one numeric base system to another, and returns the result as a string value. Note: This function returns NULL if any of the parameters are NULL. Tip: Also look at the BIN() function. Syntax Parameter Values Technical Details More Examples Example Convert a number from numeric base system 2 to numeric base system 10: Example Convert a number from numeric base system 10 to numeric base system 16: â® MySQL Functions"
  },
  {
    "document": "MySQL CONVERT() Function â® MySQL Functions Example Convert a value to a DATE datatype: Definition and Usage The CONVERT() function converts a value into the specified datatype or character set. Tip: Also look at the CAST() function. Syntax OR: Parameter Values Technical Details More Examples Example Convert a value to a CHAR datatype: Example Convert a value to a TIME datatype: Example Convert a value to LATIN1 character set: â® MySQL Functions"
  },
  {
    "document": "MySQL CURRENT_USER() Function â® MySQL Functions Example Return the user name and host name for the MySQL account: Definition and Usage The CURRENT_USER() function returns the user name and host name for the MySQL account that the server used to authenticate the current client. The result is returned as a string in the UTF8 character set. Tip: See also the USER() function. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL DATABASE() Function â® MySQL Functions Example Return the name of the current (default) database: Definition and Usage The DATABASE() function returns the name of the current database. If there is no current database, this function returns NULL or \"\". Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL IF() Function â® MySQL Functions Example Return \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE: Definition and Usage The IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE. Syntax Parameter Values Technical Details More Examples Example Return 5 if the condition is TRUE, or 10 if the condition is FALSE: Example Test whether two strings are the same and return \"YES\" if they are, or \"NO\" if not: Example Return \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE: â® MySQL Functions"
  },
  {
    "document": "MySQL IFNULL() Function â® MySQL Functions Example Return the specified value IF the expression is NULL, otherwise return the expression: Definition and Usage The IFNULL() function returns a specified value if the expression is NULL. If the expression is NOT NULL, this function returns the expression. Syntax Parameter Values Technical Details More Examples Example Return the specified value IF the expression is NULL, otherwise return the expression: Example Return the specified value IF the expression is NULL, otherwise return the expression: â® MySQL Functions"
  },
  {
    "document": "MySQL ISNULL() Function â® MySQL Functions Example Test whether an expression is NULL: Definition and Usage The ISNULL() function returns 1 or 0 depending on whether an expression is NULL. If expression is NULL, this function returns 1. Otherwise, it returns 0. Syntax Parameter Values Technical Details More Examples Example Test whether an expression is NULL: Example Test whether an expression is NULL: Example Test whether an expression is NULL: â® MySQL Functions"
  },
  {
    "document": "MySQL LAST_INSERT_ID() Function â® MySQL Functions Example Return the AUTO_INCREMENT id of the last row that has been inserted or updated in a table: Definition and Usage The LAST_INSERT_ID() function returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table. Syntax Parameter Values Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL NULLIF() Function â® MySQL Functions Example Compare two expressions: Definition and Usage The NULLIF() function compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned. Syntax Parameter Values Technical Details More Examples Example Compare two expressions: Example Compare two expressions: Example Compare two expressions: â® MySQL Functions"
  },
  {
    "document": "MySQL SESSION_USER() Function â® MySQL Functions Example Return the current user name and host name for the MySQL connection: Definition and Usage The SESSION_USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SYSTEM_USER() and the USER() function. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL SYSTEM_USER() Function â® MySQL Functions Example Return the current user name and host name for the MySQL connection: Definition and Usage The SYSTEM_USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SESSION_USER() function and the USER() function. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL USER() Function â® MySQL Functions Example Return the current user name and host name for the MySQL connection: Definition and Usage The USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SESSION_USER() function and the SYSTEM_USER() function. Tip: Also look at the CURRENT_USER() function. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL VERSION() Function â® MySQL Functions Example Return the current version of the MySQL database: Definition and Usage The VERSION() function returns the current version of the MySQL database, as a string. Syntax Technical Details â® MySQL Functions"
  },
  {
    "document": "MySQL Examples MySQL SELECT Examples Explained MySQL WHERE Examples Explained MySQL AND, OR and NOT Examples Explained MySQL ORDER BY Examples Explained MySQL NULL Values Examples Explained MySQL LIMIT Examples Explained MySQL MIN() and MAX() Examples Explained MySQL COUNT(), AVG() and SUM() Examples Explained MySQL LIKE Examples Explained MySQL Wildcards Examples Explained MySQL IN Examples Explained MySQL BETWEEN Examples Explained MySQL Aliases Examples Explained MySQL Joins Examples Explained MySQL UNION Examples Explained MySQL GROUP BY Examples Explained MySQL HAVING Examples Explained MySQL EXISTS Example Explained MySQL ANY and ALL Examples Explained MySQL CASE Examples Explained MySQL Comments Examples Explained MySQL Database MySQL Database tutorials can be found here:"
  },
  {
    "document": "MySQL Online Editor (Compiler) MySQL Editor With our online MySQL editor, you can edit SQL statements, and view the result in your browser. Example Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to create your own website, or web applications with a SQL Database, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that enables you to create and share your website. In addition to a server, you get a SQL Database where you can store and access your data. It's easy to use and doesn't require any setup. The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your SQL knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. New languages are added all the time: If you don't know SQL, we suggest that you read our SQL Tutorial from scratch. Easy Package Management Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation. Build Powerful Websites You can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share Your Website With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "MySQL Quiz You can test your MySQL skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about MySQL and SQL. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the MySQL Quiz â¯ If you don't know MySQL, we suggest that you read our MySQL Tutorial from scratch."
  },
  {
    "document": "MySQL Exercises Exercises Test your MySQL skills with exercises from all categories: Intro RDBMS About SQL Statements SELECT WHERE AND OR NOT ORDER BY INSERT NULL values UPDATE DELETE LIMIT MIN MAX COUNT AVG SUM LIKE Wildcards IN BETWEEN Alias JOIN INNER JOIN LEFT JOIN RIGHT JOIN CROSS JOIN UNION GROUP BY HAVING EXISTS ANY, ALL INSERT INTO SELECT CASE IFNULL() and COALESCE() Comments Operators CREATE DATABASE DROP DATABASE CREATE TABLE DROP TABLE ALTER TABLE Constraints NOT NULL UNIQUE PRIMARY KEY FOREIGN KEY CHECK DEFAULT CREATE INDEX AUTO_INCREMENT Dates Views Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer."
  },
  {
    "document": "MySQL Syllabus Introduction The W3Schools MySQL Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of MySQL database management. It is designed for beginners and requires basic SQL knowledge. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn MySQL step by step, from basic queries to advanced database management. Get Started With MySQL Â» Learning Outcomes Note: Are you a teacher teaching MySQL? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are MySQL Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn MySQL for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment MySQL, like any database system, is best learned through hands-on practice. Try this example using our editor: Example If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and run websites. Here you get a secure sandbox environment called Spaces. That includes a W3Schools subdomain, hosting, and secure SSL certificates. MySQL is not hosted on W3Schools Spaces; you need to set it up on a platform like PlanetScale or a hosting provider and connect your application to it. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account MySQL Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The MySQL exam is a test that summarizes the W3Schools MySQL syllabus. After passing the exam you get the \"Certified MySQL Developer\" Certification. The certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach MySQL? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "MySQL Study Plan Introduction The MySQL study plan helps you teach your students MySQL step-by-step. Creating a study plan for MySQL is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of MySQL to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach MySQL. The MySQL training materials is available for you to include and use in your study plan: MySQL Syllabus With the MySQL Syllabus, your students will start with the basics, like understanding databases and writing simple SQL queries, and move to more advanced topics, like joining tables, managing data, and creating complex queries. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about MySQL Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 3 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 3-week MySQL study plan could look like: Image of Sample MySQL study plan: Ready to get started? Start with MySQL Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach MySQL programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "W3Schools MySQL Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "Python Tutorial Learn Python Python is a popular programming language. Python can be used on a server to create web applications. Learning by Examples With our \"Try it Yourself\" editor, you can edit Python code and view the result. Example Click on the \"Try it Yourself\" button to see how it works. Python File Handling In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling Python Database Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Python Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises Python Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Python Quiz Test your Python skills with a quiz. Python Quiz Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Python Reference You will also find complete function and method references: Reference Overview Built-in Functions String Methods List/Array Methods Dictionary Methods Tuple Methods Set Methods File Methods Python Keywords Python Exceptions Python Glossary Random Module Requests Module Math Module CMath Module Download Python Download Python from the official Python web site: https://python.org Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Python Introduction What is Python? Python is a popular programming language. It was created by Guido van Rossum, and released in 1991. It is used for: What can Python do? Why Python? Good to know Python Syntax compared to other programming languages Example Video: Python Introduction"
  },
  {
    "document": "Python Getting Started Python Install Many PCs and Macs will have python already installed. To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe): To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type: If you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/ Python Quickstart Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed. The way to run a python file is like this on the command line: Where \"helloworld.py\" is the name of your python file. Let's write our first Python file, called helloworld.py, which can be done in any text editor. print(\"Hello, World!\") Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run: The output should read: Congratulations, you have written and executed your first Python program. W3Schools' Python Editor We have an online Python editor where you can execute your own Python code and see the result: Example Try our online Python editor: This editor will be used in the entire tutorial to demonstrate the different aspects of Python. Python Version To check the Python version of the editor, you can find it by importing the sys module: sys Example Check the Python version of the editor: You will learn more about importing modules in our Python Modules chapter. The Python Command Line To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself. Type the following on the Windows, Mac or Linux command line: From there you can write any python, including our hello world example from earlier in the tutorial: Which will write \"Hello, World!\" in the command line: Whenever you are done in the python command line, you can simply type the following to quit the python command line interface: Video: Python Get Started"
  },
  {
    "document": "Python Syntax Execute Python Syntax As we learned in the previous page, Python syntax can be executed by writing directly in the Command Line: On this page Or by creating a python file on the server, using the .py file extension, and running it in the Command Line: Python Indentation Indentation refers to the spaces at the beginning of a code line. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important. Python uses indentation to indicate a block of code. Example Python will give you an error if you skip the indentation: Example Syntax Error: The number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one. Example You have to use the same number of spaces in the same block of code, otherwise Python will give you an error: Example Syntax Error: Python Variables In Python, variables are created when you assign a value to it: Example Variables in Python: x = 5y = \"Hello, World!\" Try it Yourself Â» Python has no command for declaring a variable. You will learn more about variables in the Python Variables chapter. Comments Python has commenting capability for the purpose of in-code documentation. Comments start with a #, and Python will render the rest of the line as a comment: Example Comments in Python: #This is a comment. print(\"Hello, World!\") Try it Yourself Â» Video: Python Syntax â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Variables in Python: Python has no command for declaring a variable. You will learn more about variables in the Python Variables chapter. Comments Python has commenting capability for the purpose of in-code documentation. Comments start with a #, and Python will render the rest of the line as a comment: Example Comments in Python: #This is a comment. print(\"Hello, World!\") Try it Yourself Â» Video: Python Syntax â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example Comments in Python: Video: Python Syntax"
  },
  {
    "document": "Python Comments Comments can be used to explain Python code. Comments can be used to make the code more readable. Comments can be used to prevent execution when testing code. Creating a Comment Comments starts with a #, and Python will ignore them: # Example Comments can be placed at the end of a line, and Python will ignore the rest of the line: Example A comment does not have to be text that explains the code, it can also be used to prevent Python from executing code: Example Multiline Comments Python does not really have a syntax for multiline comments. To add a multiline comment you could insert a # for each line: # Example Or, not quite as intended, you can use a multiline string. Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it: Example As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment. Video: Python Comments"
  },
  {
    "document": "Python Variables Variables Variables are containers for storing data values. Creating Variables Python has no command for declaring a variable. A variable is created the moment you first assign a value to it. Example Variables do not need to be declared with any particular type, and can even change type after they have been set. Example Casting If you want to specify the data type of a variable, this can be done with casting. Example Get the Type You can get the data type of a variable with the type() function. type() Example Single or Double Quotes? String variables can be declared either by using single or double quotes: Example Case-Sensitive Variable names are case-sensitive. Example This will create two variables: Video: Python Variables"
  },
  {
    "document": "Python Variables Variables Variables are containers for storing data values. Creating Variables Python has no command for declaring a variable. A variable is created the moment you first assign a value to it. Example Variables do not need to be declared with any particular type, and can even change type after they have been set. Example Casting If you want to specify the data type of a variable, this can be done with casting. Example Get the Type You can get the data type of a variable with the type() function. type() Example Single or Double Quotes? String variables can be declared either by using single or double quotes: Example Case-Sensitive Variable names are case-sensitive. Example This will create two variables: Video: Python Variables"
  },
  {
    "document": "Python - Variable Names Variable Names A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables: Example Legal variable names: Example Illegal variable names: Remember that variable names are case-sensitive Multi Words Variable Names Variable names with more than one word can be difficult to read. There are several techniques you can use to make them more readable: Camel Case Each word, except the first, starts with a capital letter: Pascal Case Each word starts with a capital letter: Snake Case Each word is separated by an underscore character: Video: Python Variable Names"
  },
  {
    "document": "Python Variables - Assign Multiple Values Many Values to Multiple Variables Python allows you to assign values to multiple variables in one line: Example Note: Make sure the number of variables matches the number of values, or else you will get an error. One Value to Multiple Variables And you can assign the same value to multiple variables in one line: Example Unpack a Collection If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking. Example Unpack a list: Learn more about unpacking in our Unpack Tuples Chapter. Video: Python Variable Names"
  },
  {
    "document": "Python - Output Variables Output Variables The Python print() function is often used to output variables. print() Example In the print() function, you output multiple variables, separated by a comma: print() Example You can also use the + operator to output multiple variables: + Example Notice the space character after \"Python \" and \"is \", without them the result would be \"Pythonisawesome\". \"Python \" \"is \" For numbers, the + character works as a mathematical operator: + Example In the print() function, when you try to combine a string and a number with the + operator, Python will give you an error: print() + Example The best way to output multiple variables in the print() function is to separate them with commas, which even support different data types: print() Example Video: Python Output Variables"
  },
  {
    "document": "Python - Global Variables Global Variables Variables that are created outside of a function (as in all of the examples in the previous pages) are known as global variables. Global variables can be used by everyone, both inside of functions and outside. Example Create a variable outside of a function, and use it inside the function If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value. Example Create a variable inside a function, with the same name as the global variable The global Keyword Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function. To create a global variable inside a function, you can use the global keyword. global Example If you use the global keyword, the variable belongs to the global scope: global Also, use the global keyword if you want to change a global variable inside a function. global Example To change the value of a global variable inside a function, refer to the variable by using the global keyword: global Video: Python Global Variables"
  },
  {
    "document": "Python - Variable Exercises Test Yourself With Exercises Now you have learned a lot about variables, and how to use them in Python. Are you ready for a test? Exercises Test your Python Variables skills with exercises from all categories: Variables Variable Names Multiple Variable Values Output Variable Global Variable More Python Exercises: Python Exercises"
  },
  {
    "document": "Python Data Types Built-in Data Types In programming, data type is an important concept. Variables can store data of different types, and different types can do different things. Python has the following data types built-in by default, in these categories: str int float complex list tuple range dict set frozenset bool bytes bytearray memoryview NoneType Getting the Data Type You can get the data type of any object by using the type() function: type() Example Print the data type of the variable x: Setting the Data Type In Python, the data type is set when you assign a value to a variable: Setting the Specific Data Type If you want to specify the data type, you can use the following constructor functions:"
  },
  {
    "document": "Python Numbers Python Numbers There are three numeric types in Python: int float complex Variables of numeric types are created when you assign a value to them: Example To verify the type of any object in Python, use the type() function: type() Example Int Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length. Example Integers: Float Float, or \"floating point number\" is a number, positive or negative, containing one or more decimals. Example Floats: Float can also be scientific numbers with an \"e\" to indicate the power of 10. Example Floats: Complex Complex numbers are written with a \"j\" as the imaginary part: Example Complex: Type Conversion You can convert from one type to another with the int(), float(), and complex() methods: int() float() complex() Example Convert from one type to another: Note: You cannot convert complex numbers into another number type. Random Number Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers: random() random Example Import the random module, and display a random number from 1 to 9: In our Random Module Reference you will learn more about the Random module."
  },
  {
    "document": "Python Casting Specify a Variable Type There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types. Casting in python is therefore done using constructor functions: Example Integers: Example Floats: Example Strings:"
  },
  {
    "document": "Python Strings Strings Strings in python are surrounded by either single quotation marks, or double quotation marks. 'hello' is the same as \"hello\". You can display a string literal with the print() function: print() Example Quotes Inside Quotes You can use quotes inside a string, as long as they don't match the quotes surrounding the string: Example Assign String to a Variable Assigning a string to a variable is done with the variable name followed by an equal sign and the string: Example Multiline Strings You can assign a multiline string to a variable by using three quotes: Example You can use three double quotes: Or three single quotes: Example Note: in the result, the line breaks are inserted at the same position as in the code. Strings are Arrays Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string. Example Get the character at position 1 (remember that the first character has the position 0): Looping Through a String Since strings are arrays, we can loop through the characters in a string, with a for loop. for Example Loop through the letters in the word \"banana\": Learn more about For Loops in our Python For Loops chapter. String Length To get the length of a string, use the len() function. len() Example The len() function returns the length of a string: len() Check String To check if a certain phrase or character is present in a string, we can use the keyword in. in Example Check if \"free\" is present in the following text: Use it in an if statement: if Example Print only if \"free\" is present: Learn more about If statements in our Python If...Else chapter. Check if NOT To check if a certain phrase or character is NOT present in a string, we can use the keyword not in. not in Example Check if \"expensive\" is NOT present in the following text: Use it in an if statement: if Example print only if \"expensive\" is NOT present:"
  },
  {
    "document": "Python Strings Strings Strings in python are surrounded by either single quotation marks, or double quotation marks. 'hello' is the same as \"hello\". You can display a string literal with the print() function: print() Example Quotes Inside Quotes You can use quotes inside a string, as long as they don't match the quotes surrounding the string: Example Assign String to a Variable Assigning a string to a variable is done with the variable name followed by an equal sign and the string: Example Multiline Strings You can assign a multiline string to a variable by using three quotes: Example You can use three double quotes: Or three single quotes: Example Note: in the result, the line breaks are inserted at the same position as in the code. Strings are Arrays Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string. Example Get the character at position 1 (remember that the first character has the position 0): Looping Through a String Since strings are arrays, we can loop through the characters in a string, with a for loop. for Example Loop through the letters in the word \"banana\": Learn more about For Loops in our Python For Loops chapter. String Length To get the length of a string, use the len() function. len() Example The len() function returns the length of a string: len() Check String To check if a certain phrase or character is present in a string, we can use the keyword in. in Example Check if \"free\" is present in the following text: Use it in an if statement: if Example Print only if \"free\" is present: Learn more about If statements in our Python If...Else chapter. Check if NOT To check if a certain phrase or character is NOT present in a string, we can use the keyword not in. not in Example Check if \"expensive\" is NOT present in the following text: Use it in an if statement: if Example print only if \"expensive\" is NOT present:"
  },
  {
    "document": "Python - Slicing Strings Slicing You can return a range of characters by using the slice syntax. Specify the start index and the end index, separated by a colon, to return a part of the string. Example Get the characters from position 2 to position 5 (not included): Note: The first character has index 0. Slice From the Start By leaving out the start index, the range will start at the first character: Example Get the characters from the start to position 5 (not included): Slice To the End By leaving out the end index, the range will go to the end: Example Get the characters from position 2, and all the way to the end: Negative Indexing Example Get the characters: From: \"o\" in \"World!\" (position -5) To, but not included: \"d\" in \"World!\" (position -2):"
  },
  {
    "document": "Python - Modify Strings Python has a set of built-in methods that you can use on strings. Upper Case Example The upper() method returns the string in upper case: upper() Lower Case Example The lower() method returns the string in lower case: lower() Remove Whitespace Whitespace is the space before and/or after the actual text, and very often you want to remove this space. Example The strip() method removes any whitespace from the beginning or the end: strip() Replace String Example The replace() method replaces a string with another string: replace() Split String The split() method returns a list where the text between the specified separator becomes the list items. split() Example The split() method splits the string into substrings if it finds instances of the separator: split() Learn more about Lists in our Python Lists chapter. String Methods Learn more about String Methods with our String Methods Reference"
  },
  {
    "document": "Python - String Concatenation String Concatenation To concatenate, or combine, two strings you can use the + operator. Example Merge variable a with variable b into variable c: a b c Example To add a space between them, add a \" \": \" \""
  },
  {
    "document": "Python - Format - Strings String Format As we learned in the Python Variables chapter, we cannot combine strings and numbers like this: Example But we can combine strings and numbers by using f-strings or the format() method! format() F-Strings F-String was introduced in Python 3.6, and is now the preferred way of formatting strings. To specify a string as an f-string, simply put an f in front of the string literal, and add curly brackets {} as placeholders for variables and other operations. f {} Example Create an f-string: Placeholders and Modifiers A placeholder can contain variables, operations, functions, and modifiers to format the value. Example Add a placeholder for the price variable: price A placeholder can include a modifier to format the value. A modifier is included by adding a colon : followed by a legal formatting type, like .2f which means fixed point number with 2 decimals: : .2f Example Display the price with 2 decimals: A placeholder can contain Python code, like math operations: Example Perform a math operation in the placeholder, and return the result: Learn more about String Formatting in our String Formatting chapter."
  },
  {
    "document": "Python - Escape Characters Escape Character To insert characters that are illegal in a string, use an escape character. An escape character is a backslash \\ followed by the character you want to insert. \\ An example of an illegal character is a double quote inside a string that is surrounded by double quotes: Example You will get an error if you use double quotes inside a string that is surrounded by double quotes: To fix this problem, use the escape character \\\": \\\" Example The escape character allows you to use double quotes when you normally would not be allowed: Escape Characters Other escape characters used in Python:"
  },
  {
    "document": "Python - String Methods String Methods Python has a set of built-in methods that you can use on strings. Note: All string methods return new values. They do not change the original string."
  },
  {
    "document": "Python - String Exercises Test Yourself With Exercises Now you have learned a lot about Strings, and how to use them in Python. Are you ready for a test? Exercises Test your Python String skills with exercises from all categories: Strings Slicing Strings Modify Strings Concatenate Strings Format Strings More Python Exercises: Python Exercises"
  },
  {
    "document": "Python Booleans Booleans represent one of two values: True or False. True False Boolean Values In programming you often need to know if an expression is True or False. True False You can evaluate any expression in Python, and get one of two answers, True or False. True False When you compare two values, the expression is evaluated and Python returns the Boolean answer: Example When you run a condition in an if statement, Python returns True or False: True False Example Print a message based on whether the condition is True or False: True False Evaluate Values and Variables The bool() function allows you to evaluate any value, and give you True or False in return, bool() True False Example Evaluate a string and a number: Example Evaluate two variables: Most Values are True Almost any value is evaluated to True if it has some sort of content. True Any string is True, except empty strings. True Any number is True, except 0. True 0 Any list, tuple, set, and dictionary are True, except empty ones. True Example The following will return True: Some Values are False In fact, there are not many values that evaluate to False, except empty values, such as (), [], {}, \"\", the number 0, and the value None. And of course the value False evaluates to False. False () [] {} \"\" 0 None False False Example The following will return False: One more value, or object in this case, evaluates to False, and that is if you have an object that is made from a class with a __len__ function that returns 0 or False: False __len__ 0 False Example Functions can Return a Boolean You can create functions that returns a Boolean Value: Example Print the answer of a function: You can execute code based on the Boolean answer of a function: Example Print \"YES!\" if the function returns True, otherwise print \"NO! \": Python also has many built-in functions that return a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type: isinstance() Example Check if an object is an integer or not:"
  },
  {
    "document": "Python Operators Python Operators Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: + Example Python divides the operators in the following groups: Python Arithmetic Operators Arithmetic operators are used with numeric values to perform common mathematical operations: Python Assignment Operators Assignment operators are used to assign values to variables: Python Comparison Operators Comparison operators are used to compare two values: Python Logical Operators Logical operators are used to combine conditional statements: Python Identity Operators Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location: Python Membership Operators Membership operators are used to test if a sequence is presented in an object: Python Bitwise Operators Bitwise operators are used to compare (binary) numbers: Operator Precedence Operator precedence describes the order in which operations are performed. Example Parentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first: Example Multiplication * has higher precedence than addition +, and therefore multiplications are evaluated before additions: * + The precedence order is described in the table below, starting with the highest precedence at the top: () ** +x -x ~x * / // % + - << >> & ^ | == != > >= < <= is is not in not in not and or If two operators have the same precedence, the expression is evaluated from left to right. Example Addition + and subtraction - has the same precedence, and therefore we evaluate the expression from left to right: + -"
  },
  {
    "document": "Python Lists List Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: Example Create a List: List Items List items are ordered, changeable, and allow duplicate values. List items are indexed, the first item has index [0], the second item has index [1] etc. [0] [1] Ordered When we say that lists are ordered, it means that the items have a defined order, and that order will not change. If you add new items to a list, the new items will be placed at the end of the list. Note: There are some list methods that will change the order, but in general: the order of the items will not change. Changeable The list is changeable, meaning that we can change, add, and remove items in a list after it has been created. Allow Duplicates Since lists are indexed, lists can have items with the same value: Example Lists allow duplicate values: List Length To determine how many items a list has, use the len() function: len() Example Print the number of items in the list: List Items - Data Types List items can be of any data type: Example String, int and boolean data types: A list can contain different data types: Example A list with strings, integers and boolean values: type() From Python's perspective, lists are defined as objects with the data type 'list': Example What is the data type of a list? The list() Constructor It is also possible to use the list() constructor when creating a new list. Example Using the list() constructor to make a List: list() Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python Lists List Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: Example Create a List: List Items List items are ordered, changeable, and allow duplicate values. List items are indexed, the first item has index [0], the second item has index [1] etc. [0] [1] Ordered When we say that lists are ordered, it means that the items have a defined order, and that order will not change. If you add new items to a list, the new items will be placed at the end of the list. Note: There are some list methods that will change the order, but in general: the order of the items will not change. Changeable The list is changeable, meaning that we can change, add, and remove items in a list after it has been created. Allow Duplicates Since lists are indexed, lists can have items with the same value: Example Lists allow duplicate values: List Length To determine how many items a list has, use the len() function: len() Example Print the number of items in the list: List Items - Data Types List items can be of any data type: Example String, int and boolean data types: A list can contain different data types: Example A list with strings, integers and boolean values: type() From Python's perspective, lists are defined as objects with the data type 'list': Example What is the data type of a list? The list() Constructor It is also possible to use the list() constructor when creating a new list. Example Using the list() constructor to make a List: list() Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python - Access List Items Access Items List items are indexed and you can access them by referring to the index number: Example Print the second item of the list: Note: The first item has index 0. Negative Indexing Negative indexing means start from the end -1 refers to the last item, -2 refers to the second last item etc. -1 -2 Example Print the last item of the list: Range of Indexes You can specify a range of indexes by specifying where to start and where to end the range. When specifying a range, the return value will be a new list with the specified items. Example Return the third, fourth, and fifth item: Note: The search will start at index 2 (included) and end at index 5 (not included). Remember that the first item has index 0. By leaving out the start value, the range will start at the first item: Example This example returns the items from the beginning to, but NOT including, \"kiwi\": By leaving out the end value, the range will go on to the end of the list: Example This example returns the items from \"cherry\" to the end: Range of Negative Indexes Specify negative indexes if you want to start the search from the end of the list: Example This example returns the items from \"orange\" (-4) to, but NOT including \"mango\" (-1): Check if Item Exists To determine if a specified item is present in a list use the in keyword: in Example Check if \"apple\" is present in the list:"
  },
  {
    "document": "Python - Change List Items Change Item Value To change the value of a specific item, refer to the index number: Example Change the second item: Change a Range of Item Values To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values: Example Change the values \"banana\" and \"cherry\" with the values \"blackcurrant\" and \"watermelon\": If you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly: Example Change the second value by replacing it with two new values: Note: The length of the list will change when the number of items inserted does not match the number of items replaced. If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly: Example Change the second and third value by replacing it with one value: Insert Items To insert a new list item, without replacing any of the existing values, we can use the insert() method. insert() The insert() method inserts an item at the specified index: insert() Example Insert \"watermelon\" as the third item: Note: As a result of the example above, the list will now contain 4 items."
  },
  {
    "document": "Python - Add List Items Append Items To add an item to the end of the list, use the append() method: Example Using the append() method to append an item: append() Insert Items To insert a list item at a specified index, use the insert() method. insert() The insert() method inserts an item at the specified index: insert() Example Insert an item as the second position: Note: As a result of the examples above, the lists will now contain 4 items. Extend List To append elements from another list to the current list, use the extend() method. extend() Example Add the elements of tropical to thislist: tropical thislist The elements will be added to the end of the list. Add Any Iterable The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.). extend() Example Add elements of a tuple to a list:"
  },
  {
    "document": "Python - Loop Lists Loop Through a List You can loop through the list items by using a for loop: for Example Print all items in the list, one by one: Learn more about for loops in our Python For Loops Chapter. for Loop Through the Index Numbers You can also loop through the list items by referring to their index number. Use the range() and len() functions to create a suitable iterable. range() len() Example Print all items by referring to their index number: The iterable created in the example above is [0, 1, 2]. [0, 1, 2] Using a While Loop You can loop through the list items by using a while loop. while Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes. len() Remember to increase the index by 1 after each iteration. Example Print all items, using a while loop to go through all the index numbers while Learn more about while loops in our Python While Loops Chapter. while Looping Using List Comprehension List Comprehension offers the shortest syntax for looping through lists: Example A short hand for loop that will print all items in a list: for Learn more about list comprehension in the next chapter: List Comprehension."
  },
  {
    "document": "Python - List Comprehension List Comprehension List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list. Example: Based on a list of fruits, you want a new list, containing only the fruits with the letter \"a\" in the name. Without list comprehension you will have to write a for statement with a conditional test inside: for Example With list comprehension you can do all that with only one line of code: Example The Syntax The return value is a new list, leaving the old list unchanged. Condition The condition is like a filter that only accepts the items that evaluate to True. True Example Only accept items that are not \"apple\": The condition if x != \"apple\" will return True for all elements other than \"apple\", making the new list contain all fruits except \"apple\". True The condition is optional and can be omitted: Example With no if statement: if Iterable The iterable can be any iterable object, like a list, tuple, set etc. Example You can use the range() function to create an iterable: range() Same example, but with a condition: Example Accept only numbers lower than 5: Expression The expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list: Example Set the values in the new list to upper case: You can set the outcome to whatever you like: Example Set all values in the new list to 'hello': The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome: Example Return \"orange\" instead of \"banana\": The expression in the example above says: \"Return the item if it is not banana, if it is banana return orange\"."
  },
  {
    "document": "Python - Sort Lists Sort List Alphanumerically List objects have a sort() method that will sort the list alphanumerically, ascending, by default: sort() Example Sort the list alphabetically: Example Sort the list numerically: Sort Descending To sort descending, use the keyword argument reverse = True: reverse = True Example Sort the list descending: Example Sort the list descending: Customize Sort Function You can also customize your own function by using the keyword argument key = function. key = function The function will return a number that will be used to sort the list (the lowest number first): Example Sort the list based on how close the number is to 50: Case Insensitive Sort By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters: sort() Example Case sensitive sorting can give an unexpected result: Luckily we can use built-in functions as key functions when sorting a list. So if you want a case-insensitive sort function, use str.lower as a key function: Example Perform a case-insensitive sort of the list: Reverse Order What if you want to reverse the order of a list, regardless of the alphabet? The reverse() method reverses the current sorting order of the elements. reverse() Example Reverse the order of the list items:"
  },
  {
    "document": "Python - Copy Lists Copy a List You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2. list2 = list1 list2 list1 list1 list2 Use the copy() method You can use the built-in List method copy() to copy a list. copy() Example Make a copy of a list with the copy() method: copy() Use the list() method Another way to make a copy is to use the built-in method list(). list() Example Make a copy of a list with the list() method: list() Use the slice Operator You can also make a copy of a list by using the : (slice) operator. : Example Make a copy of a list with the : operator: :"
  },
  {
    "document": "Python - Join Lists Join Two Lists There are several ways to join, or concatenate, two or more lists in Python. One of the easiest ways are by using the + operator. + Example Join two list: Another way to join two lists is by appending all the items from list2 into list1, one by one: Example Append list2 into list1: Or you can use the extend() method, where the purpose is to add elements from one list to another list: extend() Example Use the extend() method to add list2 at the end of list1: extend()"
  },
  {
    "document": "Python - List Methods List Methods Python has a set of built-in methods that you can use on lists."
  },
  {
    "document": "Python List Exercises Test Yourself With Exercises Now you have learned a lot about lists, and how to use them in Python. Are you ready for a test? Exercises Test your Python List skills with exercises from all categories: Lists Access Lists Change Lists Add Lists Remove Lists Loop Lists List Comprehension Sort Lists Copy Lists Join Lists More Python Exercises: Python Exercises"
  },
  {
    "document": "Python Tuples Tuple Tuples are used to store multiple items in a single variable. Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage. A tuple is a collection which is ordered and unchangeable. Tuples are written with round brackets. Example Create a Tuple: Tuple Items Tuple items are ordered, unchangeable, and allow duplicate values. Tuple items are indexed, the first item has index [0], the second item has index [1] etc. [0] [1] Ordered When we say that tuples are ordered, it means that the items have a defined order, and that order will not change. Unchangeable Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created. Allow Duplicates Since tuples are indexed, they can have items with the same value: Example Tuples allow duplicate values: Tuple Length To determine how many items a tuple has, use the len() function: len() Example Print the number of items in the tuple: Create Tuple With One Item To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple. Example One item tuple, remember the comma: Tuple Items - Data Types Tuple items can be of any data type: Example String, int and boolean data types: A tuple can contain different data types: Example A tuple with strings, integers and boolean values: type() From Python's perspective, tuples are defined as objects with the data type 'tuple': Example What is the data type of a tuple? The tuple() Constructor It is also possible to use the tuple() constructor to make a tuple. Example Using the tuple() method to make a tuple: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python Tuples Tuple Tuples are used to store multiple items in a single variable. Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage. A tuple is a collection which is ordered and unchangeable. Tuples are written with round brackets. Example Create a Tuple: Tuple Items Tuple items are ordered, unchangeable, and allow duplicate values. Tuple items are indexed, the first item has index [0], the second item has index [1] etc. [0] [1] Ordered When we say that tuples are ordered, it means that the items have a defined order, and that order will not change. Unchangeable Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created. Allow Duplicates Since tuples are indexed, they can have items with the same value: Example Tuples allow duplicate values: Tuple Length To determine how many items a tuple has, use the len() function: len() Example Print the number of items in the tuple: Create Tuple With One Item To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple. Example One item tuple, remember the comma: Tuple Items - Data Types Tuple items can be of any data type: Example String, int and boolean data types: A tuple can contain different data types: Example A tuple with strings, integers and boolean values: type() From Python's perspective, tuples are defined as objects with the data type 'tuple': Example What is the data type of a tuple? The tuple() Constructor It is also possible to use the tuple() constructor to make a tuple. Example Using the tuple() method to make a tuple: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python - Access Tuple Items Access Tuple Items You can access tuple items by referring to the index number, inside square brackets: Example Print the second item in the tuple: Note: The first item has index 0. Negative Indexing Negative indexing means start from the end. -1 refers to the last item, -2 refers to the second last item etc. -1 -2 Example Print the last item of the tuple: Range of Indexes You can specify a range of indexes by specifying where to start and where to end the range. When specifying a range, the return value will be a new tuple with the specified items. Example Return the third, fourth, and fifth item: Note: The search will start at index 2 (included) and end at index 5 (not included). Remember that the first item has index 0. By leaving out the start value, the range will start at the first item: Example This example returns the items from the beginning to, but NOT included, \"kiwi\": By leaving out the end value, the range will go on to the end of the tuple: Example This example returns the items from \"cherry\" and to the end: Range of Negative Indexes Specify negative indexes if you want to start the search from the end of the tuple: Example This example returns the items from index -4 (included) to index -1 (excluded) Check if Item Exists To determine if a specified item is present in a tuple use the in keyword: in Example Check if \"apple\" is present in the tuple:"
  },
  {
    "document": "Python - Update Tuples Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created. But there are some workarounds. Change Tuple Values Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called. But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple. Example Convert the tuple into a list to be able to change it: Add Items Since tuples are immutable, they do not have a built-in append() method, but there are other ways to add items to a tuple. append() 1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple. Example Convert the tuple into a list, add \"orange\", and convert it back into a tuple: 2. Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple: Example Create a new tuple with the value \"orange\", and add that tuple: Note: When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple. Remove Items Note: You cannot remove items in a tuple. Tuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items: Example Convert the tuple into a list, remove \"apple\", and convert it back into a tuple: Or you can delete the tuple completely: Example The del keyword can delete the tuple completely: del"
  },
  {
    "document": "Python - Unpack Tuples Unpacking a Tuple When we create a tuple, we normally assign values to it. This is called \"packing\" a tuple: Example Packing a tuple: But, in Python, we are also allowed to extract the values back into variables. This is called \"unpacking\": Example Unpacking a tuple: Note: The number of variables must match the number of values in the tuple, if not, you must use an asterisk to collect the remaining values as a list. Using Asterisk* * If the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list: * Example Assign the rest of the values as a list called \"red\": If the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of values left matches the number of variables left. Example Add a list of values the \"tropic\" variable:"
  },
  {
    "document": "Python - Loop Tuples Loop Through a Tuple You can loop through the tuple items by using a for loop. for Example Iterate through the items and print the values: Learn more about for loops in our Python For Loops Chapter. for Loop Through the Index Numbers You can also loop through the tuple items by referring to their index number. Use the range() and len() functions to create a suitable iterable. range() len() Example Print all items by referring to their index number: Using a While Loop You can loop through the tuple items by using a while loop. while Use the len() function to determine the length of the tuple, then start at 0 and loop your way through the tuple items by referring to their indexes. len() Remember to increase the index by 1 after each iteration. Example Print all items, using a while loop to go through all the index numbers: while Learn more about while loops in our Python While Loops Chapter. while"
  },
  {
    "document": "Python - Join Tuples Join Two Tuples To join two or more tuples you can use the + operator: + Example Join two tuples: Multiply Tuples If you want to multiply the content of a tuple a given number of times, you can use the * operator: * Example Multiply the fruits tuple by 2:"
  },
  {
    "document": "Python - Tuple Methods Tuple Methods Python has two built-in methods that you can use on tuples."
  },
  {
    "document": "Python - Tuple Exercises Test Yourself With Exercises Now you have learned a lot about tuples, and how to use them in Python. Are you ready for a test? Exercises Test your Python Tuple skills with exercises from all categories: Tuples Access Tuples Update Tuples Unpack Tuples Loop Tuples Join Tuples More Python Exercises: Python Exercises"
  },
  {
    "document": "Python Sets Set Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage. A set is a collection which is unordered, unchangeable*, and unindexed. * Note: Set items are unchangeable, but you can remove items and add new items. Sets are written with curly brackets. Example Create a Set: Note: Sets are unordered, so you cannot be sure in which order the items will appear. Set Items Set items are unordered, unchangeable, and do not allow duplicate values. Unordered Unordered means that the items in a set do not have a defined order. Set items can appear in a different order every time you use them, and cannot be referred to by index or key. Unchangeable Set items are unchangeable, meaning that we cannot change the items after the set has been created. Once a set is created, you cannot change its items, but you can remove items and add new items. Duplicates Not Allowed Sets cannot have two items with the same value. Example Duplicate values will be ignored: Note: The values True and 1 are considered the same value in sets, and are treated as duplicates: True 1 Example True and 1 is considered the same value: True 1 Note: The values False and 0 are considered the same value in sets, and are treated as duplicates: False 0 Example False and 0 is considered the same value: False 0 Get the Length of a Set To determine how many items a set has, use the len() function. len() Example Get the number of items in a set: Set Items - Data Types Set items can be of any data type: Example String, int and boolean data types: A set can contain different data types: Example A set with strings, integers and boolean values: type() From Python's perspective, sets are defined as objects with the data type 'set': Example What is the data type of a set? The set() Constructor It is also possible to use the set() constructor to make a set. Example Using the set() constructor to make a set: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove items and add new items. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python Sets Set Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage. A set is a collection which is unordered, unchangeable*, and unindexed. * Note: Set items are unchangeable, but you can remove items and add new items. Sets are written with curly brackets. Example Create a Set: Note: Sets are unordered, so you cannot be sure in which order the items will appear. Set Items Set items are unordered, unchangeable, and do not allow duplicate values. Unordered Unordered means that the items in a set do not have a defined order. Set items can appear in a different order every time you use them, and cannot be referred to by index or key. Unchangeable Set items are unchangeable, meaning that we cannot change the items after the set has been created. Once a set is created, you cannot change its items, but you can remove items and add new items. Duplicates Not Allowed Sets cannot have two items with the same value. Example Duplicate values will be ignored: Note: The values True and 1 are considered the same value in sets, and are treated as duplicates: True 1 Example True and 1 is considered the same value: True 1 Note: The values False and 0 are considered the same value in sets, and are treated as duplicates: False 0 Example False and 0 is considered the same value: False 0 Get the Length of a Set To determine how many items a set has, use the len() function. len() Example Get the number of items in a set: Set Items - Data Types Set items can be of any data type: Example String, int and boolean data types: A set can contain different data types: Example A set with strings, integers and boolean values: type() From Python's perspective, sets are defined as objects with the data type 'set': Example What is the data type of a set? The set() Constructor It is also possible to use the set() constructor to make a set. Example Using the set() constructor to make a set: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove items and add new items. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python - Access Set Items Access Items You cannot access items in a set by referring to an index or a key. But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword. for in Example Loop through the set, and print the values: Example Check if \"banana\" is present in the set: Example Check if \"banana\" is NOT present in the set: Change Items Once a set is created, you cannot change its items, but you can add new items."
  },
  {
    "document": "Python - Add Set Items Add Items Once a set is created, you cannot change its items, but you can add new items. To add one item to a set use the add() method. add() Example Add an item to a set, using the add() method: add() Add Sets To add items from another set into the current set, use the update() method. update() Example Add elements from tropical into thisset: tropical thisset Add Any Iterable The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.). update() Example Add elements of a list to at set:"
  },
  {
    "document": "Python - Remove Set Items Remove Item To remove an item in a set, use the remove(), or the discard() method. remove() discard() Example Remove \"banana\" by using the remove() method: remove() Note: If the item to remove does not exist, remove() will raise an error. remove() Example Remove \"banana\" by using the discard() method: discard() Note: If the item to remove does not exist, discard() will NOT raise an error. discard() You can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed. pop() The return value of the pop() method is the removed item. pop() Example Remove a random item by using the pop() method: pop() Note: Sets are unordered, so when using the pop() method, you do not know which item that gets removed. pop() Example The clear() method empties the set: clear() Example The del keyword will delete the set completely: del"
  },
  {
    "document": "Python - Loop Sets Loop Items You can loop through the set items by using a for loop: for Example Loop through the set, and print the values:"
  },
  {
    "document": "Python - Join Sets Join Sets There are several ways to join two or more sets in Python. The union() and update() methods joins all items from both sets. union() update() The intersection() method keeps ONLY the duplicates. intersection() The difference() method keeps the items from the first set that are not in the other set(s). difference() The symmetric_difference() method keeps all items EXCEPT the duplicates. symmetric_difference() Union The union() method returns a new set with all items from both sets. union() Example Join set1 and set2 into a new set: You can use the | operator instead of the union() method, and you will get the same result. | union() Example Use | to join two sets: | Join Multiple Sets All the joining methods and operators can be used to join multiple sets. When using a method, just add more sets in the parentheses, separated by commas: Example Join multiple sets with the union() method: union() When using the | operator, separate the sets with more | operators: | | Example Use | to join two sets: | Join a Set and a Tuple The union() method allows you to join a set with other data types, like lists or tuples. union() The result will be a set. Example Join a set with a tuple: Note: The | operator only allows you to join sets with sets, and not with other data types like you can with the union() method. | union() Update The update() method inserts all items from one set into another. update() The update() changes the original set, and does not return a new set. update() Example The update() method inserts the items in set2 into set1: update() Note: Both union() and update() will exclude any duplicate items. union() update() Intersection Keep ONLY the duplicates The intersection() method will return a new set, that only contains the items that are present in both sets. intersection() Example Join set1 and set2, but keep only the duplicates: You can use the & operator instead of the intersection() method, and you will get the same result. & intersection() Example Use & to join two sets: & Note: The & operator only allows you to join sets with sets, and not with other data types like you can with the intersection() method. & intersection() The intersection_update() method will also keep ONLY the duplicates, but it will change the original set instead of returning a new set. intersection_update() Example Keep the items that exist in both set1, and set2: set1 set2 The values True and 1 are considered the same value. The same goes for False and 0. True 1 False 0 Example Join sets that contains the values True, False, 1, and 0, and see what is considered as duplicates: True False 1 0 Difference The difference() method will return a new set that will contain only the items from the first set that are not present in the other set."
  },
  {
    "document": "difference() Example Keep all items from set1 that are not in set2: You can use the - operator instead of the difference() method, and you will get the same result. - difference() Example Use - to join two sets: - Note: The - operator only allows you to join sets with sets, and not with other data types like you can with the difference() method. - difference() The difference_update() method will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set. difference_update() Example Use the difference_update() method to keep the items that are not present in both sets: difference_update() Symmetric Differences The symmetric_difference() method will keep only the elements that are NOT present in both sets. symmetric_difference() Example Keep the items that are not present in both sets: You can use the ^ operator instead of the symmetric_difference() method, and you will get the same result. ^ symmetric_difference() Example Use ^ to join two sets: ^ Note: The ^ operator only allows you to join sets with sets, and not with other data types like you can with the symmetric_difference() method. ^ symmetric_difference() The symmetric_difference_update() method will also keep all but the duplicates, but it will change the original set instead of returning a new set. symmetric_difference_update() Example Use the symmetric_difference_update() method to keep the items that are not present in both sets: symmetric_difference_update()"
  },
  {
    "document": "Python - Set Methods Set Methods Python has a set of built-in methods that you can use on sets. - -= & &= <= < >= > ^ ^= | |="
  },
  {
    "document": "Python - Set Exercises Test Yourself With Exercises Now you have learned a lot about sets, and how to use them in Python. Are you ready for a test? Exercises Test your Python Set skills with exercises from all categories: Sets Access Sets Add Set Items Remove Set Items Loop Sets Join Sets More Python Exercises: Python Exercises"
  },
  {
    "document": "Python Dictionaries Dictionary Dictionaries are used to store data values in key:value pairs. A dictionary is a collection which is ordered*, changeable and do not allow duplicates. As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. Dictionaries are written with curly brackets, and have keys and values: Example Create and print a dictionary: Dictionary Items Dictionary items are ordered, changeable, and do not allow duplicates. Dictionary items are presented in key:value pairs, and can be referred to by using the key name. Example Print the \"brand\" value of the dictionary: Ordered or Unordered? As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change. Unordered means that the items do not have a defined order, you cannot refer to an item by using an index. Changeable Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created. Duplicates Not Allowed Dictionaries cannot have two items with the same key: Example Duplicate values will overwrite existing values: Dictionary Length To determine how many items a dictionary has, use the len() function: len() Example Print the number of items in the dictionary: Dictionary Items - Data Types The values in dictionary items can be of any data type: Example String, int, boolean, and list data types: type() From Python's perspective, dictionaries are defined as objects with the data type 'dict': Example Print the data type of a dictionary: The dict() Constructor It is also possible to use the dict() constructor to make a dictionary. Example Using the dict() method to make a dictionary: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python Dictionaries Dictionary Dictionaries are used to store data values in key:value pairs. A dictionary is a collection which is ordered*, changeable and do not allow duplicates. As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. Dictionaries are written with curly brackets, and have keys and values: Example Create and print a dictionary: Dictionary Items Dictionary items are ordered, changeable, and do not allow duplicates. Dictionary items are presented in key:value pairs, and can be referred to by using the key name. Example Print the \"brand\" value of the dictionary: Ordered or Unordered? As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change. Unordered means that the items do not have a defined order, you cannot refer to an item by using an index. Changeable Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created. Duplicates Not Allowed Dictionaries cannot have two items with the same key: Example Duplicate values will overwrite existing values: Dictionary Length To determine how many items a dictionary has, use the len() function: len() Example Print the number of items in the dictionary: Dictionary Items - Data Types The values in dictionary items can be of any data type: Example String, int, boolean, and list data types: type() From Python's perspective, dictionaries are defined as objects with the data type 'dict': Example Print the data type of a dictionary: The dict() Constructor It is also possible to use the dict() constructor to make a dictionary. Example Using the dict() method to make a dictionary: Python Collections (Arrays) There are four collection data types in the Python programming language: *Set items are unchangeable, but you can remove and/or add items whenever you like. **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered. When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
  },
  {
    "document": "Python - Access Dictionary Items Accessing Items You can access the items of a dictionary by referring to its key name, inside square brackets: Example Get the value of the \"model\" key: There is also a method called get() that will give you the same result: get() Example Get the value of the \"model\" key: Get Keys The keys() method will return a list of all the keys in the dictionary. keys() Example Get a list of the keys: The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list. Example Add a new item to the original dictionary, and see that the keys list gets updated as well: Get Values The values() method will return a list of all the values in the dictionary. values() Example Get a list of the values: The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list. Example Make a change in the original dictionary, and see that the values list gets updated as well: Example Add a new item to the original dictionary, and see that the values list gets updated as well: Get Items The items() method will return each item in a dictionary, as tuples in a list. items() Example Get a list of the key:value pairs The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list. Example Make a change in the original dictionary, and see that the items list gets updated as well: Example Add a new item to the original dictionary, and see that the items list gets updated as well: Check if Key Exists To determine if a specified key is present in a dictionary use the in keyword: in Example Check if \"model\" is present in the dictionary:"
  },
  {
    "document": "Python - Change Dictionary Items Change Values You can change the value of a specific item by referring to its key name: Example Change the \"year\" to 2018: Update Dictionary The update() method will update the dictionary with the items from the given argument. update() The argument must be a dictionary, or an iterable object with key:value pairs. Example Update the \"year\" of the car by using the update() method: update()"
  },
  {
    "document": "Python - Add Dictionary Items Adding Items Adding an item to the dictionary is done by using a new index key and assigning a value to it: Example Update Dictionary The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added. update() The argument must be a dictionary, or an iterable object with key:value pairs. Example Add a color item to the dictionary by using the update() method: update()"
  },
  {
    "document": "Python - Remove Dictionary Items Removing Items There are several methods to remove items from a dictionary: Example The pop() method removes the item with the specified key name: pop() Example The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead): popitem() Example The del keyword removes the item with the specified key name: del Example The del keyword can also delete the dictionary completely: del Example The clear() method empties the dictionary: clear()"
  },
  {
    "document": "Python - Loop Dictionaries Loop Through a Dictionary You can loop through a dictionary by using a for loop. for When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well. Example Print all key names in the dictionary, one by one: Example Print all values in the dictionary, one by one: Example You can also use the values() method to return values of a dictionary: values() Example You can use the keys() method to return the keys of a dictionary: keys() Example Loop through both keys and values, by using the items() method: items()"
  },
  {
    "document": "Python - Copy Dictionaries Copy a Dictionary You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2. dict2 = dict1 dict2 dict1 dict1 dict2 There are ways to make a copy, one way is to use the built-in Dictionary method copy(). copy() Example Make a copy of a dictionary with the copy() method: copy() Another way to make a copy is to use the built-in function dict(). dict() Example Make a copy of a dictionary with the dict() function: dict()"
  },
  {
    "document": "Python - Nested Dictionaries Nested Dictionaries A dictionary can contain dictionaries, this is called nested dictionaries. Example Create a dictionary that contain three dictionaries: Or, if you want to add three dictionaries into a new dictionary: Example Create three dictionaries, then create one dictionary that will contain the other three dictionaries: Access Items in Nested Dictionaries To access items from a nested dictionary, you use the name of the dictionaries, starting with the outer dictionary: Example Print the name of child 2: Loop Through Nested Dictionaries You can loop through a dictionary by using the items() method like this: items() Example Loop through the keys and values of all nested dictionaries:"
  },
  {
    "document": "Python Dictionary Methods Dictionary Methods Python has a set of built-in methods that you can use on dictionaries."
  },
  {
    "document": "Python Dictionary Exercises Test Yourself With Exercises Now you have learned a lot about dictionaries, and how to use them in Python. Are you ready for a test? Exercises Test your Python Dictionary skills with exercises from all categories: Dictionaries Access Dictionaries Change Dictionaries Add Dictionary Items Remove Dictionary Items Loop Dictionaries Copy Dictionaries Nested Dictionaries More Python Exercises: Python Exercises"
  },
  {
    "document": "Python If ... Else Python Conditions and If statements Python supports the usual logical conditions from mathematics: These conditions can be used in several ways, most commonly in \"if statements\" and loops. An \"if statement\" is written by using the if keyword. Example If statement: In this example we use two variables, a and b, which are used as part of the if statement to test whether b is greater than a. As a is 33, and b is 200, we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\". Indentation Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose. Example If statement, without indentation (will raise an error): a = 33 b = 200 if b > a: print(\"b is greater than a\") # you will get an error Try it Yourself Â» Elif The elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\". Example a = 33 b = 33 if b > a: print(\"b is greater than a\") elif a == b: print(\"a and b are equal\") Try it Yourself Â» In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\". Else The else keyword catches anything which isn't caught by the preceding conditions. Example a = 200 b = 33 if b > a: print(\"b is greater than a\") elif a == b: print(\"a and b are equal\") else: print(\"a is greater than b\") Try it Yourself Â» In this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\". You can also have an else without the elif: Example a = 200 b = 33 if b > a: print(\"b is greater than a\") else: print(\"b is not greater than a\") Try it Yourself Â» Short Hand If If you have only one statement to execute, you can put it on the same line as the if statement. Example One line if statement: if a > b: print(\"a is greater than b\") Try it Yourself Â» Short Hand If ... Else If you have only one statement to execute, one for if, and one for else, you can put it all on the same line: Example One line if else statement: a = 2b = 330print(\"A\") if a > b else print(\"B\") Try it Yourself Â» This technique is known as Ternary Operators, or Conditional Expressions."
  },
  {
    "document": "You can also have multiple else statements on the same line: Example One line if else statement, with 3 conditions: a = 330b = 330print(\"A\") if a > b else print(\"=\") if a == b else print(\"B\") Try it Yourself Â» And The and keyword is a logical operator, and is used to combine conditional statements: Example Test if a is greater than b, AND if c is greater than a: a = 200b = 33c = 500if a > b and c > a: print(\"Both conditions are True\") Try it Yourself Â» Or The or keyword is a logical operator, and is used to combine conditional statements: Example Test if a is greater than b, OR if a is greater than c: a = 200b = 33c = 500if a > b or a > c: print(\"At least one of the conditions is True\") Try it Yourself Â» Not The not keyword is a logical operator, and is used to reverse the result of the conditional statement: Example Test if a is NOT greater than b: a = 33b = 200if not a > b: print(\"a is NOT greater than b\") Try it Yourself Â» Nested If You can have if statements inside if statements, this is called nested if statements. Example x = 41if x > 10: print(\"Above ten,\") if x > 20: print(\"and also above 20!\") else: print(\"but not above 20.\") Try it Yourself Â» The pass Statement if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error. Example a = 33b = 200if b > a: pass Try it Yourself Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up Example If statement, without indentation (will raise an error): Elif The elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\". Example In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\". Else The else keyword catches anything which isn't caught by the preceding conditions. Example In this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\". You can also have an else without the elif: else elif Example Short Hand If If you have only one statement to execute, you can put it on the same line as the if statement. Example One line if statement: Short Hand If ... Else If you have only one statement to execute, one for if, and one for else, you can put it all on the same line: Example One line if else statement: This technique is known as Ternary Operators, or Conditional Expressions."
  },
  {
    "document": "You can also have multiple else statements on the same line: Example One line if else statement, with 3 conditions: And The and keyword is a logical operator, and is used to combine conditional statements: Example Test if a is greater than b, AND if c is greater than a: a b c a Or The or keyword is a logical operator, and is used to combine conditional statements: or Example Test if a is greater than b, OR if a is greater than c: a b a c Not The not keyword is a logical operator, and is used to reverse the result of the conditional statement: not Example Test if a is NOT greater than b: a b Nested If You can have if statements inside if statements, this is called nested if statements. if if if Example The pass Statement if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error. if if pass Example"
  },
  {
    "document": "Python Match The match statement is used to perform different actions based on different conditions. match The Python Match Statement Instead of writing many if..else statements, you can use the match statement. if..else match The match statement selects one of many code blocks to be executed. match Syntax This is how it works: match case The example below uses the weekday number to print the weekday name: Example Default Value Use the underscore character _ as the last case value if you want a code block to execute when there are not other matches: Example The value _ will always match, so it is important to place it as the last case to make it beahave as a default case. Combine Values Use the pipe character | as an or operator in the case evaluation to check for more than one value match in one case: Example If Statements as Guards You can add if statements in the case evaluation as an extra condition-check: if Example"
  },
  {
    "document": "Python While Loops Python Loops Python has two primitive loop commands: The while Loop With the while loop we can execute a set of statements as long as a condition is true. Example Print i as long as i is less than 6: Note: remember to increment i, or else the loop will continue forever. The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1. The break Statement With the break statement we can stop the loop even if the while condition is true: Example Exit the loop when i is 3: The continue Statement With the continue statement we can stop the current iteration, and continue with the next: Example Continue to the next iteration if i is 3: The else Statement With the else statement we can run a block of code once when the condition no longer is true: Example Print a message once the condition is false:"
  },
  {
    "document": "Python For Loops Python For Loops A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string). This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. Example Print each fruit in a fruit list: The for loop does not require an indexing variable to set beforehand. Looping Through a String Even strings are iterable objects, they contain a sequence of characters: Example Loop through the letters in the word \"banana\": The break Statement With the break statement we can stop the loop before it has looped through all the items: Example Exit the loop when x is \"banana\": x Example Exit the loop when x is \"banana\", but this time the break comes before the print: x The continue Statement With the continue statement we can stop the current iteration of the loop, and continue with the next: Example Do not print banana: The range() Function The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number. Example Using the range() function: Note that range(6) is not the values of 0 to 6, but the values 0 to 5. The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6): Example Using the start parameter: The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3): Example Increment the sequence with 3 (default is 1): Else in For Loop The else keyword in a for loop specifies a block of code to be executed when the loop is finished: else for Example Print all numbers from 0 to 5, and print a message when the loop has ended: Note: The else block will NOT be executed if the loop is stopped by a break statement. else break Example Break the loop when x is 3, and see what happens with the else block: x else Nested Loops A nested loop is a loop inside a loop. The \"inner loop\" will be executed one time for each iteration of the \"outer loop\": Example Print each adjective for every fruit: The pass Statement for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error. for for pass Example"
  },
  {
    "document": "Python Functions A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result. Creating a Function In Python a function is defined using the def keyword: Example Calling a Function To call a function, use the function name followed by parenthesis: Example Arguments Information can be passed into functions as arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name: Example Arguments are often shortened to args in Python documentations. Parameters or Arguments? The terms parameter and argument can be used for the same thing: information that are passed into a function. From a function's perspective: A parameter is the variable listed inside the parentheses in the function definition. An argument is the value that is sent to the function when it is called. Number of Arguments By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less. Example This function expects 2 arguments, and gets 2 arguments: Example This function expects 2 arguments, but gets only 1: Arbitrary Arguments, *args If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition. * This way the function will receive a tuple of arguments, and can access the items accordingly: Example If the number of arguments is unknown, add a * before the parameter name: * Arbitrary Arguments are often shortened to *args in Python documentations. Keyword Arguments You can also send arguments with the key = value syntax. This way the order of the arguments does not matter. Example The phrase Keyword Arguments are often shortened to kwargs in Python documentations. Arbitrary Keyword Arguments, **kwargs If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition. ** This way the function will receive a dictionary of arguments, and can access the items accordingly: Example If the number of keyword arguments is unknown, add a double ** before the parameter name: ** Arbitrary Kword Arguments are often shortened to **kwargs in Python documentations. Default Parameter Value The following example shows how to use a default parameter value. If we call the function without argument, it uses the default value: Example Passing a List as an Argument You can send any data types of argument to a function (string, number, list, dictionary etc. ), and it will be treated as the same data type inside the function."
  },
  {
    "document": "E.g. if you send a List as an argument, it will still be a List when it reaches the function: Example Return Values To let a function return a value, use the return statement: return Example The pass Statement function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error. function function pass Example Positional-Only Arguments You can specify that a function can have ONLY positional arguments, or ONLY keyword arguments. To specify that a function can have only positional arguments, add , / after the arguments: , / Example Without the , / you are actually allowed to use keyword arguments even if the function expects positional arguments: , / Example But when adding the , / you will get an error if you try to send a keyword argument: , / Example Keyword-Only Arguments To specify that a function can have only keyword arguments, add *, before the arguments: *, Example Without the *, you are allowed to use positionale arguments even if the function expects keyword arguments: *, Example But with the *, you will get an error if you try to send a positional argument: *, Example Combine Positional-Only and Keyword-Only You can combine the two argument types in the same function. Any argument before the / , are positional-only, and any argument after the *, are keyword-only. / , *, Example Recursion Python also accepts function recursion, which means a defined function can call itself. Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result. The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming. In this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0). To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it. Example Recursion Example"
  },
  {
    "document": "Python Lambda A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression. Syntax The expression is executed and the result is returned: Example Add 10 to argument a, and return the result: a Lambda functions can take any number of arguments: Example Multiply argument a with argument b and return the result: a b Example Summarize argument a, b, and c and return the result: a b c Why Use Lambda Functions? The power of lambda is better shown when you use them as an anonymous function inside another function. Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number: Use that function definition to make a function that always doubles the number you send in: Example Or, use the same function definition to make a function that always triples the number you send in: Example Or, use the same function definition to make both functions, in the same program: Example Use lambda functions when an anonymous function is required for a short period of time."
  },
  {
    "document": "Python Arrays Note: Python does not have built-in support for Arrays, but Python Lists can be used instead. Arrays Note: This page shows you how to use LISTS as ARRAYS, however, to work with arrays in Python you will have to import a library, like the NumPy library. Arrays are used to store multiple values in one single variable: Example Create an array containing car names: What is an Array? An array is a special variable, which can hold more than one value at a time. If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this: However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300? The solution is an array! An array can hold many values under a single name, and you can access the values by referring to an index number. Access the Elements of an Array You refer to an array element by referring to the index number. Example Get the value of the first array item: Example Modify the value of the first array item: The Length of an Array Use the len() method to return the length of an array (the number of elements in an array). len() Example Return the number of elements in the cars array: cars Note: The length of an array is always one more than the highest array index. Looping Array Elements You can use the for in loop to loop through all the elements of an array. for in Example Print each item in the cars array: cars Adding Array Elements You can use the append() method to add an element to an array. append() Example Add one more element to the cars array: cars Removing Array Elements You can use the pop() method to remove an element from the array. pop() Example Delete the second element of the cars array: cars You can also use the remove() method to remove an element from the array. remove() Example Delete the element that has the value \"Volvo\": Note: The list's remove() method only removes the first occurrence of the specified value. remove() Array Methods Python has a set of built-in methods that you can use on lists/arrays. Note: Python does not have built-in support for Arrays, but Python Lists can be used instead."
  },
  {
    "document": "Python Classes and Objects Python Classes/Objects Python is an object oriented programming language. Almost everything in Python is an object, with its properties and methods. A Class is like an object constructor, or a \"blueprint\" for creating objects. Create a Class To create a class, use the keyword class: class Example Create a class named MyClass, with a property named x: Create Object Now we can use the class named MyClass to create objects: Example Create an object named p1, and print the value of x: The __init__() Function The examples above are classes and objects in their simplest form, and are not really useful in real life applications. To understand the meaning of classes we have to understand the built-in __init__() function. __init__() All classes have a function called __init__(), which is always executed when the class is being initiated. __init__() Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created: __init__() Example Create a class named Person, use the __init__() function to assign values for name and age: __init__() Note: The __init__() function is called automatically every time the class is being used to create a new object. __init__() The __str__() Function The __str__() function controls what should be returned when the class object is represented as a string. __str__() If the __str__() function is not set, the string representation of the object is returned: __str__() Example The string representation of an object WITHOUT the __str__() function: __str__() Example The string representation of an object WITH the __str__() function: __str__() Object Methods Objects can also contain methods. Methods in objects are functions that belong to the object. Let us create a method in the Person class: Example Insert a function that prints a greeting, and execute it on the p1 object: Note: The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class. self The self Parameter The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class. self It does not have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class: self Example Use the words mysillyobject and abc instead of self: Modify Object Properties You can modify properties on objects like this: Example Set the age of p1 to 40: Delete Object Properties You can delete properties on objects by using the del keyword: del Example Delete the age property from the p1 object: Delete Objects You can delete objects by using the del keyword: del Example Delete the p1 object: The pass Statement class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error. class class pass Example"
  },
  {
    "document": "Python Inheritance Python Inheritance Inheritance allows us to define a class that inherits all the methods and properties from another class. Parent class is the class being inherited from, also called base class. Child class is the class that inherits from another class, also called derived class. Create a Parent Class Any class can be a parent class, so the syntax is the same as creating any other class: Example Create a class named Person, with firstname and lastname properties, and a printname method: Person firstname lastname printname Create a Child Class To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class: Example Create a class named Student, which will inherit the properties and methods from the Person class: Student Person Note: Use the pass keyword when you do not want to add any other properties or methods to the class. pass Now the Student class has the same properties and methods as the Person class. Example Use the Student class to create an object, and then execute the printname method: Student printname Add the __init__() Function So far we have created a child class that inherits the properties and methods from its parent. We want to add the __init__() function to the child class (instead of the pass keyword). __init__() pass Note: The __init__() function is called automatically every time the class is being used to create a new object. __init__() Example Add the __init__() function to the Student class: __init__() Student When you add the __init__() function, the child class will no longer inherit the parent's __init__() function. __init__() __init__() Note: The child's __init__() function overrides the inheritance of the parent's __init__() function. __init__() __init__() To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function: __init__() __init__() Example Now we have successfully added the __init__() function, and kept the inheritance of the parent class, and we are ready to add functionality in the __init__() function. __init__() __init__() Use the super() Function Python also has a super() function that will make the child class inherit all the methods and properties from its parent: super() Example By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent. super() Add Properties Example Add a property called graduationyear to the Student class: graduationyear Student In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the __init__() function: 2019 Student __init__() Example Add a year parameter, and pass the correct year when creating objects: year Add Methods Example Add a method called welcome to the Student class: welcome Student If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden."
  },
  {
    "document": "Python Iterators Python Iterators An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__(). __iter__() __next__() Iterator vs Iterable Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from. All these objects have a iter() method which is used to get an iterator: iter() Example Return an iterator from a tuple, and print each value: Even strings are iterable objects, and can return an iterator: Example Strings are also iterable objects, containing a sequence of characters: Looping Through an Iterator We can also use a for loop to iterate through an iterable object: for Example Iterate the values of a tuple: Example Iterate the characters of a string: The for loop actually creates an iterator object and executes the next() method for each loop. for next() Create an Iterator To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object. __iter__() __next__() As you have learned in the Python Classes/Objects chapter, all classes have a function called __init__(), which allows you to do some initializing when the object is being created. __init__() The __iter__() method acts similar, you can do operations (initializing etc. ), but must always return the iterator object itself. __iter__() The __next__() method also allows you to do operations, and must return the next item in the sequence. __next__() Example Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc. ): StopIteration The example above would continue forever if you had enough next() statements, or if it was used in a for loop. for To prevent the iteration from going on forever, we can use the StopIteration statement. StopIteration In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times: __next__() Example Stop after 20 iterations:"
  },
  {
    "document": "Python Polymorphism The word \"polymorphism\" means \"many forms\", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes. Function Polymorphism An example of a Python function that can be used on different objects is the len() function. len() String For strings len() returns the number of characters: len() Example Tuple For tuples len() returns the number of items in the tuple: len() Example Dictionary For dictionaries len() returns the number of key/value pairs in the dictionary: len() Example Class Polymorphism Polymorphism is often used in Class methods, where we can have multiple classes with the same method name. For example, say we have three classes: Car, Boat, and Plane, and they all have a method called move(): Car Boat Plane move() Example Different classes with the same method: Look at the for loop at the end. Because of polymorphism we can execute the same method for all three classes. Inheritance Class Polymorphism What about classes with child classes with the same name? Can we use polymorphism there? Yes. If we use the example above and make a parent class called Vehicle, and make Car, Boat, Plane child classes of Vehicle, the child classes inherits the Vehicle methods, but can override them: Vehicle Car Boat Plane Vehicle Vehicle Example Create a class called Vehicle and make Car, Boat, Plane child classes of Vehicle: Vehicle Car Boat Plane Vehicle Child classes inherits the properties and methods from the parent class. In the example above you can see that the Car class is empty, but it inherits brand, model, and move() from Vehicle. Car brand model move() Vehicle The Boat and Plane classes also inherit brand, model, and move() from Vehicle, but they both override the move() method. Boat Plane brand model move() Vehicle move() Because of polymorphism we can execute the same method for all classes."
  },
  {
    "document": "Python Scope A variable is only available from inside the region it is created. This is called scope. Local Scope A variable created inside a function belongs to the local scope of that function, and can only be used inside that function. Example A variable created inside a function is available inside that function: Function Inside Function As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function: x Example The local variable can be accessed from a function within the function: Global Scope A variable created in the main body of the Python code is a global variable and belongs to the global scope. Global variables are available from within any scope, global and local. Example A variable created outside of a function is global and can be used by anyone: Naming Variables If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, one available in the global scope (outside the function) and one available in the local scope (inside the function): Example The function will print the local x, and then the code will print the global x: x x Global Keyword If you need to create a global variable, but are stuck in the local scope, you can use the global keyword. global The global keyword makes the variable global. global Example If you use the global keyword, the variable belongs to the global scope: global Also, use the global keyword if you want to make a change to a global variable inside a function. global Example To change the value of a global variable inside a function, refer to the variable by using the global keyword: global Nonlocal Keyword The nonlocal keyword is used to work with variables inside nested functions. nonlocal The nonlocal keyword makes the variable belong to the outer function. nonlocal Example If you use the nonlocal keyword, the variable will belong to the outer function: nonlocal"
  },
  {
    "document": "Python Modules What is a Module? Consider a module to be the same as a code library. A file containing a set of functions you want to include in your application. Create a Module To create a module just save the code you want in a file with the file extension .py: .py Example Save this code in a file named mymodule.py mymodule.py Use a Module Now we can use the module we just created, by using the import statement: import Example Import the module named mymodule, and call the greeting function: Note: When using a function from a module, use the syntax: module_name.function_name. Variables in Module The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc): Example Save this code in the file mymodule.py mymodule.py Example Import the module named mymodule, and access the person1 dictionary: Naming a Module You can name the module file whatever you like, but it must have the file extension .py .py Re-naming a Module You can create an alias when you import a module, by using the as keyword: as Example Create an alias for mymodule called mx: mymodule mx Built-in Modules There are several built-in modules in Python, which you can import whenever you like. Example Import and use the platform module: platform Using the dir() Function There is a built-in function to list all the function names (or variable names) in a module. The dir() function: dir() Example List all the defined names belonging to the platform module: Note: The dir() function can be used on all modules, also the ones you create yourself. Import From Module You can choose to import only parts from a module, by using the from keyword. from Example The module named mymodule has one function and one dictionary: mymodule Example Import only the person1 dictionary from the module: Note: When importing using the from keyword, do not use the module name when referring to elements in the module. Example: person1[\"age\"], not mymodule.person1[\"age\"] from person1[\"age\"] mymodule.person1[\"age\"]"
  },
  {
    "document": "Python Datetime Python Dates A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects. datetime Example Import the datetime module and display the current date: Date Output When we execute the code from the example above the result will be:  The date contains year, month, day, hour, minute, second, and microsecond. The datetime module has many methods to return information about the date object. datetime Here are a few examples, you will learn more about them later in this chapter: Example Return the year and name of weekday: Creating Date Objects To create a date, we can use the datetime() class (constructor) of the datetime module. datetime() datetime The datetime() class requires three parameters to create a date: year, month, day. datetime() Example Create a date object: The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone). datetime() 0 None The strftime() Method The datetime object has a method for formatting date objects into readable strings. datetime The method is called strftime(), and takes one parameter, format, to specify the format of the returned string: strftime() format Example Display the name of the month: A reference of all the legal format codes:"
  },
  {
    "document": "Python Math Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers. Built-in Math Functions The min() and max() functions can be used to find the lowest or highest value in an iterable: min() max() Example The abs() function returns the absolute (positive) value of the specified number: abs() Example The pow(x, y) function returns the value of x to the power of y (xy). pow(x, y) Example Return the value of 4 to the power of 3 (same as 4 * 4 * 4): The Math Module Python has also a built-in module called math, which extends the list of mathematical functions. math To use it, you must import the math module: math When you have imported the math module, you can start using methods and constants of the module. math The math.sqrt() method for example, returns the square root of a number: math.sqrt() Example The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result: math.ceil() math.floor() Example The math.pi constant, returns the value of PI (3.14...): math.pi Example Complete Math Module Reference In our Math Module Reference you will find a complete reference of all methods and constants that belongs to the Math module."
  },
  {
    "document": "Python JSON JSON is a syntax for storing and exchanging data. JSON is text, written with JavaScript object notation. JSON in Python Python has a built-in package called json, which can be used to work with JSON data. json Example Import the json module: Parse JSON - Convert from JSON to Python If you have a JSON string, you can parse it by using the json.loads() method. json.loads() The result will be a Python dictionary. Example Convert from JSON to Python: Convert from Python to JSON If you have a Python object, you can convert it into a JSON string by using the json.dumps() method. json.dumps() Example Convert from Python to JSON: You can convert Python objects of the following types, into JSON strings: Example Convert Python objects into JSON strings, and print the values: When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent: Example Convert a Python object containing all the legal data types: Format the Result The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks. The json.dumps() method has parameters to make it easier to read the result: json.dumps() Example Use the indent parameter to define the numbers of indents: indent You can also define the separators, default value is (\", \", \": \"), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values: Example Use the separators parameter to change the default separator: separators Order the Result The json.dumps() method has parameters to order the keys in the result: json.dumps() Example Use the sort_keys parameter to specify if the result should be sorted or not: sort_keys"
  },
  {
    "document": "Python RegEx A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern. RegEx can be used to check if a string contains the specified search pattern. RegEx Module Python has a built-in package called re, which can be used to work with Regular Expressions. re Import the re module: re RegEx in Python When you have imported the re module, you can start using regular expressions: re Example Search the string to see if it starts with \"The\" and ends with \"Spain\": RegEx Functions The re module offers a set of functions that allows us to search a string for a match: re Metacharacters Metacharacters are characters with a special meaning: Flags You can add flags to the pattern when using regular expressions. Special Sequences A special sequence is a \\ followed by one of the characters in the list below, and has a special meaning: \\ Sets A set is a set of characters inside a pair of square brackets [] with a special meaning: [] a r n a n a r n 0 1 2 3 0 9 00 59 a z + * . | () $ {} [+] + The findall() Function The findall() function returns a list containing all matches. findall() Example Print a list of all matches: The list contains the matches in the order they are found. If no matches are found, an empty list is returned: Example Return an empty list if no match was found: The search() Function The search() function searches the string for a match, and returns a Match object if there is a match. search() If there is more than one match, only the first occurrence of the match will be returned: Example Search for the first white-space character in the string: If no matches are found, the value None is returned: None Example Make a search that returns no match: The split() Function The split() function returns a list where the string has been split at each match: split() Example Split at each white-space character: You can control the number of occurrences by specifying the maxsplit parameter: maxsplit Example Split the string only at the first occurrence: The sub() Function The sub() function replaces the matches with the text of your choice: sub() Example Replace every white-space character with the number 9: You can control the number of replacements by specifying the count parameter: count Example Replace the first 2 occurrences: Match Object A Match Object is an object containing information about the search and the result. Note: If there is no match, the value None will be returned, instead of the Match Object. None Example Do a search that will return a Match Object: The Match object has properties and methods used to retrieve information about the search, and the result: .span() returns a tuple containing the start-, and end positions of the match."
  },
  {
    "document": ".string returns the string passed into the function .group() returns the part of the string where there was a match .span() .string .group() Example Print the position (start- and end-position) of the first match occurrence. The regular expression looks for any words that starts with an upper case \"S\": Example Print the string passed into the function: Example Print the part of the string where there was a match. The regular expression looks for any words that starts with an upper case \"S\": Note: If there is no match, the value None will be returned, instead of the Match Object. None"
  },
  {
    "document": "Python PIP What is PIP? PIP is a package manager for Python packages, or modules if you like. Note: If you have Python version 3.4 or later, PIP is included by default. What is a Package? A package contains all the files you need for a module. Modules are Python code libraries you can include in your project. Check if PIP is Installed Navigate your command line to the location of Python's script directory, and type the following: Example Check PIP version: Install PIP If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/ Download a Package Downloading a package is very easy. Open the command line interface and tell PIP to download the package you want. Navigate your command line to the location of Python's script directory, and type the following: Example Download a package named \"camelcase\": Now you have downloaded and installed your first package! Using a Package Once the package is installed, it is ready to use. Import the \"camelcase\" package into your project. Example Import and use \"camelcase\": Find Packages Find more packages at https://pypi.org/. Remove a Package Use the uninstall command to remove a package: uninstall Example Uninstall the package named \"camelcase\": The PIP Package Manager will ask you to confirm that you want to remove the camelcase package: Press y and the package will be removed. y List Packages Use the list command to list all the packages installed on your system: list Example List installed packages: Result:"
  },
  {
    "document": "Python Try Except The try block lets you test a block of code for errors. try The except block lets you handle the error. except The else block lets you execute code when there is no error. else The finally block lets you execute code, regardless of the result of the try- and except blocks. finally Exception Handling When an error occurs, or exception as we call it, Python will normally stop and generate an error message. These exceptions can be handled using the try statement: try Example The try block will generate an exception, because x is not defined: try x Since the try block raises an error, the except block will be executed. Without the try block, the program will crash and raise an error: Example This statement will raise an error, because x is not defined: x Many Exceptions You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error: Example Print one message if the try block raises a NameError and another for other errors: NameError See more Error types in our Python Built-in Exceptions Reference. Else You can use the else keyword to define a block of code to be executed if no errors were raised: else Example In this example, the try block does not generate any error: try Finally The finally block, if specified, will be executed regardless if the try block raises an error or not. finally Example This can be useful to close objects and clean up resources: Example Try to open and write to a file that is not writable: The program can continue, without leaving the file object open. Raise an exception As a Python developer you can choose to throw an exception if a condition occurs. To throw (or raise) an exception, use the raise keyword. raise Example Raise an error and stop the program if x is lower than 0: The raise keyword is used to raise an exception. raise You can define what kind of error to raise, and the text to print to the user. Example Raise a TypeError if x is not an integer:"
  },
  {
    "document": "Python User Input User Input Python allows for user input. That means we are able to ask the user for input. The method is a bit different in Python 3.6 than Python 2.7. Python 3.6 uses the input() method. input() Python 2.7 uses the raw_input() method. raw_input() The following example asks for the username, and when you entered the username, it gets printed on the screen: Python 3.6 Python 2.7 Python stops executing when it comes to the input() function, and continues when the user has given some input. input()"
  },
  {
    "document": "Python String Formatting F-String was introduced in Python 3.6, and is now the preferred way of formatting strings. Before Python 3.6 we had to use the format() method. format() F-Strings F-string allows you to format selected parts of a string. To specify a string as an f-string, simply put an f in front of the string literal, like this: f Example Create an f-string: Placeholders and Modifiers To format values in an f-string, add placeholders {}, a placeholder can contain variables, operations, functions, and modifiers to format the value. {} Example Add a placeholder for the price variable: price A placeholder can also include a modifier to format the value. A modifier is included by adding a colon : followed by a legal formatting type, like .2f which means fixed point number with 2 decimals: : .2f Example Display the price with 2 decimals: You can also format a value directly without keeping it in a variable: Example Display the value 95 with 2 decimals: 95 Perform Operations in F-Strings You can perform Python operations inside the placeholders. You can do math operations: Example Perform a math operation in the placeholder, and return the result: You can perform math operations on variables: Example Add taxes before displaying the price: You can perform if...else statements inside the placeholders: if...else Example Return \"Expensive\" if the price is over 50, otherwise return \"Cheap\": Execute Functions in F-Strings You can execute functions inside the placeholder: Example Use the string method upper()to convert a value into upper case letters: upper() The function does not have to be a built-in Python method, you can create your own functions and use them: Example Create a function that converts feet into meters: More Modifiers At the beginning of this chapter we explained how to use the .2f modifier to format a number into a fixed point number with 2 decimals. .2f There are several other modifiers that can be used to format values: Example Use a comma as a thousand separator: Here is a list of all the formatting types. :< :> :^ := :+ :- : :, :_ :b :c :d :e :E :f :F inf nan INF NAN :g :G :o :x :X :n :% String format() Before Python 3.6 we used the format() method to format strings. format() The format() method can still be used, but f-strings are faster and the preferred way to format strings. format() The next examples in this page demonstrates how to format strings with the format() method. format() The format() method also uses curly brackets as placeholders {}, but the syntax is slightly different: format() {} Example Add a placeholder where you want to display the price: You can add parameters inside the curly brackets to specify how to convert the value: Example Format the price to be displayed as a number with two decimals: Check out all formatting types in our String format() Reference."
  },
  {
    "document": "Multiple Values If you want to use more values, just add more values to the format() method: And add more placeholders: Example Index Numbers You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders: {0} Example Also, if you want to refer to the same value more than once, use the index number: Example Named Indexes You can also use named indexes by entering a name inside the curly brackets {carname}, but then you must use names when you pass the parameter values txt.format(carname = \"Ford\"): {carname} txt.format(carname = \"Ford\") Example"
  },
  {
    "document": "Python File Open File handling is an important part of any web application. Python has several functions for creating, reading, updating, and deleting files. File Handling The key function for working with files in Python is the open() function. open() The open() function takes two parameters; filename, and mode. open() There are four different methods (modes) for opening a file: \"r\" - Read - Default value. Opens a file for reading, error if the file does not exist \"r\" \"a\" - Append - Opens a file for appending, creates the file if it does not exist \"a\" \"w\" - Write - Opens a file for writing, creates the file if it does not exist \"w\" \"x\" - Create - Creates the specified file, returns an error if the file exists \"x\" In addition you can specify if the file should be handled as binary or text mode \"t\" - Text - Default value. Text mode \"t\" \"b\" - Binary - Binary mode (e.g. images) \"b\" Syntax To open a file for reading it is enough to specify the name of the file: The code above is the same as: Because \"r\" for read, and \"t\" for text are the default values, you do not need to specify them. \"r\" \"t\" Note: Make sure the file exists, or else you will get an error."
  },
  {
    "document": "Python File Open Open a File on the Server Assume we have the following file, located in the same folder as Python: demofile.txt To open the file, use the built-in open() function. open() The open() function returns a file object, which has a read() method for reading the content of the file: open() read() Example If the file is located in a different location, you will have to specify the file path, like this: Example Open a file on a different location: Read Only Parts of the File By default the read() method returns the whole text, but you can also specify how many characters you want to return: read() Example Return the 5 first characters of the file: Read Lines You can return one line by using the readline() method: readline() Example Read one line of the file: By calling readline() two times, you can read the two first lines: readline() Example Read two lines of the file: By looping through the lines of the file, you can read the whole file, line by line: Example Loop through the file line by line: Close Files It is a good practice to always close the file when you are done with it. Example Close the file when you are finished with it: Note: You should always close your files. In some cases, due to buffering, changes made to a file may not show until you close the file."
  },
  {
    "document": "Python File Write Write to an Existing File To write to an existing file, you must add a parameter to the open() function: open() \"a\" - Append - will append to the end of the file \"a\" \"w\" - Write - will overwrite any existing content \"w\" Example Open the file \"demofile2.txt\" and append content to the file: Example Open the file \"demofile3.txt\" and overwrite the content: Note: the \"w\" method will overwrite the entire file. Create a New File To create a new file in Python, use the open() method, with one of the following parameters: open() \"x\" - Create - will create a file, returns an error if the file exists \"x\" \"a\" - Append - will create a file if the specified file does not exists \"a\" \"w\" - Write - will create a file if the specified file does not exists \"w\" Example Create a file called \"myfile.txt\": Result: a new empty file is created! Example Create a new file if it does not exist:"
  },
  {
    "document": "Python Delete File Delete a File To delete a file, you must import the OS module, and run its os.remove() function: os.remove() Example Remove the file \"demofile.txt\": Check if File exist: To avoid getting an error, you might want to check if the file exists before you try to delete it: Example Check if file exists, then delete it: Delete Folder To delete an entire folder, use the os.rmdir() method: os.rmdir() Example Remove the folder \"myfolder\": Note: You can only remove empty folders."
  },
  {
    "document": "NumPy Tutorial Learn NumPy NumPy is a Python library. NumPy is used for working with arrays. NumPy is short for \"Numerical Python\". Learning by Reading We have created 43 tutorial pages for you to learn more about NumPy. Starting with a basic introduction and ends up with creating and plotting random data sets, and working with NumPy functions: Basic Random ufunc Learning by Examples In our \"Try it Yourself\" editor, you can use the NumPy module, and modify the code to see the result. Example Create a NumPy array: Click on the \"Try it Yourself\" button to see how it works. Learning by Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all NumPy Exercises Learning by Quiz Test Test your NumPy skills with a quiz test. Start NumPy Quiz"
  },
  {
    "document": "Pandas Tutorial Learn Pandas Pandas is a Python library. Pandas is used to analyze data. Learning by Reading We have created 14 tutorial pages for you to learn more about Pandas. Starting with a basic introduction and ends up with cleaning and plotting data: Basic Cleaning Data Advanced Learning by Examples In our \"Try it Yourself\" editor, you can use the Pandas module, and modify the code to see the result. Example Load a CSV file into a Pandas DataFrame: Click on the \"Try it Yourself\" button to see how it works. Learning by Exercises Most chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Pandas Exercises Learning by Quiz Test Test your Pandas skills with a quiz test. Start Pandas Quiz"
  },
  {
    "document": "Matplotlib Tutorial What is Matplotlib? Matplotlib is a low level graph plotting library in python that serves as a visualization utility. Matplotlib was created by John D. Hunter. Matplotlib is open source and we can use it freely. Matplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility. Where is the Matplotlib Codebase? The source code for Matplotlib is located at this github repository https://github.com/matplotlib/matplotlib"
  },
  {
    "document": "Matplotlib Getting Started Installation of Matplotlib If you have Python and PIP already installed on a system, then installation of Matplotlib is very easy. Install it using this command: If this command fails, then use a python distribution that already has Matplotlib installed, like Anaconda, Spyder etc. Import Matplotlib Once Matplotlib is installed, import it in your applications by adding the import module statement: import module Now Matplotlib is imported and ready to use: Checking Matplotlib Version The version string is stored under __version__ attribute. __version__ Example Note: two underscore characters are used in __version__. __version__"
  },
  {
    "document": "Matplotlib Pyplot Pyplot Most of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias: pyplot plt Now the Pyplot package can be referred to as plt. plt Example Draw a line in a diagram from position (0,0) to position (6,250): Result:  You will learn more about drawing (plotting) in the next chapters."
  },
  {
    "document": "Matplotlib Plotting Plotting x and y points The plot() function is used to draw points (markers) in a diagram. plot() By default, the plot() function draws a line from point to point. plot() The function takes parameters for specifying points in the diagram. Parameter 1 is an array containing the points on the x-axis. Parameter 2 is an array containing the points on the y-axis. If we need to plot a line from (1, 3) to (8, 10), we have to pass two arrays [1, 8] and [3, 10] to the plot function. Example Draw a line in a diagram from position (1, 3) to position (8, 10): Result:  The x-axis is the horizontal axis. The y-axis is the vertical axis. Plotting Without Line To plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'. Example Draw two points in the diagram, one at position (1, 3) and one in position (8, 10): Result:  You will learn more about markers in the next chapter. Multiple Points You can plot as many points as you like, just make sure you have the same number of points in both axis. Example Draw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10): Result:  Default X-Points If we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points. So, if we take the same example as above, and leave out the x-points, the diagram will look like this: Example Plotting without x-points: Result:  The x-points in the example above are [0, 1, 2, 3, 4, 5]."
  },
  {
    "document": "Matplotlib Markers Markers You can use the keyword argument marker to emphasize each point with a specified marker: marker Example Mark each point with a circle: Result:  Example Mark each point with a star: Result:  Marker Reference You can choose any of these markers: Format Strings fmt fmt You can also use the shortcut string notation parameter to specify the marker. This parameter is also called fmt, and is written with this syntax: fmt marker|line|color Example Mark each point with a circle: Result:  The marker value can be anything from the Marker Reference above. The line value can be one of the following: Line Reference Note: If you leave out the line value in the fmt parameter, no line will be plotted. The short color value can be one of the following: Color Reference Marker Size You can use the keyword argument markersize or the shorter version, ms to set the size of the markers: markersize ms Example Set the size of the markers to 20: Result:  Marker Color You can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers: markeredgecolor mec Example Set the EDGE color to red: Result:  You can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers: markerfacecolor mfc Example Set the FACE color to red: Result:  Use both the mec and mfc arguments to color the entire marker: mec mfc Example Set the color of both the edge and the face to red: Result:  You can also use Hexadecimal color values: Example Mark each point with a beautiful green color: Result:  Or any of the 140 supported color names. Example Mark each point with the color named \"hotpink\": Result:"
  },
  {
    "document": "Matplotlib Line Linestyle You can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line: linestyle ls Example Use a dotted line: Result:  Example Use a dashed line: Result:  Shorter Syntax The line style can be written in a shorter syntax: linestyle can be written as ls. linestyle ls dotted can be written as :. dotted : dashed can be written as --. dashed -- Example Shorter syntax: Result:  Line Styles You can choose any of these styles: Line Color You can use the keyword argument color or the shorter c to set the color of the line: color c Example Set the line color to red: Result:  You can also use Hexadecimal color values: Example Plot with a beautiful green line: Result:  Or any of the 140 supported color names. Example Plot with the color named \"hotpink\": Result:  Line Width You can use the keyword argument linewidth or the shorter lw to change the width of the line. linewidth lw The value is a floating number, in points: Example Plot with a 20.5pt wide line: Result:  Multiple Lines You can plot as many lines as you like by simply adding more plt.plot() functions: plt.plot() Example Draw two lines by specifying a plt.plot() function for each line: plt.plot() Result:  You can also plot many lines by adding the points for the x- and y-axis for each line in the same plt.plot() function. plt.plot() (In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).) The x- and y- values come in pairs: Example Draw two lines by specifiyng the x- and y-point values for both lines: Result:"
  },
  {
    "document": "Matplotlib Labels and Title Create Labels for a Plot With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis. xlabel() ylabel() Example Add labels to the x- and y-axis: Result:  Create a Title for a Plot With Pyplot, you can use the title() function to set a title for the plot. title() Example Add a plot title and labels for the x- and y-axis: Result:  Set Font Properties for Title and Labels You can use the fontdict parameter in xlabel(), ylabel(), and title() to set font properties for the title and labels. fontdict xlabel() ylabel() title() Example Set font properties for the title and labels: Result:  Position the Title You can use the loc parameter in title() to position the title. loc title() Legal values are: 'left', 'right', and 'center'. Default value is 'center'. Example Position the title to the left: Result:"
  },
  {
    "document": "Matplotlib Adding Grid Lines Add Grid Lines to a Plot With Pyplot, you can use the grid() function to add grid lines to the plot. grid() Example Add grid lines to the plot: Result:  Specify Which Grid Lines to Display You can use the axis parameter in the grid() function to specify which grid lines to display. axis grid() Legal values are: 'x', 'y', and 'both'. Default value is 'both'. Example Display only grid lines for the x-axis: Result:  Example Display only grid lines for the y-axis: Result:  Set Line Properties for the Grid You can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number). Example Set the line properties of the grid: Result:"
  },
  {
    "document": "Matplotlib Subplot Display Multiple Plots With the subplot() function you can draw multiple plots in one figure: subplot() Example Draw 2 plots: Result:  The subplot() Function The subplot() function takes three arguments that describes the layout of the figure. subplot() The layout is organized in rows and columns, which are represented by the first and second argument. The third argument represents the index of the current plot. So, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side), we can write the syntax like this: Example Draw 2 plots on top of each other: Result:  You can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot. Example Draw 6 plots: Result:  Title You can add a title to each plot with the title() function: title() Example 2 plots, with titles: Result:  Super Title You can add a title to the entire figure with the suptitle() function: suptitle() Example Add a title for the entire figure: Result:"
  },
  {
    "document": "Matplotlib Scatter Creating Scatter Plots With Pyplot, you can use the scatter() function to draw a scatter plot. scatter() The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis: scatter() Example A simple scatter plot: Result:  The observation in the example above is the result of 13 cars passing by. The X-axis shows how old the car is. The Y-axis shows the speed of the car when it passes. Are there any relationships between the observations? It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars. Compare Plots In the example above, there seems to be a relationship between speed and age, but what if we plot the observations from another day as well? Will the scatter plot tell us something else? Example Draw two plots on the same figure: Result:  Note: The two plots are plotted with two different colors, by default blue and orange, you will learn how to change colors later in this chapter. By comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives. Colors You can set your own color for each scatter plot with the color or the c argument: color c Example Set your own color of the markers: Result:  Color Each Dot You can even set a specific color for each dot by using an array of colors as value for the c argument: c Note: You cannot use the color argument for this, only the c argument. color c Example Set your own color of the markers: Result:  ColorMap The Matplotlib module has a number of available colormaps. A colormap is like a list of colors, where each color has a value that ranges from 0 to 100. Here is an example of a colormap:  This colormap is called 'viridis' and as you can see it ranges from 0, which is a purple color, up to 100, which is a yellow color. How to Use the ColorMap You can specify the colormap with the keyword argument cmap with the value of the colormap, in this case 'viridis' which is one of the built-in colormaps available in Matplotlib. cmap 'viridis' In addition you have to create an array with values (from 0 to 100), one value for each point in the scatter plot: Example Create a color array, and specify a colormap in the scatter plot: Result:  You can include the colormap in the drawing by including the plt.colorbar() statement: plt.colorbar() Example Include the actual colormap: Result:  Available ColorMaps You can choose any of the built-in colormaps: Size You can change the size of the dots with the s argument."
  },
  {
    "document": "s Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis: Example Set your own size for the markers: Result:  Alpha You can adjust the transparency of the dots with the alpha argument. alpha Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis: Example Set your own size for the markers: Result:  Combine Color Size and Alpha You can combine a colormap with different sizes of the dots. This is best visualized if the dots are transparent: Example Create random arrays with 100 values for x-points, y-points, colors and sizes: Result:"
  },
  {
    "document": "Matplotlib Bars Creating Bars With Pyplot, you can use the bar() function to draw bar graphs: bar() Example Draw 4 bars: Result:  The bar() function takes arguments that describes the layout of the bars. bar() The categories and their values represented by the first and second argument as arrays. Example Try it Yourself Â» Horizontal Bars If you want the bars to be displayed horizontally instead of vertically, use the barh() function: barh() Example Draw 4 horizontal bars: Result:  Bar Color The bar() and barh() take the keyword argument color to set the color of the bars: bar() barh() color Example Draw 4 red bars: Result:  Color Names You can use any of the 140 supported color names. Example Draw 4 \"hot pink\" bars: Result:  Color Hex Or you can use Hexadecimal color values: Example Draw 4 bars with a beautiful green color: Result:  Bar Width The bar() takes the keyword argument width to set the width of the bars: bar() width Example Draw 4 very thin bars: Result:  The default width value is 0.8 Note: For horizontal bars, use height instead of width. height width Bar Height The barh() takes the keyword argument height to set the height of the bars: barh() height Example Draw 4 very thin bars: Result:  The default height value is 0.8"
  },
  {
    "document": "Matplotlib Histograms Histogram A histogram is a graph showing frequency distributions. It is a graph showing the number of observations within each given interval. Example: Say you ask for the height of 250 people, you might end up with a histogram like this:  You can read from the histogram that there are approximately: 2 people from 140 to 145cm5 people from 145 to 150cm15 people from 151 to 156cm31 people from 157 to 162cm46 people from 163 to 168cm53 people from 168 to 173cm45 people from 173 to 178cm28 people from 179 to 184cm21 people from 185 to 190cm4 people from 190 to 195cm Create Histogram In Matplotlib, we use the hist() function to create histograms. hist() The hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument. hist() For simplicity we use NumPy to randomly generate an array with 250 values, where the values will concentrate around 170, and the standard deviation is 10. Learn more about Normal Data Distribution in our Machine Learning Tutorial. Example A Normal Data Distribution by NumPy: Result: This will generate a random result, and could look like this: [167.62255766 175.32495609 152.84661337 165.50264047 163.17457988 162.29867872 172.83638413 168.67303667 164.57361342 180.81120541 170.57782187 167.53075749 176.15356275 176.95378312 158.4125473 187.8842668 159.03730075 166.69284332 160.73882029 152.22378865 164.01255164 163.95288674 176.58146832 173.19849526 169.40206527 166.88861903 149.90348576 148.39039643 177.90349066 166.72462233 177.44776004 170.93335636 173.26312881 174.76534435 162.28791953 166.77301551 160.53785202 170.67972019 159.11594186 165.36992993 178.38979253 171.52158489 173.32636678 159.63894401 151.95735707 175.71274153 165.00458544 164.80607211 177.50988211 149.28106703 179.43586267 181.98365273 170.98196794 179.1093176 176.91855744 168.32092784 162.33939782 165.18364866 160.52300507 174.14316386 163.01947601 172.01767945 173.33491959 169.75842718 198.04834503 192.82490521 164.54557943 206.36247244 165.47748898 195.26377975 164.37569092 156.15175531 162.15564208 179.34100362 167.22138242 147.23667125 162.86940215 167.84986671 172.99302505 166.77279814 196.6137667 159.79012341 166.5840824 170.68645637 165.62204521 174.5559345 165.0079216 187.92545129 166.86186393 179.78383824 161.0973573 167.44890343 157.38075812 151.35412246 171.3107829 162.57149341 182.49985133 163.24700057 168.72639903 169.05309467 167.19232875 161.06405208 176.87667712 165.48750185 179.68799986 158.7913483 170.22465411 182.66432721 173.5675715 176.85646836 157.31299754 174.88959677 183.78323508 174.36814558 182.55474697 180.03359793 180.53094948 161.09560099 172.29179934 161.22665588 171.88382477 159.04626132 169.43886536 163.75793589 157.73710983 174.68921523 176.19843414 167.39315397 181.17128255 174.2674597 186.05053154 177.06516302 171.78523683 166.14875436 163.31607668 174.01429569 194.98819875 169.75129209 164.25748789 180.25773528 170.44784934 157.81966006 171.33315907 174.71390637 160.55423274 163.92896899 177.29159542 168.30674234 165.42853878 176.46256226 162.61719142 166.60810831 165.83648812 184.83238352 188.99833856 161.3054697 175.30396693 175.28109026 171.54765201 162.08762813 164.53011089 189.86213299 170.83784593 163.25869004 198.68079225 166.95154328 152.03381334 152.25444225 149.75522816 161.79200594 162.13535052 183.37298831 165.40405341 155.59224806 172.68678385 179.35359654 174.19668349 163.46176882 168.26621173 162.97527574 192.80170974 151.29673582 178.65251432 163.17266558 165.11172588 183.11107905 169.69556831 166.35149789 178.74419135 166.28562032 169.96465166 178.24368042 175.3035525 170.16496554 158.80682882 187.10006553 178.90542991 171.65790645 183.19289193 168.17446717 155.84544031 177.96091745 186.28887898 187.89867406 163.26716924 169.71242393 152.9410412 158.68101969 171.12655559 178.1482624 187.45272185 173.02872935 163.8047623 169.95676819 179.36887054 157.01955088 185.58143864 170.19037101 157.221245 168.90639755 178.7045601 168.64074373 172.37416382 165.61890535 163.40873027 168.98683006 149.48186389 172.20815568 172.82947206 173.71584064 189.42642762 172.79575803 177.00005573 169.24498561 171.55576698 161.36400372 176.47928342 163.02642822 165.09656415 186.70951892 153.27990317 165.59289527 180.34566865 189.19506385 183.10723435 173.48070474 170.28701875 157.24642079 157.9096498 176.4248199 ] Try it Yourself Â» The hist() function will read the array and produce a histogram: hist() Example A simple histogram: Result:"
  },
  {
    "document": "Matplotlib Pie Charts Creating Pie Charts With Pyplot, you can use the pie() function to draw pie charts: pie() Example A simple pie chart: Result:  As you can see the pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]). By default the plotting of the first wedge starts from the x-axis and moves counterclockwise:  Note: The size of each wedge is determined by comparing the value with all the other values, by using this formula: The value divided by the sum of all values: x/sum(x) x/sum(x) Labels Add labels to the pie chart with the labels parameter. labels The labels parameter must be an array with one label for each wedge: labels Example A simple pie chart: Result:  Start Angle As mentioned the default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter. startangle The startangle parameter is defined with an angle in degrees, default angle is 0: startangle  Example Start the first wedge at 90 degrees: Result:  Explode Maybe you want one of the wedges to stand out? The explode parameter allows you to do that. explode The explode parameter, if specified, and not None, must be an array with one value for each wedge. explode None Each value represents how far from the center each wedge is displayed: Example Pull the \"Apples\" wedge 0.2 from the center of the pie: Result:  Shadow Add a shadow to the pie chart by setting the shadows parameter to True: shadows True Example Add a shadow: Result:  Colors You can set the color of each wedge with the colors parameter. colors The colors parameter, if specified, must be an array with one value for each wedge: colors Example Specify a new color for each wedge: Result:  You can use Hexadecimal color values, any of the 140 supported color names, or one of these shortcuts: 'r' - Red 'g' - Green 'b' - Blue 'c' - Cyan 'm' - Magenta 'y' - Yellow 'k' - Black 'w' - White 'r' 'g' 'b' 'c' 'm' 'y' 'k' 'w' Legend To add a list of explanation for each wedge, use the legend() function: legend() Example Add a legend: Result:  Legend With Header To add a header to the legend, add the title parameter to the legend function. title legend Example Add a legend with a header: Result:"
  },
  {
    "document": "Machine Learning Machine Learning is making the computer learn from studying data and statistics. Machine Learning is a step into the direction of artificial intelligence (AI). Machine Learning is a program that analyses data and learns to predict the outcome. Where To Start? In this tutorial we will go back to mathematics and study statistics, and how to calculate important numbers based on data sets. We will also learn how to use various Python modules to get the answers we need. And we will learn how to make functions that are able to predict the outcome based on what we have learned. Data Set In the mind of a computer, a data set is any collection of data. It can be anything from an array to a complete database. Example of an array: [99,86,87,88,111,86,103,87,94,78,77,85,86] [99,86,87,88,111,86,103,87,94,78,77,85,86] Example of a database: By looking at the array, we can guess that the average value is probably around 80 or 90, and we are also able to determine the highest value and the lowest value, but what else can we do? And by looking at the database we can see that the most popular color is white, and the oldest car is 17 years, but what if we could predict if a car had an AutoPass, just by looking at the other values? That is what Machine Learning is for! Analyzing data and predicting the outcome! In Machine Learning it is common to work with very large data sets. In this tutorial we will try to make it as easy as possible to understand the different concepts of machine learning, and we will work with small easy-to-understand data sets. Data Types To analyze data, it is important to know what type of data we are dealing with. We can split the data types into three main categories: Numerical data are numbers, and can be split into two numerical categories: Categorical data are values that cannot be measured up against each other. Example: a color value, or any yes/no values. Ordinal data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on. By knowing the data type of your data source, you will be able to know what technique to use when analyzing them. You will learn more about statistics and analyzing data in the next chapters."
  },
  {
    "document": "Machine Learning - Mean Median Mode Mean, Median, and Mode What can we learn from looking at a group of numbers? In Machine Learning (and in mathematics) there are often three values that interests us: Example: We have registered the speed of 13 cars: speed = [99,86,87,88,111,86,103,87,94,78,77,85,86] speed = [99,86,87,88,111,86,103,87,94,78,77,85,86] What is the average, the middle, or the most common speed value? Mean The mean value is the average value. To calculate the mean, find the sum of all values, and divide the sum by the number of values: (99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 = 89.77 (99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 = 89.77 The NumPy module has a method for this. Learn about the NumPy module in our NumPy Tutorial. Example Use the NumPy mean() method to find the average speed: mean() Median The median value is the value in the middle, after you have sorted all the values: 77, 78, 85, 86, 86, 86, 87, 87, 88, 94, 99, 103, 111 77, 78, 85, 86, 86, 86, 87 , 87, 88, 94, 99, 103, 111 It is important that the numbers are sorted before you can find the median. The NumPy module has a method for this: Example Use the NumPy median() method to find the middle value: median() If there are two numbers in the middle, divide the sum of those numbers by two. 77, 78, 85, 86, 86, 86, 87, 87, 94, 98, 99, 103 (86 + 87) / 2 = 86.5 77, 78, 85, 86, 86, 86, 87 , 87, 94, 98, 99, 103 (86 + 87) / 2 = 86.5 Example Using the NumPy module: Mode The Mode value is the value that appears the most number of times: 99,86, 87, 88, 111,86, 103, 87, 94, 78, 77, 85,86 = 86 99, 86 , 87, 88, 111, 86 , 103, 87, 94, 78, 77, 85, 86 = 86 The SciPy module has a method for this. Learn about the SciPy module in our SciPy Tutorial. Example Use the SciPy mode() method to find the number that appears the most: mode() Chapter Summary The Mean, Median, and Mode are techniques that are often used in Machine Learning, so it is important to understand the concept behind them."
  },
  {
    "document": "Machine Learning - Standard Deviation What is Standard Deviation? Standard deviation is a number that describes how spread out the values are. A low standard deviation means that most of the numbers are close to the mean (average) value. A high standard deviation means that the values are spread out over a wider range. Example: This time we have registered the speed of 7 cars: speed = [86,87,88,86,87,85,86] speed = [86,87,88,86,87,85,86] The standard deviation is: 0.9 0.9 Meaning that most of the values are within the range of 0.9 from the mean value, which is 86.4. Let us do the same with a selection of numbers with a wider range: speed = [32,111,138,28,59,77,97] speed = [32,111,138,28,59,77,97] The standard deviation is: 37.85 37.85 Meaning that most of the values are within the range of 37.85 from the mean value, which is 77.4. As you can see, a higher standard deviation indicates that the values are spread out over a wider range. The NumPy module has a method to calculate the standard deviation: Example Use the NumPy std() method to find the standard deviation: std() Example Learn to Filter Data in Python Like a Data Analyst Try a hands-on training sessions with step-by-step guidance from an expert. Try the guided project made in collaboration with Coursera now! Variance Variance is another number that indicates how spread out the values are. In fact, if you take the square root of the variance, you get the standard deviation! Or the other way around, if you multiply the standard deviation by itself, you get the variance! To calculate the variance you have to do as follows: 1. Find the mean: (32+111+138+28+59+77+97) / 7 = 77.4 (32+111+138+28+59+77+97) / 7 = 77.4 2. For each value: find the difference from the mean: 32 - 77.4 = -45.4111 - 77.4 = 33.6138 - 77.4 = 60.6 28 - 77.4 = -49.4 59 - 77.4 = -18.4 77 - 77.4 = - 0.4 97 - 77.4 = 19.6 32 - 77.4 = -45.4111 - 77.4 = 33.6138 - 77.4 = 60.6 28 - 77.4 = -49.4 59 - 77.4 = -18.4 77 - 77.4 = - 0.4 97 - 77.4 = 19.6 3. For each difference: find the square value: (-45.4)2 = 2061.16 (33.6)2 = 1128.96 (60.6)2 = 3672.36 (-49.4)2 = 2440.36 (-18.4)2 = 338.56 (- 0.4)2 = 0.16 (19.6)2 = 384.16 (-45.4)2 = 2061.16 (33.6)2 = 1128.96 (60.6)2 = 3672.36 (-49.4)2 = 2440.36 (-18.4)2 = 338.56 (- 0.4)2 = 0.16 (19.6)2 = 384.16 4."
  },
  {
    "document": "The variance is the average number of these squared differences: (2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16) / 7 = 1432.2 (2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16) / 7 = 1432.2 Luckily, NumPy has a method to calculate the variance: Example Use the NumPy var() method to find the variance: var() Standard Deviation As we have learned, the formula to find the standard deviation is the square root of the variance: â1432.25 = 37.85 1432.25 = 37.85 Or, as in the example from before, use the NumPy to calculate the standard deviation: Example Use the NumPy std() method to find the standard deviation: std() Symbols Standard Deviation is often represented by the symbol Sigma: Ï Variance is often represented by the symbol Sigma Squared: Ï2 Chapter Summary The Standard Deviation and Variance are terms that are often used in Machine Learning, so it is important to understand how to get them, and the concept behind them."
  },
  {
    "document": "Machine Learning - Percentiles What are Percentiles? Percentiles are used in statistics to give you a number that describes the value that a given percent of the values are lower than. Example: Let's say we have an array that contains the ages of every person living on a street. ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31] ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31] What is the 75. percentile? The answer is 43, meaning that 75% of the people are 43 or younger. The NumPy module has a method for finding the specified percentile: Example Use the NumPy percentile() method to find the percentiles: percentile() Example What is the age that 90% of the people are younger than?"
  },
  {
    "document": "Machine Learning - Data Distribution Data Distribution Earlier in this tutorial we have worked with very small amounts of data in our examples, just to understand the different concepts. In the real world, the data sets are much bigger, but it can be difficult to gather real world data, at least at an early stage of a project. How Can we Get Big Data Sets? To create big data sets for testing, we use the Python module NumPy, which comes with a number of methods to create random data sets, of any size. Example Create an array containing 250 random floats between 0 and 5: Histogram To visualize the data set we can draw a histogram with the data we collected. We will use the Python module Matplotlib to draw a histogram. Learn about the Matplotlib module in our Matplotlib Tutorial. Example Draw a histogram: Result:  Histogram Explained We use the array from the example above to draw a histogram with 5 bars. The first bar represents how many values in the array are between 0 and 1. The second bar represents how many values are between 1 and 2. Etc. Which gives us this result: Note: The array values are random numbers and will not show the exact same result on your computer. Big Data Distributions An array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set as big as you want. Example Create an array with 100000 random numbers, and display them using a histogram with 100 bars:"
  },
  {
    "document": "Machine Learning - Normal Data Distribution Normal Data Distribution In the previous chapter we learned how to create a completely random array, of a given size, and between two given values. In this chapter we will learn how to create an array where the values are concentrated around a given value. In probability theory this kind of data distribution is known as the normal data distribution, or the Gaussian data distribution, after the mathematician Carl Friedrich Gauss who came up with the formula of this data distribution. Example A typical normal data distribution: Result:  Note: A normal distribution graph is also known as the bell curve because of it's characteristic shape of a bell. Histogram Explained We use the array from the numpy.random.normal() method, with 100000 values, to draw a histogram with 100 bars. numpy.random.normal() We specify that the mean value is 5.0, and the standard deviation is 1.0. Meaning that the values should be concentrated around 5.0, and rarely further away than 1.0 from the mean. And as you can see from the histogram, most values are between 4.0 and 6.0, with a top at approximately 5.0."
  },
  {
    "document": "Machine Learning - Scatter Plot Scatter Plot A scatter plot is a diagram where each value in the data set is represented by a dot. The Matplotlib module has a method for drawing scatter plots, it needs two arrays of the same length, one for the values of the x-axis, and one for the values of the y-axis: x = [5,7,8,7,2,17,2,9,4,11,12,9,6] x = [5,7,8,7,2,17,2,9,4,11,12,9,6] y = [99,86,87,88,111,86,103,87,94,78,77,85,86] y = [99,86,87,88,111,86,103,87,94,78,77,85,86] The x array represents the age of each car. x The y array represents the speed of each car. y Example Use the scatter() method to draw a scatter plot diagram: scatter() Result:  Scatter Plot Explained The x-axis represents ages, and the y-axis represents speeds. What we can read from the diagram is that the two fastest cars were both 2 years old, and the slowest car was 12 years old. Note: It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars. Random Data Distributions In Machine Learning the data sets can contain thousands-, or even millions, of values. You might not have real world data when you are testing an algorithm, you might have to use randomly generated values. As we have learned in the previous chapter, the NumPy module can help us with that! Let us create two arrays that are both filled with 1000 random numbers from a normal data distribution. The first array will have the mean set to 5.0 with a standard deviation of 1.0. The second array will have the mean set to 10.0 with a standard deviation of 2.0: Example A scatter plot with 1000 dots: Result:  Scatter Plot Explained We can see that the dots are concentrated around the value 5 on the x-axis, and 10 on the y-axis. We can also see that the spread is wider on the y-axis than on the x-axis."
  },
  {
    "document": "Machine Learning - Linear Regression Regression The term regression is used when you try to find the relationship between variables. In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events. Linear Regression Linear regression uses the relationship between the data-points to draw a straight line through all them. This line can be used to predict future values. In Machine Learning, predicting the future is very important. How Does it Work? Python has methods for finding a relationship between data-points and to draw a line of linear regression. We will show you how to use these methods instead of going through the mathematic formula. In the example below, the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a tollbooth. Let us see if the data we collected could be used in a linear regression: Example Start by drawing a scatter plot: Result:  Example Import scipy and draw the line of Linear Regression: scipy Result:  Example Explained Import the modules you need. You can learn about the Matplotlib module in our Matplotlib Tutorial. You can learn about the SciPy module in our SciPy Tutorial. import matplotlib.pyplot as pltfrom scipy import stats import matplotlib.pyplot as pltfrom scipy import stats Create the arrays that represent the values of the x and y axis: x = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = [99,86,87,88,111,86,103,87,94,78,77,85,86] x = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = [99,86,87,88,111,86,103,87,94,78,77,85,86] Execute a method that returns some important key values of Linear Regression: slope, intercept, r, p, std_err = stats.linregress(x, y) slope, intercept, r, p, std_err = stats.linregress(x, y) Create a function that uses the slope and intercept values to return a new value. This new value represents where on the y-axis the corresponding x value will be placed: slope intercept def myfunc(x): return slope * x + intercept def myfunc(x): return slope * x + intercept Run each value of the x array through the function. This will result in a new array with new values for the y-axis: mymodel = list(map(myfunc, x)) mymodel = list(map(myfunc, x)) Draw the original scatter plot: plt.scatter(x, y) plt.scatter(x, y) Draw the line of linear regression: plt.plot(x, mymodel) plt.plot(x, mymodel) Display the diagram: plt.show() plt.show() R for Relationship It is important to know how the relationship between the values of the x-axis and the values of the y-axis is, if there are no relationship the linear regression can not be used to predict anything. This relationship - the coefficient of correlation - is called r. r The r value ranges from -1 to 1, where 0 means no relationship, and 1 (and -1) means 100% related. r Python and the Scipy module will compute this value for you, all you have to do is feed it with the x and y values. Example How well does my data fit in a linear regression?"
  },
  {
    "document": "Note: The result -0.76 shows that there is a relationship, not perfect, but it indicates that we could use linear regression in future predictions. Predict Future Values Now we can use the information we have gathered to predict future values. Example: Let us try to predict the speed of a 10 years old car. To do so, we need the same myfunc() function from the example above: myfunc() def myfunc(x): return slope * x + intercept def myfunc(x): return slope * x + intercept Example Predict the speed of a 10 years old car: The example predicted a speed at 85.6, which we also could read from the diagram: Bad Fit? Let us create an example where linear regression would not be the best method to predict future values. Example These values for the x- and y-axis should result in a very bad fit for linear regression: Result:  And the r for relationship? r Example You should get a very low r value. r The result: 0.013 indicates a very bad relationship, and tells us that this data set is not suitable for linear regression."
  },
  {
    "document": "Machine Learning - Polynomial Regression Polynomial Regression If your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression. Polynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points. How Does it Work? Python has methods for finding a relationship between data-points and to draw a line of polynomial regression. We will show you how to use these methods instead of going through the mathematic formula. In the example below, we have registered 18 cars as they were passing a certain tollbooth. We have registered the car's speed, and the time of day (hour) the passing occurred. The x-axis represents the hours of the day and the y-axis represents the speed: Example Start by drawing a scatter plot: Result:  Example Import numpy and matplotlib then draw the line of Polynomial Regression: numpy matplotlib Result:  Example Explained Import the modules you need. You can learn about the NumPy module in our NumPy Tutorial. You can learn about the SciPy module in our SciPy Tutorial. import numpyimport matplotlib.pyplot as plt import numpyimport matplotlib.pyplot as plt Create the arrays that represent the values of the x and y axis: x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100] x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100] NumPy has a method that lets us make a polynomial model: mymodel = numpy.poly1d(numpy.polyfit(x, y, 3)) mymodel = numpy.poly1d(numpy.polyfit(x, y, 3)) Then specify how the line will display, we start at position 1, and end at position 22: myline = numpy.linspace(1, 22, 100) myline = numpy.linspace(1, 22, 100) Draw the original scatter plot: plt.scatter(x, y) plt.scatter(x, y) Draw the line of polynomial regression: plt.plot(myline, mymodel(myline)) plt.plot(myline, mymodel(myline)) Display the diagram: plt.show() plt.show() R-Squared It is important to know how well the relationship between the values of the x- and y-axis is, if there are no relationship the polynomial regression can not be used to predict anything. The relationship is measured with a value called the r-squared. The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related. Python and the Sklearn module will compute this value for you, all you have to do is feed it with the x and y arrays: Example How well does my data fit in a polynomial regression? Note: The result 0.94 shows that there is a very good relationship, and we can use polynomial regression in future predictions. Predict Future Values Now we can use the information we have gathered to predict future values."
  },
  {
    "document": "Example: Let us try to predict the speed of a car that passes the tollbooth at around the time 17:00: To do so, we need the same mymodel array from the example above: mymodel mymodel = numpy.poly1d(numpy.polyfit(x, y, 3)) mymodel = numpy.poly1d(numpy.polyfit(x, y, 3)) Example Predict the speed of a car passing at 17:00: The example predicted a speed to be 88.87, which we also could read from the diagram: Bad Fit? Let us create an example where polynomial regression would not be the best method to predict future values. Example These values for the x- and y-axis should result in a very bad fit for polynomial regression: Result:  And the r-squared value? Example You should get a very low r-squared value. The result: 0.00995 indicates a very bad relationship, and tells us that this data set is not suitable for polynomial regression."
  },
  {
    "document": "Machine Learning - Multiple Regression Multiple Regression Multiple regression is like linear regression, but with more than one independent value, meaning that we try to predict a value based on two or more variables. Take a look at the data set below, it contains some information about cars. We can predict the CO2 emission of a car based on the size of the engine, but with multiple regression we can throw in more variables, like the weight of the car, to make the prediction more accurate. How Does it Work? In Python we have modules that will do the work for us. Start by importing the Pandas module. import pandas import pandas Learn about the Pandas module in our Pandas Tutorial. The Pandas module allows us to read csv files and return a DataFrame object. The file is meant for testing purposes only, you can download it here: data.csv df = pandas.read_csv(\"data.csv\") df = pandas.read_csv(\"data.csv\") Then make a list of the independent values and call this variable X. X Put the dependent values in a variable called y. y X = df[['Weight', 'Volume']] y = df['CO2'] X = df[['Weight', 'Volume']] y = df['CO2'] Tip: It is common to name the list of independent values with a upper case X, and the list of dependent values with a lower case y. We will use some methods from the sklearn module, so we will have to import that module as well: from sklearn import linear_model from sklearn import linear_model From the sklearn module we will use the LinearRegression() method to create a linear regression object. LinearRegression() This object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship: fit() regr = linear_model.LinearRegression() regr.fit(X, y) regr = linear_model.LinearRegression() regr.fit(X, y) Now we have a regression object that are ready to predict CO2 values based on a car's weight and volume: #predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3: predictedCO2 = regr.predict([[2300, 1300]]) #predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3: predictedCO2 = regr.predict([[2300, 1300]]) Example See the whole example in action: Result: [107.2087328] Run example Â» We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives. Coefficient The coefficient is a factor that describes the relationship with an unknown variable. Example: if x is a variable, then 2x is x two times. x is the unknown variable, and the number 2 is the coefficient. x 2x x x 2 In this case, we can ask for the coefficient value of weight against CO2, and for volume against CO2. The answer(s) we get tells us what would happen if we increase, or decrease, one of the independent values."
  },
  {
    "document": "Example Print the coefficient values of the regression object: Result: [0.00755095 0.00780526] Run example Â» Result Explained The result array represents the coefficient values of weight and volume. Weight: 0.00755095 Volume: 0.00780526 These values tell us that if the weight increase by 1kg, the CO2 emission increases by 0.00755095g. And if the engine size (Volume) increases by 1cm3, the CO2 emission increases by 0.00780526g. I think that is a fair guess, but let test it! We have already predicted that if a car with a 1300cm3 engine weighs 2300kg, the CO2 emission will be approximately 107g. What if we increase the weight with 1000kg? Example Copy the example from before, but change the weight from 2300 to 3300: Result: [114.75968007] Run example Â» We have predicted that a car with 1.3 liter engine, and a weight of 3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives. Which shows that the coefficient of 0.00755095 is correct: 107.2087328 + (1000 * 0.00755095) = 114.75968"
  },
  {
    "document": "Machine Learning - Scale Scale Features When your data has different values, and even different measurement units, it can be difficult to compare them. What is kilograms compared to meters? Or altitude compared to time? The answer to this problem is scaling. We can scale data into new values that are easier to compare. Take a look at the table below, it is the same data set that we used in the multiple regression chapter, but this time the volume column contains values in liters instead of cm3 (1.0 instead of 1000). It can be difficult to compare the volume 1.0 with the weight 790, but if we scale them both into comparable values, we can easily see how much one value is compared to the other. There are different methods for scaling data, in this tutorial we will use a method called standardization. The standardization method uses this formula: z = (x - u) / s z = (x - u) / s Where z is the new value, x is the original value, u is the mean and s is the standard deviation. z x u s If you take the weight column from the data set above, the first value is 790, and the scaled value will be: (790 - 1292.23) / 238.74 = -2.1 If you take the volume column from the data set above, the first value is 1.0, and the scaled value will be: (1.0 - 1.61) / 0.38 = -1.59 (1.0 - 1.61) / 0.38 = -1.59 Now you can compare -2.1 with -1.59 instead of comparing 790 with 1.0. You do not have to do this manually, the Python sklearn module has a method called StandardScaler() which returns a Scaler object with methods for transforming data sets. StandardScaler() Example Scale all values in the Weight and Volume columns: Result: Note that the first two values are -2.1 and -1.59, which corresponds to our calculations: [[-2.10389253 -1.59336644] [-0.55407235 -1.07190106] [-1.52166278 -1.59336644] [-1.78973979 -1.85409913] [-0.63784641 -0.28970299] [-1.52166278 -1.59336644] [-0.76769621 -0.55043568] [ 0.3046118 -0.28970299] [-0.7551301 -0.28970299] [-0.59595938 -0.0289703 ] [-1.30803892 -1.33263375] [-1.26615189 -0.81116837] [-0.7551301 -1.59336644] [-0.16871166 -0.0289703 ] [ 0.14125238 -0.0289703 ] [ 0.15800719 -0.0289703 ] [ 0.3046118 -0.0289703 ] [-0.05142797 1.53542584] [-0.72580918 -0.0289703 ] [ 0.14962979 1.01396046] [ 1.2219378 -0.0289703 ] [ 0.5685001 1.01396046] [ 0.3046118 1.27469315] [ 0.51404696 -0.0289703 ] [ 0.51404696 1.01396046] [ 0.72348212 -0.28970299] [ 0.8281997 1.01396046] [ 1.81254495 1.01396046] [ 0.96642691 -0.0289703 ] [ 1.72877089 1.01396046] [ 1.30990057 1.27469315] [ 1.90050772 1.01396046] [-0.23991961 -0.0289703 ] [ 0.40932938 -0.0289703 ] [ 0.47215993 -0.0289703 ] [ 0.4302729 2.31762392]] Run example Â» Predict CO2 Values The task in the Multiple Regression chapter was to predict the CO2 emission from a car when you only knew its weight and volume. When the data set is scaled, you will have to use the scale when you predict values: Example Predict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms: Result: [107.2087328] Run example Â»"
  },
  {
    "document": "Machine Learning - Train/Test Evaluate Your Model In Machine Learning we create models to predict the outcome of certain events, like in the previous chapter where we predicted the CO2 emission of a car when we knew the weight and engine size. To measure if the model is good enough, we can use a method called Train/Test. What is Train/Test Train/Test is a method to measure the accuracy of your model. It is called Train/Test because you split the data set into two sets: a training set and a testing set. 80% for training, and 20% for testing. You train the model using the training set. You test the model using the testing set. Train the model means create the model. Test the model means test the accuracy of the model. Start With a Data Set Start with a data set you want to test. Our data set illustrates 100 customers in a shop, and their shopping habits. Example Result: The x axis represents the number of minutes before making a purchase. The y axis represents the amount of money spent on the purchase. Run example Â» Split Into Train/Test The training set should be a random selection of 80% of the original data. The testing set should be the remaining 20%. train_x = x[:80] train_y = y[:80] test_x = x[80:] test_y = y[80:] train_x = x[:80] train_y = y[:80] test_x = x[80:] test_y = y[80:] Display the Training Set Display the same scatter plot with the training set: Example Result: It looks like the original data set, so it seems to be a fair selection:  Run example Â» Display the Testing Set To make sure the testing set is not completely different, we will take a look at the testing set as well. Example Result: The testing set also looks like the original data set:  Run example Â» Fit the Data Set What does the data set look like? In my opinion I think the best fit would be a polynomial regression, so let us draw a line of polynomial regression. To draw a line through the data points, we use the plot() method of the matplotlib module: plot() Example Draw a polynomial regression line through the data points: Result:  Run example Â» The result can back my suggestion of the data set fitting a polynomial regression, even though it would give us some weird results if we try to predict values outside of the data set. Example: the line indicates that a customer spending 6 minutes in the shop would make a purchase worth 200. That is probably a sign of overfitting. But what about the R-squared score? The R-squared score is a good indicator of how well my data set is fitting the model. R2 Remember R2, also known as R-squared? It measures the relationship between the x axis and the y axis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 means totally related."
  },
  {
    "document": "The sklearn module has a method called r2_score() that will help us find this relationship. r2_score() In this case we would like to measure the relationship between the minutes a customer stays in the shop and how much money they spend. Example How well does my training data fit in a polynomial regression? Note: The result 0.799 shows that there is a OK relationship. Bring in the Testing Set Now we have made a model that is OK, at least when it comes to training data. Now we want to test the model with the testing data as well, to see if gives us the same result. Example Let us find the R2 score when using testing data: Note: The result 0.809 shows that the model fits the testing set as well, and we are confident that we can use the model to predict future values. Predict Values Now that we have established that our model is OK, we can start predicting new values. Example How much money will a buying customer spend, if she or he stays in the shop for 5 minutes? The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:"
  },
  {
    "document": "Machine Learning - Decision Tree  Decision Tree In this chapter we will show you how to make a \"Decision Tree\". A Decision Tree is a Flow Chart, and can help you make decisions based on previous experience. In the example, a person will try to decide if he/she should go to a comedy show or not. Luckily our example person has registered every time there was a comedy show in town, and registered some information about the comedian, and also registered if he/she went or not. Now, based on this data set, Python can create a decision tree that can be used to decide if any new shows are worth attending to. How Does it Work? First, read the dataset with pandas: Example Read and print the data set: Run example Â» To make a decision tree, all data has to be numerical. We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values. Pandas has a map() method that takes a dictionary with information on how to convert the values. map() {'UK': 0, 'USA': 1, 'N': 2} {'UK': 0, 'USA': 1, 'N': 2} Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2. Example Change string values into numerical values: Run example Â» Then we have to separate the feature columns from the target column. The feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict. Example X is the feature columns, y is the target column: X y Run example Â» Now we can create the actual decision tree, fit it with our details. Start by importing the modules we need: Example Create and display a Decision Tree: Run example Â» Result Explained The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see a comedian or not. Let us read the different aspects of the decision tree:  Rank Rank <= 6.5 means that every comedian with a rank of 6.5 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right). Rank <= 6.5 True False gini = 0.497 refers to the quality of the split, and is always a number between 0.0 and 0.5, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle. gini = 0.497 samples = 13 means that there are 13 comedians left at this point in the decision, which is all of them since this is the first step. samples = 13 value = [6, 7] means that of these 13 comedians, 6 will get a \"NO\", and 7 will get a \"GO\". value = [6, 7] Gini There are many ways to split the samples, we use the GINI method in this tutorial."
  },
  {
    "document": "The Gini method uses this formula: Gini = 1 - (x/n)2 - (y/n)2 Gini = 1 - (x/n)2 - (y/n)2 Where x is the number of positive answers(\"GO\"), n is the number of samples, and y is the number of negative answers (\"NO\"), which gives us this calculation: x n y 1 - (7 / 13)2 - (6 / 13)2 = 0.497 1 - (7 / 13)2 - (6 / 13)2 = 0.497  The next step contains two boxes, one box for the comedians with a 'Rank' of 6.5 or lower, and one box with the rest. True - 5 Comedians End Here: gini = 0.0 means all of the samples got the same result. gini = 0.0 samples = 5 means that there are 5 comedians left in this branch (5 comedian with a Rank of 6.5 or lower). samples = 5 value = [5, 0] means that 5 will get a \"NO\" and 0 will get a \"GO\". value = [5, 0] False - 8 Comedians Continue: Nationality Nationality <= 0.5 means that the comedians with a nationality value of less than 0.5 will follow the arrow to the left (which means everyone from the UK, ), and the rest will follow the arrow to the right. Nationality <= 0.5 gini = 0.219 means that about 22% of the samples would go in one direction. gini = 0.219 samples = 8 means that there are 8 comedians left in this branch (8 comedian with a Rank higher than 6.5). samples = 8 value = [1, 7] means that of these 8 comedians, 1 will get a \"NO\" and 7 will get a \"GO\". value = [1, 7]  True - 4 Comedians Continue: Age Age <= 35.5 means that comedians at the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the right. Age <= 35.5 gini = 0.375 means that about 37,5% of the samples would go in one direction. gini = 0.375 samples = 4 means that there are 4 comedians left in this branch (4 comedians from the UK). samples = 4 value = [1, 3] means that of these 4 comedians, 1 will get a \"NO\" and 3 will get a \"GO\". value = [1, 3] False - 4 Comedians End Here: gini = 0.0 means all of the samples got the same result. gini = 0.0 samples = 4 means that there are 4 comedians left in this branch (4 comedians not from the UK). samples = 4 value = [0, 4] means that of these 4 comedians, 0 will get a \"NO\" and 4 will get a \"GO\". value = [0, 4]  True - 2 Comedians End Here: gini = 0.0 means all of the samples got the same result. gini = 0.0 samples = 2 means that there are 2 comedians left in this branch (2 comedians at the age 35.5 or younger)."
  },
  {
    "document": "samples = 2 value = [0, 2] means that of these 2 comedians, 0 will get a \"NO\" and 2 will get a \"GO\". value = [0, 2] False - 2 Comedians Continue: Experience Experience <= 9.5 means that comedians with 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the right. Experience <= 9.5 gini = 0.5 means that 50% of the samples would go in one direction. gini = 0.5 samples = 2 means that there are 2 comedians left in this branch (2 comedians older than 35.5). samples = 2 value = [1, 1] means that of these 2 comedians, 1 will get a \"NO\" and 1 will get a \"GO\". value = [1, 1]  True - 1 Comedian Ends Here: gini = 0.0 means all of the samples got the same result. gini = 0.0 samples = 1 means that there is 1 comedian left in this branch (1 comedian with 9.5 years of experience or less). samples = 1 value = [0, 1] means that 0 will get a \"NO\" and 1 will get a \"GO\". value = [0, 1] False - 1 Comedian Ends Here: gini = 0.0 means all of the samples got the same result. gini = 0.0 samples = 1 means that there is 1 comedians left in this branch (1 comedian with more than 9.5 years of experience). samples = 1 value = [1, 0] means that 1 will get a \"NO\" and 0 will get a \"GO\". value = [1, 0] Predict Values We can use the Decision Tree to predict new values. Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, and a comedy ranking of 7? Example Use predict() method to predict new values: Run example Â» Example What would the answer be if the comedy rank was 6? Run example Â» Different Results You will see that the Decision Tree gives you different results if you run it enough times, even if you feed it with the same data. That is because the Decision Tree does not give us a 100% certain answer. It is based on the probability of an outcome, and the answer will vary."
  },
  {
    "document": "Machine Learning - Confusion Matrix On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. What is a confusion matrix? It is a table that is used in classification problems to assess where errors in the model were made. The rows represent the actual classes the outcomes should have been. While the columns represent the predictions we have made. Using this table it is easy to see which predictions are wrong. Creating a Confusion Matrix Confusion matrixes can be created by predictions made from a logistic regression. For now we will generate actual and predicted values by utilizing NumPy: import numpy import numpy Next we will need to generate the numbers for \"actual\" and \"predicted\" values. actual = numpy.random.binomial(1, 0.9, size = 1000) predicted = numpy.random.binomial(1, 0.9, size = 1000) actual = numpy.random.binomial(1, 0.9, size = 1000) predicted = numpy.random.binomial(1, 0.9, size = 1000) In order to create the confusion matrix we need to import metrics from the sklearn module. from sklearn import metrics from sklearn import metrics Once metrics is imported we can use the confusion matrix function on our actual and predicted values. confusion_matrix = metrics.confusion_matrix(actual, predicted) confusion_matrix = metrics.confusion_matrix(actual, predicted) To create a more interpretable visual display we need to convert the table into a confusion matrix display. cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1]) cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1]) Vizualizing the display requires that we import pyplot from matplotlib. import matplotlib.pyplot as plt import matplotlib.pyplot as plt Finally to display the plot we can use the functions plot() and show() from pyplot. cm_display.plot() plt.show() cm_display.plot() plt.show() See the whole example in action: Example Result  Results Explained The Confusion Matrix created has four different quadrants: True Negative (Top-Left Quadrant) False Positive (Top-Right Quadrant) False Negative (Bottom-Left Quadrant) True Positive (Bottom-Right Quadrant) True means that the values were accurately predicted, False means that there was an error or wrong prediction. Now that we have made a Confusion Matrix, we can calculate different measures to quantify the quality of the model. First, lets look at Accuracy. ADVERTISEMENT Created Metrics The matrix provides us with many useful metrics that help us to evaluate our classification model. The different measures include: Accuracy, Precision, Sensitivity (Recall), Specificity, and the F-score, explained below. Accuracy Accuracy measures how often the model is correct. How to Calculate (True Positive + True Negative) / Total Predictions Example Precision Of the positives predicted, what percentage is truly positive? How to Calculate True Positive / (True Positive + False Positive) Precision does not evaluate the correctly predicted negative cases: Example Sensitivity (Recall) Of all the positive cases, what percentage are predicted positive? Sensitivity (sometimes called Recall) measures how good the model is at predicting positives. This means it looks at true positives and false negatives (which are positives that have been incorrectly predicted as negative)."
  },
  {
    "document": "How to Calculate True Positive / (True Positive + False Negative) Sensitivity is good at understanding how well the model predicts something is positive: Example Specificity How well the model is at prediciting negative results? Specificity is similar to sensitivity, but looks at it from the persepctive of negative results. How to Calculate True Negative / (True Negative + False Positive) Since it is just the opposite of Recall, we use the recall_score function, taking the opposite position label: Example F-score F-score is the \"harmonic mean\" of precision and sensitivity. It considers both false positive and false negative cases and is good for imbalanced datasets. How to Calculate 2 * ((Precision * Sensitivity) / (Precision + Sensitivity)) This score does not take into consideration the True Negative values: Example All calulations in one: Example"
  },
  {
    "document": "Machine Learning - Hierarchical Clustering On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Hierarchical Clustering Hierarchical clustering is an unsupervised learning method for clustering data points. The algorithm builds clusters by measuring the dissimilarities between data. Unsupervised learning means that a model does not have to be trained, and we do not need a \"target\" variable. This method can be used on any data to visualize and interpret the relationship between individual data points. Here we will use hierarchical clustering to group data points and visualize the clusters using both a dendrogram and scatter plot. How does it work? We will use Agglomerative Clustering, a type of hierarchical clustering that follows a bottom up approach. We begin by treating each data point as its own cluster. Then, we join clusters together that have the shortest distance between them to create larger clusters. This step is repeated until one large cluster is formed containing all of the data points. Hierarchical clustering requires us to decide on both a distance and linkage method. We will use euclidean distance and the Ward linkage method, which attempts to minimize the variance between clusters. Example Start by visualizing some data points: Result  ADVERTISEMENT Now we compute the ward linkage using euclidean distance, and visualize it using a dendrogram: Example Result  Example Result  Example Explained Import the modules you need. import numpy as np import matplotlib.pyplot as plt from scipy.cluster.hierarchy import dendrogram, linkage from sklearn.cluster import AgglomerativeClustering import numpy as np import matplotlib.pyplot as plt from scipy.cluster.hierarchy import dendrogram, linkage from sklearn.cluster import AgglomerativeClustering You can learn about the Matplotlib module in our \"Matplotlib Tutorial. You can learn about the SciPy module in our SciPy Tutorial. NumPy is a library for working with arrays and matricies in Python, you can learn about the NumPy module in our NumPy Tutorial. scikit-learn is a popular library for machine learning. Create arrays that resemble two variables in a dataset. Note that while we only use two variables here, this method will work with any number of variables: x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] Turn the data into a set of points: data = list(zip(x, y)) print(data) data = list(zip(x, y)) print(data) Result: [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)] [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)] Compute the linkage between all of the different points. Here we use a simple euclidean distance measure and Ward's linkage, which seeks to minimize the variance between clusters."
  },
  {
    "document": "linkage_data = linkage(data, method='ward', metric='euclidean') linkage_data = linkage(data, method='ward', metric='euclidean') Finally, plot the results in a dendrogram. This plot will show us the hierarchy of clusters from the bottom (individual points) to the top (a single cluster consisting of all data points). plt.show() lets us visualize the dendrogram instead of just the raw linkage data. plt.show() dendrogram(linkage_data) plt.show() dendrogram(linkage_data) plt.show() Result:  The scikit-learn library allows us to use hierarchichal clustering in a different manner. First, we initialize the AgglomerativeClustering class with 2 clusters, using the same euclidean distance and Ward linkage. AgglomerativeClustering hierarchical_cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward') hierarchical_cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward') The .fit_predict method can be called on our data to compute the clusters using the defined parameters across our chosen number of clusters. .fit_predict labels = hierarchical_cluster.fit_predict(data) print(labels) labels = hierarchical_cluster.fit_predict(data) print(labels) Result: [0 0 1 0 0 1 1 0 1 1] [0 0 1 0 0 1 1 0 1 1] Finally, if we plot the same data and color the points using the labels assigned to each index by the hierarchical clustering method, we can see the cluster each point was assigned to: plt.scatter(x, y, c=labels) plt.show() plt.scatter(x, y, c=labels) plt.show() Result:"
  },
  {
    "document": "Machine Learning - Logistic Regression On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Logistic Regression Logistic regression aims to solve classification problems. It does this by predicting categorical outcomes, unlike linear regression that predicts a continuous outcome. In the simplest case there are two outcomes, which is called binomial, an example of which is predicting if a tumor is malignant or benign. Other cases have more than two outcomes to classify, in this case it is called multinomial. A common example for multinomial logistic regression would be predicting the class of an iris flower between 3 different species. Here we will be using basic logistic regression to predict a binomial variable. This means it has only two possible outcomes. How does it work? In Python we have modules that will do the work for us. Start by importing the NumPy module. import numpy import numpy Store the independent variables in X. Store the dependent variable in y. Below is a sample dataset: #X represents the size of a tumor in centimeters. X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1) #Note: X has to be reshaped into a column from a row for the LogisticRegression() function to work. #y represents whether or not the tumor is cancerous (0 for \"No\", 1 for \"Yes\"). y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]) #X represents the size of a tumor in centimeters. X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1) #Note: X has to be reshaped into a column from a row for the LogisticRegression() function to work. #y represents whether or not the tumor is cancerous (0 for \"No\", 1 for \"Yes\"). y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]) We will use a method from the sklearn module, so we will have to import that module as well: from sklearn import linear_model from sklearn import linear_model From the sklearn module we will use the LogisticRegression() method to create a logistic regression object. This object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship: fit() logr = linear_model.LogisticRegression() logr.fit(X,y) logr = linear_model.LogisticRegression() logr.fit(X,y) Now we have a logistic regression object that is ready to whether a tumor is cancerous based on the tumor size: #predict if tumor is cancerous where the size is 3.46mm: predicted = logr.predict(numpy.array([3.46]).reshape(-1,1)) #predict if tumor is cancerous where the size is 3.46mm: predicted = logr.predict(numpy.array([3.46]).reshape(-1,1)) Example See the whole example in action: Result [0] [0] We have predicted that a tumor with a size of 3.46mm will not be cancerous. ADVERTISEMENT Coefficient In logistic regression the coefficient is the expected change in log-odds of having the outcome per unit change in X."
  },
  {
    "document": "This does not have the most intuitive understanding so let's use it to create something that makes more sense, odds. Example See the whole example in action: Result [4.03541657] [4.03541657] This tells us that as the size of a tumor increases by 1mm the odds of it being a cancerous tumor increases by 4x. Probability The coefficient and intercept values can be used to find the probability that each tumor is cancerous. Create a function that uses the model's coefficient and intercept values to return a new value. This new value represents probability that the given observation is a tumor: def logit2prob(logr,x): log_odds = logr.coef_ * x + logr.intercept_ odds = numpy.exp(log_odds) probability = odds / (1 + odds) return(probability) def logit2prob(logr,x): log_odds = logr.coef_ * x + logr.intercept_ odds = numpy.exp(log_odds) probability = odds / (1 + odds) return(probability) Function Explained To find the log-odds for each observation, we must first create a formula that looks similar to the one from linear regression, extracting the coefficient and the intercept. log_odds = logr.coef_ * x + logr.intercept_ log_odds = logr.coef_ * x + logr.intercept_ To then convert the log-odds to odds we must exponentiate the log-odds. odds = numpy.exp(log_odds) odds = numpy.exp(log_odds) Now that we have the odds, we can convert it to probability by dividing it by 1 plus the odds. probability = odds / (1 + odds) probability = odds / (1 + odds) Let us now use the function with what we have learned to find out the probability that each tumor is cancerous. Example See the whole example in action: Result [[0.60749955] [0.19268876] [0.12775886] [0.00955221] [0.08038616] [0.07345637] [0.88362743] [0.77901378] [0.88924409] [0.81293497] [0.57719129] [0.96664243]] [[0.60749955] [0.19268876] [0.12775886] [0.00955221] [0.08038616] [0.07345637] [0.88362743] [0.77901378] [0.88924409] [0.81293497] [0.57719129] [0.96664243]] Results Explained 3.78 0.61 The probability that a tumor with the size 3.78cm is cancerous is 61%. 2.44 0.19 The probability that a tumor with the size 2.44cm is cancerous is 19%. 2.09 0.13 The probability that a tumor with the size 2.09cm is cancerous is 13%."
  },
  {
    "document": "Machine Learning - Grid Search On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Grid Search The majority of machine learning models contain parameters that can be adjusted to vary how the model learns. For example, the logistic regression model, from sklearn, has a parameter C that controls regularization,which affects the complexity of the model. sklearn C How do we pick the best value for C? The best value is dependent on the data used to train the model. C How does it work? One method is to try out different values and then pick the value that gives the best score. This technique is known as a grid search. If we had to select the values for two or more parameters, we would evaluate all combinations of the sets of values thus forming a grid of values. Before we get into the example it is good to know what the parameter we are changing does. Higher values of C tell the model, the training data resembles real world information, place a greater weight on the training data. While lower values of C do the opposite. C C Using Default Parameters First let's see what kind of results we can generate without a grid search using only the base parameters. To get started we must first load in the dataset we will be working with. from sklearn import datasets iris = datasets.load_iris() from sklearn import datasets iris = datasets.load_iris() Next in order to create the model we must have a set of independent variables X and a dependant variable y. X = iris['data'] y = iris['target'] X = iris['data'] y = iris['target'] Now we will load the logistic model for classifying the iris flowers. from sklearn.linear_model import LogisticRegression from sklearn.linear_model import LogisticRegression Creating the model, setting max_iter to a higher value to ensure that the model finds a result. Keep in mind the default value for C in a logistic regression model is 1, we will compare this later. C 1 In the example below, we look at the iris data set and try to train a model with varying values for C in logistic regression. C logit = LogisticRegression(max_iter = 10000) logit = LogisticRegression(max_iter = 10000) After we create the model, we must fit the model to the data. print(logit.fit(X,y)) print(logit.fit(X,y)) To evaluate the model we run the score method. print(logit.score(X,y)) print(logit.score(X,y)) Example With the default setting of C = 1, we achieved a score of 0.973. C = 1 0.973 Let's see if we can do any better by implementing a grid search with difference values of 0.973. ADVERTISEMENT Implementing Grid Search We will follow the same steps of before except this time we will set a range of values for C. C Knowing which values to set for the searched parameters will take a combination of domain knowledge and practice. Since the default value for C is 1, we will set a range of values surrounding it."
  },
  {
    "document": "C 1 C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2] C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2] Next we will create a for loop to change out the values of C and evaluate the model with each change. C First we will create an empty list to store the score within. scores = [] scores = [] To change the values of C we must loop over the range of values and update the parameter each time. C for choice in C: logit.set_params(C=choice) logit.fit(X, y) scores.append(logit.score(X, y)) for choice in C: logit.set_params(C=choice) logit.fit(X, y) scores.append(logit.score(X, y)) With the scores stored in a list, we can evaluate what the best choice of C is. C print(scores) print(scores) Example Results Explained We can see that the lower values of C performed worse than the base parameter of 1. However, as we increased the value of C to 1.75 the model experienced increased accuracy. C 1 C 1.75 It seems that increasing C beyond this amount does not help increase model accuracy. C Note on Best Practices We scored our logistic regression model by using the same data that was used to train it. If the model corresponds too closely to that data, it may not be great at predicting unseen data. This statistical error is known as over fitting. To avoid being misled by the scores on the training data, we can put aside a portion of our data and use it specifically for the purpose of testing the model. Refer to the lecture on train/test splitting to avoid being misled and overfitting."
  },
  {
    "document": "Preprocessing - Categorical Data On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Categorical Data When your data has categories represented by strings, it will be difficult to use them to train machine learning models which often only accepts numeric data. Instead of ignoring the categorical data and excluding the information from our model, you can tranform the data so it can be used in your models. Take a look at the table below, it is the same data set that we used in the multiple regression chapter. Example Result Car Model Volume Weight CO2 0 Toyoty Aygo 1000 790 99 1 Mitsubishi Space Star 1200 1160 95 2 Skoda Citigo 1000 929 95 3 Fiat 500 900 865 90 4 Mini Cooper 1500 1140 105 5 VW Up! 1000 929 105 6 Skoda Fabia 1400 1109 90 7 Mercedes A-Class 1500 1365 92 8 Ford Fiesta 1500 1112 98 9 Audi A1 1600 1150 99 10 Hyundai I20 1100 980 99 11 Suzuki Swift 1300 990 101 12 Ford Fiesta 1000 1112 99 13 Honda Civic 1600 1252 94 14 Hundai I30 1600 1326 97 15 Opel Astra 1600 1330 97 16 BMW 1 1600 1365 99 17 Mazda 3 2200 1280 104 18 Skoda Rapid 1600 1119 104 19 Ford Focus 2000 1328 105 20 Ford Mondeo 1600 1584 94 21 Opel Insignia 2000 1428 99 22 Mercedes C-Class 2100 1365 99 23 Skoda Octavia 1600 1415 99 24 Volvo S60 2000 1415 99 25 Mercedes CLA 1500 1465 102 26 Audi A4 2000 1490 104 27 Audi A6 2000 1725 114 28 Volvo V70 1600 1523 109 29 BMW 5 2000 1705 114 30 Mercedes E-Class 2100 1605 115 31 Volvo XC70 2000 1746 117 32 Ford B-Max 1600 1235 104 33 BMW 216 1600 1390 108 34 Opel Zafira 1600 1405 109 35 Mercedes SLK 2500 1395 120 Car Model Volume Weight CO2 0 Toyoty Aygo 1000 790 99 1 Mitsubishi Space Star 1200 1160 95 2 Skoda Citigo 1000 929 95 3 Fiat 500 900 865 90 4 Mini Cooper 1500 1140 105 5 VW Up!"
  },
  {
    "document": "1000 929 105 6 Skoda Fabia 1400 1109 90 7 Mercedes A-Class 1500 1365 92 8 Ford Fiesta 1500 1112 98 9 Audi A1 1600 1150 99 10 Hyundai I20 1100 980 99 11 Suzuki Swift 1300 990 101 12 Ford Fiesta 1000 1112 99 13 Honda Civic 1600 1252 94 14 Hundai I30 1600 1326 97 15 Opel Astra 1600 1330 97 16 BMW 1 1600 1365 99 17 Mazda 3 2200 1280 104 18 Skoda Rapid 1600 1119 104 19 Ford Focus 2000 1328 105 20 Ford Mondeo 1600 1584 94 21 Opel Insignia 2000 1428 99 22 Mercedes C-Class 2100 1365 99 23 Skoda Octavia 1600 1415 99 24 Volvo S60 2000 1415 99 25 Mercedes CLA 1500 1465 102 26 Audi A4 2000 1490 104 27 Audi A6 2000 1725 114 28 Volvo V70 1600 1523 109 29 BMW 5 2000 1705 114 30 Mercedes E-Class 2100 1605 115 31 Volvo XC70 2000 1746 117 32 Ford B-Max 1600 1235 104 33 BMW 216 1600 1390 108 34 Opel Zafira 1600 1405 109 35 Mercedes SLK 2500 1395 120 In the multiple regression chapter, we tried to predict the CO2 emitted based on the volume of the engine and the weight of the car but we excluded information about the car brand and model. The information about the car brand or the car model might help us make a better prediction of the CO2 emitted. ADVERTISEMENT One Hot Encoding We cannot make use of the Car or Model column in our data since they are not numeric. A linear relationship between a categorical variable, Car or Model, and a numeric variable, CO2, cannot be determined. To fix this issue, we must have a numeric representation of the categorical variable. One way to do this is to have a column representing each group in the category. For each column, the values will be 1 or 0 where 1 represents the inclusion of the group and 0 represents the exclusion. This transformation is called one hot encoding. You do not have to do this manually, the Python Pandas module has a function that called get_dummies() which does one hot encoding. get_dummies() Learn about the Pandas module in our Pandas Tutorial."
  },
  {
    "document": "Example One Hot Encode the Car column: Result Car_Audi Car_BMW Car_Fiat Car_Ford Car_Honda Car_Hundai Car_Hyundai Car_Mazda Car_Mercedes Car_Mini Car_Mitsubishi Car_Opel Car_Skoda Car_Suzuki Car_Toyoty Car_VW Car_Volvo 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 7 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 8 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 9 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 12 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 13 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 14 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 16 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 19 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 22 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 25 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 26 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 29 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 31 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 32 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 33 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 35 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 Car_Audi Car_BMW Car_Fiat Car_Ford Car_Honda Car_Hundai Car_Hyundai Car_Mazda Car_Mercedes Car_Mini Car_Mitsubishi Car_Opel Car_Skoda Car_Suzuki Car_Toyoty Car_VW Car_Volvo 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 7 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 8 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 9 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 12 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 13 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 14 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 16 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 19 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 22 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 25 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 26 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 29 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 31 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 32 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 33 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 35 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 Results A column was created for every car brand in the Car column."
  },
  {
    "document": "Predict CO2 We can use this additional information alongside the volume and weight to predict CO2 To combine the information, we can use the concat() function from pandas. concat() First we will need to import a couple modules. We will start with importing the Pandas. import pandas import pandas The pandas module allows us to read csv files and manipulate DataFrame objects: cars = pandas.read_csv(\"data.csv\") cars = pandas.read_csv(\"data.csv\") It also allows us to create the dummy variables: ohe_cars = pandas.get_dummies(cars[['Car']]) ohe_cars = pandas.get_dummies(cars[['Car']]) Then we must select the independent variables (X) and add the dummy variables columnwise. Also store the dependent variable in y. X = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1) y = cars['CO2'] X = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1) y = cars['CO2'] We also need to import a method from sklearn to create a linear model Learn about linear regression. from sklearn import linear_model from sklearn import linear_model Now we can fit the data to a linear regression: regr = linear_model.LinearRegression() regr.fit(X,y) regr = linear_model.LinearRegression() regr.fit(X,y) Finally we can predict the CO2 emissions based on the car's weight, volume, and manufacturer. ##predict the CO2 emission of a VW where the weight is 2300kg, and the volume is 1300cm3: predictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]]) ##predict the CO2 emission of a VW where the weight is 2300kg, and the volume is 1300cm3: predictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]]) Example Result [122.45153299] [122.45153299] We now have a coefficient for the volume, the weight, and each car brand in the data set Dummifying It is not necessary to create one column for each group in your category. The information can be retained using 1 column less than the number of groups you have. For example, you have a column representing colors and in that column, you have two colors, red and blue. Example Result color 0 blue 1 red color 0 blue 1 red You can create 1 column called red where 1 represents red and 0 represents not red, which means it is blue. To do this, we can use the same function that we used for one hot encoding, get_dummies, and then drop one of the columns. There is an argument, drop_first, which allows us to exclude the first column from the resulting table. Example Result color_red 0 0 1 1 color_red 0 0 1 1 What if you have more than 2 groups? How can the multiple groups be represented by 1 less column? Let's say we have three colors this time, red, blue and green. When we get_dummies while dropping the first column, we get the following table. Example Result color_green color_red color 0 0 0 blue 1 0 1 red 2 1 0 green color_green color_red color 0 0 0 blue 1 0 1 red 2 1 0 green"
  },
  {
    "document": "Machine Learning - K-means On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. K-means K-means is an unsupervised learning method for clustering data points. The algorithm iteratively divides data points into K clusters by minimizing the variance in each cluster. Here, we will show you how to estimate the best value for K using the elbow method, then use K-means clustering to group the data points into clusters. How does it work? First, each data point is randomly assigned to one of the K clusters. Then, we compute the centroid (functionally the center) of each cluster, and reassign each data point to the cluster with the closest centroid. We repeat this process until the cluster assignments for each data point are no longer changing. K-means clustering requires us to select K, the number of clusters we want to group the data into. The elbow method lets us graph the inertia (a distance-based metric) and visualize the point at which it starts decreasing linearly. This point is referred to as the \"elbow\" and is a good estimate for the best value for K based on our data. Example Start by visualizing some data points: Result  ADVERTISEMENT Now we utilize the elbow method to visualize the intertia for different values of K: Example Result  The elbow method shows that 2 is a good value for K, so we retrain and visualize the result: Example Result  Example Explained Import the modules you need. import matplotlib.pyplot as plt from sklearn.cluster import KMeans import matplotlib.pyplot as plt from sklearn.cluster import KMeans You can learn about the Matplotlib module in our \"Matplotlib Tutorial. scikit-learn is a popular library for machine learning. Create arrays that resemble two variables in a dataset. Note that while we only use two variables here, this method will work with any number of variables: x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] Turn the data into a set of points: data = list(zip(x, y)) print(data) data = list(zip(x, y)) print(data) Result: [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)] [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)] In order to find the best value for K, we need to run K-means across our data for a range of possible values. We only have 10 data points, so the maximum number of clusters is 10."
  },
  {
    "document": "So for each value K in range(1,11), we train a K-means model and plot the intertia at that number of clusters: inertias = [] for i in range(1,11): kmeans = KMeans(n_clusters=i) kmeans.fit(data) inertias.append(kmeans.inertia_) plt.plot(range(1,11), inertias, marker='o') plt.title('Elbow method') plt.xlabel('Number of clusters') plt.ylabel('Inertia') plt.show() inertias = [] for i in range(1,11): kmeans = KMeans(n_clusters=i) kmeans.fit(data) inertias.append(kmeans.inertia_) plt.plot(range(1,11), inertias, marker='o') plt.title('Elbow method') plt.xlabel('Number of clusters') plt.ylabel('Inertia') plt.show() Result:  We can see that the \"elbow\" on the graph above (where the interia becomes more linear) is at K=2. We can then fit our K-means algorithm one more time and plot the different clusters assigned to the data: kmeans = KMeans(n_clusters=2) kmeans.fit(data) plt.scatter(x, y, c=kmeans.labels_) plt.show() kmeans = KMeans(n_clusters=2) kmeans.fit(data) plt.scatter(x, y, c=kmeans.labels_) plt.show() Result:"
  },
  {
    "document": "Machine Learning - Bootstrap Aggregation (Bagging) On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Bagging Methods such as Decision Trees, can be prone to overfitting on the training set which can lead to wrong predictions on new data. Bootstrap Aggregation (bagging) is a ensembling method that attempts to resolve overfitting for classification or regression problems. Bagging aims to improve the accuracy and performance of machine learning algorithms. It does this by taking random subsets of an original dataset, with replacement, and fits either a classifier (for classification) or regressor (for regression) to each subset. The predictions for each subset are then aggregated through majority vote for classification or averaging for regression, increasing prediction accuracy. Evaluating a Base Classifier To see how bagging can improve model performance, we must start by evaluating how the base classifier performs on the dataset. If you do not know what decision trees are review the lesson on decision trees before moving forward, as bagging is a continuation of the concept. We will be looking to identify different classes of wines found in Sklearn's wine dataset. from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.tree import DecisionTreeClassifier from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.tree import DecisionTreeClassifier Next we need to load in the data and store it into X (input features) and y (target). The parameter as_frame is set equal to True so we do not lose the feature names when loading the data. (sklearn version older than 0.23 must skip the as_frame argument as it is not supported) sklearn as_frame data = datasets.load_wine(as_frame = True) X = data.data y = data.target data = datasets.load_wine(as_frame = True) X = data.data y = data.target In order to properly evaluate our model on unseen data, we need to split X and y into train and test sets. For information on splitting data, see the Train/Test lesson. X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22) With our data prepared, we can now instantiate a base classifier and fit it to the training data. dtree = DecisionTreeClassifier(random_state = 22) dtree.fit(X_train,y_train) dtree = DecisionTreeClassifier(random_state = 22) dtree.fit(X_train,y_train) Result: DecisionTreeClassifier(random_state=22) DecisionTreeClassifier(random_state=22) We can now predict the class of wine the unseen test set and evaluate the model performance. y_pred = dtree.predict(X_test) print(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train))) print(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred)) y_pred = dtree.predict(X_test) print(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train))) print(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred)) Result: Train data accuracy: 1.0 Test data accuracy: 0.8222222222222222 Train data accuracy: 1.0 Test data accuracy: 0.8222222222222222 Example Import the necessary data and evaluate base classifier performance."
  },
  {
    "document": "The base classifier performs reasonably well on the dataset achieving 82% accuracy on the test dataset with the current parameters (Different results may occur if you do not have the random_state parameter set). random_state Now that we have a baseline accuracy for the test dataset, we can see how the Bagging Classifier out performs a single Decision Tree Classifier. ADVERTISEMENT Creating a Bagging Classifier For bagging we need to set the parameter n_estimators, this is the number of base classifiers that our model is going to aggregate together. For this sample dataset the number of estimators is relatively low, it is often the case that much larger ranges are explored. Hyperparameter tuning is usually done with a grid search, but for now we will use a select set of values for the number of estimators. We start by importing the necessary model. from sklearn.ensemble import BaggingClassifier from sklearn.ensemble import BaggingClassifier Now lets create a range of values that represent the number of estimators we want to use in each ensemble. estimator_range = [2,4,6,8,10,12,14,16] estimator_range = [2,4,6,8,10,12,14,16] To see how the Bagging Classifier performs with differing values of n_estimators we need a way to iterate over the range of values and store the results from each ensemble. To do this we will create a for loop, storing the models and scores in separate lists for later visualizations. Note: The default parameter for the base classifier in BaggingClassifier is the DecisionTreeClassifier therefore we do not need to set it when instantiating the bagging model. BaggingClassifier DecisionTreeClassifier models = [] scores = [] for n_estimators in estimator_range: # Create bagging classifier clf = BaggingClassifier(n_estimators = n_estimators, random_state = 22) # Fit the model clf.fit(X_train, y_train) # Append the model and score to their respective list models.append(clf) scores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test))) models = [] scores = [] for n_estimators in estimator_range: # Create bagging classifier clf = BaggingClassifier(n_estimators = n_estimators, random_state = 22) # Fit the model clf.fit(X_train, y_train) # Append the model and score to their respective list models.append(clf) scores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test))) With the models and scores stored, we can now visualize the improvement in model performance. import matplotlib.pyplot as plt # Generate the plot of scores against number of estimators plt.figure(figsize=(9,6)) plt.plot(estimator_range, scores) # Adjust labels and font (to make visable) plt.xlabel(\"n_estimators\", fontsize = 18) plt.ylabel(\"score\", fontsize = 18) plt.tick_params(labelsize = 16) # Visualize plot plt.show() import matplotlib.pyplot as plt # Generate the plot of scores against number of estimators plt.figure(figsize=(9,6)) plt.plot(estimator_range, scores) # Adjust labels and font (to make visable) plt.xlabel(\"n_estimators\", fontsize = 18) plt.ylabel(\"score\", fontsize = 18) plt.tick_params(labelsize = 16) # Visualize plot plt.show()  Example Import the necessary data and evaluate the BaggingClassifier performance. BaggingClassifier Result  Results Explained By iterating through different values for the number of estimators we can see an increase in model performance from 82.2% to 95.5%. After 14 estimators the accuracy begins to drop, again if you set a different random_state the values you see will vary."
  },
  {
    "document": "That is why it is best practice to use cross validation to ensure stable results. random_state In this case, we see a 13.3% increase in accuracy when it comes to identifying the type of the wine. Another Form of Evaluation As bootstrapping chooses random subsets of observations to create classifiers, there are observations that are left out in the selection process. These \"out-of-bag\" observations can then be used to evaluate the model, similarly to that of a test set. Keep in mind, that out-of-bag estimation can overestimate error in binary classification problems and should only be used as a compliment to other metrics. We saw in the last exercise that 12 estimators yielded the highest accuracy, so we will use that to create our model. This time setting the parameter oob_score to true to evaluate the model with out-of-bag score. oob_score Example Create a model with out-of-bag metric. Since the samples used in OOB and the test set are different, and the dataset is relatively small, there is a difference in the accuracy. It is rare that they would be exactly the same, again OOB should be used quick means for estimating error, but is not the only evaluation metric. Generating Decision Trees from Bagging Classifier As was seen in the Decision Tree lesson, it is possible to graph the decision tree the model created. It is also possible to see the individual decision trees that went into the aggregated classifier. This helps us to gain a more intuitive understanding on how the bagging model arrives at its predictions. Note: This is only functional with smaller datasets, where the trees are relatively shallow and narrow making them easy to visualize. We will need to import plot_tree function from sklearn.tree. The different trees can be graphed by changing the estimator you wish to visualize. plot_tree sklearn.tree Example Generate Decision Trees from Bagging Classifier Result  Here we can see just the first decision tree that was used to vote on the final prediction. Again, by changing the index of the classifier you can see each of the trees that have been aggregated."
  },
  {
    "document": "Machine Learning - Cross Validation On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. Cross Validation When adjusting models we are aiming to increase overall model performance on unseen data. Hyperparameter tuning can lead to much better performance on test sets. However, optimizing parameters to the test set can lead information leakage causing the model to preform worse on unseen data. To correct for this we can perform cross validation. To better understand CV, we will be performing different methods on the iris dataset. Let us first load in and separate the data. from sklearn import datasets X, y = datasets.load_iris(return_X_y=True) from sklearn import datasets X, y = datasets.load_iris(return_X_y=True) There are many methods to cross validation, we will start by looking at k-fold cross validation. K-Fold The training data used in the model is split, into k number of smaller sets, to be used to validate the model. The model is then trained on k-1 folds of training set. The remaining fold is then used as a validation set to evaluate the model. As we will be trying to classify different species of iris flowers we will need to import a classifier model, for this exercise we will be using a DecisionTreeClassifier. We will also need to import CV modules from sklearn. DecisionTreeClassifier sklearn from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import KFold, cross_val_score from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import KFold, cross_val_score With the data loaded we can now create and fit a model for evaluation. clf = DecisionTreeClassifier(random_state=42) clf = DecisionTreeClassifier(random_state=42) Now let's evaluate our model and see how it performs on each k-fold. k_folds = KFold(n_splits = 5) scores = cross_val_score(clf, X, y, cv = k_folds) k_folds = KFold(n_splits = 5) scores = cross_val_score(clf, X, y, cv = k_folds) It is also good pratice to see how CV performed overall by averaging the scores for all folds. Example Run k-fold CV: ADVERTISEMENT Stratified K-Fold In cases where classes are imbalanced we need a way to account for the imbalance in both the train and validation sets. To do so we can stratify the target classes, meaning that both sets will have an equal proportion of all classes. Example While the number of folds is the same, the average CV increases from the basic k-fold when making sure there is stratified classes. Leave-One-Out (LOO) Instead of selecting the number of splits in the training data set like k-fold LeaveOneOut, utilize 1 observation to validate and n-1 observations to train. This method is an exaustive technique. Example Run LOO CV: We can observe that the number of cross validation scores performed is equal to the number of observations in the dataset. In this case there are 150 observations in the iris dataset. The average CV score is 94%. Leave-P-Out (LPO) Leave-P-Out is simply a nuanced diffence to the Leave-One-Out idea, in that we can select the number of p to use in our validation set."
  },
  {
    "document": "Example Run LPO CV: As we can see this is an exhaustive method we many more scores being calculated than Leave-One-Out, even with a p = 2, yet it achieves roughly the same average CV score. Shuffle Split Unlike KFold, ShuffleSplit leaves out a percentage of the data, not to be used in the train or validation sets. To do so we must decide what the train and test sizes are, as well as the number of splits. KFold ShuffleSplit Example Run Shuffle Split CV: Ending Notes These are just a few of the CV methods that can be applied to models. There are many more cross validation classes, with most models having their own class. Check out sklearns cross validation for more CV options."
  },
  {
    "document": "Machine Learning - AUC - ROC Curve On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. AUC - ROC Curve In classification, there are many different evaluation metrics. The most popular is accuracy, which measures how often the model is correct. This is a great metric because it is easy to understand and getting the most correct guesses is often desired. There are some cases where you might consider using another evaluation metric. Another common metric is AUC, area under the receiver operating characteristic (ROC) curve. The Reciever operating characteristic curve plots the true positive (TP) rate versus the false positive (FP) rate at different classification thresholds. The thresholds are different probability cutoffs that separate the two classes in binary classification. It uses probability to tell us how well a model separates the classes. Imbalanced Data Suppose we have an imbalanced data set where the majority of our data is of one value. We can obtain high accuracy for the model by predicting the majority class. Example ADVERTISEMENT Although we obtain a very high accuracy, the model provided no information about the data so it's not useful. We accurately predict class 1 100% of the time while inaccurately predict class 0 0% of the time. At the expense of accuracy, it might be better to have a model that can somewhat separate the two classes. Example For the second set of predictions, we do not have as high of an accuracy score as the first but the accuracy for each class is more balanced. Using accuracy as an evaluation metric we would rate the first model higher than the second even though it doesn't tell us anything about the data. In cases like this, using another evaluation metric like AUC would be preferred. import matplotlib.pyplot as plt def plot_roc_curve(true_y, y_prob): \"\"\" plots the roc curve based of the probabilities \"\"\" fpr, tpr, thresholds = roc_curve(true_y, y_prob) plt.plot(fpr, tpr) plt.xlabel('False Positive Rate') plt.ylabel('True Positive Rate') import matplotlib.pyplot as plt def plot_roc_curve(true_y, y_prob): \"\"\" plots the roc curve based of the probabilities \"\"\" fpr, tpr, thresholds = roc_curve(true_y, y_prob) plt.plot(fpr, tpr) plt.xlabel('False Positive Rate') plt.ylabel('True Positive Rate') Example Model 1: Result model 1 AUC score: 0.5 Example Model 2: Result model 2 AUC score: 0.8270551578947367 An AUC score of around .5 would mean that the model is unable to make a distinction between the two classes and the curve would look like a line with a slope of 1. An AUC score closer to 1 means that the model has the ability to separate the two classes and the curve would come closer to the top left corner of the graph. Probabilities Because AUC is a metric that utilizes probabilities of the class predictions, we can be more confident in a model that has a higher AUC score than one with a lower score even if they have similar accuracies. In the data below, we have two sets of probabilites from hypothetical models."
  },
  {
    "document": "The first has probabilities that are not as \"confident\" when predicting the two classes (the probabilities are close to .5). The second has probabilities that are more \"confident\" when predicting the two classes (the probabilities are close to the extremes of 0 or 1). Example Example Plot model 1: Result  Example Plot model 2: Result  Even though the accuracies for the two models are similar, the model with the higher AUC score will be more reliable because it takes into account the predicted probability. It is more likely to give you higher accuracy when predicting future data."
  },
  {
    "document": "Machine Learning - K-nearest neighbors (KNN) On this page, W3schools.com collaborates with NYC Data Science Academy, to deliver digital training content to our students. KNN KNN is a simple, supervised machine learning (ML) algorithm that can be used for classification or regression tasks - and is also frequently used in missing value imputation. It is based on the idea that the observations closest to a given data point are the most \"similar\" observations in a data set, and we can therefore classify unforeseen points based on the values of the closest existing points. By choosing K, the user can select the number of nearby observations to use in the algorithm. Here, we will show you how to implement the KNN algorithm for classification, and show how different values of K affect the results. How does it work? K is the number of nearest neighbors to use. For classification, a majority vote is used to determined which class a new observation should fall into. Larger values of K are often more robust to outliers and produce more stable decision boundaries than very small values (K=3 would be better than K=1, which might produce undesirable results. Example Start by visualizing some data points: Result  ADVERTISEMENT Now we fit the KNN algorithm with K=1: from sklearn.neighbors import KNeighborsClassifier data = list(zip(x, y)) knn = KNeighborsClassifier(n_neighbors=1) knn.fit(data, classes) from sklearn.neighbors import KNeighborsClassifier data = list(zip(x, y)) knn = KNeighborsClassifier(n_neighbors=1) knn.fit(data, classes) And use it to classify a new data point: Example Result  Now we do the same thing, but with a higher K value which changes the prediction: Example Result  Example Explained Import the modules you need. You can learn about the Matplotlib module in our \"Matplotlib Tutorial. scikit-learn is a popular library for machine learning in Python. import matplotlib.pyplot as plt from sklearn.neighbors import KNeighborsClassifier import matplotlib.pyplot as plt from sklearn.neighbors import KNeighborsClassifier Create arrays that resemble variables in a dataset. We have two input features (x and y) and then a target class (class). The input features that are pre-labeled with our target class will be used to predict the class of new data."
  },
  {
    "document": "Note that while we only use two input features here, this method will work with any number of variables: x y class x = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] classes = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1] x = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12] y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21] classes = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1] Turn the input features into a set of points: data = list(zip(x, y)) print(data) data = list(zip(x, y)) print(data) Result: [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)] [(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)] Using the input features and target class, we fit a KNN model on the model using 1 nearest neighbor: knn = KNeighborsClassifier(n_neighbors=1) knn.fit(data, classes) knn = KNeighborsClassifier(n_neighbors=1) knn.fit(data, classes) Then, we can use the same KNN object to predict the class of new, unforeseen data points. First we create new x and y features, and then call knn.predict() on the new data point to get a class of 0 or 1: knn.predict() new_x = 8 new_y = 21 new_point = [(new_x, new_y)] prediction = knn.predict(new_point) print(prediction) new_x = 8 new_y = 21 new_point = [(new_x, new_y)] prediction = knn.predict(new_point) print(prediction) Result: [0] [0] When we plot all the data along with the new point and class, we can see it's been labeled blue with the 1 class. The text annotation is just to highlight the location of the new point: 1 plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]]) plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\") plt.show() plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]]) plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\") plt.show() Result:  However, when we changes the number of neighbors to 5, the number of points used to classify our new point changes. As a result, so does the classification of the new point: knn = KNeighborsClassifier(n_neighbors=5) knn.fit(data, classes) prediction = knn.predict(new_point) print(prediction) knn = KNeighborsClassifier(n_neighbors=5) knn.fit(data, classes) prediction = knn.predict(new_point) print(prediction) Result: [1] [1] When we plot the class of the new point along with the older points, we note that the color has changed based on the associated class label: plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]]) plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\") plt.show() plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]]) plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\") plt.show() Result:"
  },
  {
    "document": "Python MySQL Python can be used in database applications. One of the most popular databases is MySQL. MySQL Database To be able to experiment with the code examples in this tutorial, you should have MySQL installed on your computer. You can download a MySQL database at https://www.mysql.com/downloads/. Install MySQL Driver Python needs a MySQL driver to access the MySQL database. In this tutorial we will use the driver \"MySQL Connector\". We recommend that you use PIP to install \"MySQL Connector\". PIP is most likely already installed in your Python environment. Navigate your command line to the location of PIP, and type the following: Download and install \"MySQL Connector\": Now you have downloaded and installed a MySQL driver. Test MySQL Connector To test if the installation was successful, or if you already have \"MySQL Connector\" installed, create a Python page with the following content: demo_mysql_test.py: If the above code was executed with no errors, \"MySQL Connector\" is installed and ready to be used. Create Connection Start by creating a connection to the database. Use the username and password from your MySQL database: demo_mysql_connection.py: Now you can start querying the database using SQL statements."
  },
  {
    "document": "Python MySQL Create Database Creating a Database To create a database in MySQL, use the \"CREATE DATABASE\" statement: Example create a database named \"mydatabase\": If the above code was executed with no errors, you have successfully created a database. Check if Database Exists You can check if a database exist by listing all databases in your system by using the \"SHOW DATABASES\" statement: Example Return a list of your system's databases: Or you can try to access the database when making the connection: Example Try connecting to the database \"mydatabase\": If the database does not exist, you will get an error."
  },
  {
    "document": "Python MySQL Create Table Creating a Table To create a table in MySQL, use the \"CREATE TABLE\" statement. Make sure you define the name of the database when you create the connection Example Create a table named \"customers\": If the above code was executed with no errors, you have now successfully created a table. Check if Table Exists You can check if a table exist by listing all tables in your database with the \"SHOW TABLES\" statement: Example Return a list of your system's databases: Primary Key When creating a table, you should also create a column with a unique key for each record. This can be done by defining a PRIMARY KEY. We use the statement \"INT AUTO_INCREMENT PRIMARY KEY\" which will insert a unique number for each record. Starting at 1, and increased by one for each record. Example Create primary key when creating the table: If the table already exists, use the ALTER TABLE keyword: Example Create primary key on an existing table:"
  },
  {
    "document": "Python MySQL Insert Into Table Insert Into Table To fill a table in MySQL, use the \"INSERT INTO\" statement. Example Insert a record in the \"customers\" table: Important! : Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table. mydb.commit() Insert Multiple Rows To insert multiple rows into a table, use the executemany() method. executemany() The second parameter of the executemany() method is a list of tuples, containing the data you want to insert: executemany() Example Fill the \"customers\" table with data: Get Inserted ID You can get the id of the row you just inserted by asking the cursor object. Note: If you insert more than one row, the id of the last inserted row is returned. Example Insert one row, and return the ID:"
  },
  {
    "document": "Python MySQL Select From Select From a Table To select from a table in MySQL, use the \"SELECT\" statement: Example Select all records from the \"customers\" table, and display the result: Note: We use the fetchall() method, which fetches all rows from the last executed statement. fetchall() Selecting Columns To select only some of the columns in a table, use the \"SELECT\" statement followed by the column name(s): Example Select only the name and address columns: Using the fetchone() Method If you are only interested in one row, you can use the fetchone() method. fetchone() The fetchone() method will return the first row of the result: fetchone() Example Fetch only one row:"
  },
  {
    "document": "Python MySQL Where Select With a Filter When selecting records from a table, you can filter the selection by using the \"WHERE\" statement: Example Select record(s) where the address is \"Park Lane 38\": result: Wildcard Characters You can also select the records that starts, includes, or ends with a given letter or phrase. Use the % to represent wildcard characters: % Example Select records where the address contains the word \"way\": Prevent SQL Injection When query values are provided by the user, you should escape the values. This is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database. The mysql.connector module has methods to escape query values: Example Escape query values by using the placholder %s method: %s"
  },
  {
    "document": "Python MySQL Order By Sort the Result Use the ORDER BY statement to sort the result in ascending or descending order. The ORDER BY keyword sorts the result ascending by default. To sort the result in descending order, use the DESC keyword. Example Sort the result alphabetically by name: result: ORDER BY DESC Use the DESC keyword to sort the result in a descending order. Example Sort the result reverse alphabetically by name:"
  },
  {
    "document": "Python MySQL Delete From By Delete Record You can delete records from an existing table by using the \"DELETE FROM\" statement: Example Delete any record where the address is \"Mountain 21\": Important! : Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table. mydb.commit() Notice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record(s) that should be deleted. If you omit the WHERE clause, all records will be deleted! Prevent SQL Injection It is considered a good practice to escape the values of any query, also in delete statements. This is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database. The mysql.connector module uses the placeholder %s to escape values in the delete statement: %s Example Escape values by using the placeholder %s method: %s"
  },
  {
    "document": "Python MySQL Drop Table Delete a Table You can delete an existing table by using the \"DROP TABLE\" statement: Example Delete the table \"customers\": Drop Only if Exist If the table you want to delete is already deleted, or for any other reason does not exist, you can use the IF EXISTS keyword to avoid getting an error. Example Delete the table \"customers\" if it exists:"
  },
  {
    "document": "Python MySQL Update Table Update Table You can update existing records in a table by using the \"UPDATE\" statement: Example Overwrite the address column from \"Valley 345\" to \"Canyon 123\": Important! : Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table. mydb.commit() Notice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated! Prevent SQL Injection It is considered a good practice to escape the values of any query, also in update statements. This is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database. The mysql.connector module uses the placeholder %s to escape values in the update statement: %s Example Escape values by using the placeholder %s method: %s"
  },
  {
    "document": "Python MySQL Limit Limit the Result You can limit the number of records returned from the query, by using the \"LIMIT\" statement: Example Select the 5 first records in the \"customers\" table: Start From Another Position If you want to return five records, starting from the third record, you can use the \"OFFSET\" keyword: Example Start from position 3, and return 5 records:"
  },
  {
    "document": "Python MySQL Join Join Two or More Tables You can combine rows from two or more tables, based on a related column between them, by using a JOIN statement. Consider you have a \"users\" table and a \"products\" table: users products These two tables can be combined by using users' fav field and products' id field. fav id Example Join users and products to see the name of the users favorite product: Note: You can use JOIN instead of INNER JOIN. They will both give you the same result. LEFT JOIN In the example above, Hannah, and Michael were excluded from the result, that is because INNER JOIN only shows the records where there is a match. If you want to show all users, even if they do not have a favorite product, use the LEFT JOIN statement: Example Select all users and their favorite product: RIGHT JOIN If you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement: Example Select all products, and the user(s) who have them as their favorite: Note: Hannah and Michael, who have no favorite product, are not included in the result."
  },
  {
    "document": "Python MongoDB Python can be used in database applications. One of the most popular NoSQL database is MongoDB. MongoDB MongoDB stores data in JSON-like documents, which makes the database very flexible and scalable. To be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database. You can download a free MongoDB database at https://www.mongodb.com. Or get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas. PyMongo Python needs a MongoDB driver to access the MongoDB database. In this tutorial we will use the MongoDB driver \"PyMongo\". We recommend that you use PIP to install \"PyMongo\". PIP is most likely already installed in your Python environment. Navigate your command line to the location of PIP, and type the following: Download and install \"PyMongo\": Now you have downloaded and installed a mongoDB driver. Test PyMongo To test if the installation was successful, or if you already have \"pymongo\" installed, create a Python page with the following content: demo_mongodb_test.py: If the above code was executed with no errors, \"pymongo\" is installed and ready to be used."
  },
  {
    "document": "Python MongoDB Create Database Creating a Database To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create. MongoDB will create the database if it does not exist, and make a connection to it. Example Create a database called \"mydatabase\": Important: In MongoDB, a database is not created until it gets content! MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection). Check if Database Exists Remember: In MongoDB, a database is not created until it gets content, so if this is your first time creating a database, you should complete the next two chapters (create collection and create document) before you check if the database exists! You can check if a database exist by listing all databases in you system: Example Return a list of your system's databases: Or you can check a specific database by name: Example Check if \"mydatabase\" exists:"
  },
  {
    "document": "Python MongoDB Create Collection A collection in MongoDB is the same as a table in SQL databases. Creating a Collection To create a collection in MongoDB, use database object and specify the name of the collection you want to create. MongoDB will create the collection if it does not exist. Example Create a collection called \"customers\": Important: In MongoDB, a collection is not created until it gets content! MongoDB waits until you have inserted a document before it actually creates the collection. Check if Collection Exists Remember: In MongoDB, a collection is not created until it gets content, so if this is your first time creating a collection, you should complete the next chapter (create document) before you check if the collection exists! You can check if a collection exist in a database by listing all collections: Example Return a list of all collections in your database: Or you can check a specific collection by name: Example Check if the \"customers\" collection exists:"
  },
  {
    "document": "Python MongoDB Insert Document A document in MongoDB is the same as a record in SQL databases. Insert Into Collection To insert a record, or document as it is called in MongoDB, into a collection, we use the insert_one() method. insert_one() The first parameter of the insert_one() method is a dictionary containing the name(s) and value(s) of each field in the document you want to insert. insert_one() Example Insert a record in the \"customers\" collection: Return the _id Field The insert_one() method returns a InsertOneResult object, which has a property, inserted_id, that holds the id of the inserted document. insert_one() inserted_id Example Insert another record in the \"customers\" collection, and return the value of the _id field: _id If you do not specify an _id field, then MongoDB will add one for you and assign a unique id for each document. _id In the example above no _id field was specified, so MongoDB assigned a unique _id for the record (document). _id Insert Multiple Documents To insert multiple documents into a collection in MongoDB, we use the insert_many() method. insert_many() The first parameter of the insert_many() method is a list containing dictionaries with the data you want to insert: insert_many() Example The insert_many() method returns a InsertManyResult object, which has a property, inserted_ids, that holds the ids of the inserted documents. insert_many() inserted_ids Insert Multiple Documents, with Specified IDs If you do not want MongoDB to assign unique ids for your document, you can specify the _id field when you insert the document(s). Remember that the values has to be unique. Two documents cannot have the same _id. Example"
  },
  {
    "document": "Python MongoDB Find In MongoDB we use the find() and find_one() methods to find data in a collection. find() find_one() Just like the SELECT statement is used to find data in a table in a MySQL database. Find One To select data from a collection in MongoDB, we can use the find_one() method. find_one() The find_one() method returns the first occurrence in the selection. find_one() Example Find the first document in the customers collection: Find All To select data from a table in MongoDB, we can also use the find() method. find() The find() method returns all occurrences in the selection. find() The first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection. find() No parameters in the find() method gives you the same result as SELECT * in MySQL. Example Return all documents in the \"customers\" collection, and print each document: Return Only Some Fields The second parameter of the find() method is an object describing which fields to include in the result. find() This parameter is optional, and if omitted, all fields will be included in the result. Example Return only the names and addresses, not the _ids: You are not allowed to specify both 0 and 1 values in the same object (except if one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, and vice versa: Example This example will exclude \"address\" from the result: Example You get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):"
  },
  {
    "document": "Python MongoDB Query Filter the Result When finding documents in a collection, you can filter the result by using a query object. The first argument of the find() method is a query object, and is used to limit the search. find() Example Find document(s) with the address \"Park Lane 38\": Advanced Query To make advanced queries you can use modifiers as values in the query object. E.g. to find the documents where the \"address\" field starts with the letter \"S\" or higher (alphabetically), use the greater than modifier: {\"$gt\": \"S\"}: {\"$gt\": \"S\"} Example Find documents where the address starts with the letter \"S\" or higher: Filter With Regular Expressions You can also use regular expressions as a modifier. Regular expressions can only be used to query strings. To find only the documents where the \"address\" field starts with the letter \"S\", use the regular expression {\"$regex\": \"^S\"}: {\"$regex\": \"^S\"} Example Find documents where the address starts with the letter \"S\":"
  },
  {
    "document": "Python MongoDB Sort Sort the Result Use the sort() method to sort the result in ascending or descending order. sort() The sort() method takes one parameter for \"fieldname\" and one parameter for \"direction\" (ascending is the default direction). sort() Example Sort the result alphabetically by name: Sort Descending Use the value -1 as the second parameter to sort descending. sort(\"name\", 1) #ascending sort(\"name\", -1) #descending Example Sort the result reverse alphabetically by name:"
  },
  {
    "document": "Python MongoDB Delete Document Delete Document To delete one document, we use the delete_one() method. delete_one() The first parameter of the delete_one() method is a query object defining which document to delete. delete_one() Note: If the query finds more than one document, only the first occurrence is deleted. Example Delete the document with the address \"Mountain 21\": Delete Many Documents To delete more than one document, use the delete_many() method. delete_many() The first parameter of the delete_many() method is a query object defining which documents to delete. delete_many() Example Delete all documents were the address starts with the letter S: Delete All Documents in a Collection To delete all documents in a collection, pass an empty query object to the delete_many() method: delete_many() Example Delete all documents in the \"customers\" collection:"
  },
  {
    "document": "Python MongoDB Drop Collection Delete Collection You can delete a table, or collection as it is called in MongoDB, by using the drop() method. drop() Example Delete the \"customers\" collection: The drop() method returns true if the collection was dropped successfully, and false if the collection does not exist. drop()"
  },
  {
    "document": "Python MongoDB Update Update Collection You can update a record, or document as it is called in MongoDB, by using the update_one() method. update_one() The first parameter of the update_one() method is a query object defining which document to update. update_one() Note: If the query finds more than one record, only the first occurrence is updated. The second parameter is an object defining the new values of the document. Example Change the address from \"Valley 345\" to \"Canyon 123\": Update Many To update all documents that meets the criteria of the query, use the update_many() method. update_many() Example Update all documents where the address starts with the letter \"S\":"
  },
  {
    "document": "Python MongoDB Limit Limit the Result To limit the result in MongoDB, we use the limit() method. limit() The limit() method takes one parameter, a number defining how many documents to return. limit() Consider you have a \"customers\" collection: Customers Example Limit the result to only return 5 documents:"
  },
  {
    "document": "Python Reference This section contains a Python reference documentation. Python Reference Module Reference"
  },
  {
    "document": "Python Built in Functions Python has a set of built-in functions."
  },
  {
    "document": "Python String Methods Python has a set of built-in methods that you can use on strings. Note: All string methods returns new values. They do not change the original string. Note: All string methods returns new values. They do not change the original string. Learn more about strings in our Python Strings Tutorial."
  },
  {
    "document": "Python List/Array Methods Python has a set of built-in methods that you can use on lists/arrays. Note: Python does not have built-in support for Arrays, but Python Lists can be used instead. Learn more about lists in our Python Lists Tutorial. Learn more about arrays in our Python Arrays Tutorial."
  },
  {
    "document": "Python Dictionary Methods Python has a set of built-in methods that you can use on dictionaries. Learn more about dictionaries in our Python Dictionaries Tutorial."
  },
  {
    "document": "Python Tuple Methods Python has two built-in methods that you can use on tuples. Learn more about tuples in our Python Tuples Tutorial."
  },
  {
    "document": "Python Set Methods Python has a set of built-in methods that you can use on sets. - -= & &= <= < >= > ^ ^= | |= Learn more about sets in our Python Sets Tutorial."
  },
  {
    "document": "Python File Methods Python has a set of methods available for the file object. Learn more about the file object in our Python File Handling Tutorial."
  },
  {
    "document": "Python Keywords Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:"
  },
  {
    "document": "Python Built-in Exceptions Built-in Exceptions The table below shows built-in exceptions that are usually raised in Python:"
  },
  {
    "document": "Python Glossary This is a list of all the features explained in the Python Tutorial."
  },
  {
    "document": "Python Random Module Python has a built-in module that you can use to make random numbers. The random module has a set of methods: random"
  },
  {
    "document": "Python Requests Module Example Make a request to a web page, and print the response text: Definition and Usage The requests module allows you to send HTTP requests using Python. requests The HTTP request returns a Response Object with all the response data (content, encoding, status, etc). Download and Install the Requests Module Navigate your command line to the location of PIP, and type the following: Syntax Methods"
  },
  {
    "document": "Python statistics Module Python statistics Module Python has a built-in module that you can use to calculate mathematical statistics of numeric data. The statistics module was new in Python 3.4. statistics Statistics Methods"
  },
  {
    "document": "Python math Module Python math Module Python has a built-in module that you can use for mathematical tasks. The math module has a set of methods and constants. math Math Methods Math Constants"
  },
  {
    "document": "Python cmath Module Python cmath Module Python has a built-in module that you can use for mathematical tasks for complex numbers. The methods in this module accepts int, float, and complex numbers. It even accepts Python objects that has a __complex__() or __float__() method. int float complex __complex__() __float__() The methods in this module almost always return a complex number. If the return value can be expressed as a real number, the return value has an imaginary part of 0. The cmath module has a set of methods and constants. cmath cMath Methods cMath Constants"
  },
  {
    "document": "How to Remove Duplicates From a Python List Learn how to remove duplicates from a List in Python. Example Remove any duplicates from a List: Example Explained First we have a List that contains duplicates: A List with Duplicates Create a dictionary, using the List items as keys. This will automatically remove any duplicates because dictionaries cannot have duplicate keys. Create a Dictionary Then, convert the dictionary back into a list: Convert Into a List Now we have a List without any duplicates, and it has the same order as the original List. Print the List to demonstrate the result Print the List Create a Function If you like to have a function where you can send your lists, and get them back without duplicates, you can create a function and insert the code from the example above. Example Example Explained Create a function that takes a List as an argument. Create a Function Create a dictionary, using this List items as keys. Create a Dictionary Convert the dictionary into a list. Convert Into a List Return the list Return List Call the function, with a list as a parameter: Call the Function Print the result: Print the Result"
  },
  {
    "document": "How to Reverse a String in Python Learn how to reverse a String in Python. There is no built-in function to reverse a String in Python. The fastest (and easiest?) way is to use a slice that steps backwards, -1. -1 Example Reverse the string \"Hello World\": Example Explained We have a string, \"Hello World\", which we want to reverse: The String to Reverse Create a slice that starts at the end of the string, and moves backwards. In this particular example, the slice statement [::-1] means start at the end of the string and end at position 0, move with the step -1, negative one, which means one step backwards. [::-1] -1 Slice the String Now we have a string txt that reads \"Hello World\" backwards. txt Print the String to demonstrate the result Print the List Create a Function If you like to have a function where you can send your strings, and return them backwards, you can create a function and insert the code from the example above. Example Example Explained Create a function that takes a String as an argument. Create a Function Slice the string starting at the end of the string and move backwards. Slice the String Return the backward String Return the String Call the function, with a string as a parameter: Call the Function Print the result: Print the Result"
  },
  {
    "document": "How to Add Two Numbers in Python Learn how to add two numbers in Python. Use the + operator to add two numbers: + Example Add Two Numbers with User Input In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers: Example"
  },
  {
    "document": "Python Examples Python Syntax Syntax Explained Python Variables Variables Explained Python Numbers Numbers Explained Python Casting Casting Explained Python Strings Strings Explained Python Operators Operators Explained Python Lists Lists Explained Python Tuples Tuples Explained Python Sets Sets Explained Python Dictionaries Dictionaries Explained Python If ... Else If ... Else Explained Python While Loop While Loop Explained Python For Loop For Loop Explained Python Functions Functions Explained Python Lambda Lambda Explained Python Arrays Arrays Explained Python Classes and Objects Classes/Objects Explained Python Iterators Iterators Explained Python Modules Modules Explained Python Dates Dates Explained Python Math Math Explained Python JSON JSON Explained Python RegEx RegEx Explained Python PIP PIP Explained Python Try Except Try Except Explained Python File Handling File Handling Explained Python MySQL MySQL Explained Python MongoDB MongoDB Explained"
  },
  {
    "document": "Python Online Compiler Python Compiler (Editor) With our online Python compiler, you can edit Python code, and view the result in your browser. Example Hello, World! Python is awesome Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to create your own website or build Python applications, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that enables you to create and share your own website. You can also get a Python server, allowing you to develop and host your Python applications with ease. Note: This includes Python libraries such as: Django, Pandas, NumPy, SciPy and more. You can change the website's look and how it works by editing the code right in your web browser. It's easy to use and doesn't require any setup: The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your Python knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes Python, but you can use it for other languages too. New languages are added all the time: If you don't know Python, we suggest that you read our Python Tutorial from scratch. Easy Package Management Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation. Build Powerful Websites You can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share Your Website With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "Python Exercises Exercises Test your Python skills with exercises from all categories: Get Started Syntax Comments Variables Variable Names Multiple Variable Values Output Variable Global Variable Data Types Numbers Casting Strings Slicing Strings Modify Strings Concatenate Strings Format Strings Booleans Operators Lists Access Lists Change Lists Add List Items Remove List Items Loop Lists List Comprehension Sort Lists Copy Lists Join Lists Tuples Access Tuples Update Tuples Unpack Tuples Loop Tuples Join Tuples Sets Access Sets Add Set Items Remove Set Items Loop Sets Join Sets Dictionaries Access Dictionaries Change Dictionaries Add Dictionary Items Remove Dictionary Items Loop Dictionaries Copy Dictionaries Nested Dictionaries If Else Match While Loops For Loops Functions Lambda Arrays Classes Inheritance Iterators Polymorphism Scope Modules Dates Math JSON RegEx PIP Try Except User Input String Formatting File Handling Open File Write to File Remove File Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Python Quiz You can test your Python skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Python. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Python Quiz â¯ If you don't know Python, we suggest that you read our Python Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Python Server Create a Python Server Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "Python Syllabus Introduction The W3Schools Python Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of Python. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn Python step by step, from the introduction, to creating your first application with Python. Get Started With Python Â» Learning Outcomes Note: Are you a teacher teaching Python programming? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are Python Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn Python for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment Python, like any other programming language, is best learned by working hands-on with code. Easily try code with our \"Try it Yourself\" editor. Here, you can edit Python code and view the result: Example If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Python code and other backend languages. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account Python Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The Python exam is a test that summarizes the W3Schools Python syllabus. After passing the exam you get the \"Certified Python Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach Python programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "Python Study Plan Introduction The Python study plan helps you teach your students Python step-by-step. Creating a study plan for Python is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Python to the final exam. W3Schools Academy The study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach Python. The Python training materials is available for you to include and use in your study plan: Python Syllabus With the Python Syllabus, your students will start with the basics, like understanding variables and data types, and move to more advanced topics, like working with loops, functions, and file handling. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about Python Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 5-week Python study plan could look like: Image of Sample Python study plan: Ready to get started? Start with Python Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach Python programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "Python Interview Questions This page contains a list of typical Python Interview Questions and Answers. Python Interview Questions These questions and answers cover some fundamental Python concepts that are often discussed in interviews. isalnum() int() x = 41 if x > 10: print(\"Above ten,\") if x > 20: print(\"and also above 20!\") else: print(\"but not above 20.\") str int float complex list tuple range dict set frozenset bool bytes bytearray memoryview Membership operators are used to test if a sequence is present in an object. The in and not in operators are examples of these: in not in if pass *args * To create a module just save the code you want in a file with the file extension .py: .py Now we can use the module we just created, by using the import statement: import list2 = list1 list2 list1 list1 list2 copy() list() Get the characters from position 2 to position 5 (not included): Now we can use the class named MyClass to create objects: Create an object named p1, and print the value of x: Kickstart your career Get certified by completing the course"
  },
  {
    "document": "W3Schools Python Bootcamp Python Bootcamp Learn More What You Will Learn Python SQL NumPy Pandas R Self-paced Data Analytics Program Start learning Data Analytics with the W3Schools program and lay the foundations of your programming skills. This program is a great foundation for you that wants to get started with Data Analytics. It covers Python, SQL, NumPy, Pandas, R, and Data Science. Python is a popular object oriented programming language. SQL is a standard language for storing, manipulating and retrieving data in databases. NumPy is a Python library for using arrays in statistics and math. Pandas is a Python library for data analysis. R is a language for statistical computing and graphics. It provides an environment for data manipulation, calculation and visualization. This is a structured and interactive version of the w3schools Python, SQL, NumPy, Pandas, R, and Data Science Tutorial together with the w3schools certification. The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification. What You Get 7x Certifications: The Certified Data Analyst certification is granted when all the above certifications are obtained! Certificate of Completion You get sharable certificates that can be added to your CV, Resume or LinkedIn. Check out what it looks like in this example! Three Reasons to Join the Program Learn More How it Works Step 1. Course enrollment Enroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content. Step 2. Complete the course learning modules The courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam. Step 3. Take the exams The exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count. Step 4: Become certified Pass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code. Learn More"
  },
  {
    "document": "W3Schools Python Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "Python Training Introduction: Python is a popular programming language that can be used for a wide range of applications. W3Schools offers an Python training course that covers Python foundations and more. The course includes the W3Schools Certified Python Developer certification. The Python training is relevant for companies and schools that want to certify their employees or students. Organizations can track learner progress, get insights and manage everything from licenses to certificates with W3Schools Academy. Remember that you can always learn for free on W3Schools with the Python Tutorial. *Academy is available for companies and schools only. Get analytics to track learner progress and results. Flexible timelines and pacing to match busy schedules. Certifications that are trusted by leading organizations worldwide Python Training with W3Schools W3Schools has been training millions of learners since 1998. Governments, schools, and organizations worldwide trust W3Schools to train employees and students. W3Schools training materials and content have been well-proven over the years and are updated regularly. With the W3Schools Academy pricing model, it is now one of the worlds most affordable quality Python training options there is. Learning Outcomes The Certificate Course includes all the training materials to pass the Certified Python Developer certification exam. No prerequisites are required to take the course. The learners will be able to: If you are not a company or school, you can still buy the course for personal use. Read more about W3Schools courses here: W3Schools Courses Certified Python Developer After completing the training modules the learner will take the end of pathway exam. When the learner passes the exam, the learner will get the Certified Python Developer certification. The exam is a multiple choice exam with 60 questions and a duration of 60 minutes. Image of a Python Certificate: The certificate does not expire and is valid for lifetime. It is shareable and can be added to your CV or LinkedIn profile. You can read more about the certificate here: Python Certificate Track Learner Progress As an employer or a school you can track learner progress and results. Assign courses to learners with ease and get them started in no time. With W3Schools Academy you can manage everything from licenses to certificates. It will give you everything you need to train your employees or students in different technologies. Image of class overview in Academy: You can read more about the Academy here: W3Schools Academy Note: If you don't want to track progress, there is an option to give them access to the course without any management. Interactive Learning The course is designed to be interactive and fun to learn. The learner will engage with different learning activities to keep them engaged. This includes quizzes, code exercises, challenges, and a final exam. Stay engaged with hands-on coding challenges that help you practice and test what you've learned."
  },
  {
    "document": "Image of one of the activity types in the course, a Python Challenge: Python is best learned by doing, and this is why we have included a lot of challenges in the course. You can read more about the different types of activities here: Coding Exercises Training Course Overview How to Get Started Are you ready to start training your employees today? Buy Access to Academy Now Â»"
  },
  {
    "document": "React Tutorial Learn React React is a JavaScript library for building user interfaces. React is used to build single-page applications. React allows us to create reusable UI components. Learning by Examples Our \"Show React\" tool makes it easy to demonstrate React. It shows both the code and the result. Example: import React from 'react'; import ReactDOM from 'react-dom/client'; function Hello(props) { return <h1>Hello World!</h1>; } const container = document.getElementById(\"root\"); const root = ReactDOM.createRoot(container); root.render(<Hello />); import React from 'react'; import ReactDOM from 'react-dom/client'; function Hello(props) { return <h1>Hello World!</h1>; } const container = document.getElementById(\"root\"); const root = ReactDOM.createRoot(container); root.render(<Hello />); Run Example Â» Learning by Exercises Many chapters in this tutorial end with an exercise where you can check you level of knowledge. See all React Exercises React Quiz Test your React skills with a quiz. React Quiz Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Create React App To learn and test React, you should set up a React Environment on your computer. This tutorial uses the create-react-app. create-react-app The create-react-app tool is an officially supported way to create React applications. create-react-app Node.js is required to use create-react-app. create-react-app Open your terminal in the directory you would like to create your application. Run this command to create a React application named my-react-app: my-react-app create-react-app will set up everything you need to run a React application. create-react-app Note: If you've previously installed create-react-app globally, it is recommended that you uninstall the package to ensure npx always uses the latest version of create-react-app. To uninstall, run this command: npm uninstall -g create-react-app. create-react-app create-react-app npm uninstall -g create-react-app Run the React Application Run this command to move to the my-react-app directory: my-react-app Run this command to execute the React application my-react-app: my-react-app A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar. localhost:3000 The result: You will learn more about the create-react-app in the React Get Started chapter. create-react-app What You Should Already Know Before you continue you should have a basic understanding of the following: If you want to study these subjects first, find the tutorials on our Home page. In addition, you should also have some experience with the new JavaScript features introduced in ECMAScript 6 (ES6), you will learn about them in the React ES6 chapter. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "React Introduction What is React? React is a front-end JavaScript library. React was developed by the Facebook Software Engineer Jordan Walke. React is also known as React.js or ReactJS. React is a tool for building UI components. How does React Work? React creates a VIRTUAL DOM in memory. Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM. React only changes what needs to be changed! React finds out what changes have been made, and changes only what needs to be changed. You will learn the various aspects of how React does this in the rest of this tutorial. What You Should Already Know Before you continue you should have a basic understanding of the following: If you want to study these subjects first, find the tutorials on our Home page. React.JS History Latest version of React.JS is 19.0.0 (December 2024). Initial release to the Public (version 0.3.0) was in July 2013. React.JS was first used in 2011 for Facebook's Newsfeed feature. Facebook Software Engineer, Jordan Walke, created it."
  },
  {
    "document": "React Getting Started To use React in production, you need npm which is included with Node.js. To get an overview of what React is, you can write React code directly in HTML. But in order to use React in production, you need npm and Node.js installed. React Directly in HTML The quickest way start learning React is to write React directly in your HTML files. W3Schools Spaces The easiest way to get started with creating HTML files is W3Schools Spaces! It is the perfect place to create, edit, and share your work with others! Get started for free â¯ Start by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers. You will learn more about JSX in the React JSX chapter. Example Include three CDN's in your HTML file: <!DOCTYPE html> <html> <head> <script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script> <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script> <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script> </head> <body> <div id=\"mydiv\"></div> <script type=\"text/babel\"> function Hello() { return <h1>Hello World!</h1>; } const container = document.getElementById('mydiv'); const root = ReactDOM.createRoot(container); root.render(<Hello />) </script> </body> </html> <!DOCTYPE html> <html> <head> <script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script> <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script> <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script> </head> <body> <div id=\"mydiv\"></div> <script type=\"text/babel\"> function Hello() { return <h1>Hello World!</h1>; } const container = document.getElementById('mydiv'); const root = ReactDOM.createRoot(container); root.render(<Hello />) </script> </body> </html> Try it Yourself Â» This way of using React can be OK for testing purposes, but for production you will need to set up a React environment. Setting up a React Environment If you have npx and Node.js installed, you can create a React application by using create-react-app. create-react-app If you've previously installed create-react-app globally, it is recommended that you uninstall the package to ensure npx always uses the latest version of create-react-app. create-react-app create-react-app To uninstall, run this command: npm uninstall -g create-react-app. npm uninstall -g create-react-app Run this command to create a React application named my-react-app: my-react-app The create-react-app will set up everything you need to run a React application. create-react-app Run the React Application Now you are ready to run your first real React application! Run this command to move to the my-react-app directory: my-react-app Run this command to run the React application my-react-app: my-react-app A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar. localhost:3000 The result: Modify the React Application So far so good, but how do I change the content? Look in the my-react-app directory, and you will find a src folder. Inside the src folder there is a file called App.js, open it and it will look like this: my-react-app src src App.js /myReactApp/src/App.js: import logo from './logo.svg'; import './App.css'; function App() { return ( <div className=\"App\"> <header className=\"App-header\"> <img src={logo} className=\"App-logo\" alt=\"logo\" /> <p> Edit <code>src/App.js</code> and save to reload."
  },
  {
    "document": "</p> <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" > Learn React </a> </header> </div> ); } export default App; import logo from './logo.svg'; import './App.css'; function App() { return ( <div className=\"App\"> <header className=\"App-header\"> <img src={logo} className=\"App-logo\" alt=\"logo\" /> <p> Edit <code>src/App.js</code> and save to reload. </p> <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" > Learn React </a> </header> </div> ); } export default App; Try changing the HTML content and save the file. Notice that the changes are visible immediately after you save the file, you do not have to reload the browser! Example Replace all the content inside the <div className=\"App\"> with a <h1> element. <div className=\"App\"> <h1> See the changes in the browser when you click Save. function App() { return ( <div className=\"App\"> <h1>Hello World!</h1> </div> ); } export default App; function App() { return ( <div className=\"App\"> <h1>Hello World!</h1> </div> ); } export default App; Notice that we have removed the imports we do not need (logo.svg and App.css). The result: What's Next? Now you have a React Environment on your computer, and you are ready to learn more about React. In the rest of this tutorial we will use our \"Show React\" tool to explain the various aspects of React, and how they are displayed in the browser. If you want to follow the same steps on your computer, start by stripping down the src folder to only contain one file: index.js. You should also remove any unnecessary lines of code inside the index.js file to make them look like the example in the \"Show React\" tool below: src index.js index.js Example Click the \"Run Example\" button to see the result. index.js: index.js import React from 'react'; import ReactDOM from 'react-dom/client'; const myFirstElement = <h1>Hello React!</h1> const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myFirstElement); import React from 'react'; import ReactDOM from 'react-dom/client'; const myFirstElement = <h1>Hello React!</h1> const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myFirstElement); Run Example Â»"
  },
  {
    "document": "Upgrade React Upgrade to React 18 Upgrading an existing React application to version 18 only requires two steps. If you are already using the latest version of create-react-app which uses React version 18 you can skip this section. create-react-app Step 1: Install React 18 To install the latest version, from your project folder run the following from the terminal: Step 2: Use the new root API In order to take advantage of React 18's concurrent features you'll need to use the new root API for client rendering. // Before import ReactDOM from 'react-dom'; ReactDOM.render(<App />, document.getElementById('root')); // After import ReactDOM from 'react-dom/client'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); // Before import ReactDOM from 'react-dom'; ReactDOM.render(<App />, document.getElementById('root')); // After import ReactDOM from 'react-dom/client'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Your application will work without using the new root API. If you continue to use ReactDOM.render your application will behave like React 17. ReactDOM.render"
  },
  {
    "document": "React ES6 What is ES6? ES6 stands for ECMAScript 6. ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015. Why Should I Learn ES6? React uses ES6, and you should be familiar with some of the new features like: .map()"
  },
  {
    "document": "React ES6 What is ES6? ES6 stands for ECMAScript 6. ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015. Why Should I Learn ES6? React uses ES6, and you should be familiar with some of the new features like: .map()"
  },
  {
    "document": "React ES6 Classes Classes ES6 introduced classes. A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the properties are assigned inside a constructor() method. function class constructor() Example A simple class constructor: class Car { constructor(name) { this.brand = name; } } class Car { constructor(name) { this.brand = name; } } Notice the case of the class name. We have begun the name, \"Car\", with an uppercase character. This is a standard naming convention for classes. Now you can create objects using the Car class: Example Create an object called \"mycar\" based on the Car class: class Car { constructor(name) { this.brand = name; } } const mycar = new Car(\"Ford\"); class Car { constructor(name) { this.brand = name; } } const mycar = new Car(\"Ford\"); Try it Yourself Â» Note: The constructor function is called automatically when the object is initialized. Method in Classes You can add your own methods in a class: Example Create a method named \"present\": class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } const mycar = new Car(\"Ford\"); mycar.present(); class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } const mycar = new Car(\"Ford\"); mycar.present(); Try it Yourself Â» As you can see in the example above, you call the method by referring to the object's method name followed by parentheses (parameters would go inside the parentheses). Class Inheritance To create a class inheritance, use the extends keyword. extends A class created with a class inheritance inherits all the methods from another class: Example Create a class named \"Model\" which will inherit the methods from the \"Car\" class: class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } class Model extends Car { constructor(name, mod) { super(name); this.model = mod; } show() { return this.present() + ', it is a ' + this.model } } const mycar = new Model(\"Ford\", \"Mustang\"); mycar.show(); class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } class Model extends Car { constructor(name, mod) { super(name); this.model = mod; } show() { return this.present() + ', it is a ' + this.model } } const mycar = new Model(\"Ford\", \"Mustang\"); mycar.show(); Try it Yourself Â» The super() method refers to the parent class. super() By calling the super() method in the constructor method, we call the parent's constructor method and get access to the parent's properties and methods. super() To learn more about classes, check out our JavaScript Classes section."
  },
  {
    "document": "React ES6 Arrow Functions Arrow Functions Arrow functions allow us to write shorter function syntax: Example Before: hello = function() { return \"Hello World! \"; } hello = function() { return \"Hello World! \"; } Try it Yourself Â» Example With Arrow Function: hello = () => { return \"Hello World! \"; } hello = () => { return \"Hello World! \"; } Try it Yourself Â» Try it Yourself Â» It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and the return keyword: return Example Arrow Functions Return Value by Default: hello = () => \"Hello World! \"; hello = () => \"Hello World! \"; Try it Yourself Â» Note: This works only if the function has only one statement. If you have parameters, you pass them inside the parentheses: Example Arrow Function With Parameters: hello = (val) => \"Hello \" + val; hello = (val) => \"Hello \" + val; Try it Yourself Â» In fact, if you have only one parameter, you can skip the parentheses as well: Example Arrow Function Without Parentheses: hello = val => \"Hello \" + val; hello = val => \"Hello \" + val; Try it Yourself Â» What About this? this The handling of this is also different in arrow functions compared to regular functions. this In short, with arrow functions there is no binding of this. this In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever. this With arrow functions, the this keyword always represents the object that defined the arrow function. this Let us take a look at two examples to understand the difference. Both examples call a method twice, first when the page loads, and once again when the user clicks a button. The first example uses a regular function, and the second example uses an arrow function. The result shows that the first example returns two different objects (window and button), and the second example returns the Header object twice."
  },
  {
    "document": "Example With a regular function, this represents the object that called the function: this class Header { constructor() { this.color = \"Red\"; } //Regular function: changeColor = function() { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor); class Header { constructor() { this.color = \"Red\"; } //Regular function: changeColor = function() { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor); Try it Yourself Â» Example With an arrow function, this represents the Header object no matter who called the function: this class Header { constructor() { this.color = \"Red\"; } //Arrow function: changeColor = () => { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor); class Header { constructor() { this.color = \"Red\"; } //Arrow function: changeColor = () => { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor); Try it Yourself Â» Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions."
  },
  {
    "document": "React ES6 Variables Variables Before ES6 there was only one way of defining your variables: with the var keyword. If you did not define them, they would be assigned to the global object. Unless you were in strict mode, then you would get an error if your variables were undefined. var Now, with ES6, there are three ways of defining your variables: var, let, and const. var let const Example var var x = 5.6; var x = 5.6; If you use var outside of a function, it belongs to the global scope. var If you use var inside of a function, it belongs to that function. var If you use var inside of a block, i.e. a for loop, the variable is still available outside of that block. var var has a function scope, not a block scope. var Example let let x = 5.6; let x = 5.6; let is the block scoped version of var, and is limited to the block (or expression) where it is defined. let var If you use let inside of a block, i.e. a for loop, the variable is only available inside of that loop. let let has a block scope. let Example const const x = 5.6; const x = 5.6; const is a variable that once it has been created, its value can never change. const const has a block scope. const The keyword const is a bit misleading. const It does not define a constant value. It defines a constant reference to a value. Because of this you can NOT: But you CAN:"
  },
  {
    "document": "React ES6 Array Methods Array Methods There are many JavaScript array methods. One of the most useful in React is the .map() array method. .map() The .map() method allows you to run a function on each item in the array, returning a new array as the result. .map() In React, map() can be used to generate lists. map() Example Generate a list of items from an array: const myArray = ['apple', 'banana', 'orange']; const myList = myArray.map((item) => <p>{item}</p>) const myArray = ['apple', 'banana', 'orange']; const myList = myArray.map((item) => <p>{item}</p>) Run Example Â»"
  },
  {
    "document": "React ES6 Destructuring Destructuring To illustrate destructuring, we'll make a sandwich. Do you take everything out of the refrigerator to make your sandwich? No, you only take out the items you would like to use on your sandwich. Destructuring is exactly the same. We may have an array or object that we are working with, but we only need some of the items contained in these. Destructuring makes it easy to extract only what is needed. Destructing Arrays Here is the old way of assigning array items to a variable: Example Before: const vehicles = ['mustang', 'f-150', 'expedition']; // old way const car = vehicles[0]; const truck = vehicles[1]; const suv = vehicles[2]; const vehicles = ['mustang', 'f-150', 'expedition']; // old way const car = vehicles[0]; const truck = vehicles[1]; const suv = vehicles[2]; Here is the new way of assigning array items to a variable: Example With destructuring: const vehicles = ['mustang', 'f-150', 'expedition']; const [car, truck, suv] = vehicles; const vehicles = ['mustang', 'f-150', 'expedition']; const [car, truck, suv] = vehicles; When destructuring arrays, the order that variables are declared is important. If we only want the car and suv we can simply leave out the truck but keep the comma: const vehicles = ['mustang', 'f-150', 'expedition']; const [car,, suv] = vehicles; const vehicles = ['mustang', 'f-150', 'expedition']; const [car,, suv] = vehicles; Destructuring comes in handy when a function returns an array: Example function calculate(a, b) { const add = a + b; const subtract = a - b; const multiply = a * b; const divide = a / b; return [add, subtract, multiply, divide]; } const [add, subtract, multiply, divide] = calculate(4, 7); function calculate(a, b) { const add = a + b; const subtract = a - b; const multiply = a * b; const divide = a / b; return [add, subtract, multiply, divide]; } const [add, subtract, multiply, divide] = calculate(4, 7); Try it Yourself Â» Destructuring Objects Here is the old way of using an object inside a function: Example Before: const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red' } myVehicle(vehicleOne); // old way function myVehicle(vehicle) { const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '. '; } const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red' } myVehicle(vehicleOne); // old way function myVehicle(vehicle) { const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '."
  },
  {
    "document": "'; } Here is the new way of using an object inside a function: Example With destructuring: const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red' } myVehicle(vehicleOne); function myVehicle({type, color, brand, model}) { const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '. '; } const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red' } myVehicle(vehicleOne); function myVehicle({type, color, brand, model}) { const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '. '; } Try it Yourself Â» Notice that the object properties do not have to be declared in a specific order. We can even destructure deeply nested objects by referencing the nested object then using a colon and curly braces to again destructure the items needed from the nested object: Example const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red', registration: { city: 'Houston', state: 'Texas', country: 'USA' } } myVehicle(vehicleOne) function myVehicle({ model, registration: { state } }) { const message = 'My ' + model + ' is registered in ' + state + '. '; } const vehicleOne = { brand: 'Ford', model: 'Mustang', type: 'car', year: 2021, color: 'red', registration: { city: 'Houston', state: 'Texas', country: 'USA' } } myVehicle(vehicleOne) function myVehicle({ model, registration: { state } }) { const message = 'My ' + model + ' is registered in ' + state + '. '; } Try it Yourself Â»"
  },
  {
    "document": "React ES6 Spread Operator Spread Operator The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object. ... Example const numbersOne = [1, 2, 3]; const numbersTwo = [4, 5, 6]; const numbersCombined = [...numbersOne, ...numbersTwo]; const numbersOne = [1, 2, 3]; const numbersTwo = [4, 5, 6]; const numbersCombined = [...numbersOne, ...numbersTwo]; Try it Yourself Â» The spread operator is often used in combination with destructuring. Example Assign the first and second items from numbers to variables and put the rest in an array: numbers const numbers = [1, 2, 3, 4, 5, 6]; const [one, two, ...rest] = numbers; const numbers = [1, 2, 3, 4, 5, 6]; const [one, two, ...rest] = numbers; Try it Yourself Â» We can use the spread operator with objects too: Example Combine these two objects: const myVehicle = { brand: 'Ford', model: 'Mustang', color: 'red' } const updateMyVehicle = { type: 'car', year: 2021, color: 'yellow' } const myUpdatedVehicle = {...myVehicle, ...updateMyVehicle} const myVehicle = { brand: 'Ford', model: 'Mustang', color: 'red' } const updateMyVehicle = { type: 'car', year: 2021, color: 'yellow' } const myUpdatedVehicle = {...myVehicle, ...updateMyVehicle} Try it Yourself Â» Notice the properties that did not match were combined, but the property that did match, color, was overwritten by the last object that was passed, updateMyVehicle. The resulting color is now yellow. color updateMyVehicle"
  },
  {
    "document": "React ES6 Modules Modules JavaScript modules allow you to break up your code into separate files. This makes it easier to maintain the code-base. ES Modules rely on the import and export statements. import export Export You can export a function or variable from any file. Let us create a file named person.js, and fill it with the things we want to export. person.js There are two types of exports: Named and Default. Named Exports You can create named exports two ways. In-line individually, or all at once at the bottom. Example In-line individually: person.js person.js export const name = \"Jesse\" export const age = 40 export const name = \"Jesse\" export const age = 40 All at once at the bottom: person.js person.js const name = \"Jesse\" const age = 40 export { name, age } const name = \"Jesse\" const age = 40 export { name, age } Default Exports Let us create another file, named message.js, and use it for demonstrating default export. message.js You can only have one default export in a file. Example message.js message.js const message = () => { const name = \"Jesse\"; const age = 40; return name + ' is ' + age + 'years old. '; }; export default message; const message = () => { const name = \"Jesse\"; const age = 40; return name + ' is ' + age + 'years old. '; }; export default message; Import You can import modules into a file in two ways, based on if they are named exports or default exports. Named exports must be destructured using curly braces. Default exports do not. Example Import named exports from the file person.js: import { name, age } from \"./person.js\"; import { name, age } from \"./person.js\"; Try it Yourself Â» Example Import a default export from the file message.js: import message from \"./message.js\"; import message from \"./message.js\"; Try it Yourself Â»"
  },
  {
    "document": "React ES6 Ternary Operator Ternary Operator The ternary operator is a simplified conditional operator like if / else. if else Syntax: condition ? <expression if true> : <expression if false> condition ? <expression if true> : <expression if false> Here is an example using if / else: if else Example Before: if (authenticated) { renderApp(); } else { renderLogin(); } if (authenticated) { renderApp(); } else { renderLogin(); } Try it Yourself Â» Here is the same example using a ternary operator: Example With Ternary authenticated ? renderApp() : renderLogin(); authenticated ? renderApp() : renderLogin(); Try it Yourself Â»"
  },
  {
    "document": "React Render HTML React's goal is in many ways to render HTML in a web page. React renders HTML to the web page by using a function called createRoot() and its method render(). createRoot() render() The createRoot Function The createRoot() function takes one argument, an HTML element. createRoot() The purpose of the function is to define the HTML element where a React component should be displayed. The render Method The render() method is then called to define the React component that should be rendered. render() But render where? There is another folder in the root directory of your React project, named \"public\". In this folder, there is an index.html file. index.html You'll notice a single <div> in the body of this file. This is where our React application will be rendered. <div> Example Display a paragraph inside an element with the id of \"root\": const container = document.getElementById('root'); const root = ReactDOM.createRoot(container); root.render(<p>Hello</p>); const container = document.getElementById('root'); const root = ReactDOM.createRoot(container); root.render(<p>Hello</p>); The result is displayed in the <div id=\"root\"> element: <div id=\"root\"> <body> <div id=\"root\"></div> </body> <body> <div id=\"root\"></div> </body> Run Example Â» Note that the element id does not have to be called \"root\", but this is the standard convention. The HTML Code The HTML code in this tutorial uses JSX which allows you to write HTML tags inside the JavaScript code: Do not worry if the syntax is unfamiliar, you will learn more about JSX in the next chapter. Example Create a variable that contains HTML code and display it in the \"root\" node: const myelement = ( <table> <tr> <th>Name</th> </tr> <tr> <td>John</td> </tr> <tr> <td>Elsa</td> </tr> </table> ); const container = document.getElementById('root'); const root = ReactDOM.createRoot(container); root.render(myelement); const myelement = ( <table> <tr> <th>Name</th> </tr> <tr> <td>John</td> </tr> <tr> <td>Elsa</td> </tr> </table> ); const container = document.getElementById('root'); const root = ReactDOM.createRoot(container); root.render(myelement); Run Example Â» The Root Node The root node is the HTML element where you want to display the result. It is like a container for content managed by React. It does NOT have to be a <div> element and it does NOT have to have the id='root': <div> id='root' Example The root node can be called whatever you like: <body> <header id=\"sandy\"></header> </body> <body> <header id=\"sandy\"></header> </body> Display the result in the <header id=\"sandy\"> element: <header id=\"sandy\"> const container = document.getElementById('sandy'); const root = ReactDOM.createRoot(container); root.render(<p>Hallo</p>); const container = document.getElementById('sandy'); const root = ReactDOM.createRoot(container); root.render(<p>Hallo</p>); Run Example Â»"
  },
  {
    "document": "React JSX What is JSX? JSX stands for JavaScript XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React. Coding JSX JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. createElement() appendChild() JSX converts HTML tags into react elements. You are not required to use JSX, but JSX makes it easier to write React applications. Here are two examples. The first uses JSX and the second does not: Example 1 JSX: const myElement = <h1>I Love JSX!</h1>; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myElement); const myElement = <h1>I Love JSX!</h1>; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myElement); Run Example Â» Example 2 Without JSX: const myElement = React.createElement('h1', {}, 'I do not use JSX! '); const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myElement); const myElement = React.createElement('h1', {}, 'I do not use JSX! '); const root = ReactDOM.createRoot(document.getElementById('root')); root.render(myElement); Run Example Â» As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code. JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime. Expressions in JSX With JSX you can write expressions inside curly braces { }. { } The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result: Example Execute the expression 5 + 5: 5 + 5 const myElement = <h1>React is {5 + 5} times better with JSX</h1>; const myElement = <h1>React is {5 + 5} times better with JSX</h1>; Run Example Â» Inserting a Large Block of HTML To write HTML on multiple lines, put the HTML inside parentheses: Example Create a list with three list items: const myElement = ( <ul> <li>Apples</li> <li>Bananas</li> <li>Cherries</li> </ul> ); const myElement = ( <ul> <li>Apples</li> <li>Bananas</li> <li>Cherries</li> </ul> ); Run Example Â» One Top Level Element The HTML code must be wrapped in ONE top level element. So if you like to write two paragraphs, you must put them inside a parent element, like a div element. div Example Wrap two paragraphs inside one DIV element: const myElement = ( <div> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </div> ); const myElement = ( <div> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </div> ); Run Example Â» JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element. Alternatively, you can use a \"fragment\" to wrap multiple lines. This will prevent unnecessarily adding extra nodes to the DOM. A fragment looks like an empty HTML tag: <></>."
  },
  {
    "document": "<></> Example Wrap two paragraphs inside a fragment: const myElement = ( <> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </> ); const myElement = ( <> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </> ); Run Example Â» Elements Must be Closed JSX follows XML rules, and therefore HTML elements must be properly closed. Example Close empty elements with /> /> const myElement = <input type=\"text\" />; const myElement = <input type=\"text\" />; Run Example Â» JSX will throw an error if the HTML is not properly closed. Attribute class = className The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX. class class Use attribute className instead. className JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes. className className class Example Use attribute className instead of class in JSX: className class const myElement = <h1 className=\"myclass\">Hello World</h1>; const myElement = <h1 className=\"myclass\">Hello World</h1>; Run Example Â» Conditions - if statements React supports if statements, but not inside JSX. if To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead: if Write if statements outside of the JSX code: if Example Write \"Hello\" if x is less than 10, otherwise \"Goodbye\": x const x = 5; let text = \"Goodbye\"; if (x < 10) { text = \"Hello\"; } const myElement = <h1>{text}</h1>; const x = 5; let text = \"Goodbye\"; if (x < 10) { text = \"Hello\"; } const myElement = <h1>{text}</h1>; Run Example Â» Use ternary expressions instead: Example Write \"Hello\" if x is less than 10, otherwise \"Goodbye\": x const x = 5; const myElement = <h1>{(x) < 10 ? \"Hello\" : \"Goodbye\"}</h1>; const x = 5; const myElement = <h1>{(x) < 10 ? \"Hello\" : \"Goodbye\"}</h1>; Run Example Â» Note that in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {}. {}"
  },
  {
    "document": "React Components Components are like functions that return HTML elements. React Components Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML. Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components. In older React code bases, you may find Class components primarily used. It is now suggested to use Function components along with Hooks, which were added in React 16.8. There is an optional section on Class components for your reference. Create Your First Component When creating a React component, the component's name MUST start with an upper case letter. Class Component A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions. extends React.Component The component also requires a render() method, this method returns HTML. render() Example Create a Class component called Car Car class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } Function Component Here is the same example as above, but created using a Function component instead. A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial. Example Create a Function component called Car Car function Car() { return <h2>Hi, I am a Car!</h2>; } function Car() { return <h2>Hi, I am a Car!</h2>; } Rendering a Component Now your React application has a component called Car, which returns an <h2> element. <h2> To use this component in your application, use similar syntax as normal HTML: <Car /> <Car /> Example Display the Car component in the \"root\" element: Car const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» Props Components can be passed as props, which stands for properties. props Props are like function arguments, and you send them into the component as attributes. You will learn more about props in the next chapter."
  },
  {
    "document": "props Example Use an attribute to pass a color to the Car component, and use it in the render() function: function Car(props) { return <h2>I am a {props.color} Car!</h2>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car color=\"red\"/>); function Car(props) { return <h2>I am a {props.color} Car!</h2>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car color=\"red\"/>); Run Example Â» Components in Components We can refer to components inside other components: Example Use the Car component inside the Garage component: function Car() { return <h2>I am a Car!</h2>; } function Garage() { return ( <> <h1>Who lives in my Garage?</h1> <Car /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car() { return <h2>I am a Car!</h2>; } function Garage() { return ( <> <h1>Who lives in my Garage?</h1> <Car /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» Components in Files React is all about re-using code, and it is recommended to split your components into separate files. To do that, create a new file with a .js file extension and put the code inside it: .js Note that the filename must start with an uppercase character. Example This is the new file, we named it \"Car.js\": function Car() { return <h2>Hi, I am a Car!</h2>; } export default Car; function Car() { return <h2>Hi, I am a Car!</h2>; } export default Car; To be able to use the Car component, you have to import the file in your application. Example Now we import the \"Car.js\" file in the application, and we can use the Car component as if it was created here. Car import React from 'react'; import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import React from 'react'; import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â»"
  },
  {
    "document": "React Class Components Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered \"state-less\". With the addition of Hooks, Function components are now almost equivalent to Class components. The differences are so minor that you will probably never need to use a Class component in React. Even though Function components are preferred, there are no current plans on removing Class components from React. This section will give you an overview of how to use Class components in React. Feel free to skip this section, and use Function Components instead. React Components Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render() function. Components come in two types, Class components and Function components, in this chapter you will learn about Class components. Create a Class Component When creating a React component, the component's name must start with an upper case letter. The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions. extends React.Component The component also requires a render() method, this method returns HTML. render() Example Create a Class component called Car Car class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } Now your React application has a component called Car, which returns a <h2> element. <h2> To use this component in your application, use similar syntax as normal HTML: <Car /> <Car /> Example Display the Car component in the \"root\" element: Car const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» Component Constructor If there is a constructor() function in your component, this function will be called when the component gets initiated. constructor() constructor() The constructor function is where you initiate the component's properties. In React, component properties should be kept in an object called state. state You will learn more about state later in this tutorial. state The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component's constructor function, and your component has access to all the functions of the parent component (React.Component)."
  },
  {
    "document": "super() React.Component Example Create a constructor function in the Car component, and add a color property: class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a Car!</h2>; } } class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a Car!</h2>; } } Use the color property in the render() function: Example class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a {this.state.color} Car!</h2>; } } class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a {this.state.color} Car!</h2>; } } Run Example Â» Props Another way of handling component properties is by using props. props Props are like function arguments, and you send them into the component as attributes. You will learn more about props in the next chapter. props Example Use an attribute to pass a color to the Car component, and use it in the render() function: class Car extends React.Component { render() { return <h2>I am a {this.props.color} Car!</h2>; } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car color=\"red\"/>); class Car extends React.Component { render() { return <h2>I am a {this.props.color} Car!</h2>; } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car color=\"red\"/>); Run Example Â» Props in the Constructor If your component has a constructor function, the props should always be passed to the constructor and also to the React.Component via the super() method. super() Example class Car extends React.Component { constructor(props) { super(props); } render() { return <h2>I am a {this.props.model}!</h2>; } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car model=\"Mustang\"/>); class Car extends React.Component { constructor(props) { super(props); } render() { return <h2>I am a {this.props.model}!</h2>; } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car model=\"Mustang\"/>); Run Example Â» Components in Components We can refer to components inside other components: Example Use the Car component inside the Garage component: class Car extends React.Component { render() { return <h2>I am a Car!</h2>; } } class Garage extends React.Component { render() { return ( <div> <h1>Who lives in my Garage?</h1> <Car /> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); class Car extends React.Component { render() { return <h2>I am a Car!</h2>; } } class Garage extends React.Component { render() { return ( <div> <h1>Who lives in my Garage?</h1> <Car /> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» Components in Files React is all about re-using code, and it can be smart to insert some of your components in separate files. To do that, create a new file with a .js file extension and put the code inside it: .js Note that the file must start by importing React (as before), and it has to end with the statement export default Car;."
  },
  {
    "document": "export default Car; Example This is the new file, we named it Car.js: Car.js import React from 'react'; class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } export default Car; import React from 'react'; class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } export default Car; To be able to use the Car component, you have to import the file in your application. Car Example Now we import the Car.js file in the application, and we can use the Car component as if it was created here. Car.js Car import React from 'react'; import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import React from 'react'; import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» React Class Component State React Class components have a built-in state object. state You might have noticed that we used state earlier in the component constructor section. state The state object is where you store property values that belongs to the component. state When the state object changes, the component re-renders. state Creating the state Object The state object is initialized in the constructor: Example Specify the state object in the constructor method: state class Car extends React.Component { constructor(props) { super(props); this.state = {brand: \"Ford\"}; } render() { return ( <div> <h1>My Car</h1> </div> ); } } class Car extends React.Component { constructor(props) { super(props); this.state = {brand: \"Ford\"}; } render() { return ( <div> <h1>My Car</h1> </div> ); } } The state object can contain as many properties as you like: Example Specify all the properties your component need: class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My Car</h1> </div> ); } } class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My Car</h1> </div> ); } } Using the state Object state Refer to the state object anywhere in the component by using the this.state.propertyname syntax: state this.state.propertyname Example: Refer to the state object in the render() method: state render() class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> </div> ); } } class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> </div> ); } } Run Example Â» Changing the state Object state To change a value in the state object, use the this.setState() method."
  },
  {
    "document": "this.setState() When a value in the state object changes, the component will re-render, meaning that the output will change according to the new value(s). state Example: Add a button with an onClick event that will change the color property: onClick class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } changeColor = () => { this.setState({color: \"blue\"}); } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> <button type=\"button\" onClick={this.changeColor} >Change color</button> </div> ); } } class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } changeColor = () => { this.setState({color: \"blue\"}); } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> <button type=\"button\" onClick={this.changeColor} >Change color</button> </div> ); } } Run Example Â» Always use the setState() method to change the state object, it will ensure that the component knows its been updated and calls the render() method (and all the other lifecycle methods). setState() Lifecycle of Components Each component in React has a lifecycle which you can monitor and manipulate during its three main phases. The three phases are: Mounting, Updating, and Unmounting. Mounting Mounting means putting elements into the DOM. React has four built-in methods that gets called, in this order, when mounting a component: constructor() getDerivedStateFromProps() render() componentDidMount() The render() method is required and will always be called, the others are optional and will be called if you define them. render() constructor The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values. constructor() state The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component). constructor() props super(props) React.Component Example: The constructor method is called, by React, every time you make a component: constructor class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» getDerivedStateFromProps The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM. getDerivedStateFromProps() This is the natural place to set the state object based on the initial props."
  },
  {
    "document": "It takes state as an argument, and returns an object with changes to the state.The example below starts with the favorite color being \"red\", but the getDerivedStateFromProps() method updates the favorite color based on the favcol attribute: Example: The getDerivedStateFromProps method is called right before the render method: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\"/>); Run Example Â» render The render() method is required, and is the method that actually outputs the HTML to the DOM. Example: A simple component with a simple render() method: class Header extends React.Component { render() { return ( <h1>This is the content of the Header component</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidMount The componentDidMount() method is called after the component is rendered. This is where you run statements that requires that the component is already placed in the DOM. Example: At first my favorite color is red, but give me a second, and it is yellow instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Updating The next phase in the lifecycle is when a component is updated. A component is updated whenever there is a change in the component's state or props. React has five built-in methods that gets called, in this order, when a component is updated: getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() The render() method is required and will always be called, the others are optional and will be called if you define them. getDerivedStateFromProps Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated. This is still the natural place to set the state object based on the initial props. The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow: Example: If the component gets updated, the getDerivedStateFromProps() method is called: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\" />); Run Example Â» shouldComponentUpdate In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. The default value is true."
  },
  {
    "document": "The example below shows what happens when the shouldComponentUpdate() method returns false: Example: Stop the component from rendering at any update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Example: Same example as above, but this time the shouldComponentUpdate() method returns true instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» render The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes. The example below has a button that changes the favorite color to blue: Example: Click the button to make a change in the component's state: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» getSnapshotBeforeUpdate In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update. If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error. The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\". This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element. Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example: Use the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidUpdate The componentDidUpdate method is called after the component is updated in the DOM."
  },
  {
    "document": "The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and the color becomes \"yellow\". This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element: Example: The componentDidUpdate method is called after the update has been rendered in the DOM: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } componentDidUpdate() { document.getElementById(\"mydiv\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"mydiv\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Unmounting The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it. React has only one built-in method that gets called when a component is unmounted: componentWillUnmount() componentWillUnmount The componentWillUnmount method is called when the component is about to be removed from the DOM. Example: Click the button to delete the header: class Container extends React.Component { constructor(props) { super(props); this.state = {show: true}; } delHeader = () => { this.setState({show: false}); } render() { let myheader; if (this.state.show) { myheader = <Child />; }; return ( <div> {myheader} <button type=\"button\" onClick={this.delHeader}>Delete Header</button> </div> ); } } class Child extends React.Component { componentWillUnmount() { alert(\"The component named Header is about to be unmounted. \"); } render() { return ( <h1>Hello World!</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Container />); Run Example Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up state props It takes state as an argument, and returns an object with changes to the state.The example below starts with the favorite color being \"red\", but the getDerivedStateFromProps() method updates the favorite color based on the favcol attribute: Example: The getDerivedStateFromProps method is called right before the render method: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\"/>); Run Example Â» render The render() method is required, and is the method that actually outputs the HTML to the DOM. Example: A simple component with a simple render() method: class Header extends React.Component { render() { return ( <h1>This is the content of the Header component</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidMount The componentDidMount() method is called after the component is rendered. This is where you run statements that requires that the component is already placed in the DOM."
  },
  {
    "document": "Example: At first my favorite color is red, but give me a second, and it is yellow instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Updating The next phase in the lifecycle is when a component is updated. A component is updated whenever there is a change in the component's state or props. React has five built-in methods that gets called, in this order, when a component is updated: getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() The render() method is required and will always be called, the others are optional and will be called if you define them. getDerivedStateFromProps Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated. This is still the natural place to set the state object based on the initial props. The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow: Example: If the component gets updated, the getDerivedStateFromProps() method is called: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\" />); Run Example Â» shouldComponentUpdate In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. The default value is true. The example below shows what happens when the shouldComponentUpdate() method returns false: Example: Stop the component from rendering at any update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Example: Same example as above, but this time the shouldComponentUpdate() method returns true instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» render The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes."
  },
  {
    "document": "The example below has a button that changes the favorite color to blue: Example: Click the button to make a change in the component's state: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» getSnapshotBeforeUpdate In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update. If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error. The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\". This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element. Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example: Use the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidUpdate The componentDidUpdate method is called after the component is updated in the DOM. The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and the color becomes \"yellow\". This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element: Example: The componentDidUpdate method is called after the update has been rendered in the DOM: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } componentDidUpdate() { document.getElementById(\"mydiv\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"mydiv\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Unmounting The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it."
  },
  {
    "document": "React has only one built-in method that gets called when a component is unmounted: componentWillUnmount() componentWillUnmount The componentWillUnmount method is called when the component is about to be removed from the DOM. Example: Click the button to delete the header: class Container extends React.Component { constructor(props) { super(props); this.state = {show: true}; } delHeader = () => { this.setState({show: false}); } render() { let myheader; if (this.state.show) { myheader = <Child />; }; return ( <div> {myheader} <button type=\"button\" onClick={this.delHeader}>Delete Header</button> </div> ); } } class Child extends React.Component { componentWillUnmount() { alert(\"The component named Header is about to be unmounted. \"); } render() { return ( <h1>Hello World!</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Container />); Run Example Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up state state The example below starts with the favorite color being \"red\", but the getDerivedStateFromProps() method updates the favorite color based on the favcol attribute: getDerivedStateFromProps() favcol Example: The getDerivedStateFromProps method is called right before the render method: getDerivedStateFromProps class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\"/>); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\"/>); Run Example Â» render The render() method is required, and is the method that actually outputs the HTML to the DOM. render() Example: A simple component with a simple render() method: render() class Header extends React.Component { render() { return ( <h1>This is the content of the Header component</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { render() { return ( <h1>This is the content of the Header component</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidMount The componentDidMount() method is called after the component is rendered. componentDidMount() This is where you run statements that requires that the component is already placed in the DOM. Example: At first my favorite color is red, but give me a second, and it is yellow instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Updating The next phase in the lifecycle is when a component is updated."
  },
  {
    "document": "A component is updated whenever there is a change in the component's state or props. state props React has five built-in methods that gets called, in this order, when a component is updated: getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() The render() method is required and will always be called, the others are optional and will be called if you define them. render() getDerivedStateFromProps Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated. getDerivedStateFromProps This is still the natural place to set the state object based on the initial props. The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow: Example: If the component gets updated, the getDerivedStateFromProps() method is called: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\" />); Run Example Â» shouldComponentUpdate In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. The default value is true. The example below shows what happens when the shouldComponentUpdate() method returns false: Example: Stop the component from rendering at any update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Example: Same example as above, but this time the shouldComponentUpdate() method returns true instead: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» render The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes."
  },
  {
    "document": "The example below has a button that changes the favorite color to blue: Example: Click the button to make a change in the component's state: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» getSnapshotBeforeUpdate In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update. If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error. The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\". This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element. Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example: Use the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidUpdate The componentDidUpdate method is called after the component is updated in the DOM. The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and the color becomes \"yellow\". This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element: Example: The componentDidUpdate method is called after the update has been rendered in the DOM: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } componentDidUpdate() { document.getElementById(\"mydiv\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"mydiv\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Unmounting The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it."
  },
  {
    "document": "React has only one built-in method that gets called when a component is unmounted: componentWillUnmount() componentWillUnmount The componentWillUnmount method is called when the component is about to be removed from the DOM. Example: Click the button to delete the header: class Container extends React.Component { constructor(props) { super(props); this.state = {show: true}; } delHeader = () => { this.setState({show: false}); } render() { let myheader; if (this.state.show) { myheader = <Child />; }; return ( <div> {myheader} <button type=\"button\" onClick={this.delHeader}>Delete Header</button> </div> ); } } class Child extends React.Component { componentWillUnmount() { alert(\"The component named Header is about to be unmounted. \"); } render() { return ( <h1>Hello World!</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Container />); Run Example Â» â® Previous Next â¯ â +1 Track your progress - it's free! Log in Sign Up state The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow: getDerivedStateFromProps() Example: If the component gets updated, the getDerivedStateFromProps() method is called: getDerivedStateFromProps() class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\" />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header favcol=\"yellow\" />); Run Example Â» shouldComponentUpdate In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. shouldComponentUpdate() The default value is true."
  },
  {
    "document": "true The example below shows what happens when the shouldComponentUpdate() method returns false: shouldComponentUpdate() false Example: Stop the component from rendering at any update: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Example: Same example as above, but this time the shouldComponentUpdate() method returns true instead: shouldComponentUpdate() true class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» render The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes. render() The example below has a button that changes the favorite color to blue: Example: Click the button to make a change in the component's state: class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» getSnapshotBeforeUpdate In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update. getSnapshotBeforeUpdate() props state If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error. getSnapshotBeforeUpdate() componentDidUpdate() The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\"."
  },
  {
    "document": "This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element. getSnapshotBeforeUpdate() Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: componentDidUpdate()  Example: Use the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update: getSnapshotBeforeUpdate() state class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» componentDidUpdate The componentDidUpdate method is called after the component is updated in the DOM. componentDidUpdate The example below might seem complicated, but all it does is this: When the component is mounting it is rendered with the favorite color \"red\". When the component has been mounted, a timer changes the state, and the color becomes \"yellow\". This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element: componentDidUpdate Example: The componentDidUpdate method is called after the update has been rendered in the DOM: componentDidUpdate class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } componentDidUpdate() { document.getElementById(\"mydiv\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"mydiv\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } componentDidUpdate() { document.getElementById(\"mydiv\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"mydiv\"></div> </div> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» Unmounting The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it. React has only one built-in method that gets called when a component is unmounted: componentWillUnmount() componentWillUnmount The componentWillUnmount method is called when the component is about to be removed from the DOM."
  },
  {
    "document": "componentWillUnmount Example: Click the button to delete the header: class Container extends React.Component { constructor(props) { super(props); this.state = {show: true}; } delHeader = () => { this.setState({show: false}); } render() { let myheader; if (this.state.show) { myheader = <Child />; }; return ( <div> {myheader} <button type=\"button\" onClick={this.delHeader}>Delete Header</button> </div> ); } } class Child extends React.Component { componentWillUnmount() { alert(\"The component named Header is about to be unmounted. \"); } render() { return ( <h1>Hello World!</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Container />); class Container extends React.Component { constructor(props) { super(props); this.state = {show: true}; } delHeader = () => { this.setState({show: false}); } render() { let myheader; if (this.state.show) { myheader = <Child />; }; return ( <div> {myheader} <button type=\"button\" onClick={this.delHeader}>Delete Header</button> </div> ); } } class Child extends React.Component { componentWillUnmount() { alert(\"The component named Header is about to be unmounted. \"); } render() { return ( <h1>Hello World!</h1> ); } } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Container />); Run Example Â»"
  },
  {
    "document": "React Props Props are arguments passed into React components. Props are passed to components via HTML attributes. props stands for properties. props React Props React Props are like function arguments in JavaScript and attributes in HTML. To send props into a component, use the same syntax as HTML attributes: Example Add a \"brand\" attribute to the Car element: const myElement = <Car brand=\"Ford\" />; const myElement = <Car brand=\"Ford\" />; The component receives the argument as a props object: props Example Use the brand attribute in the component: function Car(props) { return <h2>I am a { props.brand }!</h2>; } function Car(props) { return <h2>I am a { props.brand }!</h2>; } Run Example Â» Pass Data Props are also how you pass data from one component to another, as parameters. Example Send the \"brand\" property from the Garage component to the Car component: function Car(props) { return <h2>I am a { props.brand }!</h2>; } function Garage() { return ( <> <h1>Who lives in my garage?</h1> <Car brand=\"Ford\" /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car(props) { return <h2>I am a { props.brand }!</h2>; } function Garage() { return ( <> <h1>Who lives in my garage?</h1> <Car brand=\"Ford\" /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» If you have a variable to send, and not a string as in the example above, you just put the variable name inside curly brackets: Example Create a variable named carName and send it to the Car component: carName Car function Car(props) { return <h2>I am a { props.brand }!</h2>; } function Garage() { const carName = \"Ford\"; return ( <> <h1>Who lives in my garage?</h1> <Car brand={ carName } /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car(props) { return <h2>I am a { props.brand }!</h2>; } function Garage() { const carName = \"Ford\"; return ( <> <h1>Who lives in my garage?</h1> <Car brand={ carName } /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» Or if it was an object: Example Create an object named carInfo and send it to the Car component: carInfo Car function Car(props) { return <h2>I am a { props.brand.model }!</h2>; } function Garage() { const carInfo = { name: \"Ford\", model: \"Mustang\" }; return ( <> <h1>Who lives in my garage?</h1> <Car brand={ carInfo } /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car(props) { return <h2>I am a { props.brand.model }!</h2>; } function Garage() { const carInfo = { name: \"Ford\", model: \"Mustang\" }; return ( <> <h1>Who lives in my garage?</h1> <Car brand={ carInfo } /> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» Note: React Props are read-only! You will get an error if you try to change their value."
  },
  {
    "document": "React Events Just like HTML DOM events, React can perform actions based on user events. React has the same events as HTML: click, change, mouseover etc. Adding Events React events are written in camelCase syntax: onClick instead of onclick. onClick onclick React event handlers are written inside curly braces: onClick={shoot} instead of onclick=\"shoot()\". onClick={shoot} onclick=\"shoot()\" React: <button onClick={shoot}>Take the Shot!</button> <button onClick={shoot}>Take the Shot!</button> HTML: <button onclick=\"shoot()\">Take the Shot!</button> <button onclick=\"shoot()\">Take the Shot!</button> Example: Put the shoot function inside the Football component: shoot Football function Football() { const shoot = () => { alert(\"Great Shot! \"); } return ( <button onClick={shoot}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); function Football() { const shoot = () => { alert(\"Great Shot! \"); } return ( <button onClick={shoot}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); Run Example Â» Passing Arguments To pass an argument to an event handler, use an arrow function. Example: Send \"Goal!\" as a parameter to the shoot function, using arrow function: shoot function Football() { const shoot = (a) => { alert(a); } return ( <button onClick={() => shoot(\"Goal! \")}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); function Football() { const shoot = (a) => { alert(a); } return ( <button onClick={() => shoot(\"Goal! \")}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); Run Example Â» React Event Object Event handlers have access to the React event that triggered the function. In our example the event is the \"click\" event. Example: Arrow Function: Sending the event object manually: function Football() { const shoot = (a, b) => { alert(b.type); /* 'b' represents the React event that triggered the function, in this case the 'click' event */ } return ( <button onClick={(event) => shoot(\"Goal! \", event)}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); function Football() { const shoot = (a, b) => { alert(b.type); /* 'b' represents the React event that triggered the function, in this case the 'click' event */ } return ( <button onClick={(event) => shoot(\"Goal! \", event)}>Take the shot!</button> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Football />); Run Example Â» This will come in handy when we look at Form in a later chapter."
  },
  {
    "document": "React Conditional Rendering In React, you can conditionally render components. There are several ways to do this. if Statement if We can use the if JavaScript operator to decide which component to render. if Example: We'll use these two components: function MissedGoal() { return <h1>MISSED!</h1>; } function MadeGoal() { return <h1>Goal!</h1>; } function MissedGoal() { return <h1>MISSED!</h1>; } function MadeGoal() { return <h1>Goal!</h1>; } Example: Now, we'll create another component that chooses which component to render based on a condition: function Goal(props) { const isGoal = props.isGoal; if (isGoal) { return <MadeGoal/>; } return <MissedGoal/>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={false} />); function Goal(props) { const isGoal = props.isGoal; if (isGoal) { return <MadeGoal/>; } return <MissedGoal/>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={false} />); Run Example Â» Try changing the isGoal attribute to true: isGoal true Example: const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={true} />); const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={true} />); Run Example Â» Logical && Operator && Another way to conditionally render a React component is by using the && operator. && Example: We can embed JavaScript expressions in JSX by using curly braces: function Garage(props) { const cars = props.cars; return ( <> <h1>Garage</h1> {cars.length > 0 && <h2> You have {cars.length} cars in your garage. </h2> } </> ); } const cars = ['Ford', 'BMW', 'Audi']; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage cars={cars} />); function Garage(props) { const cars = props.cars; return ( <> <h1>Garage</h1> {cars.length > 0 && <h2> You have {cars.length} cars in your garage. </h2> } </> ); } const cars = ['Ford', 'BMW', 'Audi']; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage cars={cars} />); Run Example Â» If cars.length > 0 is equates to true, the expression after && will render. cars.length > 0 && Try emptying the cars array: cars Example: const cars = []; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage cars={cars} />); const cars = []; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage cars={cars} />); Run Example Â» Ternary Operator Another way to conditionally render elements is by using a ternary operator. condition ? true : false condition ? true : false We will go back to the goal example. Example: Return the MadeGoal component if isGoal is true, otherwise return the MissedGoal component: MadeGoal isGoal true MissedGoal function Goal(props) { const isGoal = props.isGoal; return ( <> { isGoal ? <MadeGoal/> : <MissedGoal/> } </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={false} />); function Goal(props) { const isGoal = props.isGoal; return ( <> { isGoal ? <MadeGoal/> : <MissedGoal/> } </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Goal isGoal={false} />); Run Example Â» To learn more, see the ternary operator section."
  },
  {
    "document": "React Lists In React, you will render lists with some type of loop. The JavaScript map() array method is generally the preferred method. map() If you need a refresher on the map() method, check out the ES6 section. map() Example: Let's render all of the cars from our garage: function Car(props) { return <li>I am a { props.brand }</li>; } function Garage() { const cars = ['Ford', 'BMW', 'Audi']; return ( <> <h1>Who lives in my garage?</h1> <ul> {cars.map((car) => <Car brand={car} />)} </ul> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car(props) { return <li>I am a { props.brand }</li>; } function Garage() { const cars = ['Ford', 'BMW', 'Audi']; return ( <> <h1>Who lives in my garage?</h1> <ul> {cars.map((car) => <Car brand={car} />)} </ul> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â» When you run this code in your create-react-app, it will work but you will receive a warning that there is no \"key\" provided for the list items. create-react-app Keys Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list. Keys need to be unique to each sibling. But they can be duplicated globally. Generally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key. Example: Let's refactor our previous example to include keys: function Car(props) { return <li>I am a { props.brand }</li>; } function Garage() { const cars = [ {id: 1, brand: 'Ford'}, {id: 2, brand: 'BMW'}, {id: 3, brand: 'Audi'} ]; return ( <> <h1>Who lives in my garage?</h1> <ul> {cars.map((car) => <Car key={car.id} brand={car.brand} />)} </ul> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); function Car(props) { return <li>I am a { props.brand }</li>; } function Garage() { const cars = [ {id: 1, brand: 'Ford'}, {id: 2, brand: 'BMW'}, {id: 3, brand: 'Audi'} ]; return ( <> <h1>Who lives in my garage?</h1> <ul> {cars.map((car) => <Car key={car.id} brand={car.brand} />)} </ul> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Garage />); Run Example Â»"
  },
  {
    "document": "React Forms Just like in HTML, React uses forms to allow users to interact with the web page. Adding Forms in React You add a form with React like any other element: Example: Add a form that allows users to enter their name: function MyForm() { return ( <form> <label>Enter your name: <input type=\"text\" /> </label> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); function MyForm() { return ( <form> <label>Enter your name: <input type=\"text\" /> </label> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); Run Example Â» This will work as normal, the form will submit and the page will refresh. But this is generally not what we want to happen in React. We want to prevent this default behavior and let React control the form. Handling Forms Handling forms is about how you handle the data when it changes value or gets submitted. In HTML, form data is usually handled by the DOM. In React, form data is usually handled by the components. When the data is handled by the components, all the data is stored in the component state. You can control changes by adding event handlers in the onChange attribute. onChange We can use the useState Hook to keep track of each inputs value and provide a \"single source of truth\" for the entire application. useState See the React Hooks section for more information on Hooks."
  },
  {
    "document": "Example: Use the useState Hook to manage the input: useState import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); return ( <form> <label>Enter your name: <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /> </label> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); return ( <form> <label>Enter your name: <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /> </label> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); Run Example Â» Submitting Forms You can control the submit action by adding an event handler in the onSubmit attribute for the <form>: onSubmit <form> Example: Add a submit button and an event handler in the onSubmit attribute: onSubmit import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); const handleSubmit = (event) => { event.preventDefault(); alert(`The name you entered was: ${name}`) } return ( <form onSubmit={handleSubmit}> <label>Enter your name: <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /> </label> <input type=\"submit\" /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); const handleSubmit = (event) => { event.preventDefault(); alert(`The name you entered was: ${name}`) } return ( <form onSubmit={handleSubmit}> <label>Enter your name: <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /> </label> <input type=\"submit\" /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); Run Example Â» Multiple Input Fields You can control the values of more than one input field by adding a name attribute to each element. name We will initialize our state with an empty object. To access the fields in the event handler use the event.target.name and event.target.value syntax. event.target.name event.target.value To update the state, use square brackets [bracket notation] around the property name."
  },
  {
    "document": "Example: Write a form with two input fields: import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [inputs, setInputs] = useState({}); const handleChange = (event) => { const name = event.target.name; const value = event.target.value; setInputs(values => ({...values, [name]: value})) } const handleSubmit = (event) => { event.preventDefault(); alert(inputs); } return ( <form onSubmit={handleSubmit}> <label>Enter your name: <input type=\"text\" name=\"username\" value={inputs.username || \"\"} onChange={handleChange} /> </label> <label>Enter your age: <input type=\"number\" name=\"age\" value={inputs.age || \"\"} onChange={handleChange} /> </label> <input type=\"submit\" /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [inputs, setInputs] = useState({}); const handleChange = (event) => { const name = event.target.name; const value = event.target.value; setInputs(values => ({...values, [name]: value})) } const handleSubmit = (event) => { event.preventDefault(); alert(inputs); } return ( <form onSubmit={handleSubmit}> <label>Enter your name: <input type=\"text\" name=\"username\" value={inputs.username || \"\"} onChange={handleChange} /> </label> <label>Enter your age: <input type=\"number\" name=\"age\" value={inputs.age || \"\"} onChange={handleChange} /> </label> <input type=\"submit\" /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); Run Example Â» Note: We use the same event handler function for both input fields, we could write one event handler for each, but this gives us much cleaner code and is the preferred way in React. Textarea The textarea element in React is slightly different from ordinary HTML. In HTML the value of a textarea was the text between the start tag <textarea> and the end tag </textarea>. <textarea> </textarea> <textarea> Content of the textarea. </textarea> <textarea> Content of the textarea. </textarea> In React the value of a textarea is placed in a value attribute. We'll use the useState Hook to manage the value of the textarea: useState Example: A simple textarea with some content: import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [textarea, setTextarea] = useState( \"The content of a textarea goes in the value attribute\" ); const handleChange = (event) => { setTextarea(event.target.value) } return ( <form> <textarea value={textarea} onChange={handleChange} /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); import { useState } from 'react'; import ReactDOM from 'react-dom/client'; function MyForm() { const [textarea, setTextarea] = useState( \"The content of a textarea goes in the value attribute\" ); const handleChange = (event) => { setTextarea(event.target.value) } return ( <form> <textarea value={textarea} onChange={handleChange} /> </form> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<MyForm />); Run Example Â» Select A drop down list, or a select box, in React is also a bit different from HTML."
  },
  {
    "document": "In HTML, the selected value in the drop down list was defined with the selected attribute: selected HTML: <select> <option value=\"Ford\">Ford</option> <option value=\"Volvo\" selected>Volvo</option> <option value=\"Fiat\">Fiat</option> </select> <select> <option value=\"Ford\">Ford</option> <option value=\"Volvo\" selected>Volvo</option> <option value=\"Fiat\">Fiat</option> </select> In React, the selected value is defined with a value attribute on the select tag: value select Example: A simple select box, where the selected value \"Volvo\" is initialized in the constructor: function MyForm() { const [myCar, setMyCar] = useState(\"Volvo\"); const handleChange = (event) => { setMyCar(event.target.value) } return ( <form> <select value={myCar} onChange={handleChange}> <option value=\"Ford\">Ford</option> <option value=\"Volvo\">Volvo</option> <option value=\"Fiat\">Fiat</option> </select> </form> ) } function MyForm() { const [myCar, setMyCar] = useState(\"Volvo\"); const handleChange = (event) => { setMyCar(event.target.value) } return ( <form> <select value={myCar} onChange={handleChange}> <option value=\"Ford\">Ford</option> <option value=\"Volvo\">Volvo</option> <option value=\"Fiat\">Fiat</option> </select> </form> ) } Run Example Â» By making these slight changes to <textarea> and <select>, React is able to handle all input elements in the same way. <textarea> <select>"
  },
  {
    "document": "React Router Create React App doesn't include page routing. React Router is the most popular solution. Add React Router To add React Router in your application, run this in the terminal from the root directory of the application: Note: This tutorial uses React Router v6. If you are upgrading from v5, you will need to use the @latest flag: Folder Structure To create an application with multiple page routes, let's first start with the file structure. Within the src folder, we'll create a folder named pages with several files: src pages src\\pages\\: src\\pages\\ Layout.js Home.js Blogs.js Contact.js NoPage.js Each file will contain a very basic React component. Basic Usage Now we will use our Router in our index.js file. index.js Example Use React Router to route to pages based on URL: index.js: index.js import ReactDOM from \"react-dom/client\"; import { BrowserRouter, Routes, Route } from \"react-router-dom\"; import Layout from \"./pages/Layout\"; import Home from \"./pages/Home\"; import Blogs from \"./pages/Blogs\"; import Contact from \"./pages/Contact\"; import NoPage from \"./pages/NoPage\"; export default function App() { return ( <BrowserRouter> <Routes> <Route path=\"/\" element={<Layout />}> <Route index element={<Home />} /> <Route path=\"blogs\" element={<Blogs />} /> <Route path=\"contact\" element={<Contact />} /> <Route path=\"*\" element={<NoPage />} /> </Route> </Routes> </BrowserRouter> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import ReactDOM from \"react-dom/client\"; import { BrowserRouter, Routes, Route } from \"react-router-dom\"; import Layout from \"./pages/Layout\"; import Home from \"./pages/Home\"; import Blogs from \"./pages/Blogs\"; import Contact from \"./pages/Contact\"; import NoPage from \"./pages/NoPage\"; export default function App() { return ( <BrowserRouter> <Routes> <Route path=\"/\" element={<Layout />}> <Route index element={<Home />} /> <Route path=\"blogs\" element={<Blogs />} /> <Route path=\"contact\" element={<Contact />} /> <Route path=\"*\" element={<NoPage />} /> </Route> </Routes> </BrowserRouter> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â» Example Explained We wrap our content first with <BrowserRouter>. <BrowserRouter> Then we define our <Routes>. An application can have multiple <Routes>. Our basic example only uses one. <Routes> <Routes> <Route>s can be nested. The first <Route> has a path of / and renders the Layout component. <Route> <Route> / Layout The nested <Route>s inherit and add to the parent route. So the blogs path is combined with the parent and becomes /blogs. <Route> blogs /blogs The Home component route does not have a path but has an index attribute. That specifies this route as the default route for the parent route, which is /. Home index / Setting the path to * will act as a catch-all for any undefined URLs. This is great for a 404 error page. path * Pages / Components The Layout component has <Outlet> and <Link> elements. Layout <Outlet> <Link> The <Outlet> renders the current route selected. <Outlet> <Link> is used to set the URL and keep track of browsing history. <Link> Anytime we link to an internal path, we will use <Link> instead of <a href=\"\">. <Link> <a href=\"\"> The \"layout route\" is a shared component that inserts common content on all pages, such as a navigation menu."
  },
  {
    "document": "Layout.js: Layout.js import { Outlet, Link } from \"react-router-dom\"; const Layout = () => { return ( <> <nav> <ul> <li> <Link to=\"/\">Home</Link> </li> <li> <Link to=\"/blogs\">Blogs</Link> </li> <li> <Link to=\"/contact\">Contact</Link> </li> </ul> </nav> <Outlet /> </> ) }; export default Layout; import { Outlet, Link } from \"react-router-dom\"; const Layout = () => { return ( <> <nav> <ul> <li> <Link to=\"/\">Home</Link> </li> <li> <Link to=\"/blogs\">Blogs</Link> </li> <li> <Link to=\"/contact\">Contact</Link> </li> </ul> </nav> <Outlet /> </> ) }; export default Layout; Home.js: Home.js const Home = () => { return <h1>Home</h1>; }; export default Home; const Home = () => { return <h1>Home</h1>; }; export default Home; Blogs.js: Blogs.js const Blogs = () => { return <h1>Blog Articles</h1>; }; export default Blogs; const Blogs = () => { return <h1>Blog Articles</h1>; }; export default Blogs; Contact.js: Contact.js const Contact = () => { return <h1>Contact Me</h1>; }; export default Contact; const Contact = () => { return <h1>Contact Me</h1>; }; export default Contact; NoPage.js: NoPage.js const NoPage = () => { return <h1>404</h1>; }; export default NoPage; const NoPage = () => { return <h1>404</h1>; }; export default NoPage;"
  },
  {
    "document": "React Memo Using memo will cause React to skip rendering a component if its props have not changed. memo This can improve performance. This section uses React Hooks. See the React Hooks section for more information on Hooks. Problem In this example, the Todos component re-renders even when the todos have not changed. Todos Example: index.js: index.js import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]); const increment = () => { setCount((c) => c + 1); }; return ( <> <Todos todos={todos} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]); const increment = () => { setCount((c) => c + 1); }; return ( <> <Todos todos={todos} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Todos.js: Todos.js const Todos = ({ todos }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} </> ); }; export default Todos; const Todos = ({ todos }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} </> ); }; export default Todos; Run Example Â» When you click the increment button, the Todos component re-renders. Todos If this component was complex, it could cause performance issues. Solution To fix this, we can use memo. memo Use memoto keep the Todos component from needlessly re-rendering."
  },
  {
    "document": "memo Todos Wrap the Todos component export in memo: Todos memo Example: index.js: index.js import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]); const increment = () => { setCount((c) => c + 1); }; return ( <> <Todos todos={todos} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]); const increment = () => { setCount((c) => c + 1); }; return ( <> <Todos todos={todos} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Todos.js: Todos.js import { memo } from \"react\"; const Todos = ({ todos }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} </> ); }; export default memo(Todos); import { memo } from \"react\"; const Todos = ({ todos }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} </> ); }; export default memo(Todos); Run Example Â» Now the Todos component only re-renders when the todos that are passed to it through props are updated. Todos todos"
  },
  {
    "document": "Styling React Using CSS There are many ways to style React with CSS, this tutorial will take a closer look at three common ways: Inline Styling To style an element with the inline style attribute, the value must be a JavaScript object: Example: Insert an object with the styling information: const Header = () => { return ( <> <h1 style={{color: \"red\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); } const Header = () => { return ( <> <h1 style={{color: \"red\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); } Run Example Â» Note: In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, the styling in the example above is written inside two sets of curly braces {{}}. {{}} camelCased Property Names Since the inline CSS is written in a JavaScript object, properties with hyphen separators, like background-color, must be written with camel case syntax: background-color Example: Use backgroundColor instead of background-color: backgroundColor background-color const Header = () => { return ( <> <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); } const Header = () => { return ( <> <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); } Run Example Â» JavaScript Object You can also create an object with styling information, and refer to it in the style attribute: Example: Create a style object named myStyle: myStyle const Header = () => { const myStyle = { color: \"white\", backgroundColor: \"DodgerBlue\", padding: \"10px\", fontFamily: \"Sans-Serif\" }; return ( <> <h1 style={myStyle}>Hello Style!</h1> <p>Add a little style!</p> </> ); } const Header = () => { const myStyle = { color: \"white\", backgroundColor: \"DodgerBlue\", padding: \"10px\", fontFamily: \"Sans-Serif\" }; return ( <> <h1 style={myStyle}>Hello Style!</h1> <p>Add a little style!</p> </> ); } Run Example Â» CSS Stylesheet You can write your CSS styling in a separate file, just save the file with the .css file extension, and import it in your application. .css App.css: Create a new file called \"App.css\" and insert some CSS code in it: body { background-color: #282c34; color: white; padding: 40px; font-family: Sans-Serif; text-align: center; } body { background-color: #282c34; color: white; padding: 40px; font-family: Sans-Serif; text-align: center; } Note: You can call the file whatever you like, just remember the correct file extension. Import the stylesheet in your application: index.js: import React from 'react'; import ReactDOM from 'react-dom/client'; import './App.css'; const Header = () => { return ( <> <h1>Hello Style!</h1> <p>Add a little style!.</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); import React from 'react'; import ReactDOM from 'react-dom/client'; import './App.css'; const Header = () => { return ( <> <h1>Hello Style!</h1> <p>Add a little style!.</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â» CSS Modules Another way of adding styles to your application is to use CSS Modules. CSS Modules are convenient for components that are placed in separate files."
  },
  {
    "document": "The CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts. Create the CSS module with the .module.css extension, example: my-style.module.css. .module.css my-style.module.css Create a new file called \"my-style.module.css\" and insert some CSS code in it: my-style.module.css: .bigblue { color: DodgerBlue; padding: 40px; font-family: Sans-Serif; text-align: center; } .bigblue { color: DodgerBlue; padding: 40px; font-family: Sans-Serif; text-align: center; } Import the stylesheet in your component: Car.js: import styles from './my-style.module.css'; const Car = () => { return <h1 className={styles.bigblue}>Hello Car!</h1>; } export default Car; import styles from './my-style.module.css'; const Car = () => { return <h1 className={styles.bigblue}>Hello Car!</h1>; } export default Car; Import the component in your application: index.js: import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import ReactDOM from 'react-dom/client'; import Car from './Car.js'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â»"
  },
  {
    "document": "Styling React Using Sass What is Sass Sass is a CSS pre-processor. Sass files are executed on the server and sends CSS to the browser. You can learn more about Sass in our Sass Tutorial. Can I use Sass? If you use the create-react-app in your project, you can easily install and use Sass in your React projects. create-react-app Install Sass by running this command in your terminal: Now you are ready to include Sass files in your project! Create a Sass file Create a Sass file the same way as you create CSS files, but Sass files have the file extension .scss .scss In Sass files you can use variables and other Sass functions: Example my-sass.scss: Create a variable to define the color of the text: $myColor: red; h1 { color: $myColor; } $myColor: red; h1 { color: $myColor; } Import the Sass file the same way as you imported a CSS file: Example index.js: import React from 'react'; import ReactDOM from 'react-dom/client'; import './my-sass.scss'; const Header = () => { return ( <> <h1>Hello Style!</h1> <p>Add a little style!.</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); import React from 'react'; import ReactDOM from 'react-dom/client'; import './my-sass.scss'; const Header = () => { return ( <> <h1>Hello Style!</h1> <p>Add a little style!.</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Header />); Run Example Â»"
  },
  {
    "document": "React Hooks Hooks were added to React in version 16.8. Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed. Although Hooks generally replace class components, there are no plans to remove classes from React. What is a Hook? Hooks allow us to \"hook\" into React features such as state and lifecycle methods. Example: Here is an example of a Hook. Don't worry if it doesn't make sense. We will go into more detail in the next section. import React, { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> <button type=\"button\" onClick={() => setColor(\"red\")} >Red</button> <button type=\"button\" onClick={() => setColor(\"pink\")} >Pink</button> <button type=\"button\" onClick={() => setColor(\"green\")} >Green</button> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); import React, { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> <button type=\"button\" onClick={() => setColor(\"red\")} >Red</button> <button type=\"button\" onClick={() => setColor(\"pink\")} >Pink</button> <button type=\"button\" onClick={() => setColor(\"green\")} >Green</button> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); Run Example Â» You must import Hooks from react. import react Here we are using the useState Hook to keep track of the application state. useState State generally refers to application data or properties that need to be tracked. Hook Rules There are 3 rules for hooks: Note: Hooks will not work in React class components. Custom Hooks If you have stateful logic that needs to be reused in several components, you can build your own custom Hooks. We'll go into more detail in the Custom Hooks section."
  },
  {
    "document": "React useState Hook useState The React useState Hook allows us to track state in a function component. useState State generally refers to data or properties that need to be tracking in an application. Import useState useState To use the useState Hook, we first need to import it into our component. useState import Example: At the top of your component, import the useState Hook. import useState import { useState } from \"react\"; import { useState } from \"react\"; Notice that we are destructuring useState from react as it is a named export. useState react To learn more about destructuring, check out the ES6 section. Initialize useState useState We initialize our state by calling useState in our function component. useState useState accepts an initial state and returns two values: useState Example: Initialize state at the top of the function component. import { useState } from \"react\"; function FavoriteColor() { const [color, setColor] = useState(\"\"); } import { useState } from \"react\"; function FavoriteColor() { const [color, setColor] = useState(\"\"); } Notice that again, we are destructuring the returned values from useState. useState The first value, color, is our current state. color The second value, setColor, is the function that is used to update our state. setColor These names are variables that can be named anything you would like. Lastly, we set the initial state to an empty string: useState(\"\") useState(\"\") Read State We can now include our state anywhere in our component. Example: Use the state variable in the rendered component. import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return <h1>My favorite color is {color}!</h1> } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return <h1>My favorite color is {color}!</h1> } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); Run Example Â» Update State To update our state, we use our state updater function. We should never directly update state. Ex: color = \"red\" is not allowed. color = \"red\" Example: Use a button to update the state: import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<FavoriteColor />); Run Example Â» What Can State Hold The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these! useState We could create multiple state Hooks to track individual values."
  },
  {
    "document": "Example: Create multiple state Hooks: import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [brand, setBrand] = useState(\"Ford\"); const [model, setModel] = useState(\"Mustang\"); const [year, setYear] = useState(\"1964\"); const [color, setColor] = useState(\"red\"); return ( <> <h1>My {brand}</h1> <p> It is a {color} {model} from {year}. </p> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [brand, setBrand] = useState(\"Ford\"); const [model, setModel] = useState(\"Mustang\"); const [year, setYear] = useState(\"1964\"); const [color, setColor] = useState(\"red\"); return ( <> <h1>My {brand}</h1> <p> It is a {color} {model} from {year}. </p> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» Or, we can just use one state and include an object instead! Example: Create a single Hook that holds an object: import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [car, setCar] = useState({ brand: \"Ford\", model: \"Mustang\", year: \"1964\", color: \"red\" }); return ( <> <h1>My {car.brand}</h1> <p> It is a {car.color} {car.model} from {car.year}. </p> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [car, setCar] = useState({ brand: \"Ford\", model: \"Mustang\", year: \"1964\", color: \"red\" }); return ( <> <h1>My {car.brand}</h1> <p> It is a {car.color} {car.model} from {car.year}. </p> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» Since we are now tracking a single object, we need to reference that object and then the property of that object when rendering the component. (Ex: car.brand) car.brand Updating Objects and Arrays in State When state is updated, the entire state gets overwritten. What if we only want to update the color of our car? If we only called setCar({color: \"blue\"}), this would remove the brand, model, and year from our state. setCar({color: \"blue\"}) We can use the JavaScript spread operator to help us. Example: Use the JavaScript spread operator to update only the color of the car: import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [car, setCar] = useState({ brand: \"Ford\", model: \"Mustang\", year: \"1964\", color: \"red\" }); const updateColor = () => { setCar(previousState => { return { ...previousState, color: \"blue\" } }); } return ( <> <h1>My {car.brand}</h1> <p> It is a {car.color} {car.model} from {car.year}. </p> <button type=\"button\" onClick={updateColor} >Blue</button> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Car() { const [car, setCar] = useState({ brand: \"Ford\", model: \"Mustang\", year: \"1964\", color: \"red\" }); const updateColor = () => { setCar(previousState => { return { ...previousState, color: \"blue\" } }); } return ( <> <h1>My {car.brand}</h1> <p> It is a {car.color} {car.model} from {car.year}."
  },
  {
    "document": "</p> <button type=\"button\" onClick={updateColor} >Blue</button> </> ) } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Car />); Run Example Â» Because we need the current value of state, we pass a function into our setCar function. This function receives the previous value. setCar We then return an object, spreading the previousState and overwriting only the color. previousState"
  },
  {
    "document": "React useEffect Hooks useEffect The useEffect Hook allows you to perform side effects in your components. useEffect Some examples of side effects are: fetching data, directly updating the DOM, and timers. useEffect accepts two arguments. The second argument is optional. useEffect useEffect(<function>, <dependency>) useEffect(<function>, <dependency>) Let's use a timer as an example. Example: Use setTimeout() to count 1 second after initial render: setTimeout() import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }); return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }); return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); Run Example Â» But wait!! It keeps counting even though it should only count once! useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect. useEffect This is not what we want. There are several ways to control when side effects run. We should always include the second parameter which accepts an array. We can optionally pass dependencies to useEffect in this array. useEffect Example 1. No dependency passed: useEffect(() => { //Runs on every render }); useEffect(() => { //Runs on every render }); Example 2. An empty array: useEffect(() => { //Runs only on the first render }, []); useEffect(() => { //Runs only on the first render }, []); Example 3. Props or state values: useEffect(() => { //Runs on the first render //And any time any dependency value changes }, [prop, state]); useEffect(() => { //Runs on the first render //And any time any dependency value changes }, [prop, state]); So, to fix this issue, let's only run this effect on the initial render. Example: Only run the effect on the initial render: import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }, []); // <- add empty brackets here return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }, []); // <- add empty brackets here return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); Run Example Â» Example: Here is an example of a useEffect Hook that is dependent on a variable."
  },
  {
    "document": "If the count variable updates, the effect will run again: useEffect count import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Counter() { const [count, setCount] = useState(0); const [calculation, setCalculation] = useState(0); useEffect(() => { setCalculation(() => count * 2); }, [count]); // <- add the count variable here return ( <> <p>Count: {count}</p> <button onClick={() => setCount((c) => c + 1)}>+</button> <p>Calculation: {calculation}</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Counter />); import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Counter() { const [count, setCount] = useState(0); const [calculation, setCalculation] = useState(0); useEffect(() => { setCalculation(() => count * 2); }, [count]); // <- add the count variable here return ( <> <p>Count: {count}</p> <button onClick={() => setCount((c) => c + 1)}>+</button> <p>Calculation: {calculation}</p> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Counter />); Run Example Â» If there are multiple dependencies, they should be included in the useEffect dependency array. useEffect Effect Cleanup Some effects require cleanup to reduce memory leaks. Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed. We do this by including a return function at the end of the useEffect Hook. useEffect Example: Clean up the timer at the end of the useEffect Hook: useEffect import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { let timer = setTimeout(() => { setCount((count) => count + 1); }, 1000); return () => clearTimeout(timer) }, []); return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; function Timer() { const [count, setCount] = useState(0); useEffect(() => { let timer = setTimeout(() => { setCount((count) => count + 1); }, 1000); return () => clearTimeout(timer) }, []); return <h1>I've rendered {count} times!</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Timer />); Run Example Â» Note: To clear the timer, we had to name it."
  },
  {
    "document": "React useContext Hook React Context React Context is a way to manage state globally. It can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone. useState useState The Problem State should be held by the highest parent component in the stack that requires access to the state. To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state. To do this without Context, we will need to pass the state as \"props\" through each nested component. This is called \"prop drilling\". Example: Passing \"props\" through nested components: import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <> <h1>{`Hello ${user}!`}</h1> <Component2 user={user} /> </> ); } function Component2({ user }) { return ( <> <h1>Component 2</h1> <Component3 user={user} /> </> ); } function Component3({ user }) { return ( <> <h1>Component 3</h1> <Component4 user={user} /> </> ); } function Component4({ user }) { return ( <> <h1>Component 4</h1> <Component5 user={user} /> </> ); } function Component5({ user }) { return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Component1 />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <> <h1>{`Hello ${user}!`}</h1> <Component2 user={user} /> </> ); } function Component2({ user }) { return ( <> <h1>Component 2</h1> <Component3 user={user} /> </> ); } function Component3({ user }) { return ( <> <h1>Component 3</h1> <Component4 user={user} /> </> ); } function Component4({ user }) { return ( <> <h1>Component 4</h1> <Component5 user={user} /> </> ); } function Component5({ user }) { return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Component1 />); Run Example Â» Even though components 2-4 did not need the state, they had to pass the state along so that it could reach component 5. The Solution The solution is to create context. Create Context To create context, you must Import createContext and initialize it: createContext import { useState, createContext } from \"react\"; import ReactDOM from \"react-dom/client\"; const UserContext = createContext() import { useState, createContext } from \"react\"; import ReactDOM from \"react-dom/client\"; const UserContext = createContext() Next we'll use the Context Provider to wrap the tree of components that need the state Context. Context Provider Wrap child components in the Context Provider and supply the state value. function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 user={user} /> </UserContext.Provider> ); } function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 user={user} /> </UserContext.Provider> ); } Now, all components in this tree will have access to the user Context. Use the useContext Hook useContext In order to use the Context in a child component, we need to access it using the useContext Hook."
  },
  {
    "document": "useContext First, include the useContext in the import statement: useContext import { useState, createContext, useContext } from \"react\"; import { useState, createContext, useContext } from \"react\"; Then you can access the user Context in all components: function Component5() { const user = useContext(UserContext); return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } function Component5() { const user = useContext(UserContext); return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } Full Example Example: Here is the full example using React Context: import { useState, createContext, useContext } from \"react\"; import ReactDOM from \"react-dom/client\"; const UserContext = createContext(); function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 /> </UserContext.Provider> ); } function Component2() { return ( <> <h1>Component 2</h1> <Component3 /> </> ); } function Component3() { return ( <> <h1>Component 3</h1> <Component4 /> </> ); } function Component4() { return ( <> <h1>Component 4</h1> <Component5 /> </> ); } function Component5() { const user = useContext(UserContext); return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Component1 />); import { useState, createContext, useContext } from \"react\"; import ReactDOM from \"react-dom/client\"; const UserContext = createContext(); function Component1() { const [user, setUser] = useState(\"Jesse Hall\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 /> </UserContext.Provider> ); } function Component2() { return ( <> <h1>Component 2</h1> <Component3 /> </> ); } function Component3() { return ( <> <h1>Component 3</h1> <Component4 /> </> ); } function Component4() { return ( <> <h1>Component 4</h1> <Component5 /> </> ); } function Component5() { const user = useContext(UserContext); return ( <> <h1>Component 5</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Component1 />); Run Example Â»"
  },
  {
    "document": "React useRef Hook useRef The useRef Hook allows you to persist values between renders. useRef It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly. Does Not Cause Re-renders If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render. useState To avoid this, we can use the useRef Hook. useRef Example: Use useRef to track application renders. useRef import { useState, useEffect, useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const [inputValue, setInputValue] = useState(\"\"); const count = useRef(0); useEffect(() => { count.current = count.current + 1; }); return ( <> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h1>Render Count: {count.current}</h1> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState, useEffect, useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const [inputValue, setInputValue] = useState(\"\"); const count = useRef(0); useEffect(() => { count.current = count.current + 1; }); return ( <> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h1>Render Count: {count.current}</h1> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â» useRef() only returns one item. It returns an Object called current. useRef() current When we initialize useRef we set the initial value: useRef(0). useRef useRef(0) It's like doing this: const count = {current: 0}. We can access the count by using count.current. const count = {current: 0} count.current Run this on your computer and try typing in the input to see the application render count increase. Accessing DOM Elements In general, we want to let React handle all DOM manipulation. But there are some instances where useRef can be used without causing issues. useRef In React, we can add a ref attribute to an element to access it directly in the DOM. ref Example: Use useRef to focus the input: useRef import { useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const inputElement = useRef(); const focusInput = () => { inputElement.current.focus(); }; return ( <> <input type=\"text\" ref={inputElement} /> <button onClick={focusInput}>Focus Input</button> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const inputElement = useRef(); const focusInput = () => { inputElement.current.focus(); }; return ( <> <input type=\"text\" ref={inputElement} /> <button onClick={focusInput}>Focus Input</button> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â» Tracking State Changes The useRef Hook can also be used to keep track of previous state values. useRef This is because we are able to persist useRef values between renders."
  },
  {
    "document": "useRef Example: Use useRef to keep track of previous state values: useRef import { useState, useEffect, useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const [inputValue, setInputValue] = useState(\"\"); const previousInputValue = useRef(\"\"); useEffect(() => { previousInputValue.current = inputValue; }, [inputValue]); return ( <> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h2>Current Value: {inputValue}</h2> <h2>Previous Value: {previousInputValue.current}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState, useEffect, useRef } from \"react\"; import ReactDOM from \"react-dom/client\"; function App() { const [inputValue, setInputValue] = useState(\"\"); const previousInputValue = useRef(\"\"); useEffect(() => { previousInputValue.current = inputValue; }, [inputValue]); return ( <> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h2>Current Value: {inputValue}</h2> <h2>Previous Value: {previousInputValue.current}</h2> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â» This time we use a combination of useState, useEffect, and useRef to keep track of the previous state. useState useEffect useRef In the useEffect, we are updating the useRef current value each time the inputValue is updated by entering text into the input field. useEffect useRef inputValue"
  },
  {
    "document": "React useReducer Hook useReducer The useReducer Hook is similar to the useState Hook. useReducer useState It allows for custom state logic. If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful. useReducer Syntax The useReducer Hook accepts two arguments. useReducer(<reducer>, <initialState>) The reducer function contains your custom state logic and the initialStatecan be a simple value but generally will contain an object. reducer initialState The useReducer Hook returns the current stateand a dispatchmethod. useReducer state dispatch Here is an example of useReducer in a counter app: useReducer Example: import { useReducer } from \"react\"; import ReactDOM from \"react-dom/client\"; const initialTodos = [ { id: 1, title: \"Todo 1\", complete: false, }, { id: 2, title: \"Todo 2\", complete: false, }, ]; const reducer = (state, action) => { switch (action.type) { case \"COMPLETE\": return state.map((todo) => { if (todo.id === action.id) { return { ...todo, complete: !todo.complete }; } else { return todo; } }); default: return state; } }; function Todos() { const [todos, dispatch] = useReducer(reducer, initialTodos); const handleComplete = (todo) => { dispatch({ type: \"COMPLETE\", id: todo.id }); }; return ( <> {todos.map((todo) => ( <div key={todo.id}> <label> <input type=\"checkbox\" checked={todo.complete} onChange={() => handleComplete(todo)} /> {todo.title} </label> </div> ))} </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Todos />); import { useReducer } from \"react\"; import ReactDOM from \"react-dom/client\"; const initialTodos = [ { id: 1, title: \"Todo 1\", complete: false, }, { id: 2, title: \"Todo 2\", complete: false, }, ]; const reducer = (state, action) => { switch (action.type) { case \"COMPLETE\": return state.map((todo) => { if (todo.id === action.id) { return { ...todo, complete: !todo.complete }; } else { return todo; } }); default: return state; } }; function Todos() { const [todos, dispatch] = useReducer(reducer, initialTodos); const handleComplete = (todo) => { dispatch({ type: \"COMPLETE\", id: todo.id }); }; return ( <> {todos.map((todo) => ( <div key={todo.id}> <label> <input type=\"checkbox\" checked={todo.complete} onChange={() => handleComplete(todo)} /> {todo.title} </label> </div> ))} </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Todos />); Run Example Â» This is just the logic to keep track of the todo complete status. All of the logic to add, delete, and complete a todo could be contained within a single useReducer Hook by adding more actions. useReducer"
  },
  {
    "document": "React useCallback Hook useCallback The React useCallback Hook returns a memoized callback function. useCallback Think of memoization as caching a value so that it does not need to be recalculated. This allows us to isolate resource intensive functions so that they will not automatically run on every render. The useCallback Hook only runs when one of its dependencies update. useCallback This can improve performance. The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. You can learn more about useMemo in the useMemo chapter. useCallback useMemo useMemo useCallback Problem One reason to use useCallback is to prevent a component from re-rendering unless its props have changed. useCallback In this example, you might think that the Todos component will not re-render unless the todos change: Todos todos This is a similar example to the one in the React.memo section. Example: index.js index.js import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <> <Todos todos={todos} addTodo={addTodo} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <> <Todos todos={todos} addTodo={addTodo} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Todos.js Todos.js import { memo } from \"react\"; const Todos = ({ todos, addTodo }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </> ); }; export default memo(Todos); import { memo } from \"react\"; const Todos = ({ todos, addTodo }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </> ); }; export default memo(Todos); Run Example Â» Try running this and click the count increment button. You will notice that the Todos component re-renders even when the todos do not change. Todos todos Why does this not work? We are using memo, so the Todos component should not re-render since neither the todos state nor the addTodo function are changing when the count is incremented. memo Todos todos addTodo This is because of something called \"referential equality\". Every time a component re-renders, its functions get recreated. Because of this, the addTodo function has actually changed."
  },
  {
    "document": "addTodo Solution To fix this, we can use the useCallback hook to prevent the function from being recreated unless necessary. useCallback Use the useCallback Hook to prevent the Todos component from re-rendering needlessly: useCallback Todos Example: index.js index.js import { useState, useCallback } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const increment = () => { setCount((c) => c + 1); }; const addTodo = useCallback(() => { setTodos((t) => [...t, \"New Todo\"]); }, [todos]); return ( <> <Todos todos={todos} addTodo={addTodo} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState, useCallback } from \"react\"; import ReactDOM from \"react-dom/client\"; import Todos from \"./Todos\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const increment = () => { setCount((c) => c + 1); }; const addTodo = useCallback(() => { setTodos((t) => [...t, \"New Todo\"]); }, [todos]); return ( <> <Todos todos={todos} addTodo={addTodo} /> <hr /> <div> Count: {count} <button onClick={increment}>+</button> </div> </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Todos.js Todos.js import { memo } from \"react\"; const Todos = ({ todos, addTodo }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </> ); }; export default memo(Todos); import { memo } from \"react\"; const Todos = ({ todos, addTodo }) => { console.log(\"child render\"); return ( <> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </> ); }; export default memo(Todos); Run Example Â» Now the Todos component will only re-render when the todos prop changes. Todos todos"
  },
  {
    "document": "React useMemo Hook useMemo The React useMemo Hook returns a memoized value. useMemo Think of memoization as caching a value so that it does not need to be recalculated. The useMemo Hook only runs when one of its dependencies update. useMemo This can improve performance. The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. You can learn more about useCallback in the useCallback chapter. useMemo useCallback useMemo useCallback useCallback Performance The useMemo Hook can be used to keep expensive, resource intensive functions from needlessly running. useMemo In this example, we have an expensive function that runs on every render. When changing the count or adding a todo, you will notice a delay in execution. Example: A poor performing function. The expensiveCalculation function runs on every render: expensiveCalculation import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = expensiveCalculation(count); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState } from \"react\"; import ReactDOM from \"react-dom/client\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = expensiveCalculation(count); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â» Use useMemo useMemo To fix this performance issue, we can use the useMemo Hook to memoize the expensiveCalculation function. This will cause the function to only run when needed. useMemo expensiveCalculation We can wrap the expensive function call with useMemo. useMemo The useMemoHook accepts a second parameter to declare dependencies. The expensive function will only run when its dependencies have changed. useMemo In the following example, the expensive function will only run when count is changed and not when todo's are added."
  },
  {
    "document": "count Example: Performance example using the useMemo Hook: useMemo import { useState, useMemo } from \"react\"; import ReactDOM from \"react-dom/client\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = useMemo(() => expensiveCalculation(count), [count]); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); import { useState, useMemo } from \"react\"; import ReactDOM from \"react-dom/client\"; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = useMemo(() => expensiveCalculation(count), [count]); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); Run Example Â»"
  },
  {
    "document": "React Custom Hooks Hooks are reusable functions. When you have component logic that needs to be used by multiple components, we can extract that logic to a custom Hook. Custom Hooks start with \"use\". Example: useFetch. useFetch Build a Hook In the following code, we are fetching data in our Home component and displaying it. Home We will use the JSONPlaceholder service to fetch fake data. This service is great for testing applications when there is no existing data. To learn more, check out the JavaScript Fetch API section. Use the JSONPlaceholder service to fetch fake \"todo\" items and display the titles on the page: Example: index.js: index.js import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; const Home = () => { const [data, setData] = useState(null); useEffect(() => { fetch(\"https://jsonplaceholder.typicode.com/todos\") .then((res) => res.json()) .then((data) => setData(data)); }, []); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Home />); import { useState, useEffect } from \"react\"; import ReactDOM from \"react-dom/client\"; const Home = () => { const [data, setData] = useState(null); useEffect(() => { fetch(\"https://jsonplaceholder.typicode.com/todos\") .then((res) => res.json()) .then((data) => setData(data)); }, []); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Home />); Run Example Â» The fetch logic may be needed in other components as well, so we will extract that into a custom Hook. Move the fetch logic to a new file to be used as a custom Hook: Example: useFetch.js: useFetch.js import { useState, useEffect } from \"react\"; const useFetch = (url) => { const [data, setData] = useState(null); useEffect(() => { fetch(url) .then((res) => res.json()) .then((data) => setData(data)); }, [url]); return [data]; }; export default useFetch; import { useState, useEffect } from \"react\"; const useFetch = (url) => { const [data, setData] = useState(null); useEffect(() => { fetch(url) .then((res) => res.json()) .then((data) => setData(data)); }, [url]); return [data]; }; export default useFetch; index.js: index.js import ReactDOM from \"react-dom/client\"; import useFetch from \"./useFetch\"; const Home = () => { const [data] = useFetch(\"https://jsonplaceholder.typicode.com/todos\"); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Home />); import ReactDOM from \"react-dom/client\"; import useFetch from \"./useFetch\"; const Home = () => { const [data] = useFetch(\"https://jsonplaceholder.typicode.com/todos\"); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<Home />); Run Example Â» Example Explained We have created a new file called useFetch.js containing a function called useFetch which contains all of the logic needed to fetch our data. useFetch.js useFetch We removed the hard-coded URL and replaced it with a url variable that can be passed to the custom Hook. url Lastly, we are returning our data from our Hook. In index.js, we are importing our useFetch Hook and utilizing it like any other Hook. This is where we pass in the URL to fetch data from."
  },
  {
    "document": "index.js useFetch Now we can reuse this custom Hook in any component to fetch data from any URL."
  },
  {
    "document": "React Online Compiler React.js Compiler (Editor) Create your own website and React.js applications with a Node.js environment in W3Schools Spaces. W3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host your React.js applications within a Node.js environment. You have full control over the website's appearance and functionality by editing the code directly in your web browser. W3Schools Spaces is user-friendly and requires no setup, making it easy to use. Get started with React.js by selecting the Node.js environment in Spaces. The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your React.js knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. It includes React.js, but you can use it for other languages too. New languages are added all the time: If you don't know React, we suggest that you read our React Tutorial from scratch. Easy Package Management Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation. Build Powerful Websites You can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share Your Website With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "React Quiz You can test your React skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about React. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the React Quiz â¯ If you don't know React, we suggest that you read our React Tutorial from scratch. Kickstart your career Get certified by completing the exam"
  },
  {
    "document": "React Exercises Exercises Test your React skills with exercises from all categories: Get Started ES6 Arrow Function ES6 Variables ES6 Array Methods ES6 Destructuring ES6 Spread ES6 Ternary JSX Components Props Events Conditionals Lists Hooks useState Hooks useEffect CSS Styling Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise We have gathered a variety of React exercises from most of the chapters in our React Tutorial. The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer."
  },
  {
    "document": "React Syllabus Introduction The W3Schools React Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of React. It is designed for beginners and requires intermediate JavaScript knowledge. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn React step by step, from basic components to advanced features. Get Started With React Â» Learning Outcomes Note: Are you a teacher teaching React? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are React Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn React for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment React, like any programming library, is best learned through hands-on practice. Try this example using our editor: Example: import React from 'react'; import ReactDOM from 'react-dom/client'; function Hello(props) { return <h1>Hello World!</h1>; } const container = document.getElementById(\"root\"); const root = ReactDOM.createRoot(container); root.render(<Hello />); import React from 'react'; import ReactDOM from 'react-dom/client'; function Hello(props) { return <h1>Hello World!</h1>; } const container = document.getElementById(\"root\"); const root = ReactDOM.createRoot(container); root.render(<Hello />); Run Example Â» If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account React Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The React exam is a test that summarizes the W3Schools React syllabus. After passing the exam you get the \"Certified React Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach React? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "React Study Plan Introduction The React study plan helps you teach your students React step-by-step. Creating a study plan for React is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of React to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach React. The React training materials is available for you to include and use in your study plan: React Syllabus With the React Syllabus, your students will start with the basics, like understanding components, props, and state, and move to more advanced topics, like working with hooks, managing routing, and building interactive user interfaces. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about React Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 3 weeks, others 6 or more weeks. It is completely up to you. For example, this is how a 3-week React study plan could look like: Image of Sample React study plan: Ready to get started? Start with React Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach React programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "React.js Server Create React.js Server Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "React.js Interview Preparation Try W3Schools' comprehensive Front-End interview preparation feature. A tool that will help you get ready for your next interview. W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance. After the interview training you will get an evaluation of your performance that you can use to improve yourself. Get Started What to expect in a Front-End interview If you are going to a Front-End interview, there are a few things you can expect: Coding Questions: You will be asked coding questions, and you possibly also get a task to solve. Examples of technical questions: Tell me about your experience as a Front-End developer. Tell me about a personal project where you worked on implementing the user interface for a website. Examples of a task: Create a webpage that shows a greeting message to the user. Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day. If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers. Showcase your skills and projects: They would like to see projects to understand your work better. You can include current projects in your portfolio even if they are unfinished. Examples of projects to have in your portfolio: What to do before the interview Before you go to an interview, you should check out the company. It will give you a better understanding of their values and what they do. Check out: Make sure you understand the job description: Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand. You can also ask a friend or a community member to help you. There is a big community of Front-End developers on social media. Reflect on why you are the right fit for this role: Companies hire people they believe will be the right fit. Think about what value you can add to the role and the team. Write them down. It will help you discuss how you are the right candidate for the role. We have created an interview tool to help you prepare: Try it out  What is Front-End Development? Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience. Typical Languages Used in Front-End Development: Career Outlook The demand for Front-End developers is high. You can expect: The Average Salary is $112,328 in the US. Typical Job Titles for a Front-End Developer: Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more. Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!"
  },
  {
    "document": "Try W3Schools interview preparation here: Interview Preperation Best of luck!"
  },
  {
    "document": "W3Schools React Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "SQL Tutorial Learn SQL SQL is a standard language for storing, manipulating and retrieving data in databases. Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems. Examples in Each Chapter With our online SQL editor, you can edit the SQL statements, and click on a button to view the result. Example Click on the \"Try it Yourself\" button to see how it works. SQL Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all SQL Exercises SQL Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples SQL Quiz Test Test your SQL skills at W3Schools! Start SQL Quiz! Track Your Progress Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. SQL References At W3Schools you will find a complete reference for keywords and functions: SQL Keyword Reference MYSQL Functions SQLServer Functions MS Access Functions SQL Quick Reference SQL Data Types Data types and ranges for Microsoft Access, MySQL and SQL Server. SQL Data Types Kickstart your career Get certified by completing the course"
  },
  {
    "document": "Introduction to SQL SQL is a standard language for accessing and manipulating databases. What is SQL? What Can SQL do? SQL is a Standard - BUT.... Although SQL is an ANSI/ISO standard, there are different versions of the SQL language. However, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner. SELECT UPDATE DELETE INSERT WHERE Note: Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard! Using SQL in Your Web Site To build a web site that shows data from a database, you will need: RDBMS RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access. The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows. Look at the \"Customers\" table: Example Every table is broken up into smaller entities called fields. The fields in the Customers table consist of CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. A field is a column in a table that is designed to maintain specific information about every record in the table. A record, also called a row, is each individual entry that exists in a table. For example, there are 91 records in the above Customers table. A record is a horizontal entity in a table. A column is a vertical entity in a table that contains all information associated with a specific field in a table. Video: SQL Introduction"
  },
  {
    "document": "SQL Syntax SQL Statements Most of the actions you need to perform on a database are done with SQL statements. SQL statements consist of keywords that are easy to understand. The following SQL statement returns all records from a table named \"Customers\": Example Select all records from the Customers table: In this tutorial we will teach you all about the different SQL statements. Database Tables A database most often contains one or more tables. Each table is identified by a name (e.g. \"Customers\" or \"Orders\"), and contain records (rows) with data. In this tutorial we will use the well-known Northwind sample database (included in MS Access and MS SQL Server). Below is a selection from the Customers table used in the examples: The table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country). Keep in Mind That... select SELECT In this tutorial we will write all SQL keywords in upper-case. Semicolon after SQL Statements? Some database systems require a semicolon at the end of each SQL statement. Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server. In this tutorial, we will use semicolon at the end of each SQL statement. Some of The Most Important SQL Commands SELECT UPDATE DELETE INSERT INTO CREATE DATABASE ALTER DATABASE CREATE TABLE ALTER TABLE DROP TABLE CREATE INDEX DROP INDEX"
  },
  {
    "document": "SQL SELECT Statement The SQL SELECT Statement The SELECT statement is used to select data from a database. SELECT Example Return data from the Customers table: Syntax SELECT column1, column2, ... FROM table_name; SELECT column1, column2, ... FROM table_name; Here, column1, column2, ... are the field names of the table you want to select data from. The table_name represents the name of the table you want to select data from. Demo Database Below is a selection from the Customers table used in the examples: Select ALL columns If you want to return all columns, without specifying every column name, you can use the SELECT * syntax: SELECT * Example Return all the columns from the Customers table: Video: SQL SELECT Statement"
  },
  {
    "document": "SQL SELECT DISTINCT Statement The SQL SELECT DISTINCT Statement The SELECT DISTINCT statement is used to return only distinct (different) values. SELECT DISTINCT Example Select all the different countries from the \"Customers\" table: Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values. Syntax SELECT DISTINCT column1, column2, ... FROM table_name; SELECT DISTINCT column1, column2, ... FROM table_name; Demo Database Below is a selection from the Customers table used in the examples: SELECT Example Without DISTINCT If you omit the DISTINCT keyword, the SQL statement returns the \"Country\" value from all the records of the \"Customers\" table: DISTINCT Example Count Distinct By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries. DISTINCT COUNT Example Note: The COUNT(DISTINCT column_name) is not supported in Microsoft Access databases. Here is a workaround for MS Access: Example You will learn about the COUNT function later in this tutorial. Video: SQL SELECT DISTINCT Statement"
  },
  {
    "document": "SQL WHERE Clause The SQL WHERE Clause The WHERE clause is used to filter records. WHERE It is used to extract only those records that fulfill a specified condition. Example Select all customers from Mexico: Syntax SELECT column1, column2, ... FROM table_name WHERE condition; SELECT column1, column2, ... FROM table_name WHERE condition; Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.! WHERE SELECT UPDATE DELETE Demo Database Below is a selection from the Customers table used in the examples: Text Fields vs. Numeric Fields SQL requires single quotes around text values (most database systems will also allow double quotes). However, numeric fields should not be enclosed in quotes: Example Operators in The WHERE Clause You can use other operators than the = operator to filter the search. = Example Select all customers with a CustomerID greater than 80: The following operators can be used in the WHERE clause: WHERE Video: SQL WHERE Clause"
  },
  {
    "document": "SQL ORDER BY Keyword The SQL ORDER BY The ORDER BY keyword is used to sort the result-set in ascending or descending order. ORDER BY Example Sort the products by price: Syntax SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC; SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC; Demo Database Below is a selection from the Products table used in the examples: DESC The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword. ORDER BY DESC Example Sort the products from highest to lowest price: Order Alphabetically For string values the ORDER BY keyword will order alphabetically: ORDER BY Example Sort the products alphabetically by ProductName: Alphabetically DESC To sort the table reverse alphabetically, use the DESC keyword: DESC Example Sort the products by ProductName in reverse order: ORDER BY Several Columns The following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" and the \"CustomerName\" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName: Example Using Both ASC and DESC The following SQL statement selects all customers from the \"Customers\" table, sorted ascending by the \"Country\" and descending by the \"CustomerName\" column: Example Video: SQL ORDER BY Keyword"
  },
  {
    "document": "SQL AND Operator The SQL AND Operator The WHERE clause can contain one or many AND operators. WHERE AND The AND operator is used to filter records based on more than one condition, like if you want to return all customers from Spain that starts with the letter 'G': AND Example Syntax SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...; SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...; AND vs OR The AND operator displays a record if all the conditions are TRUE. AND The OR operator displays a record if any of the conditions are TRUE. OR Demo Database Below is a selection from the Customers table used in the examples: All Conditions Must Be True The following SQL statement selects all fields from Customers where Country is \"Brazil\" AND City is \"Rio de Janeiro\" AND CustomerID is higher than 50: Customers Country City CustomerID Example Combining AND and OR You can combine the AND and OR operators. AND OR The following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\". Make sure you use parenthesis to get the correct result. Example Select all Spanish customers that starts with either \"G\" or \"R\": Without parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value: Example Select all customers that either: are from Spain and starts with either \"G\", or starts with the letter \"R\": Video: SQL AND Operator"
  },
  {
    "document": "SQL OR Operator The SQL OR Operator The WHERE clause can contain one or more OR operators. WHERE OR The OR operator is used to filter records based on more than one condition, like if you want to return all customers from Germany but also those from Spain: OR Example Select all customers from Germany or Spain: Syntax SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...; SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...; OR vs AND The OR operator displays a record if any of the conditions are TRUE. OR The AND operator displays a record if all the conditions are TRUE. AND Demo Database Below is a selection from the Customers table used in the examples: At Least One Condition Must Be True The following SQL statement selects all fields from Customers where either City is \"Berlin\", CustomerName starts with the letter \"G\" or Country is \"Norway\": City CustomerName Country Example Combining AND and OR You can combine the AND and OR operators. AND OR The following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\". Make sure you use parenthesis to get the correct result. Example Select all Spanish customers that starts with either \"G\" or \"R\": Without parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value: Example Select all customers that either: are from Spain and starts with either \"G\", or starts with the letter \"R\":"
  },
  {
    "document": "SQL NOT Operator The NOT Operator The NOT operator is used in combination with other operators to give the opposite result, also called the negative result. NOT In the select statement below we want to return all customers that are NOT from Spain: Example Select only the customers that are NOT from Spain: In the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below. NOT = Syntax SELECT column1, column2, ... FROM table_name WHERE NOT condition; SELECT column1, column2, ... FROM table_name WHERE NOT condition; Demo Database Below is a selection from the Customers table used in the examples: NOT LIKE Example Select customers that does not start with the letter 'A': NOT BETWEEN Example Select customers with a customerID not between 10 and 60: NOT IN Example Select customers that are not from Paris or London: NOT Greater Than Example Select customers with a CustomerId not greater than 50: Note: There is a not-greater-than operator: !> that would give you the same result. !> NOT Less Than Example Select customers with a CustomerID not less than 50: Note: There is a not-less-than operator: !< that would give you the same result. !< Video: SQL NOT Operator"
  },
  {
    "document": "SQL INSERT INTO Statement The SQL INSERT INTO Statement The INSERT INTO statement is used to insert new records in a table. INSERT INTO INSERT INTO Syntax It is possible to write the INSERT INTO statement in two ways: INSERT INTO 1. Specify both the column names and the values to be inserted: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); 2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows: INSERT INTO INSERT INTO table_name VALUES (value1, value2, value3, ...); INSERT INTO table_name VALUES (value1, value2, value3, ...); Demo Database Below is a selection from the Customers table used in the examples: INSERT INTO Example The following SQL statement inserts a new record in the \"Customers\" table: Example The selection from the \"Customers\" table will now look like this: Did you notice that we did not insert any number into the CustomerID field?The CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table. Insert Data Only in Specified Columns It is also possible to only insert data in specific columns. The following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically): Example The selection from the \"Customers\" table will now look like this: Insert Multiple Rows It is also possible to insert multiple rows in one statement. To insert multiple rows of data, we use the same INSERT INTO statement, but with multiple values: INSERT INTO Example Make sure you separate each set of values with a comma ,. , The selection from the \"Customers\" table will now look like this: Video: SQL NOT Operator"
  },
  {
    "document": "SQL NULL Values What is a NULL Value? A field with a NULL value is a field with no value. If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value. Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation! How to Test for NULL Values? It is not possible to test for NULL values with comparison operators, such as =, <, or <>. We will have to use the IS NULL and IS NOT NULL operators instead. IS NULL IS NOT NULL IS NULL Syntax SELECT column_namesFROM table_name WHERE column_name IS NULL; SELECT column_namesFROM table_name WHERE column_name IS NULL; IS NOT NULL Syntax SELECT column_namesFROM table_name WHERE column_name IS NOT NULL; SELECT column_namesFROM table_name WHERE column_name IS NOT NULL; Demo Database Below is a selection from the Customers table used in the examples: The IS NULL Operator The IS NULL operator is used to test for empty values (NULL values). IS NULL The following SQL lists all customers with a NULL value in the \"Address\" field: Example Tip: Always use IS NULL to look for NULL values. The IS NOT NULL Operator The IS NOT NULL operator is used to test for non-empty values (NOT NULL values). IS NOT NULL The following SQL lists all customers with a value in the \"Address\" field: Example Video: SQL NULL Values"
  },
  {
    "document": "SQL UPDATE Statement The SQL UPDATE Statement The UPDATE statement is used to modify the existing records in a table. UPDATE UPDATE Syntax UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated! WHERE UPDATE WHERE WHERE Demo Database Below is a selection from the Customers table used in the examples: UPDATE Table The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city. Example The selection from the \"Customers\" table will now look like this: UPDATE Multiple Records It is the WHERE clause that determines how many records will be updated. WHERE The following SQL statement will update the ContactName to \"Juan\" for all records where country is \"Mexico\": Example The selection from the \"Customers\" table will now look like this: Update Warning! Be careful when updating records. If you omit the WHERE clause, ALL records will be updated! WHERE Example The selection from the \"Customers\" table will now look like this:"
  },
  {
    "document": "SQL DELETE Statement The SQL DELETE Statement The DELETE statement is used to delete existing records in a table. DELETE DELETE Syntax DELETE FROM table_name WHERE condition; DELETE FROM table_name WHERE condition; Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted! WHERE DELETE WHERE WHERE Demo Database Below is a selection from the Customers table used in the examples: SQL DELETE Example The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table: Example The \"Customers\" table will now look like this: Delete All Records It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact: DELETE FROM table_name; DELETE FROM table_name; The following SQL statement deletes all rows in the \"Customers\" table, without deleting the table: Example Delete a Table To delete the table completely, use the DROP TABLE statement: DROP TABLE Example Remove the Customers table:"
  },
  {
    "document": "SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause The SQL SELECT TOP Clause The SELECT TOP clause is used to specify the number of records to return. SELECT TOP The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance. SELECT TOP Example Select only the first 3 records of the Customers table: Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM. SELECT TOP LIMIT FETCH FIRST n ROWS ONLY ROWNUM SQL Server / MS Access Syntax: SELECT TOP number|percent column_name(s) FROM table_nameWHERE condition; SELECT TOP number|percent column_name(s) FROM table_nameWHERE condition; MySQL Syntax: SELECT column_name(s) FROM table_nameWHERE condition LIMIT number; SELECT column_name(s) FROM table_nameWHERE condition LIMIT number; Oracle 12 Syntax: SELECT column_name(s) FROM table_nameORDER BY column_name(s) FETCH FIRST number ROWS ONLY; SELECT column_name(s) FROM table_nameORDER BY column_name(s) FETCH FIRST number ROWS ONLY; Older Oracle Syntax: SELECT column_name(s) FROM table_name WHERE ROWNUM <= number; SELECT column_name(s) FROM table_name WHERE ROWNUM <= number; Older Oracle Syntax (with ORDER BY): SELECT *FROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s)) WHERE ROWNUM <= number; SELECT *FROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s)) WHERE ROWNUM <= number; Demo Database Below is a selection from the Customers table used in the examples: LIMIT The following SQL statement shows the equivalent example for MySQL: Example Select the first 3 records of the Customers table: FETCH FIRST The following SQL statement shows the equivalent example for Oracle: Example Select the first 3 records of the Customers table: SQL TOP PERCENT Example The following SQL statement selects the first 50% of the records from the \"Customers\" table (for SQL Server/MS Access): Example The following SQL statement shows the equivalent example for Oracle: Example ADD a WHERE CLAUSE The following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\" (for SQL Server/MS Access): Example The following SQL statement shows the equivalent example for MySQL: Example The following SQL statement shows the equivalent example for Oracle: Example ADD the ORDER BY Keyword Add the ORDER BY keyword when you want to sort the result, and return the first 3 records of the sorted result. ORDER BY For SQL Server and MS Access: Example Sort the result reverse alphabetically by CustomerName, and return the first 3 records: The following SQL statement shows the equivalent example for MySQL: Example The following SQL statement shows the equivalent example for Oracle: Example"
  },
  {
    "document": "SQL Aggregate Functions SQL Aggregate Functions An aggregate function is a function that performs a calculation on a set of values, and returns a single value. Aggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group. GROUP BY SELECT GROUP BY The most commonly used SQL aggregate functions are: MIN() MAX() COUNT() SUM() AVG() Aggregate functions ignore null values (except for COUNT()). COUNT() We will go through the aggregate functions above in the next chapters."
  },
  {
    "document": "SQL MIN() and MAX() Functions The SQL MIN() and MAX() Functions The MIN() function returns the smallest value of the selected column. MIN() The MAX() function returns the largest value of the selected column. MAX() MIN Example Find the lowest price in the Price column: MAX Example Find the highest price in the Price column: Syntax SELECT MIN(column_name) FROM table_name WHERE condition; SELECT MIN(column_name) FROM table_name WHERE condition; SELECT MAX(column_name) FROM table_name WHERE condition; SELECT MAX(column_name) FROM table_name WHERE condition; Demo Database Below is a selection from the Products table used in the examples: Set Column Name (Alias) When you use MIN() or MAX(), the returned column will not have a descriptive name. To give the column a descriptive name, use the AS keyword: MIN() MAX() AS Example Use MIN() with GROUP BY Here we use the MIN() function and the GROUP BY clause, to return the smallest price for each category in the Products table: MIN() GROUP BY Example You will learn more about the GROUP BY clause later in this tutorial. GROUP BY"
  },
  {
    "document": "SQL COUNT() Function The SQL COUNT() Function The COUNT() function returns the number of rows that matches a specified criterion. COUNT() Example Find the total number of rows in the Products table: Products Syntax SELECT COUNT(column_name) FROM table_name WHERE condition; SELECT COUNT(column_name) FROM table_name WHERE condition; Demo Database Below is a selection from the Products table used in the examples: Specify Column You can specify a column name instead of the asterix symbol (*). (*) If you specify a column name instead of (*), NULL values will not be counted. (*) Example Find the number of products where the ProductName is not null: ProductName Add a WHERE Clause You can add a WHERE clause to specify conditions: WHERE Example Find the number of products where Price is higher than 20: Price Ignore Duplicates You can ignore duplicates by using the DISTINCT keyword in the COUNT() function. DISTINCT COUNT() If DISTINCT is specified, rows with the same value for the specified column will be counted as one. DISTINCT Example How many different prices are there in the Products table: Products Use an Alias Give the counted column a name by using the AS keyword. AS Example Name the column \"Number of records\": Use COUNT() with GROUP BY Here we use the COUNT() function and the GROUP BY clause, to return the number of records for each category in the Products table: COUNT() GROUP BY Example You will learn more about the GROUP BY clause later in this tutorial. GROUP BY"
  },
  {
    "document": "SQL SUM() Function The SQL SUM() Function The SUM() function returns the total sum of a numeric column. SUM() Example Return the sum of all Quantity fields in the OrderDetails table: Quantity OrderDetails Syntax SELECT SUM(column_name) FROM table_name WHERE condition; SELECT SUM(column_name) FROM table_name WHERE condition; Demo Database Below is a selection from the OrderDetails table used in the examples: Add a WHERE Clause You can add a WHERE clause to specify conditions: WHERE Example Return the sum of the Quantity field for the product with ProductID 11: Quantity ProductID Use an Alias Give the summarized column a name by using the AS keyword. AS Example Name the column \"total\": Use SUM() with GROUP BY Here we use the SUM() function and the GROUP BY clause, to return the Quantity for each OrderID in the OrderDetails table: SUM() GROUP BY Quantity OrderID Example You will learn more about the GROUP BY clause later in this tutorial. GROUP BY SUM() With an Expression The parameter inside the SUM() function can also be an expression. SUM() If we assume that each product in the OrderDetails column costs 10 dollars, we can find the total earnings in dollars by multiply each quantity with 10: OrderDetails Example Use an expression inside the SUM() function: SUM() We can also join the OrderDetails table to the Products table to find the actual amount, instead of assuming it is 10 dollars: OrderDetails Products Example Join OrderDetails with Products, and use SUM() to find the total amount: OrderDetails Products SUM() You will learn more about Joins later in this tutorial."
  },
  {
    "document": "SQL AVG() Function The SQL AVG() Function The AVG() function returns the average value of a numeric column. AVG() Example Find the average price of all products: Note: NULL values are ignored. Syntax SELECT AVG(column_name) FROM table_name WHERE condition; SELECT AVG(column_name) FROM table_name WHERE condition; Demo Database Below is a selection from the Products table used in the examples: Add a WHERE Clause You can add a WHERE clause to specify conditions: WHERE Example Return the average price of products in category 1: Use an Alias Give the AVG column a name by using the AS keyword. AS Example Name the column \"average price\": Higher Than Average To list all records with a higher price than average, we can use the AVG() function in a sub query: AVG() Example Return all products with a higher price than the average price: Use AVG() with GROUP BY Here we use the AVG() function and the GROUP BY clause, to return the average price for each category in the Products table: AVG() GROUP BY Example You will learn more about the GROUP BY clause later in this tutorial. GROUP BY"
  },
  {
    "document": "SQL LIKE Operator The SQL LIKE Operator The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. LIKE WHERE There are two wildcards often used in conjunction with the LIKE operator: LIKE % _ You will learn more about wildcards in the next chapter. Example Select all customers that starts with the letter \"a\": Syntax SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern; SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern; Demo Database Below is a selection from the Customers table used in the examples: The _ Wildcard The _ wildcard represents a single character. _ It can be any character or number, but each _ represents one, and only one, character. _ Example Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters: The % Wildcard The % wildcard represents any number of characters, even zero characters. % Example Return all customers from a city that contains the letter 'L': Starts With To return records that starts with a specific letter or phrase, add the % at the end of the letter or phrase. % Example Return all customers that starts with 'La': Tip: You can also combine any number of conditions using AND or OR operators. AND OR Example Return all customers that starts with 'a' or starts with 'b': Ends With To return records that ends with a specific letter or phrase, add the % at the beginning of the letter or phrase. % Example Return all customers that ends with 'a': Tip: You can also combine \"starts with\" and \"ends with\": Example Return all customers that starts with \"b\" and ends with \"s\": Contains To return records that contains a specific letter or phrase, add the % both before and after the letter or phrase. % Example Return all customers that contains the phrase 'or' Combine Wildcards Any wildcard, like % and _ , can be used in combination with other wildcards. % _ Example Return all customers that starts with \"a\" and are at least 3 characters in length: Example Return all customers that have \"r\" in the second position: Without Wildcard If no wildcard is specified, the phrase has to have an exact match to return a result. Example Return all customers from Spain:"
  },
  {
    "document": "SQL Wildcards SQL Wildcard Characters A wildcard character is used to substitute one or more characters in a string. Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. LIKE LIKE WHERE Example Return all customers that starts with the letter 'a': Wildcard Characters * Not supported in PostgreSQL and MySQL databases. ** Supported only in Oracle databases. Demo Database Below is a selection from the Customers table used in the examples: Using the % Wildcard The % wildcard represents any number of characters, even zero characters. % Example Return all customers that ends with the pattern 'es': Example Return all customers that contains the pattern 'mer': Using the _ Wildcard The _ wildcard represents a single character. _ It can be any character or number, but each _ represents one, and only one, character. _ Example Return all customers with a City starting with any character, followed by \"ondon\": City Example Return all customers with a City starting with \"L\", followed by any 3 characters, ending with \"on\": City Using the [] Wildcard The [] wildcard returns a result if any of the characters inside gets a match. [] Example Return all customers starting with either \"b\", \"s\", or \"p\": Using the - Wildcard The - wildcard allows you to specify a range of characters inside the [] wildcard. - [] Example Return all customers starting with \"a\", \"b\", \"c\", \"d\", \"e\" or \"f\": Combine Wildcards Any wildcard, like % and _ , can be used in combination with other wildcards. % _ Example Return all customers that starts with \"a\" and are at least 3 characters in length: Example Return all customers that have \"r\" in the second position: Without Wildcard If no wildcard is specified, the phrase has to have an exact match to return a result. Example Return all customers from Spain: Microsoft Access Wildcards The Microsoft Access Database has some other wildcards:"
  },
  {
    "document": "SQL IN Operator The SQL IN Operator The IN operator allows you to specify multiple values in a WHERE clause. IN WHERE The IN operator is a shorthand for multiple OR conditions. IN OR Example Return all customers from 'Germany', 'France', or 'UK' Syntax SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...); SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...); Demo Database Below is a selection from the Customers table used in the examples: NOT IN By using the NOT keyword in front of the IN operator, you return all records that are NOT any of the values in the list. NOT IN Example Return all customers that are NOT from 'Germany', 'France', or 'UK': IN (SELECT) You can also use IN with a subquery in the WHERE clause. IN WHERE With a subquery you can return all records from the main query that are present in the result of the subquery. Example Return all customers that have an order in the Orders table: NOT IN (SELECT) The result in the example above returned 74 records, that means that there are 17 customers that haven't placed any orders. Let us check if that is correct, by using the NOT IN operator. NOT IN Example Return all customers that have NOT placed any orders in the Orders table:"
  },
  {
    "document": "SQL BETWEEN Operator The SQL BETWEEN Operator The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates. BETWEEN The BETWEEN operator is inclusive: begin and end values are included. BETWEEN Example Selects all products with a price between 10 and 20: Syntax SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2; SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2; Demo Database Below is a selection from the Products table used in the examples: NOT BETWEEN To display the products outside the range of the previous example, use NOT BETWEEN: NOT BETWEEN Example BETWEEN with IN The following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3: Example BETWEEN Text Values The following SQL statement selects all products with a ProductName alphabetically between Carnarvon Tigers and Mozzarella di Giovanni: Example The following SQL statement selects all products with a ProductName between Carnarvon Tigers and Chef Anton's Cajun Seasoning: Example NOT BETWEEN Text Values The following SQL statement selects all products with a ProductName not between Carnarvon Tigers and Mozzarella di Giovanni: Example BETWEEN Dates The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996': Example OR: Example Sample Table Below is a selection from the Orders table used in the examples:"
  },
  {
    "document": "SQL Aliases SQL Aliases SQL aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the AS keyword. AS Example AS is Optional Actually, in most database languages, you can skip the AS keyword and get the same result: Example Syntax When alias is used on column: SELECT column_name AS alias_name FROM table_name; SELECT column_name AS alias_name FROM table_name; When alias is used on table: SELECT column_name(s) FROM table_name AS alias_name; SELECT column_name(s) FROM table_name AS alias_name; Demo Database Below is a selection from the Customers and Orders tables used in the examples: Customers Orders Alias for Columns The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column: Example Using Aliases With a Space Character If you want your alias to contain one or more spaces, like \"My Great Products\", surround your alias with square brackets or double quotes. My Great Products Example Using [square brackets] for aliases with space characters: Example Using \"double quotes\" for aliases with space characters: Note: Some database systems allows both [] and \"\", and some only allows one of them. Concatenate Columns The following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country): Example Note: To get the SQL statement above to work in MySQL use the following: MySQL Example Note: To get the SQL statement above to work in Oracle use the following: Oracle Example Alias for Tables The same rules applies when you want to use an alias for a table. Example Refer to the Customers table as Persons instead: It might seem useless to use aliases on tables, but when you are using more than one table in your queries, it can make the SQL statements shorter. The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter): Example The following SQL statement is the same as above, but without aliases: Example Aliases can be useful when:"
  },
  {
    "document": "SQL Joins SQL JOIN A JOIN clause is used to combine rows from two or more tables, based on a related column between them. JOIN Let's look at a selection from the \"Orders\" table: Then, look at a selection from the \"Customers\" table: Notice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column. Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables: INNER JOIN Example and it will produce something like this: Different Types of SQL JOINs Here are the different types of the JOINs in SQL: (INNER) JOIN LEFT (OUTER) JOIN RIGHT (OUTER) JOIN FULL (OUTER) JOIN"
  },
  {
    "document": "SQL INNER JOIN INNER JOIN The INNER JOIN keyword selects records that have matching values in both tables. INNER JOIN Let's look at a selection of the Products table: And a selection of the Categories table: We will join the Products table with the Categories table, by using the CategoryID field from both tables: CategoryID Example Join Products and Categories with the INNER JOIN keyword:  Note: The INNER JOIN keyword returns only rows with a match in both tables. Which means that if you have a product with no CategoryID, or with a CategoryID that is not present in the Categories table, that record would not be returned in the result. INNER JOIN Syntax SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; Naming the Columns It is a good practice to include the table name when specifying columns in the SQL statement. Example Specify the table names: The example above works without specifying table names, because none of the specified column names are present in both tables. If you try to include CategoryID in the SELECT statement, you will get an error if you do not specify the table name (because CategoryID is present in both tables). CategoryID SELECT CategoryID JOIN or INNER JOIN JOIN and INNER JOIN will return the same result. JOIN INNER JOIN INNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN. INNER JOIN JOIN INNER JOIN Example JOIN is the same as INNER JOIN: JOIN Three Tables The following SQL statement selects all orders with customer and shipper information: Here is the Shippers table: Example"
  },
  {
    "document": "SQL LEFT JOIN Keyword SQL LEFT JOIN Keyword The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match. LEFT JOIN LEFT JOIN Syntax Note: In some databases LEFT JOIN is called LEFT OUTER JOIN. Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Orders\" table: SQL LEFT JOIN Example The following SQL statement will select all customers, and any orders they might have: Example Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders). LEFT JOIN"
  },
  {
    "document": "SQL RIGHT JOIN Keyword SQL RIGHT JOIN Keyword The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match. RIGHT JOIN RIGHT JOIN Syntax Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN. RIGHT JOIN RIGHT OUTER JOIN  Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Orders\" table: And a selection from the \"Employees\" table: SQL RIGHT JOIN Example The following SQL statement will return all employees, and any orders they might have placed: Example Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders). RIGHT JOIN"
  },
  {
    "document": "SQL FULL OUTER JOIN Keyword SQL FULL OUTER JOIN Keyword The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records. FULL OUTER JOIN Tip: FULL OUTER JOIN and FULL JOIN are the same. FULL OUTER JOIN FULL JOIN FULL OUTER JOIN Syntax  Note: FULL OUTER JOIN can potentially return very large result-sets! FULL OUTER JOIN Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Orders\" table: SQL FULL OUTER JOIN Example The following SQL statement selects all customers, and all orders: A selection from the result set may look like this: Note: The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well. FULL OUTER JOIN"
  },
  {
    "document": "SQL Self Join SQL Self Join A self join is a regular join, but the table is joined with itself. Self Join Syntax T1 and T2 are different table aliases for the same table. Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: SQL Self Join Example The following SQL statement matches customers that are from the same city: Example"
  },
  {
    "document": "SQL UNION Operator The SQL UNION Operator The UNION operator is used to combine the result-set of two or more SELECT statements. UNION SELECT SELECT UNION SELECT UNION Syntax UNION ALL Syntax The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL: UNION UNION ALL Note: The column names in the result-set are usually equal to the column names in the first SELECT statement. SELECT Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Suppliers\" table: SQL UNION Example The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table: Example Note: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values! UNION UNION ALL SQL UNION ALL Example The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table: Example SQL UNION With WHERE The following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table: Example SQL UNION ALL With WHERE The following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table: Example Another UNION Example The following SQL statement lists all customers and suppliers: Example Notice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\"."
  },
  {
    "document": "SQL GROUP BY Statement The SQL GROUP BY Statement The GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\". GROUP BY The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns. GROUP BY COUNT() MAX() MIN() SUM() AVG() GROUP BY Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: SQL GROUP BY Examples The following SQL statement lists the number of customers in each country: Example The following SQL statement lists the number of customers in each country, sorted high to low: Example Demo Database Below is a selection from the \"Orders\" table in the Northwind sample database: And a selection from the \"Shippers\" table: GROUP BY With JOIN Example The following SQL statement lists the number of orders sent by each shipper: Example"
  },
  {
    "document": "SQL HAVING Clause The SQL HAVING Clause The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions. HAVING WHERE HAVING Syntax Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: SQL HAVING Examples The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers: Example The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers): Example Demo Database Below is a selection from the \"Orders\" table in the Northwind sample database: And a selection from the \"Employees\" table: More HAVING Examples The following SQL statement lists the employees that have registered more than 10 orders: Example The following SQL statement lists if the employees \"Davolio\" or \"Fuller\" have registered more than 25 orders: Example"
  },
  {
    "document": "SQL EXISTS Operator The SQL EXISTS Operator The EXISTS operator is used to test for the existence of any record in a subquery. EXISTS The EXISTS operator returns TRUE if the subquery returns one or more records. EXISTS EXISTS Syntax Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: And a selection from the \"Suppliers\" table: SQL EXISTS Examples The following SQL statement returns TRUE and lists the suppliers with a product price less than 20: Example The following SQL statement returns TRUE and lists the suppliers with a product price equal to 22: Example"
  },
  {
    "document": "SQL ANY and ALL Operators The SQL ANY and ALL Operators The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values. ANY ALL The SQL ANY Operator The ANY operator: ANY ANY means that the condition will be true if the operation is true for any of the values in the range. ANY ANY Syntax Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=). The SQL ALL Operator The ALL operator: ALL SELECT WHERE HAVING ALL means that the condition will be true only if the operation is true for all values in the range. ALL ALL Syntax With SELECT ALL Syntax With WHERE or HAVING Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=). Demo Database Below is a selection from the \"Products\" table in the Northwind sample database: And a selection from the \"OrderDetails\" table: SQL ANY Examples The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10): Example The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 99 (this will return TRUE because the Quantity column has some values larger than 99): Example The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 1000 (this will return FALSE because the Quantity column has no values larger than 1000): Example SQL ALL Examples The following SQL statement lists ALL the product names: Example The following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10): Example"
  },
  {
    "document": "SQL SELECT INTO Statement The SQL SELECT INTO Statement The SELECT INTO statement copies data from one table into a new table. SELECT INTO SELECT INTO Syntax Copy all columns into a new table: Copy only some columns into a new table: The new table will be created with the column-names and types as defined in the old table. You can create new column names using the AS clause. AS SQL SELECT INTO Examples The following SQL statement creates a backup copy of Customers: The following SQL statement uses the IN clause to copy the table into a new table in another database: IN The following SQL statement copies only a few columns into a new table: The following SQL statement copies only the German customers into a new table: The following SQL statement copies data from more than one table into a new table: Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data: SELECT INTO WHERE"
  },
  {
    "document": "SQL INSERT INTO SELECT Statement The SQL INSERT INTO SELECT Statement The INSERT INTO SELECT statement copies data from one table and inserts it into another table. INSERT INTO SELECT The INSERT INTO SELECT statement requires that the data types in source and target tables match. INSERT INTO SELECT Note: The existing records in the target table are unaffected. INSERT INTO SELECT Syntax Copy all columns from one table to another table: Copy only some columns from one table into another table: Demo Database In this tutorial we will use the well-known Northwind sample database. Below is a selection from the \"Customers\" table: And a selection from the \"Suppliers\" table: SQL INSERT INTO SELECT Examples Example Copy \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL): Example Copy \"Suppliers\" into \"Customers\" (fill all columns): Example Copy only the German suppliers into \"Customers\":"
  },
  {
    "document": "SQL CASE Expression The SQL CASE Expression The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. CASE ELSE If there is no ELSE part and no conditions are true, it returns NULL. ELSE CASE Syntax Demo Database Below is a selection from the \"OrderDetails\" table in the Northwind sample database: SQL CASE Examples The following SQL goes through conditions and returns a value when the first condition is met: Example The following SQL will order the customers by City. However, if City is NULL, then order by Country: Example"
  },
  {
    "document": "SQL NULL Functions SQL IFNULL(), ISNULL(), COALESCE(), and NVL() Functions Look at the following \"Products\" table: Suppose that the \"UnitsOnOrder\" column is optional, and may contain NULL values. Look at the following SELECT statement: In the example above, if any of the \"UnitsOnOrder\" values are NULL, the result will be NULL. Solutions MySQL The MySQL IFNULL() function lets you return an alternative value if an expression is NULL: IFNULL() or we can use the COALESCE() function, like this: COALESCE() SQL Server The SQL Server ISNULL() function lets you return an alternative value when an expression is NULL: ISNULL() or we can use the COALESCE() function, like this: COALESCE() MS Access The MS Access IsNull() function returns TRUE (-1) if the expression is a null value, otherwise FALSE (0): IsNull() Oracle The Oracle NVL() function achieves the same result: NVL() or we can use the COALESCE() function, like this: COALESCE()"
  },
  {
    "document": "SQL Stored Procedures for SQL Server What is a Stored Procedure? A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it. You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed. Stored Procedure Syntax Execute a Stored Procedure Demo Database Below is a selection from the \"Customers\" table in the Northwind sample database: Stored Procedure Example The following SQL statement creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table: Example Execute the stored procedure above as follows: Example Stored Procedure With One Parameter The following SQL statement creates a stored procedure that selects Customers from a particular City from the \"Customers\" table: Example Execute the stored procedure above as follows: Example Stored Procedure With Multiple Parameters Setting up multiple parameters is very easy. Just list each parameter and the data type separated by a comma as shown below. The following SQL statement creates a stored procedure that selects Customers from a particular City with a particular PostalCode from the \"Customers\" table: Example Execute the stored procedure above as follows: Example"
  },
  {
    "document": "SQL Comments SQL Comments Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements. Note: Comments are not supported in Microsoft Access databases! Single Line Comments Single line comments start with --. -- Any text between -- and the end of the line will be ignored (will not be executed). The following example uses a single-line comment as an explanation: Example The following example uses a single-line comment to ignore the end of a line: Example The following example uses a single-line comment to ignore a statement: Example Multi-line Comments Multi-line comments start with /* and end with */. /* */ Any text between /* and */ will be ignored. The following example uses a multi-line comment as an explanation: Example The following example uses a multi-line comment to ignore many statements: Example To ignore just a part of a statement, also use the /* */ comment. The following example uses a comment to ignore part of a line: Example The following example uses a comment to ignore part of a statement: Example"
  },
  {
    "document": "SQL Operators SQL Arithmetic Operators SQL Bitwise Operators SQL Comparison Operators SQL Compound Operators SQL Logical Operators"
  },
  {
    "document": "SQL CREATE DATABASE Statement The SQL CREATE DATABASE Statement The CREATE DATABASE statement is used to create a new SQL database. CREATE DATABASE Syntax CREATE DATABASE Example The following SQL statement creates a database called \"testDB\": Example Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES; SHOW DATABASES"
  },
  {
    "document": "SQL DROP DATABASE Statement The SQL DROP DATABASE Statement The DROP DATABASE statement is used to drop an existing SQL database. DROP DATABASE Syntax Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database! DROP DATABASE Example The following SQL statement drops the existing database \"testDB\": Example Tip: Make sure you have admin privilege before dropping any database. Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES; SHOW DATABASES"
  },
  {
    "document": "SQL BACKUP DATABASE for SQL Server The SQL BACKUP DATABASE Statement The BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database. BACKUP DATABASE Syntax The SQL BACKUP WITH DIFFERENTIAL Statement A differential back up only backs up the parts of the database that have changed since the last full database backup. Syntax BACKUP DATABASE Example The following SQL statement creates a full back up of the existing database \"testDB\" to the D disk: Example Tip: Always back up the database to a different drive than the actual database. Then, if you get a disk crash, you will not lose your backup file along with the database. BACKUP WITH DIFFERENTIAL Example The following SQL statement creates a differential back up of the database \"testDB\": Example Tip: A differential back up reduces the back up time (since only the changes are backed up)."
  },
  {
    "document": "SQL CREATE TABLE Statement The SQL CREATE TABLE Statement The CREATE TABLE statement is used to create a new table in a database. CREATE TABLE Syntax The column parameters specify the names of the columns of the table. The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.). Tip: For an overview of the available data types, go to our complete Data Types Reference. SQL CREATE TABLE Example The following example creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City: Example The PersonID column is of type int and will hold an integer. The LastName, FirstName, Address, and City columns are of type varchar and will hold characters, and the maximum length for these fields is 255 characters. The empty \"Persons\" table will now look like this: Tip: The empty \"Persons\" table can now be filled with data with the SQL INSERT INTO statement. Create Table Using Another Table A copy of an existing table can also be created using CREATE TABLE. CREATE TABLE The new table gets the same column definitions. All columns or specific columns can be selected. If you create a new table using an existing table, the new table will be filled with the existing values from the old table. Syntax The following SQL creates a new table called \"TestTable\" (which is a copy of the \"Customers\" table): Example"
  },
  {
    "document": "SQL DROP TABLE Statement The SQL DROP TABLE Statement The DROP TABLE statement is used to drop an existing table in a database. DROP TABLE Syntax Note: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the table! SQL DROP TABLE Example The following SQL statement drops the existing table \"Shippers\": Example SQL TRUNCATE TABLE The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself. TRUNCATE TABLE Syntax"
  },
  {
    "document": "SQL ALTER TABLE Statement SQL ALTER TABLE Statement The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. ALTER TABLE The ALTER TABLE statement is also used to add and drop various constraints on an existing table. ALTER TABLE ALTER TABLE - ADD Column To add a column in a table, use the following syntax: The following SQL adds an \"Email\" column to the \"Customers\" table: Example ALTER TABLE - DROP COLUMN To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column): The following SQL deletes the \"Email\" column from the \"Customers\" table: Example ALTER TABLE - RENAME COLUMN To rename a column in a table, use the following syntax: To rename a column in a table in SQL Server, use the following syntax: SQL Server: ALTER TABLE - ALTER/MODIFY DATATYPE To change the data type of a column in a table, use the following syntax: SQL Server / MS Access: My SQL / Oracle (prior version 10G): Oracle 10G and later: SQL ALTER TABLE Example Look at the \"Persons\" table: Now we want to add a column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: Notice that the new column, \"DateOfBirth\", is of type date and is going to hold a date. The data type specifies what type of data the column can hold. For a complete reference of all the data types available in MS Access, MySQL, and SQL Server, go to our complete Data Types reference. The \"Persons\" table will now look like this: Change Data Type Example Now we want to change the data type of the column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: Notice that the \"DateOfBirth\" column is now of type year and is going to hold a year in a two- or four-digit format. DROP COLUMN Example Next, we want to delete the column named \"DateOfBirth\" in the \"Persons\" table. We use the following SQL statement: The \"Persons\" table will now look like this:"
  },
  {
    "document": "SQL Constraints SQL constraints are used to specify rules for data in a table. SQL Create Constraints Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement. CREATE TABLE ALTER TABLE Syntax SQL Constraints SQL constraints are used to specify rules for the data in a table. Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted. Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table. The following constraints are commonly used in SQL: NOT NULL UNIQUE PRIMARY KEY NOT NULL UNIQUE FOREIGN KEY CHECK DEFAULT CREATE INDEX"
  },
  {
    "document": "SQL NOT NULL Constraint SQL NOT NULL Constraint By default, a column can hold NULL values. The NOT NULL constraint enforces a column to NOT accept NULL values. NOT NULL This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field. SQL NOT NULL on CREATE TABLE The following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values when the \"Persons\" table is created: Example SQL NOT NULL on ALTER TABLE To create a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL: NOT NULL SQL Server / MS Access: My SQL / Oracle (prior version 10G): Oracle 10G and later:"
  },
  {
    "document": "SQL UNIQUE Constraint SQL UNIQUE Constraint The UNIQUE constraint ensures that all values in a column are different. UNIQUE Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns. UNIQUE PRIMARY KEY A PRIMARY KEY constraint automatically has a UNIQUE constraint. PRIMARY KEY UNIQUE However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table. UNIQUE PRIMARY KEY SQL UNIQUE Constraint on CREATE TABLE The following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created: UNIQUE SQL Server / Oracle / MS Access: MySQL: To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: UNIQUE UNIQUE MySQL / SQL Server / Oracle / MS Access: SQL UNIQUE Constraint on ALTER TABLE To create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL: UNIQUE MySQL / SQL Server / Oracle / MS Access: To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: UNIQUE UNIQUE MySQL / SQL Server / Oracle / MS Access: DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: UNIQUE MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL PRIMARY KEY Constraint SQL PRIMARY KEY Constraint The PRIMARY KEY constraint uniquely identifies each record in a table. PRIMARY KEY Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). SQL PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: PRIMARY KEY MySQL: SQL Server / Oracle / MS Access: To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: PRIMARY KEY PRIMARY KEY MySQL / SQL Server / Oracle / MS Access: Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName). PRIMARY KEY SQL PRIMARY KEY on ALTER TABLE To create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL: PRIMARY KEY MySQL / SQL Server / Oracle / MS Access: To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: PRIMARY KEY PRIMARY KEY MySQL / SQL Server / Oracle / MS Access: Note: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain NULL values (when the table was first created). ALTER TABLE DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: PRIMARY KEY MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL FOREIGN KEY Constraint SQL FOREIGN KEY Constraint The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables. FOREIGN KEY A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table. FOREIGN KEY PRIMARY KEY The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table. Look at the following two tables: Persons Table Orders Table Notice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table. The \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table. PRIMARY KEY The \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table. FOREIGN KEY The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table. FOREIGN KEY SQL FOREIGN KEY on CREATE TABLE The following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created: FOREIGN KEY MySQL: SQL Server / Oracle / MS Access: To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: FOREIGN KEY FOREIGN KEY MySQL / SQL Server / Oracle / MS Access: SQL FOREIGN KEY on ALTER TABLE To create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL: FOREIGN KEY MySQL / SQL Server / Oracle / MS Access: To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: FOREIGN KEY FOREIGN KEY MySQL / SQL Server / Oracle / MS Access: DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: FOREIGN KEY MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL CHECK Constraint SQL CHECK Constraint The CHECK constraint is used to limit the value range that can be placed in a column. CHECK If you define a CHECK constraint on a column it will allow only certain values for this column. CHECK If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row. CHECK SQL CHECK on CREATE TABLE The following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that the age of a person must be 18, or older: CHECK CHECK MySQL: SQL Server / Oracle / MS Access: To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: CHECK CHECK MySQL / SQL Server / Oracle / MS Access: SQL CHECK on ALTER TABLE To create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL: CHECK MySQL / SQL Server / Oracle / MS Access: To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: CHECK CHECK MySQL / SQL Server / Oracle / MS Access: DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: CHECK SQL Server / Oracle / MS Access: MySQL:"
  },
  {
    "document": "SQL DEFAULT Constraint SQL DEFAULT Constraint The DEFAULT constraint is used to set a default value for a column. DEFAULT The default value will be added to all new records, if no other value is specified. SQL DEFAULT on CREATE TABLE The following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created: DEFAULT My SQL / SQL Server / Oracle / MS Access: The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE(): DEFAULT GETDATE() SQL DEFAULT on ALTER TABLE To create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL: DEFAULT MySQL: SQL Server: MS Access: Oracle: DROP a DEFAULT Constraint To drop a DEFAULT constraint, use the following SQL: DEFAULT MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL CREATE INDEX Statement SQL CREATE INDEX Statement The CREATE INDEX statement is used to create indexes in tables. CREATE INDEX Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against. CREATE INDEX Syntax Creates an index on a table. Duplicate values are allowed: CREATE UNIQUE INDEX Syntax Creates a unique index on a table. Duplicate values are not allowed: Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database. CREATE INDEX Example The SQL statement below creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table: If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas: DROP INDEX Statement The DROP INDEX statement is used to delete an index in a table. DROP INDEX MS Access: SQL Server: DB2/Oracle: MySQL:"
  },
  {
    "document": "SQL AUTO INCREMENT Field AUTO INCREMENT Field Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table. Often this is the primary key field that we would like to be created automatically every time a new record is inserted. Syntax for MySQL The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table: MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature. AUTO_INCREMENT By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record. AUTO_INCREMENT To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement: AUTO_INCREMENT To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically): The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\". Syntax for SQL Server The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table: The MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature. IDENTITY In the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record. IDENTITY Tip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change it to IDENTITY(10,5). IDENTITY(10,5) To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically): The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\". Syntax for Access The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table: The MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature. AUTOINCREMENT By default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record. AUTOINCREMENT Tip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5). AUTOINCREMENT(10,5) To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically): The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\". Syntax for Oracle In Oracle the code is a little bit more tricky."
  },
  {
    "document": "You will have to create an auto-increment field with the sequence object (this object generates a number sequence). Use the following CREATE SEQUENCE syntax: CREATE SEQUENCE The code above creates a sequence object called seq_person, that starts with 1 and will increment by 1. It will also cache up to 10 values for performance. The cache option specifies how many sequence values will be stored in memory for faster access. To insert a new record into the \"Persons\" table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence): The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned the next number from the seq_person sequence. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\"."
  },
  {
    "document": "SQL Working With Dates SQL Dates The most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database. As long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated. SQL Date Data Types MySQL comes with the following data types for storing a date or a date/time value in the database: DATE DATETIME TIMESTAMP YEAR SQL Server comes with the following data types for storing a date or a date/time value in the database: DATE DATETIME SMALLDATETIME TIMESTAMP Note: The date types are chosen for a column when you create a new table in your database! SQL Working with Dates Look at the following table: Orders Table Now we want to select the records with an OrderDate of \"2008-11-11\" from the table above. We use the following SELECT statement: SELECT The result-set will look like this: Note: Two dates can easily be compared if there is no time component involved! Now, assume that the \"Orders\" table looks like this (notice the added time-component in the \"OrderDate\" column): If we use the same SELECT statement as above: SELECT we will get no result! This is because the query is looking only for dates with no time portion. Tip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!"
  },
  {
    "document": "SQL Views SQL CREATE VIEW Statement In SQL, a view is a virtual table based on the result-set of an SQL statement. A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database. You can add SQL statements and functions to a view and present the data as if the data were coming from one single table. A view is created with the CREATE VIEW statement. CREATE VIEW CREATE VIEW Syntax Note: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it. SQL CREATE VIEW Examples The following SQL creates a view that shows all customers from Brazil: Example We can query the view above as follows: Example The following SQL creates a view that selects every product in the \"Products\" table with a price higher than the average price: Example We can query the view above as follows: Example SQL Updating a View A view can be updated with the CREATE OR REPLACE VIEW statement. CREATE OR REPLACE VIEW SQL CREATE OR REPLACE VIEW Syntax The following SQL adds the \"City\" column to the \"Brazil Customers\" view: Example SQL Dropping a View A view is deleted with the DROP VIEW statement. DROP VIEW SQL DROP VIEW Syntax The following SQL drops the \"Brazil Customers\" view: Example"
  },
  {
    "document": "SQL Injection SQL Injection SQL injection is a code injection technique that might destroy your database. SQL injection is one of the most common web hacking techniques. SQL injection is the placement of malicious code in SQL statements, via web page input. SQL in Web Pages SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database. Look at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString): SELECT Example The rest of this chapter describes the potential dangers of using user input in SQL statements. SQL Injection Based on 1=1 is Always True Look at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id. If there is nothing to prevent a user from entering \"wrong\" input, the user can enter some \"smart\" input like this: UserId: Then, the SQL statement will look like this: The SQL above is valid and will return ALL rows from the \"Users\" table, since OR 1=1 is always TRUE. Does the example above look dangerous? What if the \"Users\" table contains names and passwords? The SQL statement above is much the same as this: A hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field. SQL Injection Based on \"\"=\"\" is Always True Here is an example of a user login on a web site: Username: Password: Example Result A hacker might get access to user names and passwords in a database by simply inserting \" OR \"\"=\" into the user name or password text box: User Name: Password: The code at the server will create a valid SQL statement like this: Result The SQL above is valid and will return all rows from the \"Users\" table, since OR \"\"=\"\" is always TRUE. SQL Injection Based on Batched SQL Statements Most databases support batched SQL statement. A batch of SQL statements is a group of two or more SQL statements, separated by semicolons. The SQL statement below will return all rows from the \"Users\" table, then delete the \"Suppliers\" table. Example Look at the following example: Example And the following input: User id: The valid SQL statement would look like this: Result Use SQL Parameters for Protection To protect a web site from SQL injection, you can use SQL parameters. SQL parameters are values that are added to an SQL query at execution time, in a controlled manner. ASP.NET Razor Example Note that parameters are represented in the SQL statement by a @ marker. The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed."
  },
  {
    "document": "Another Example Examples The following examples shows how to build parameterized queries in some common web languages. SELECT STATEMENT IN ASP.NET: INSERT INTO STATEMENT IN ASP.NET: INSERT INTO STATEMENT IN PHP:"
  },
  {
    "document": "SQL Hosting SQL Hosting If you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language. If your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans. The most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access. MS SQL Server Microsoft's SQL Server is a popular database software for database-driven web sites with high traffic. SQL Server is a very powerful, robust and full featured SQL database system. Oracle Oracle is also a popular database software for database-driven web sites with high traffic. Oracle is a very powerful, robust and full featured SQL database system. MySQL MySQL is also a popular database software for web sites. MySQL is a very powerful, robust and full featured SQL database system. MySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions. MS Access When a web site requires only a simple database, Microsoft Access can be a solution. MS Access is not well suited for very high-traffic, and not as powerful as MySQL, SQL Server, or Oracle."
  },
  {
    "document": "SQL Data Types for MySQL, SQL Server, and MS Access The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on. SQL Data Types Each column in a database table is required to have a name and a data type. An SQL developer must decide what type of data that will be stored inside each column when creating a table. The data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data. Note: Data types might have different names in different database. And even if the name is the same, the size and other details may be different! Always check the documentation! MySQL Data Types (Version 8.0) In MySQL there are three main data types: string, numeric, and date and time. String Data Types Numeric Data Types Note: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column. Date and Time Data Types MS SQL Server Data Types String Data Types Numeric Data Types Allows numbers from -10^38 +1 to 10^38 â1. The p parameter indicates the maximum total number of digits that can be stored (both to the left and to the right of the decimal point). p must be a value from 1 to 38. Default is 18. The s parameter indicates the maximum number of digits stored to the right of the decimal point. s must be a value from 0 to p. Default value is 0 Allows numbers from -10^38 +1 to 10^38 â1. The p parameter indicates the maximum total number of digits that can be stored (both to the left and to the right of the decimal point). p must be a value from 1 to 38. Default is 18. The s parameter indicates the maximum number of digits stored to the right of the decimal point. s must be a value from 0 to p. Default value is 0 The n parameter indicates whether the field should hold 4 or 8 bytes. float(24) holds a 4-byte field and float(53) holds an 8-byte field. Default value of n is 53. Date and Time Data Types Other Data Types MS Access Data Types"
  },
  {
    "document": "SQL Keywords Reference This SQL keywords reference contains the reserved words in SQL. SQL Keywords"
  },
  {
    "document": "SQL ADD Keyword ADD The ADD command is used to add a column in an existing table. ADD Example Add an \"Email\" column to the \"Customers\" table:"
  },
  {
    "document": "SQL ADD CONSTRAINT Keyword ADD CONSTRAINT The ADD CONSTRAINT command is used to create a constraint after a table is already created. ADD CONSTRAINT The following SQL adds a constraint named \"PK_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName): Example"
  },
  {
    "document": "SQL ALL Keyword ALL The ALL command returns true if all of the subquery values meet the condition. ALL The following SQL statement returns TRUE and lists the productnames if ALL the records in the OrderDetails table has quantity = 10: Example"
  },
  {
    "document": "SQL ALTER Keyword ALTER TABLE The ALTER TABLE command adds, deletes, or modifies columns in a table. ALTER TABLE The ALTER TABLE command also adds and deletes various constraints in a table. ALTER TABLE The following SQL adds an \"Email\" column to the \"Customers\" table: Example The following SQL deletes the \"Email\" column from the \"Customers\" table: Example ALTER COLUMN The ALTER COLUMN command is used to change the data type of a column in a table. ALTER COLUMN The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year: Example"
  },
  {
    "document": "SQL ALTER COLUMN Keyword ALTER COLUMN The ALTER COLUMN command is used to change the data type of a column in a table. ALTER COLUMN The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year: Example"
  },
  {
    "document": "SQL ALTER TABLE Keyword ALTER TABLE The ALTER TABLE command adds, deletes, or modifies columns in a table. ALTER TABLE The ALTER TABLE command also adds and deletes various constraints in a table. ALTER TABLE The following SQL adds an \"Email\" column to the \"Customers\" table: Example The following SQL deletes the \"Email\" column from the \"Customers\" table: Example"
  },
  {
    "document": "SQL AND Keyword AND The AND command is used with WHERE to only include rows where both conditions is true. AND The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\": Example"
  },
  {
    "document": "SQL ANY Keyword ANY The ANY command returns true if any of the subquery values meet the condition. ANY The following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity = 10: Example The following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity > 99: Example"
  },
  {
    "document": "SQL AS Keyword AS The AS command is used to rename a column or table with an alias. AS An alias only exists for the duration of the query. Alias for Columns The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column: Example The following SQL statement creates two aliases. Notice that it requires double quotation marks or square brackets if the alias name contains spaces: Example The following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country): Example Note: To get the SQL statement above to work in MySQL use the following: Alias for Tables The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter): Example"
  },
  {
    "document": "SQL ASC Keyword ASC The ASC command is used to sort the data returned in ascending order. ASC The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column: Example"
  },
  {
    "document": "SQL BACKUP DATABASE Keyword BACKUP DATABASE The BACKUP DATABASE command is used in SQL Server to create a full back up of an existing SQL database. BACKUP DATABASE The following SQL statement creates a full back up of the existing database \"testDB\" to the D disk: Example Tip: Always back up the database to a different drive than the actual database. If you get a disk crash, you will not lose your backup file along with the database. A differential back up only backs up the parts of the database that have changed since the last full database backup. The following SQL statement creates a differential back up of the database \"testDB\": Example Tip: A differential back up reduces the back up time (since only the changes are backed up)."
  },
  {
    "document": "SQL CASE Keyword CASE The CASE command is used is to create different output based on conditions. CASE The following SQL goes through several conditions and returns a value when the specified condition is met: Example The following SQL will order the customers by City. However, if City is NULL, then order by Country: Example"
  },
  {
    "document": "SQL CHECK Keyword CHECK The CHECK constraint limits the value that can be placed in a column. CHECK SQL CHECK on CREATE TABLE The following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that you can not have any person below 18 years: MySQL: SQL Server / Oracle / MS Access: To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: SQL CHECK on ALTER TABLE To create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL: MySQL / SQL Server / Oracle / MS Access: To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL:"
  },
  {
    "document": "SQL COLUMN Keyword ALTER COLUMN The ALTER COLUMN command is used to change the data type of a column in a table. ALTER COLUMN The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year: Example DROP COLUMN The DROP COLUMN command is used to delete a column in an existing table. DROP COLUMN The following SQL deletes the \"ContactName\" column from the \"Customers\" table: Example"
  },
  {
    "document": "SQL CONSTRAINT Keyword ADD CONSTRAINT The ADD CONSTRAINT command is used to create a constraint after a table is already created. ADD CONSTRAINT The following SQL adds a constraint named \"PK_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName): Example DROP CONSTRAINT The DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint. DROP CONSTRAINT DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL:"
  },
  {
    "document": "SQL CREATE Keyword CREATE DATABASE The CREATE DATABASE command is used is to create a new SQL database. CREATE DATABASE The following SQL creates a database called \"testDB\": Example Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES; CREATE TABLE The CREATE TABLE command creates a new table in the database. CREATE TABLE The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City: Example CREATE TABLE Using Another Table The following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table): Example CREATE INDEX The CREATE INDEX command is used to create indexes in tables (allows duplicate values). CREATE INDEX Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries. The following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table: If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas: Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against. CREATE UNIQUE INDEX The CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed) CREATE UNIQUE INDEX The following SQL creates an index named \"uidx_pid\" on the \"PersonID\" column in the \"Persons\" table: CREATE VIEW The CREATE VIEW command creates a view. CREATE VIEW A view is a virtual table based on the result set of an SQL statement. The following SQL creates a view that selects all customers from Brazil: Example CREATE OR REPLACE VIEW The CREATE OR REPLACE VIEW command updates a view. CREATE OR REPLACE VIEW The following SQL adds the \"City\" column to the \"Brazil Customers\" view: Example Query The View We can query the view above as follows: Example CREATE PROCEDURE The CREATE PROCEDURE command is used to create a stored procedure. CREATE PROCEDURE A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table: Example Execute the stored procedure above as follows: Example"
  },
  {
    "document": "SQL CREATE DATABASE Keyword CREATE DATABASE The CREATE DATABASE command is used is to create a new SQL database. CREATE DATABASE The following SQL creates a database called \"testDB\": Example Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;"
  },
  {
    "document": "SQL CREATE INDEX Keyword CREATE INDEX The CREATE INDEX command is used to create indexes in tables (allows duplicate values). CREATE INDEX Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries. The following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table: If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas: Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against."
  },
  {
    "document": "SQL CREATE OR REPLACE VIEW Keyword CREATE OR REPLACE VIEW The CREATE OR REPLACE VIEW command updates a view. CREATE OR REPLACE VIEW The following SQL adds the \"City\" column to the \"Brazil Customers\" view: Example Query The View We can query the view above as follows: Example"
  },
  {
    "document": "SQL CREATE TABLE Keyword CREATE TABLE The CREATE TABLE command creates a new table in the database. CREATE TABLE The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City: Example CREATE TABLE Using Another Table The following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table): Example"
  },
  {
    "document": "SQL CREATE PROCEDURE Keyword CREATE PROCEDURE The CREATE PROCEDURE command is used to create a stored procedure. CREATE PROCEDURE A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table: Example Execute the stored procedure above as follows: Example"
  },
  {
    "document": "SQL CREATE UNIQUE INDEX Keyword CREATE UNIQUE INDEX The CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed) CREATE UNIQUE INDEX Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries. The following SQL creates an index named \"uidx_pid\" on the \"PersonID\" column in the \"Persons\" table: Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against."
  },
  {
    "document": "SQL CREATE VIEW Keyword CREATE VIEW The CREATE VIEW command creates a view. CREATE VIEW A view is a virtual table based on the result set of an SQL statement. The following SQL creates a view that selects all customers from Brazil: Example Query The View We can query the view above as follows: Example"
  },
  {
    "document": "SQL DATABASE Keyword CREATE DATABASE The CREATE DATABASE command is used is to create a new SQL database. CREATE DATABASE The following SQL creates a database called \"testDB\": Example Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES; DROP DATABASE The DROP DATABASE command is used is to delete an existing SQL database. DROP DATABASE The following SQL drops a database named \"testDB\": Example Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!"
  },
  {
    "document": "SQL DEFAULT Keyword DEFAULT The DEFAULT constraint provides a default value for a column. DEFAULT The default value will be added to all new records if no other value is specified. SQL DEFAULT on CREATE TABLE The following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created: My SQL / SQL Server / Oracle / MS Access: The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE(): SQL DEFAULT on ALTER TABLE To create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL: MySQL: SQL Server: MS Access: Oracle: DROP a DEFAULT Constraint To drop a DEFAULT constraint, use the following SQL: MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL DELETE Keyword DELETE The DELETE command is used to delete existing records in a table. DELETE The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table: Example Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted! It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact: The following SQL statement deletes all rows in the \"Customers\" table, without deleting the table. This means that the table structure, attributes, and indexes will be intact: Example"
  },
  {
    "document": "SQL DESC Keyword DESC The DESC command is used to sort the data returned in descending order. DESC The following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column: Example"
  },
  {
    "document": "SQL SELECT DISTINCT Keyword SELECT DISTINCT The SELECT DISTINCT command returns only distinct (different) values in the result set. SELECT DISTINCT The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table: Example"
  },
  {
    "document": "SQL DROP Keyword DROP COLUMN The DROP COLUMN command is used to delete a column in an existing table. DROP COLUMN The following SQL deletes the \"ContactName\" column from the \"Customers\" table: Example DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP DEFAULT The DROP DEFAULT command is used to delete a DEFAULT constraint. DROP DEFAULT To drop a DEFAULT constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP INDEX The DROP INDEX command is used to delete an index in a table. DROP INDEX MS Access: SQL Server: DB2/Oracle: MySQL: DROP DATABASE The DROP DATABASE command is used is to delete an existing SQL database. DROP DATABASE The following SQL drops a database named \"testDB\": Example Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database! DROP TABLE The DROP TABLE command deletes a table in the database. DROP TABLE The following SQL deletes the table \"Shippers\": Example Note: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table! DROP VIEW The DROP VIEW command deletes a view. DROP VIEW The following SQL drops the \"Brazil Customers\" view: Example"
  },
  {
    "document": "SQL DROP COLUMN Keyword DROP COLUMN The DROP COLUMN command is used to delete a column in an existing table. DROP COLUMN The following SQL deletes the \"ContactName\" column from the \"Customers\" table: Example"
  },
  {
    "document": "SQL DROP CONSTRAINT Keyword DROP CONSTRAINT The DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint. DROP CONSTRAINT DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL: DROP a CHECK Constraint To drop a CHECK constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL:"
  },
  {
    "document": "SQL DROP DATABASE Keyword DROP DATABASE The DROP DATABASE command is used to delete an existing SQL database. DROP DATABASE The following SQL drops a database named \"testDB\": Example Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!"
  },
  {
    "document": "SQL DROP DEFAULT Keyword DROP DEFAULT The DROP DEFAULT command is used to delete a DEFAULT constraint. DROP DEFAULT To drop a DEFAULT constraint, use the following SQL: SQL Server / Oracle / MS Access: MySQL:"
  },
  {
    "document": "SQL DROP INDEX Keyword DROP INDEX The DROP INDEX command is used to delete an index in a table. DROP INDEX MS Access: SQL Server: DB2/Oracle: MySQL:"
  },
  {
    "document": "SQL DROP TABLE and TRUNCATE TABLE Keywords DROP TABLE The DROP TABLE command deletes a table in the database. DROP TABLE The following SQL deletes the table \"Shippers\": Example Note: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table! TRUNCATE TABLE The TRUNCATE TABLE command deletes the data inside a table, but not the table itself. TRUNCATE TABLE The following SQL truncates the table \"Categories\": Example"
  },
  {
    "document": "SQL DROP VIEW Keyword DROP VIEW The DROP VIEW command deletes a view. DROP VIEW The following SQL drops the \"Brazil Customers\" view: Example"
  },
  {
    "document": "SQL EXEC Keyword EXEC The EXEC command is used to execute a stored procedure. EXEC The following SQL executes a stored procedure named \"SelectAllCustomers\": Example"
  },
  {
    "document": "SQL EXISTS Keyword EXISTS The EXISTS command tests for the existence of any record in a subquery, and returns true if the subquery returns one or more records. EXISTS The following SQL lists the suppliers with a product price less than 20: Example The following SQL lists the suppliers with a product price equal to 22: Example"
  },
  {
    "document": "SQL FOREIGN KEY Keyword FOREIGN KEY The FOREIGN KEY constraint is a key used to link two tables together. FOREIGN KEY A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. SQL FOREIGN KEY on CREATE TABLE The following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created: MySQL: SQL Server / Oracle / MS Access: To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: SQL FOREIGN KEY on ALTER TABLE To create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL: MySQL / SQL Server / Oracle / MS Access: To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: DROP a FOREIGN KEY Constraint To drop a FOREIGN KEY constraint, use the following SQL: MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL FROM Keyword FROM The FROM command is used to specify which table to select or delete data from. FROM The following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table: Example The following SQL statement selects all the columns from the \"Customers\" table: Example The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table: Example"
  },
  {
    "document": "SQL FULL OUTER JOIN Keyword FULL OUTER JOIN The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table. FULL OUTER JOIN The following SQL statement selects all customers, and all orders: Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well. FULL OUTER JOIN"
  },
  {
    "document": "SQL GROUP BY Keyword GROUP BY The GROUP BY command is used to group the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG). GROUP BY The following SQL lists the number of customers in each country: Example The following SQL lists the number of customers in each country, sorted high to low: Example"
  },
  {
    "document": "SQL HAVING Keyword HAVING The HAVING command is used instead of WHERE with aggregate functions. HAVING The following SQL lists the number of customers in each country. Only include countries with more than 5 customers: Example The following SQL lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers): Example"
  },
  {
    "document": "SQL IN Keyword IN The IN command allows you to specify multiple values in a WHERE clause. IN The IN operator is a shorthand for multiple OR conditions. The following SQL selects all customers that are located in \"Germany\", \"France\" and \"UK\": Example The following SQL selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\": Example The following SQL selects all customers that are from the same countries as the suppliers: Example"
  },
  {
    "document": "SQL INDEX Keyword CREATE INDEX The CREATE INDEX command is used to create indexes in tables (allows duplicate values). CREATE INDEX Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries. The following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table: If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas: Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database. Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against. DROP INDEX The DROP INDEX command is used to delete an index in a table. DROP INDEX MS Access: SQL Server: DB2/Oracle: MySQL:"
  },
  {
    "document": "SQL INNER JOIN Keyword INNER JOIN The INNER JOIN command returns rows that have matching values in both tables. INNER JOIN The following SQL selects all orders with customer information: Example Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown! The following SQL statement selects all orders with customer and shipper information: Example"
  },
  {
    "document": "SQL INSERT INTO Keyword INSERT INTO The INSERT INTO command is used to insert new rows in a table. INSERT INTO The following SQL inserts a new record in the \"Customers\" table: Example The following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically): Example"
  },
  {
    "document": "SQL INSERT INTO SELECT Keyword INSERT INTO SELECT The INSERT INTO SELECT command copies data from one table and inserts it into another table. INSERT INTO SELECT The following SQL copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL): Example The following SQL copies \"Suppliers\" into \"Customers\" (fill all columns): Example The following SQL copies only the German suppliers into \"Customers\": Example"
  },
  {
    "document": "SQL IS NULL Keyword IS NULL The IS NULL command is used to test for empty values (NULL values). IS NULL The following SQL lists all customers with a NULL value in the \"Address\" field: Example Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation! Tip: Always use IS NULL to look for NULL values."
  },
  {
    "document": "SQL IS NOT NULL Keyword IS NOT NULL The IS NOT NULL command is used to test for non-empty values (NOT NULL values). IS NOT NULL The following SQL lists all customers with a value in the \"Address\" field: Example"
  },
  {
    "document": "SQL JOIN Keyword INNER JOIN The INNER JOIN command returns rows that have matching values in both tables. INNER JOIN The following SQL selects all orders with customer information: Example Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown! The following SQL statement selects all orders with customer and shipper information: Example LEFT JOIN The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match. LEFT JOIN The following SQL will select all customers, and any orders they might have: Example Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders). LEFT JOIN RIGHT JOIN The RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match. RIGHT JOIN The following SQL will return all employees, and any orders they might have placed: Example Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders). RIGHT JOIN FULL OUTER JOIN The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table. FULL OUTER JOIN The following SQL statement selects all customers, and all orders: Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well. FULL OUTER JOIN"
  },
  {
    "document": "SQL LEFT JOIN Keyword LEFT JOIN The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match. LEFT JOIN The following SQL will select all customers, and any orders they might have: Example Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders). LEFT JOIN"
  },
  {
    "document": "SQL LIKE Keyword LIKE The LIKE command is used in a WHERE clause to search for a specified pattern in a column. LIKE You can use two wildcards with LIKE: LIKE The following SQL selects all customers with a CustomerName starting with \"a\": Example The following SQL selects all customers with a CustomerName ending with \"a\": Example The following SQL selects all customers with a CustomerName that have \"or\" in any position: Example The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length: Example"
  },
  {
    "document": "SQL SELECT TOP, LIMIT and ROWNUM Keywords SELECT TOP, LIMIT and ROWNUM The LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return. LIMIT SELECT TOP ROWNUM Note: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM. SELECT TOP LIMIT ROWNUM The following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER): Example The following SQL statement shows the equivalent example using the LIMIT clause (MySQL): Example The following SQL statement shows the equivalent example using ROWNUM (Oracle): Example"
  },
  {
    "document": "SQL NOT Keyword NOT The NOT command is used with WHERE to only include rows where a condition is not true. NOT The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\": Example"
  },
  {
    "document": "SQL NOT NULL Keyword NOT NULL The NOT NULL constraint enforces a column to not accept NULL values, which means that you cannot insert or update a record without adding a value to this field. NOT NULL The following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values: Example The following SQL creates a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created:"
  },
  {
    "document": "SQL OR Keyword OR The OR command is used with WHERE to include rows where either condition is true. OR The following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR city is \"MÃ¼nchen\": Example"
  },
  {
    "document": "SQL ORDER BY Keyword ORDER BY The ORDER BY command is used to sort the result set in ascending or descending order. ORDER BY The ORDER BY command sorts the result set in ascending order by default. To sort the records in descending order, use the DESC keyword. ORDER BY DESC The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column: Example ASC The ASC command is used to sort the data returned in ascending order. ASC The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column: Example DESC The DESC command is used to sort the data returned in descending order. DESC The following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column: Example"
  },
  {
    "document": "SQL FULL OUTER JOIN Keyword FULL OUTER JOIN The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table. FULL OUTER JOIN The following SQL statement selects all customers, and all orders: Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well. FULL OUTER JOIN"
  },
  {
    "document": "SQL PRIMARY KEY Keyword PRIMARY KEY The PRIMARY KEY constraint uniquely identifies each record in a table. PRIMARY KEY A table can have only one primary key, which may consist of one single or of multiple fields. SQL PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: MySQL: SQL Server / Oracle / MS Access: To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName). SQL PRIMARY KEY on ALTER TABLE To create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL: MySQL / SQL Server / Oracle / MS Access: To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: Note: If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must already have been declared to not contain NULL values (when the table was first created). DROP a PRIMARY KEY Constraint To drop a PRIMARY KEY constraint, use the following SQL: MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL CREATE PROCEDURE Keyword CREATE PROCEDURE The CREATE PROCEDURE command is used to create a stored procedure. CREATE PROCEDURE A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table: Example Execute the stored procedure above as follows: Example"
  },
  {
    "document": "SQL RIGHT JOIN Keyword RIGHT JOIN The RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match. RIGHT JOIN The following SQL will return all employees, and any orders they might have placed: Example Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders). RIGHT JOIN"
  },
  {
    "document": "SQL SELECT TOP, LIMIT and ROWNUM Keywords SELECT TOP, LIMIT and ROWNUM The LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return. LIMIT SELECT TOP ROWNUM Note: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM. SELECT TOP LIMIT ROWNUM The following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER): Example The following SQL statement shows the equivalent example using the LIMIT clause (MySQL): Example The following SQL statement shows the equivalent example using ROWNUM (Oracle): Example"
  },
  {
    "document": "SQL SELECT Keyword SELECT The SELECT command is used to select data from a database. The data returned is stored in a result table, called the result set. SELECT The following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table: Example The following SQL statement selects all the columns from the \"Customers\" table: Example"
  },
  {
    "document": "SQL SELECT DISTINCT Keyword SELECT DISTINCT The SELECT DISTINCT command returns only distinct (different) values in the result set. SELECT DISTINCT The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table: Example"
  },
  {
    "document": "SQL SELECT INTO Keyword SELECT INTO The SELECT INTO command copies data from one table and inserts it into a new table. SELECT INTO The following SQL statement creates a backup copy of Customers: The following SQL statement uses the IN clause to copy the table into a new table in another database: The following SQL statement copies only a few columns into a new table: The following SQL statement copies only the German customers into a new table: The following SQL statement copies data from more than one table into a new table:"
  },
  {
    "document": "SQL SELECT TOP, LIMIT and ROWNUM Keywords SELECT TOP, LIMIT and ROWNUM The LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return. LIMIT SELECT TOP ROWNUM Note: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM. SELECT TOP LIMIT ROWNUM The following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER): Example The following SQL statement shows the equivalent example using the LIMIT clause (MySQL): Example The following SQL statement shows the equivalent example using ROWNUM (Oracle): Example"
  },
  {
    "document": "SQL SET Keyword SET The SET command is used with UPDATE to specify which columns and values that should be updated in a table. SET The following SQL updates the first customer (CustomerID = 1) with a new ContactName and a new City: Example The following SQL will update the \"ContactName\" field to \"Juan\" for all records where Country is \"Mexico\": Example Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!"
  },
  {
    "document": "SQL TABLE Keyword CREATE TABLE The CREATE TABLE command creates a new table in the database. CREATE TABLE The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City: Example CREATE TABLE Using Another Table A copy of an existing table can also be created using CREATE TABLE. CREATE TABLE The following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table): Example ALTER TABLE The ALTER TABLE command adds, deletes, or modifies columns in a table. ALTER TABLE The ALTER TABLE command also adds and deletes various constraints in a table. ALTER TABLE The following SQL adds an \"Email\" column to the \"Customers\" table: Example The following SQL deletes the \"Email\" column from the \"Customers\" table: Example DROP TABLE The DROP TABLE command deletes a table in the database. DROP TABLE The following SQL deletes the table \"Shippers\": Example Note: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table! TRUNCATE TABLE The TRUNCATE TABLE command deletes the data inside a table, but not the table itself. TRUNCATE TABLE The following SQL truncates the table \"Categories\": Example"
  },
  {
    "document": "SQL SELECT TOP, LIMIT and ROWNUM Keywords SELECT TOP, LIMIT and ROWNUM The LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return. LIMIT SELECT TOP ROWNUM Note: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM. SELECT TOP LIMIT ROWNUM The following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER): Example The following SQL statement shows the equivalent example using the LIMIT clause (MySQL): Example The following SQL statement shows the equivalent example using ROWNUM (Oracle): Example"
  },
  {
    "document": "SQL DROP TABLE and TRUNCATE TABLE Keywords DROP TABLE The DROP TABLE command deletes a table in the database. DROP TABLE The following SQL deletes the table \"Shippers\": Example Note: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table! TRUNCATE TABLE The TRUNCATE TABLE command deletes the data inside a table, but not the table itself. TRUNCATE TABLE The following SQL truncates the table \"Categories\": Example"
  },
  {
    "document": "SQL UNION Keyword UNION The UNION command combines the result set of two or more SELECT statements (only distinct values) UNION The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table: Example"
  },
  {
    "document": "SQL UNION ALL Keyword UNION ALL The UNION ALL command combines the result set of two or more SELECT statements (allows duplicate values). UNION ALL The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table: Example"
  },
  {
    "document": "SQL UNIQUE Keyword UNIQUE The UNIQUE constraint ensures that all values in a column are unique. UNIQUE SQL UNIQUE Constraint on CREATE TABLE The following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created: SQL Server / Oracle / MS Access: MySQL: To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: SQL UNIQUE Constraint on ALTER TABLE To create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL: MySQL / SQL Server / Oracle / MS Access: To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax: MySQL / SQL Server / Oracle / MS Access: DROP a UNIQUE Constraint To drop a UNIQUE constraint, use the following SQL: MySQL: SQL Server / Oracle / MS Access:"
  },
  {
    "document": "SQL UPDATE Keyword UPDATE The UPDATE command is used to update existing rows in a table. UPDATE The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city. Example The following SQL statement will update the contactname to \"Juan\" for all records where country is \"Mexico\": Example Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!"
  },
  {
    "document": "SQL VALUES Keyword VALUES The VALUES command specifies the values of an INSERT INTO statement. VALUES The following SQL inserts a new record in the \"Customers\" table: Example The following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically): Example"
  },
  {
    "document": "SQL VIEW Keyword CREATE VIEW In SQL, a view is a virtual table based on the result set of an SQL statement. The CREATE VIEW command creates a view. CREATE VIEW The following SQL creates a view that selects all customers from Brazil: Example Query The View We can query the view above as follows: Example CREATE OR REPLACE VIEW The CREATE OR REPLACE VIEW command updates a view. CREATE OR REPLACE VIEW The following SQL adds the \"City\" column to the \"Brazil Customers\" view: Example DROP VIEW The DROP VIEW command deletes a view. DROP VIEW The following SQL drops the \"Brazil Customers\" view: Example"
  },
  {
    "document": "SQL WHERE Keyword SELECT The WHERE command filters a result set to include only records that fulfill a specified condition. WHERE The following SQL statement selects all the customers from \"Mexico\" in the \"Customers\" table: Example SQL requires single quotes around text values (most database systems will also allow double quotes). However, numeric fields should not be enclosed in quotes: Example Note: The WHERE clause is not only used in SELECT statement, it is also used in UPDATE, DELETE statement, etc.! The following operators can be used in the WHERE clause:"
  },
  {
    "document": "MySQL Functions MySQL has many built-in functions. This reference contains string, numeric, date, and some advanced functions in MySQL. MySQL String Functions MySQL Numeric Functions MySQL Date Functions MySQL Advanced Functions"
  },
  {
    "document": "MySQL ASCII() Function Example Return the ASCII value of the first character in \"CustomerName\": Definition and Usage The ASCII() function returns the ASCII value for the specific character. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL CHAR_LENGTH() Function Example Return the length of the string: Definition and Usage The CHAR_LENGTH() function return the length of a string (in characters). Note: This function is equal to the CHARACTER_LENGTH() function. Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column:"
  },
  {
    "document": "MySQL CHARACTER_LENGTH() Function Example Return the length of the string: Definition and Usage The CHARACTER_LENGTH() function return the length of a string (in characters). Note: This function is equal to the CHAR_LENGTH() function. Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column:"
  },
  {
    "document": "MySQL CONCAT() Function Example Add several strings together: Definition and Usage The CONCAT() function adds two or more expressions together. Note: Also look at the CONCAT_WS() function. Syntax Parameter Values Note: If any of the expressions is a NULL value, it returns NULL Technical Details More Examples Example Add three columns into one \"Address\" column:"
  },
  {
    "document": "MySQL CONCAT_WS() Function Example Add several expressions together, and add a \"-\" separator between them: Definition and Usage The CONCAT_WS() function adds two or more expressions together with a separator. Note: Also look at the CONCAT() function. Syntax Parameter Values Technical Details More Examples Example Add three columns (and add a space between them) into one \"Address\" column:"
  },
  {
    "document": "MySQL FIELD() Function Example Return the index position of \"q\" in the string list: Definition and Usage The FIELD() function returns the index position of a value in a list of values. This function performs a case-insensitive search. Note: If the specified value is not found in the list of values, this function will return 0. If value is NULL, this function will return 0. Syntax Parameter Values Technical Details More Examples Example Return the index position of \"c\" in the string list: Example Return the index position of \"Q\" in the string list: Example Return the index position of 5 in the numeric list:"
  },
  {
    "document": "MySQL FIND_IN_SET() Function Example Search for \"q\" within the list of strings: Definition and Usage The FIND_IN_SET() function returns the position of a string within a list of strings. Syntax Parameter Values Return Values Technical Details More Examples Example Search for \"a\" within the list of strings: Example Search for \"q\" within the list of strings (string list is NULL):"
  },
  {
    "document": "MySQL FORMAT() Function Example Format the number as \"#,###,###.##\" (and round with two decimal places): Definition and Usage The FORMAT() function formats a number to a format like \"#,###,###.##\", rounded to a specified number of decimal places, then it returns the result as a string. Syntax Parameter Values Technical Details More Examples Example Format the number as a format of \"#,###,###.##\" (and round with 0 decimal places):"
  },
  {
    "document": "MySQL INSERT() Function Example Insert the string \"Example\" into the string \"W3Schools.com\". Replace the first nine characters: Definition and Usage The INSERT() function inserts a string within a string at the specified position and for a certain number of characters. Syntax Parameter Values Return Values Technical Details More Examples Example Insert the string \"no\" into the string \"W3Schools.com\". Replace three characters, starting from position 11:"
  },
  {
    "document": "MySQL INSTR() Function Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The INSTR() function returns the position of the first occurrence of a string in another string. This function performs a case-insensitive search. Syntax Parameter Values Technical Details More Examples Example Search for \"COM\" in string \"W3Schools.com\", and return position: Example Search for \"a\" in CustomerName column, and return position:"
  },
  {
    "document": "MySQL LCASE() Function Example Convert the text to lower-case: Definition and Usage The LCASE() function converts a string to lower-case. Note: The LOWER() function is a synonym for the LCASE() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to lower-case:"
  },
  {
    "document": "MySQL LEFT() Function Example Extract 3 characters from a string (starting from left): Definition and Usage The LEFT() function extracts a number of characters from a string (starting from left). Tip: Also look at the RIGHT() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from left):"
  },
  {
    "document": "MySQL LENGTH() Function Example Return the length of the string, in bytes: Definition and Usage The LENGTH() function returns the length of a string (in bytes). Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column, in bytes:"
  },
  {
    "document": "MySQL LOCATE() Function Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The LOCATE() function returns the position of the first occurrence of a substring in a string. If the substring is not found within the original string, this function returns 0. This function performs a case-insensitive search. Note: This function is equal to the POSITION() function. Syntax Parameter Values Technical Details More Examples Example Search for \"com\" in string \"W3Schools.com\" (start at position 3), and return position: Example Search for \"a\" in CustomerName column, and return position:"
  },
  {
    "document": "MySQL LOWER() Function Example Convert the text to lower-case: Definition and Usage The LOWER() function converts a string to lower-case. Note: The LCASE() function is equal to the LOWER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to lower-case:"
  },
  {
    "document": "MySQL LPAD() Function Example Left-pad the string with \"ABC\", to a total length of 20: Definition and Usage The LPAD() function left-pads a string with another string, to a certain length. Note: Also look at the RPAD() function. Syntax Parameter Values Technical Details More Examples Example Left-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:"
  },
  {
    "document": "MySQL LTRIM() Function Example Remove leading spaces from a string: Definition and Usage The LTRIM() function removes leading spaces from a string. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL MID() Function Example Extract a substring from a string (start at position 5, extract 3 characters): Definition and Usage The MID() function extracts a substring from a string (starting at any position). Note: The position of the first character in the string is 1. Note: The position of the last character in the string is -1. Note: The MID() and SUBSTR() functions equals the SUBSTRING() function. Syntax Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters):"
  },
  {
    "document": "MySQL POSITION() Function Example Search for \"3\" in string \"W3Schools.com\", and return position: Definition and Usage The POSITION() function returns the position of the first occurrence of a substring in a string. If the substring is not found within the original string, this function returns 0. This function performs a case-insensitive search. Note: The LOCATE() function is equal to the POSITION() function. Syntax Parameter Values Technical Details More Examples Example Search for \"COM\" in string \"W3Schools.com\", and return position: Example Search for \"a\" in CustomerName column, and return position:"
  },
  {
    "document": "MySQL REPEAT() Function Example Repeat a string 3 times: Definition and Usage The REPEAT() function repeats a string as many times as specified. Syntax Parameter Values Technical Details More Examples Example Repeat the text in CustomerName 2 times: Example Repeat the string 0 times:"
  },
  {
    "document": "MySQL REPLACE() Function Example Replace \"SQL\" with \"HTML\": Definition and Usage The REPLACE() function replaces all occurrences of a substring within a string, with a new substring. Note: This function performs a case-sensitive replacement. Syntax Parameter Values Technical Details More Examples Example Replace \"X\" with \"M\": Example Replace \"X\" with \"m\": Example Replace \"x\" with \"m\":"
  },
  {
    "document": "MySQL REVERSE() Function Example Reverse a string: Definition and Usage The REVERSE() function reverses a string and returns the result. Syntax Parameter Values Technical Details More Examples Example Reverse the text in CustomerName:"
  },
  {
    "document": "MySQL RIGHT() Function Example Extract 4 characters from a string (starting from right): Definition and Usage The RIGHT() function extracts a number of characters from a string (starting from right). Tip: Also look at the LEFT() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from right):"
  },
  {
    "document": "MySQL RPAD() Function Example Right-pad the string with \"ABC\", to a total length of 20: Definition and Usage The RPAD() function right-pads a string with another string, to a certain length. Note: Also look at the LPAD() function. Syntax Parameter Values Technical Details More Examples Example Right-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:"
  },
  {
    "document": "MySQL RTRIM() Function Example Remove trailing spaces from a string: Definition and Usage The RTRIM() function removes trailing spaces from a string. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL SPACE() Function Example Return a string with 10 space characters: Definition and Usage The SPACE() function returns a string of the specified number of space characters. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL STRCMP() Function Example Compare two strings: Definition and Usage The STRCMP() function compares two strings. Syntax Parameter Values Return Values Technical Details More Examples Example Compare two strings:"
  },
  {
    "document": "MySQL SUBSTR() Function Example Extract a substring from a string (start at position 5, extract 3 characters): Definition and Usage The SUBSTR() function extracts a substring from a string (starting at any position). Note: The position of the first character in the string is 1. Note: The position of the last character in the string is -1. Note: The SUBSTR() and MID() functions equals to the SUBSTRING() function. Syntax OR: SUBSTR(string FROM start FOR length) Parameter Values Parameter Description string Required. The string to extract from start Required. The start position. Can be both a positive or negative number. If it is a positive number, this function extracts from the beginning of the string. If it is a negative number, this function extracts from the end of the string. The position of the first character in the string is 1 and the position of the last character in the string is -1 length Optional. The number of characters to extract. If omitted, the whole string will be returned (from the start position) Technical Details Works in: From MySQL 4.0 More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): SELECT SUBSTR(CustomerName, 2, 5) AS ExtractStringFROM Customers; Try it Yourself Â» Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): SELECT SUBSTR(\"SQL Tutorial\", -5, 5) AS ExtractString; Try it Yourself Â» â® Previous â® MySQL Functions Next â¯ â +1 Track your progress - it's free! Log in Sign Up Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters):"
  },
  {
    "document": "MySQL SUBSTRING() Function Example Extract a substring from a string (start at position 1, extract 3 characters): Definition and Usage The SUBSTRING() function extracts a substring from a string (starting at any position). Note: The position of the first character in the string is 1. Note: The position of the last character in the string is -1. Note: The SUBSTR() and MID() functions equals to the SUBSTRING() function. Syntax OR: SUBSTRING(string FROM start FOR length) Parameter Values Parameter Description string Required. The string to extract from start Required. The start position. Can be both a positive or negative number. If it is a positive number, this function extracts from the beginning of the string. If it is a negative number, this function extracts from the end of the string. The position of the first character in the string is 1 and the position of the last character in the string is -1 length Optional. The number of characters to extract. If omitted, the whole string will be returned (from the start position) Technical Details Works in: From MySQL 4.0 More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): SELECT SUBSTRING(CustomerName, 2, 5) AS ExtractStringFROM Customers; Try it Yourself Â» Example Extract a substring from a string (start from the end, at position -5, extract 5 characters): SELECT SUBSTRING(\"SQL Tutorial\", -5, 5) AS ExtractString; Try it Yourself Â» â® Previous â® MySQL Functions Next â¯ â +1 Track your progress - it's free! Log in Sign Up Parameter Values Technical Details More Examples Example Extract a substring from the text in a column (start at position 2, extract 5 characters): Example Extract a substring from a string (start from the end, at position -5, extract 5 characters):"
  },
  {
    "document": "MySQL SUBSTRING_INDEX() Function Example Return a substring of a string before a specified number of delimiter occurs: Definition and Usage The SUBSTRING_INDEX() function returns a substring of a string before a specified number of delimiter occurs. Syntax Parameter Values Technical Details More Examples Example Return a substring of a string before a specified number of delimiter occurs:"
  },
  {
    "document": "MySQL TRIM() Function Example Remove leading and trailing spaces from a string: Definition and Usage The TRIM() function removes leading and trailing spaces from a string. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL UCASE() Function Example Convert the text to upper-case: Definition and Usage The UCASE() function converts a string to upper-case. Note: This function is equal to the UPPER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to upper-case:"
  },
  {
    "document": "MySQL UPPER() Function Example Convert the text to upper-case: Definition and Usage The UPPER() function converts a string to upper-case. Note: This function is equal to the UCASE() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to upper-case:"
  },
  {
    "document": "MySQL ABS() Function Example Return the absolute value of a number: Definition and Usage The ABS() function returns the absolute (positive) value of a number. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL ACOS() Function Example Return the arc cosine of a number: Definition and Usage The ACOS() function returns the arc cosine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc cosine of a number:"
  },
  {
    "document": "MySQL ASIN() Function Example Return the arc sine of a number: Definition and Usage The ASIN() function returns the arc sine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc sine of a number:"
  },
  {
    "document": "MySQL ATAN() Function Example Return the arc tangent of a number: Definition and Usage The ATAN() function returns the arc tangent of one or two numbers. Syntax OR: Parameter Values Technical Details More Examples Example Return the arc tangent of two values:"
  },
  {
    "document": "MySQL ATAN2() Function Example Return the arc tangent of two values: Definition and Usage The ATAN2() function returns the arc tangent of two numbers. Syntax Parameter Values Technical Details More Examples Example Return the arc tangent of two values:"
  },
  {
    "document": "MySQL AVG() Function Example Return the average value for the \"Price\" column in the \"Products\" table: Definition and Usage The AVG() function returns the average value of an expression. Note: NULL values are ignored. Syntax Parameter Values Technical Details More Examples Example Select the records that have a price above the average price:"
  },
  {
    "document": "MySQL CEIL() Function Example Return the smallest integer value that is greater than or equal to 25.75: Definition and Usage The CEIL() function returns the smallest integer value that is bigger than or equal to a number. Note: This function is equal to the CEILING() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest integer value that is greater than or equal to 25:"
  },
  {
    "document": "MySQL CEILING() Function Example Return the smallest integer value that is greater than or equal to 25.75: Definition and Usage The CEILING() function returns the smallest integer value that is bigger than or equal to a number. Note: This function is equal to the CEIL() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest integer value that is greater than or equal to 25:"
  },
  {
    "document": "MySQL COS() Function Example Return the cosine of a number: Definition and Usage The COS() function returns the cosine of a number. Syntax Parameter Values Technical Details More Examples Example Return the cosine of a number:"
  },
  {
    "document": "MySQL COT() Function Example Return the cotangent of a number: Definition and Usage The COT() function returns the cotangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the cotangent of a number:"
  },
  {
    "document": "MySQL COUNT() Function Example Return the number of products in the \"Products\" table: Definition and Usage The COUNT() function returns the number of records returned by a select query. Note: NULL values are not counted. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL DEGREES() Function Example Convert the radian value into degrees: Definition and Usage The DEGREES() function converts a value in radians to degrees. Note: See also the RADIANS() and PI() functions. Syntax Parameter Values Technical Details More Examples Example Convert the radian value into degrees:"
  },
  {
    "document": "MySQL DIV Function Example Integer division (10/5): Definition and Usage The DIV function is used for integer division (x is divided by y). An integer value is returned. Syntax Parameter Values Technical Details More Examples Example Integer division (8/3):"
  },
  {
    "document": "MySQL EXP() Function Example Return e raised to the power of 1: Definition and Usage The EXP() function returns e raised to the power of the specified number. The constant e (2.718281...), is the base of natural logarithms. Tip: Also look at the LOG() and LN() functions. Syntax Parameter Values Technical Details More Examples Example Return e raised to the power of 2:"
  },
  {
    "document": "MySQL FLOOR() Function Example Return the largest integer value that is less than or equal to 25.75: Definition and Usage The FLOOR() function returns the largest integer value that is smaller than or equal to a number. Note: Also look at the ROUND(), CEIL(), CEILING(), TRUNCATE(), and DIV functions. Syntax Parameter Values Technical Details More Examples Example Return the largest integer value that is less than or equal to 25:"
  },
  {
    "document": "MySQL GREATEST() Function Example Return the greatest value of the list of arguments: Definition and Usage The GREATEST() function returns the greatest value of the list of arguments. Note: See also the LEAST() function. Syntax Parameter Values Technical Details More Examples Example Return the greatest value of the list of arguments:"
  },
  {
    "document": "MySQL LEAST() Function Example Return the smallest value of the list of arguments: Definition and Usage The LEAST() function returns the smallest value of the list of arguments. Note: See also the GREATEST() function. Syntax Parameter Values Technical Details More Examples Example Return the smallest value of the list of arguments:"
  },
  {
    "document": "MySQL LN() Function Example Return the natural logarithm of 2: Definition and Usage The LN() function returns the natural logarithm of a number. Note: See also the LOG() and EXP() functions. Syntax Parameter Values Technical Details More Examples Example Return the natural logarithm of 1:"
  },
  {
    "document": "MySQL LOG() Function Example Return the natural logarithm of 2: Definition and Usage The LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base. Note: See also the LN() and EXP() functions. Syntax OR: Parameter Values Technical Details More Examples Example Return the natural logarithm of 4 to a specified base (2):"
  },
  {
    "document": "MySQL LOG10() Function Example Return the base-10 logarithm of 2: Definition and Usage The LOG10() function returns the natural logarithm of a number to base-10. Note: See also the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return the base-10 logarithm of 4.5:"
  },
  {
    "document": "MySQL LOG2() Function Example Return the base-2 logarithm of 6: Definition and Usage The LOG2() function returns the natural logarithm of a number to base-2. Note: See also the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return the base-2 logarithm of 64:"
  },
  {
    "document": "MySQL MAX() Function Example Find the price of the most expensive product in the \"Products\" table: Definition and Usage The MAX() function returns the maximum value in a set of values. Note: See also the MIN() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL MIN() Function Example Find the price of the cheapest product in the \"Products\" table: Definition and Usage The MIN() function returns the minimum value in a set of values. Note: See also the MAX() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL MOD() Function Example Return the remainder of 18/4: Definition and Usage The MOD() function returns the remainder of a number divided by another number. Syntax OR: OR: Parameter Values Technical Details More Examples Example Return the remainder of 18/4: Example Return the remainder of 18/4:"
  },
  {
    "document": "MySQL PI() Function Example Return the value of PI: Definition and Usage The PI() function returns the value of PI. Note: See also the DEGREES() and RADIANS() functions. Syntax Technical Details"
  },
  {
    "document": "MySQL POW() Function Example Return 4 raised to the second power: Definition and Usage The POW() function returns the value of a number raised to the power of another number. Note: This function is equal to the POWER() function. Syntax Parameter Values Technical Details More Examples Example Return 8 raised to the third power:"
  },
  {
    "document": "MySQL POWER() Function Example Return 4 raised to the second power: Definition and Usage The POWER() function returns the value of a number raised to the power of another number. Note: This function is equal to the POW() function. Syntax Parameter Values Technical Details More Examples Example Return 8 raised to the third power:"
  },
  {
    "document": "MySQL RADIANS() Function Example Convert a degree value into radians: Definition and Usage The RADIANS() function converts a degree value into radians. Note: See also the DEGREES() and PI() functions. Syntax Parameter Values Technical Details More Examples Example Convert a degree value into radians:"
  },
  {
    "document": "MySQL RAND() Function Example Return a random decimal number (no seed value - so it returns a completely random number >= 0 and <1): Definition and Usage The RAND() function returns a random number between 0 (inclusive) and 1 (exclusive). Syntax Parameter Values Technical Details More Examples Example Return a random decimal number (with seed value of 6): Example Return a random decimal number >= 5 and <10: Example Return a random number >= 5 and <=10:"
  },
  {
    "document": "MySQL ROUND() Function Example Round the number to 2 decimal places: Definition and Usage The ROUND() function rounds a number to a specified number of decimal places. Note: See also the FLOOR(), CEIL(), CEILING(), and TRUNCATE() functions. Syntax Parameter Values Technical Details More Examples Example Round the number to 0 decimal places: Example Round the Price column (to 1 decimal) in the \"Products\" table:"
  },
  {
    "document": "MySQL SIGN() Function Example Return the sign of a number: Definition and Usage The SIGN() function returns the sign of a number. This function will return one of the following: Syntax Parameter Values Technical Details More Examples Example Return the sign of a number:"
  },
  {
    "document": "MySQL SIN() Function Example Return the sine of a number: Definition and Usage The SIN() function returns the sine of a number. Syntax Parameter Values Technical Details More Examples Example Return the sine of a number:"
  },
  {
    "document": "MySQL SQRT() Function Example Return the square root of a number: Definition and Usage The SQRT() function returns the square root of a number. Syntax Parameter Values Technical Details More Examples Example Return the square root of a number:"
  },
  {
    "document": "MySQL SUM() Function Example Return the sum of the \"Quantity\" field in the \"OrderDetails\" table: Definition and Usage The SUM() function calculates the sum of a set of values. Note: NULL values are ignored. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL TAN() Function Example Return the tangent of a number: Definition and Usage The TAN() function returns the tangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the tangent of a number:"
  },
  {
    "document": "MySQL TRUNCATE() Function Example Return a number truncated to 2 decimal places: Definition and Usage The TRUNCATE() function truncates a number to the specified number of decimal places. Note: See also the FLOOR(), CEIL(), CEILING(), and ROUND() functions. Syntax Parameter Values Technical Details More Examples Example Return a number truncated to 0 decimal places:"
  },
  {
    "document": "MySQL ADDDATE() Function Example Add 10 days to a date and return the date: Definition and Usage The ADDDATE() function adds a time/date interval to a date and then returns the date. Syntax OR: Parameter Values Technical Details More Examples Example Add 15 minutes to a date and return the date: Example Subtract 3 hours to a date and return the date: Example Subtract 2 months to a date and return the date:"
  },
  {
    "document": "MySQL ADDTIME() Function Example Add 2 seconds to a time and return the datetime: Definition and Usage The ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime. Syntax Parameter Values Technical Details More Examples Example Add 5 seconds and 3 microseconds to a time and return the datetime: Example Add 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime: Example Add 5 days, 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime: Example Add 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the time:"
  },
  {
    "document": "MySQL CURDATE() Function Example Return the current date: Definition and Usage The CURDATE() function returns the current date. Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric). Note: This function equals the CURRENT_DATE() function. Syntax Technical Details More Examples Example Return the current date + 1:"
  },
  {
    "document": "MySQL CURRENT_DATE() Function Example Return the current date: Definition and Usage The CURRENT_DATE() function returns the current date. Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric). Note: This function equals the CURDATE() function. Syntax Technical Details More Examples Example Return the current date + 1:"
  },
  {
    "document": "MySQL CURRENT_TIME() Function Example Return current time: Definition and Usage The CURRENT_TIME() function returns the current time. Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric). Note: This function equals the CURTIME() function. Syntax Technical Details More Examples Example Return current time + 1:"
  },
  {
    "document": "MySQL CURRENT_TIMESTAMP() Function Example Return the current date and time: Definition and Usage The CURRENT_TIMESTAMP() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return the current date and time + 1:"
  },
  {
    "document": "MySQL CURTIME() Function Example Return current time: Definition and Usage The CURTIME() function returns the current time. Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric). Note: This function equals the CURRENT_TIME() function. Syntax Technical Details More Examples Example Return current time + 1:"
  },
  {
    "document": "MySQL DATE() Function Example Extract the date part: Definition and Usage The DATE() function extracts the date part from a datetime expression. Syntax Parameter Values Technical Details More Examples Example Extract the date part: Example Extract the date part (will return NULL): Example Extract the date part:"
  },
  {
    "document": "MySQL DATEDIFF() Function Example Return the number of days between two date values: Definition and Usage The DATEDIFF() function returns the number of days between two date values. Syntax Parameter Values Technical Details More Examples Example Return the number of days between two date values: Example Return the number of days between two date values:"
  },
  {
    "document": "MySQL DATE_ADD() Function Example Add 10 days to a date and return the date: Definition and Usage The DATE_ADD() function adds a time/date interval to a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Add 15 minutes to a date and return the date: Example Subtract 3 hours to a date and return the date: Example Subtract 2 months to a date and return the date:"
  },
  {
    "document": "MySQL DATE_FORMAT() Function Example Format a date: Definition and Usage The DATE_FORMAT() function formats a date as specified. Syntax Parameter Values Technical Details More Examples Example Format a date: Example Format a date: Example Format a date:"
  },
  {
    "document": "MySQL DATE_SUB() Function Example Subtract 10 days from a date and return the date: Definition and Usage The DATE_SUB() function subtracts a time/date interval from a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Subtract 15 minutes from a date and return the date: Example Subtract 3 hours from a date and return the date: Example Add 2 months to a date and return the date:"
  },
  {
    "document": "MySQL DAY() Function Example Return the day of the month for a date: Definition and Usage The DAY() function returns the day of the month for a given date (a number from 1 to 31). Note: This function equals the DAYOFMONTH() function. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for a date: Example Return the day of the month for the current system date:"
  },
  {
    "document": "MySQL DAYNAME() Function Example Return the weekday name for a date: Definition and Usage The DAYNAME() function returns the weekday name for a given date. Syntax Parameter Values Technical Details More Examples Example Return the weekday name for a date: Example Return the weekday name for the current system date:"
  },
  {
    "document": "MySQL DAYOFMONTH() Function Example Return the day of the month for a date: Definition and Usage The DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31). Note: This function equals the DAY() function. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for a date: Example Return the day of the month for the current system date:"
  },
  {
    "document": "MySQL DAYOFWEEK() Function Example Return the weekday index for a date: Definition and Usage The DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7). Note: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday. Syntax Parameter Values Technical Details More Examples Example Return the weekday index for a date: Example Return the weekday index for the current system date:"
  },
  {
    "document": "MySQL DAYOFYEAR() Function Example Return the day of the year for a date: Definition and Usage The DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to 366). Syntax Parameter Values Technical Details More Examples Example Return the day of the year for a date: Example Return the day of the year for the current system date:"
  },
  {
    "document": "MySQL EXTRACT() Function Example Extract the month from a date: Definition and Usage The EXTRACT() function extracts a part from a given date. Syntax Parameter Values Technical Details More Examples Example Extract the week from a date: Example Extract the minute from a datetime: Example Extract the year and month from a datetime:"
  },
  {
    "document": "MySQL FROM_DAYS() Function Example Return a date from a numeric representation of the day: Definition and Usage The FROM_DAYS() function returns a date from a numeric datevalue. The FROM_DAYS() function is to be used only with dates within the Gregorian calendar. Note: This function is the opposite of the TO_DAYS() function. Syntax Parameter Values Technical Details More Examples Example Return a date from a numeric representation of the day:"
  },
  {
    "document": "MySQL HOUR() Function Example Return the hour part of a datetime: Definition and Usage The HOUR() function returns the hour part for a given date (from 0 to 838). Syntax Parameter Values Technical Details More Examples Example Return the hour part of a datetime:"
  },
  {
    "document": "MySQL LAST_DAY() Function Example Extract the last day of the month for the given date: Definition and Usage The LAST_DAY() function extracts the last day of the month for a given date. Syntax Parameter Values Technical Details More Examples Example Extract the last day of the month for the given date:"
  },
  {
    "document": "MySQL LOCALTIME() Function Example Return current date and time: Definition and Usage The LOCALTIME() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1:"
  },
  {
    "document": "MySQL LOCALTIMESTAMP() Function Example Return current date and time: Definition and Usage The LOCALTIMESTAMP() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1:"
  },
  {
    "document": "MySQL MAKEDATE() Function Example Create and return a date based on a year and a number of days value: Definition and Usage The MAKEDATE() function creates and returns a date based on a year and a number of days value. Syntax Parameter Values Technical Details More Examples Example Create and return a date based on a year and a number of days value: Example Create and return a date based on a year and a number of days value: Example Create and return a date based on a year and a number of days value:"
  },
  {
    "document": "MySQL MAKETIME() Function Example Create and return a time value based on an hour, minute, and second value: Definition and Usage The MAKETIME() function creates and returns a time based on an hour, minute, and second value. Syntax Parameter Values Technical Details More Examples Example Create and return a time value based on an hour, minute, and second value: Example Create and return a time value based on an hour, minute, and second value: Example Create and return a time value based on an hour, minute, and second value:"
  },
  {
    "document": "MySQL MICROSECOND() Function Example Return the microsecond part of a datetime: Definition and Usage The MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to 999999). Syntax Parameter Values Technical Details More Examples Example Return the microsecond part of a time value:"
  },
  {
    "document": "MySQL MINUTE() Function Example Return the minute part of a datetime value: Definition and Usage The MINUTE() function returns the minute part of a time/datetime (from 0 to 59). Syntax Parameter Values Technical Details More Examples Example Return the minute part of a time value:"
  },
  {
    "document": "MySQL MONTH() Function Example Return the month part of a date: Definition and Usage The MONTH() function returns the month part for a given date (a number from 1 to 12). Syntax Parameter Values Technical Details More Examples Example Return the month part of a date: Example Return the month part of the current system date:"
  },
  {
    "document": "MySQL MONTHNAME() Function Example Return the name of the month for a date: Definition and Usage The MONTHNAME() function returns the name of the month for a given date. Syntax Parameter Values Technical Details More Examples Example Return the name of the month for a date: Example Return the name of the month for the current system date:"
  },
  {
    "document": "MySQL NOW() Function Example Return current date and time: Definition and Usage The NOW() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric). Syntax Technical Details More Examples Example Return current date and time + 1:"
  },
  {
    "document": "MySQL PERIOD_ADD() Function Example Add a specified number of months to a period: Definition and Usage The PERIOD_ADD() function adds a specified number of months to a period. The PERIOD_ADD() function will return the result formatted as YYYYMM. Syntax Parameter Values Technical Details More Examples Example Add a specified number of months to a period: Example Add a specified number of months to a period:"
  },
  {
    "document": "MySQL PERIOD_DIFF() Function Example Return the difference between two periods: Definition and Usage The PERIOD_DIFF() function returns the difference between two periods. The result will be in months. Note: period1 and period2 should be in the same format. Syntax Parameter Values Technical Details More Examples Example Return the difference between two periods: Example Return the difference between two periods:"
  },
  {
    "document": "MySQL QUARTER() Function Example Return the quarter of the year for the date: Definition and Usage The QUARTER() function returns the quarter of the year for a given date value (a number from 1 to 4). Syntax Parameter Values Technical Details More Examples Example Return the quarter of the year for the date: Example Return the quarter of the year for the date:"
  },
  {
    "document": "MySQL SECOND() Function Example Return the seconds part of a datetime value: Definition and Usage The SECOND() function returns the seconds part of a time/datetime (from 0 to 59). Syntax Parameter Values Technical Details More Examples Example Return the seconds part of a time value:"
  },
  {
    "document": "MySQL SEC_TO_TIME() Function Example Return a time value based on a specified seconds value: Definition and Usage The SEC_TO_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds. Syntax Parameter Values Technical Details More Examples Example Return a time value based on a specified seconds value:"
  },
  {
    "document": "MySQL STR_TO_DATE() Function Example Return a date based on a string and a format: Definition and Usage The STR_TO_DATE() function returns a date based on a string and a format. Syntax Parameter Values Technical Details More Examples Example Return a date based on a string and a format: Example Return a date based on a string and a format: Example Return a date based on a string and a format:"
  },
  {
    "document": "MySQL SUBDATE() Function Example Subtract 10 days from a date and return the date: Definition and Usage The SUBDATE() function subtracts a time/date interval from a date and then returns the date. Syntax OR: Parameter Values Technical Details More Examples Example Subtract 15 minutes from a date and return the date: Example Subtract 3 hours from a date and return the date: Example Add 2 months to a date and return the date:"
  },
  {
    "document": "MySQL SUBTIME() Function Example Subtract 5.000001 seconds and return the datetime: Definition and Usage The SUBTIME() function subtracts time from a time/datetime expression and then returns the new time/datetime. Syntax Parameter Values Technical Details More Examples Example Subtract 3 hours, 2 minutes, 5.000001 seconds and return the datetime: Example Subtract 5 seconds and return the time: Example Subtract 3 minutes and return the time: Example Add 3 hours, 2 minutes, and 5 seconds, and return the time:"
  },
  {
    "document": "MySQL SYSDATE() Function Example Return the current date and time: Definition and Usage The SYSDATE() function returns the current date and time. Note: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS (numeric). Syntax Technical Details More Examples Example Return the current date and time + 1:"
  },
  {
    "document": "MySQL TIME() Function Example Extract the time part from a time expression: Definition and Usage The TIME() function extracts the time part from a given time/datetime. Note: This function returns \"00:00:00\" if expression is not a datetime/time, or NULL if expression is NULL. Syntax Parameter Values Technical Details More Examples Example Extract the time part from the datetime expression: Example Extract the time part from the datetime expression: Example Extract the time part from NULL:"
  },
  {
    "document": "MySQL TIME_FORMAT() Function Example Format a time: Definition and Usage The TIME_FORMAT() function formats a time by a specified format. Syntax Parameter Values Technical Details More Examples Example Format a time: Example Format a time: Example Format a time:"
  },
  {
    "document": "MySQL TIME_TO_SEC() Function Example Convert a time value into seconds: Definition and Usage The TIME_TO_SEC() function converts a time value into seconds. Syntax Parameter Values Technical Details More Examples Example Convert a time value into seconds: Example Convert a time value into seconds: Example Convert a time value into seconds:"
  },
  {
    "document": "MySQL TIMEDIFF() Function Example Return the difference between two time expressions: Definition and Usage The TIMEDIFF() function returns the difference between two time/datetime expressions. Note: time1 and time2 should be in the same format, and the calculation is time1 - time2. Syntax Parameter Values Technical Details More Examples Example Return the difference between two datetime expressions:"
  },
  {
    "document": "MySQL TIMESTAMP() Function Example Return a datetime value based on the arguments: Definition and Usage The TIMESTAMP() function returns a datetime value based on a date or datetime value. Note: If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value. Syntax Parameter Values Technical Details More Examples Example Return a datetime value based on the arguments:"
  },
  {
    "document": "MySQL TO_DAYS() Function Example Return the number of days between the date and year 0: Definition and Usage The TO_DAYS() function returns the number of days between a date and year 0 (date \"0000-00-00\"). The TO_DAYS() function can be used only with dates within the Gregorian calendar. Note: This function is the opposite of the FROM_DAYS() function. Syntax Parameter Values Technical Details More Examples Example Return the number of days between the date and year 0:"
  },
  {
    "document": "MySQL WEEK() Function Example Return the week number for a date: Definition and Usage The WEEK() function returns the week number for a given date (a number from 0 to 53). Syntax Parameter Values Optional. Specifies what day the week starts on. Can be one of the following: Technical Details More Examples Example Return the week number for a date: Example Return the week number for the current system date:"
  },
  {
    "document": "MySQL WEEKDAY() Function Example Return the weekday number for a date: Definition and Usage The WEEKDAY() function returns the weekday number for a given date. Note: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday. Syntax Parameter Values Technical Details More Examples Example Return the weekday number for a date: Example Return the weekday number for the current system date:"
  },
  {
    "document": "MySQL WEEKOFYEAR() Function Example Return the week number for a date: Definition and Usage The WEEKOFYEAR() function returns the week number for a given date (a number from 1 to 53). Note: This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days. Tip: Also look at the WEEK() function. Syntax Parameter Values Technical Details More Examples Example Return the week number for a date: Example Return the week number for the current system date:"
  },
  {
    "document": "MySQL YEAR() Function Example Return the year part of a date: Definition and Usage The YEAR() function returns the year part for a given date (a number from 1000 to 9999). Syntax Parameter Values Technical Details More Examples Example Return the year part of a date: Example Return the year part of the current system date:"
  },
  {
    "document": "MySQL YEARWEEK() Function Example Return the year and week number for a date: Definition and Usage The YEARWEEK() function returns the year and week number (a number from 0 to 53) for a given date. Syntax Parameter Values Optional. Specifies what day the week starts on. Can be one of the following: Technical Details More Examples Example Return the year and week number for a date: Example Return the year and week number for the current system date:"
  },
  {
    "document": "MySQL BIN() Function Example Return a binary representation of 15: Definition and Usage The BIN() function returns a binary representation of a number, as a string value. Syntax Parameter Values Technical Details More Examples Example Return a binary representation of 111: Example Return a binary representation of 8:"
  },
  {
    "document": "MySQL BINARY Function Example Convert a value to a binary string: Definition and Usage The BINARY function converts a value to a binary string. This function is equivalent to using CAST(value AS BINARY). Syntax Parameter Values Technical Details More Examples Example Here MySQL performs a character-by-character comparison of \"HELLO\" and \"hello\" and return 1 (because on a character-by-character basis, they are equivalent): Example Here MySQL performs a byte-by-byte comparison of \"HELLO\" and \"hello\" and return 0 (because on a byte-by-byte basis, they are NOT equivalent):"
  },
  {
    "document": "MySQL CASE Function Example Go through conditions and return a value when the first condition is met: Definition and Usage The CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it will return the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL. Syntax Parameter Values Technical Details More Examples The following SQL will order the customers by City. However, if City is NULL, then order by Country: Example"
  },
  {
    "document": "MySQL CAST() Function Example Convert a value to a DATE datatype: Definition and Usage The CAST() function converts a value (of any type) into the specified datatype. Tip: See also the CONVERT() function. Syntax Parameter Values Technical Details More Examples Example Convert a value to a CHAR datatype: Example Convert a value to a TIME datatype: Example Convert a value to a SIGNED datatype:"
  },
  {
    "document": "MySQL COALESCE() Function Example Return the first non-null value in a list: Definition and Usage The COALESCE() function returns the first non-null value in a list. Syntax Parameter Values Technical Details More Examples Example Return the first non-null value in a list:"
  },
  {
    "document": "MySQL CONNECTION_ID() Function Example Return the unique connection ID for the current connection: Definition and Usage The CONNECTION_ID() function returns the unique connection ID for the current connection. Syntax Technical Details"
  },
  {
    "document": "MySQL CONV() Function Example Convert a number from numeric base system 10 to numeric base system 2: Definition and Usage The CONV() function converts a number from one numeric base system to another, and returns the result as a string value. Note: This function returns NULL if any of the parameters are NULL. Tip: Also look at the BIN() function. Syntax Parameter Values Technical Details More Examples Example Convert a number from numeric base system 2 to numeric base system 10: Example Convert a number from numeric base system 10 to numeric base system 16:"
  },
  {
    "document": "MySQL CONVERT() Function Example Convert a value to a DATE datatype: Definition and Usage The CONVERT() function converts a value into the specified datatype or character set. Tip: Also look at the CAST() function. Syntax OR: Parameter Values Technical Details More Examples Example Convert a value to a CHAR datatype: Example Convert a value to a TIME datatype: Example Convert a value to LATIN1 character set:"
  },
  {
    "document": "MySQL CURRENT_USER() Function Example Return the user name and host name for the MySQL account: Definition and Usage The CURRENT_USER() function returns the user name and host name for the MySQL account that the server used to authenticate the current client. The result is returned as a string in the UTF8 character set. Tip: See also the USER() function. Syntax Technical Details"
  },
  {
    "document": "MySQL DATABASE() Function Example Return the name of the current (default) database: Definition and Usage The DATABASE() function returns the name of the current database. If there is no current database, this function returns NULL or \"\". Syntax Technical Details"
  },
  {
    "document": "MySQL IF() Function Example Return \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE: Definition and Usage The IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE. Syntax Parameter Values Technical Details More Examples Example Return 5 if the condition is TRUE, or 10 if the condition is FALSE: Example Test whether two strings are the same and return \"YES\" if they are, or \"NO\" if not: Example Return \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE:"
  },
  {
    "document": "MySQL IFNULL() Function Example Return the specified value IF the expression is NULL, otherwise return the expression: Definition and Usage The IFNULL() function returns a specified value if the expression is NULL. If the expression is NOT NULL, this function returns the expression. Syntax Parameter Values Technical Details More Examples Example Return the specified value IF the expression is NULL, otherwise return the expression: Example Return the specified value IF the expression is NULL, otherwise return the expression:"
  },
  {
    "document": "MySQL ISNULL() Function Example Test whether an expression is NULL: Definition and Usage The ISNULL() function returns 1 or 0 depending on whether an expression is NULL. If expression is NULL, this function returns 1. Otherwise, it returns 0. Syntax Parameter Values Technical Details More Examples Example Test whether an expression is NULL: Example Test whether an expression is NULL: Example Test whether an expression is NULL:"
  },
  {
    "document": "MySQL LAST_INSERT_ID() Function Example Return the AUTO_INCREMENT id of the last row that has been inserted in a table: Definition and Usage The LAST_INSERT_ID() function returns the AUTO_INCREMENT id of the last row that has been inserted in a table. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MySQL NULLIF() Function Example Compare two expressions: Definition and Usage The NULLIF() function compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned. Syntax Parameter Values Technical Details More Examples Example Compare two expressions: Example Compare two expressions: Example Compare two expressions:"
  },
  {
    "document": "MySQL SESSION_USER() Function Example Return the current user name and host name for the MySQL connection: Definition and Usage The SESSION_USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SYSTEM_USER() and the USER() function. Syntax Technical Details"
  },
  {
    "document": "MySQL SYSTEM_USER() Function Example Return the current user name and host name for the MySQL connection: Definition and Usage The SYSTEM_USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SESSION_USER() function and the USER() function. Syntax Technical Details"
  },
  {
    "document": "MySQL USER() Function Example Return the current user name and host name for the MySQL connection: Definition and Usage The USER() function returns the current user name and host name for the MySQL connection. Note: This function is equal to the SESSION_USER() function and the SYSTEM_USER() function. Tip: Also look at the CURRENT_USER() function. Syntax Technical Details"
  },
  {
    "document": "MySQL VERSION() Function Example Return the current version of the MySQL database: Definition and Usage The VERSION() function returns the current version of the MySQL database, as a string. Syntax Technical Details"
  },
  {
    "document": "SQL Server Functions SQL Server has many built-in functions. This reference contains string, numeric, date, conversion, and some advanced functions in SQL Server. SQL Server String Functions SQL Server Math/Numeric Functions SQL Server Date Functions SQL Server Advanced Functions"
  },
  {
    "document": "SQL Server ASCII() Function Example Return the ASCII value of the first character in \"CustomerName\": Definition and Usage The ASCII() function returns the ASCII value for the specific character. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server CHAR() Function Example Return the character based on the number code 65: Definition and Usage The CHAR() function returns the character based on the ASCII code. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server CHARINDEX() Function Example Search for \"t\" in string \"Customer\", and return position: Definition and Usage The CHARINDEX() function searches for a substring in a string, and returns the position. If the substring is not found, this function returns 0. Note: This function performs a case-insensitive search. Syntax Parameter Values Technical Details More Examples Example Search for \"OM\" in string \"Customer\", and return position: Example Search for \"mer\" in string \"Customer\", and return position (start in position 3):"
  },
  {
    "document": "SQL Server CONCAT() Function Example Add two strings together: Definition and Usage The CONCAT() function adds two or more strings together. Note: See also Concat with the + operator and CONCAT_WS(). Syntax Parameter Values Technical Details More Examples Example Add 3 strings together: Example Add strings together (separate each string with a space character):"
  },
  {
    "document": "SQL Server Concat With + Example Add 2 strings together: Definition and Usage The + operator allows you to add two or more strings together. Note: See also the CONCAT() and CONCAT_WS() functions. Syntax Parameter Values Technical Details More Examples Example Add 3 strings together: Example Add strings together (separate each string with a space character):"
  },
  {
    "document": "SQL Server CONCAT_WS() Function Example Add strings together. Use '.' to separate the concatenated string values: Definition and Usage The CONCAT_WS() function adds two or more strings together with a separator. Note: See also CONCAT() and Concat with the + operator. Syntax Parameter Values Technical Details More Examples Example Add strings together. Use '-' to separate the concatenated string values:"
  },
  {
    "document": "SQL Server DATALENGTH() Function Example Return the length of an expression (in bytes): Definition and Usage The DATALENGTH() function returns the number of bytes used to represent an expression. Note: The DATALENGTH() function counts both leading and trailing spaces when calculating the length of the expression. Tip: Also see the LEN() function. Syntax Parameter Values Technical Details More Examples Example Return the length of an expression (in bytes) (counts both leading and trailing spaces): Example Return the length of an expression (in bytes):"
  },
  {
    "document": "SQL Server DIFFERENCE() Function Example Compares two SOUNDEX values, and return an integer: Definition and Usage The DIFFERENCE() function compares two SOUNDEX values, and returns an integer. The integer value indicates the match for the two SOUNDEX values, from 0 to 4. 0 indicates weak or no similarity between the SOUNDEX values. 4 indicates strong similarity or identically SOUNDEX values. Tip: Also look at the SOUNDEX() function. Syntax Parameter Values Technical Details More Examples Example Compares two SOUNDEX values, and return an integer:"
  },
  {
    "document": "SQL Server FORMAT() Function Example Format a date: Definition and Usage The FORMAT() function formats a value with the specified format (and an optional culture in SQL Server 2017). Use the FORMAT() function to format date/time values and number values. For general data type conversions, use CAST() or CONVERT(). Syntax Parameter Values Technical Details More Examples Example Format a number:"
  },
  {
    "document": "SQL Server LEFT() Function Example Extract 3 characters from a string (starting from left): Definition and Usage The LEFT() function extracts a number of characters from a string (starting from left). Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from left): Example Extract 100 characters from a string (starting from left):"
  },
  {
    "document": "SQL Server LEN() Function Example Return the length of a string: Definition and Usage The LEN() function returns the length of a string. Note: Trailing spaces at the end of the string is not included when calculating the length. However, leading spaces at the start of the string is included when calculating the length. Tip: Also look at the DATALENGTH() function. Syntax Parameter Values Technical Details More Examples Example Return the length of a string (counts leading spaces, but not trailing spaces): Example Return the length of a string:"
  },
  {
    "document": "SQL Server LOWER() Function Example Convert the text to lower-case: Definition and Usage The LOWER() function converts a string to lower-case. Note: Also look at the UPPER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to lower-case:"
  },
  {
    "document": "SQL Server LTRIM() Function Example Remove leading spaces from a string: Definition and Usage The LTRIM() function removes leading spaces from a string. Note: Also look at the RTRIM() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server NCHAR() Function Example Return the Unicode character based on the number code 65: Definition and Usage The NCHAR() function returns the Unicode character based on the number code. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server PATINDEX() Function Example Return the position of a pattern in a string: Definition and Usage The PATINDEX() function returns the position of a pattern in a string. If the pattern is not found, this function returns 0. Note: The search is case-insensitive and the first position in string is 1. Syntax Parameter Values Technical Details More Examples Example Return the position of a pattern in a string: Example Return the position of a pattern in a string: Example Return the position of a pattern in a string:"
  },
  {
    "document": "SQL Server QUOTENAME() Function Example Return a Unicode string with bracket delimiters (default): Definition and Usage The QUOTENAME() function returns a Unicode string with delimiters added to make the string a valid SQL Server delimited identifier. Syntax Parameter Values Technical Details More Examples Example Return a Unicode string with parenthesis delimiters:"
  },
  {
    "document": "SQL Server REPLACE() Function Example Replace \"T\" with \"M\": Definition and Usage The REPLACE() function replaces all occurrences of a substring within a string, with a new substring. Note: The search is case-insensitive. Tip: Also look at the STUFF() function. Syntax Parameter Values Technical Details More Examples Example Replace \"SQL\" with \"HTML\": Example Replace \"a\" with \"c\":"
  },
  {
    "document": "SQL Server REPLICATE() Function Example Repeat a string: Definition and Usage The REPLICATE() function repeats a string a specified number of times. Syntax Parameter Values Technical Details More Examples Example Repeat the text in CustomerName two times:"
  },
  {
    "document": "SQL Server REVERSE() Function Example Reverse a string: Definition and Usage The REVERSE() function reverses a string and returns the result. Syntax Parameter Values Technical Details More Examples Example Reverse the text in CustomerName:"
  },
  {
    "document": "SQL Server RIGHT() Function Example Extract 3 characters from a string (starting from right): Definition and Usage The RIGHT() function extracts a number of characters from a string (starting from right). Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from right): Example Extract 100 characters from a string (starting from right):"
  },
  {
    "document": "SQL Server RTRIM() Function Example Remove trailing spaces from a string: Definition and Usage The RTRIM() function removes trailing spaces from a string. Note: Also look at the LTRIM() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server SOUNDEX() Function Example Evaluate the similarity of two strings, and return a four-character code: Definition and Usage The SOUNDEX() function returns a four-character code to evaluate the similarity of two expressions. Note: The SOUNDEX() converts the string to a four-character code based on how the string sounds when spoken. Tip: Also look at the DIFFERENCE() function. Syntax Parameter Values Technical Details More Examples Example Evaluate the similarity of two strings, and return a four-character code:"
  },
  {
    "document": "SQL Server SPACE() Function Example Return a string with 10 spaces: Definition and Usage The SPACE() function returns a string of the specified number of space characters. Parameter Values Technical Details"
  },
  {
    "document": "SQL Server STR() Function Example Return a number as a string: Definition and Usage The STR() function returns a number as a string. Syntax Parameter Values Technical Details More Examples Example Return a number as a string: Example Return a number as a string:"
  },
  {
    "document": "SQL Server STUFF() Function Example Delete 3 characters from a string, starting in position 1, and then insert \"HTML\" in position 1: Definition and Usage The STUFF() function deletes a part of a string and then inserts another part into the string, starting at a specified position. Tip: Also look at the REPLACE() function. Syntax Parameter Values Technical Details More Examples Example Delete 1 character from a string, starting in position 13, and then insert \" is fun!\" in position 13:"
  },
  {
    "document": "SQL Server SUBSTRING() Function Example Extract 3 characters from a string, starting in position 1: Definition and Usage The SUBSTRING() function extracts some characters from a string. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the \"CustomerName\" column, starting in position 1: Example Extract 100 characters from a string, starting in position 1:"
  },
  {
    "document": "SQL Server TRANSLATE() Function Example Return the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument: Definition and Usage The TRANSLATE() function returns the string from the first argument after the characters specified in the second argument are translated into the characters specified in the third argument. Note: The TRANSLATE() function will return an error if characters and translations have different lengths. Syntax Parameter Values Technical Details More Examples Example Return the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument:"
  },
  {
    "document": "SQL Server TRIM() Function Example Remove leading and trailing spaces from a string: Definition and Usage The TRIM() function removes the space character OR other specified characters from the start or end of a string. By default, the TRIM() function removes leading and trailing spaces from a string. Note: Also look at the LTRIM() and RTRIM() functions. Syntax Parameter Values Technical Details More Examples Example Remove characters and spaces from a string:"
  },
  {
    "document": "SQL Server UNICODE() Function Example Return an integer value (the Unicode value), for the first character of the input expression: Definition and Usage The UNICODE() function returns an integer value (the Unicode value), for the first character of the input expression. Syntax Parameter Values Technical Details More Examples Example Return an integer value (the Unicode value), for the first character of the input expression:"
  },
  {
    "document": "SQL Server UPPER() Function Example Convert the text to upper-case: Definition and Usage The UPPER() function converts a string to upper-case. Note: Also look at the LOWER() function. Syntax Parameter Values Technical Details More Examples Example Convert the text in \"CustomerName\" to upper-case:"
  },
  {
    "document": "SQL Server ABS() Function Example Return the absolute value of a number: Definition and Usage The ABS() function returns the absolute value of a number. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server ACOS() Function Example Return the arc cosine of a number: Definition and Usage The ACOS() function returns the arc cosine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc cosine of a number:"
  },
  {
    "document": "SQL Server ASIN() Function Example Return the arc sine of a number: Definition and Usage The ASIN() function returns the arc sine of a number. The specified number must be between -1 to 1, otherwise this function returns NULL. Syntax Parameter Values Technical Details More Examples Example Return the arc sine of a number:"
  },
  {
    "document": "SQL Server ATAN() Function Example Return the arc tangent of a number: Definition and Usage The ATAN() function returns the arc tangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the arc tangent of a number:"
  },
  {
    "document": "SQL Server ATN2() Function Example Return the arc tangent of two values: Definition and Usage The ATN2() function returns the arc tangent of two numbers. Syntax Parameter Values Technical Details More Examples Example Return the arc tangent of two values:"
  },
  {
    "document": "SQL Server AVG() Function Example Return the average value for the \"Price\" column in the \"Products\" table: Definition and Usage The AVG() function returns the average value of an expression. Note: NULL values are ignored. Syntax Parameter Values Technical Details More Examples Example Select all the products that have a price above the average price:"
  },
  {
    "document": "SQL Server CEILING() Function Example Return the smallest integer value that is greater than or equal to a number: Definition and Usage The CEILING() function returns the smallest integer value that is larger than or equal to a number. Tip: Also look at the FLOOR() and ROUND() functions. Syntax Parameter Values Technical Details More Examples Example Return the smallest integer value that is greater than or equal to a number: Example Return the smallest integer value that is greater than or equal to a number:"
  },
  {
    "document": "SQL Server COUNT() Function Example Return the number of products in the \"Products\" table: Definition and Usage The COUNT() function returns the number of records returned by a select query. Note: NULL values are not counted. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server COS() Function Example Return the cosine of a number: Definition and Usage The COS() function returns the cosine of a number. Syntax Parameter Values Technical Details More Examples Example Return the cosine of a number:"
  },
  {
    "document": "SQL Server COT() Function Example Return the cotangent of a number: Definition and Usage The COT() function returns the cotangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the cotangent of a number:"
  },
  {
    "document": "SQL Server DEGREES() Function Example Convert a radian value into degrees: Definition and Usage The DEGREES() function converts a value in radians to degrees. Note: See also the RADIANS() and PI() functions. Syntax Parameter Values Technical Details More Examples Example Convert a radian value into degrees:"
  },
  {
    "document": "SQL Server EXP() Function Example Return e raised to the power of 1: Definition and Usage The EXP() function returns e raised to the power of a specified number. The constant e (2.718281...), is the base of natural logarithms. Note: See also the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return e raised to the power of 2:"
  },
  {
    "document": "SQL Server FLOOR() Function Example Return the largest integer value that is equal to or less than 25.75: Definition and Usage The FLOOR() function returns the largest integer value that is smaller than or equal to a number. Tip: Also look at the CEILING() and ROUND() functions. Syntax Parameter Values Technical Details More Examples Example Return the largest integer value that is equal to or less than 25: Example Return the largest integer value that is equal to or less than -13.5:"
  },
  {
    "document": "SQL Server LOG() Function Example Return the natural logarithm of 2: Definition and Usage The LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base. From SQL Server 2012, you can also change the base of the logarithm to another value by using the optional base parameter. Note: Also look at the EXP() function. Syntax OR: Parameter Values Technical Details More Examples Example Return the natural logarithm of 2 to a specified base (4):"
  },
  {
    "document": "SQL Server LOG10() Function Example Return the base-10 logarithm of 2: Definition and Usage The LOG10() function returns the natural logarithm of a number to base 10. Note: Also look at the LOG() function. Syntax Parameter Values Technical Details More Examples Example Return the base-10 logarithm of 4.5:"
  },
  {
    "document": "SQL Server MAX() Function Example Find the price of the most expensive product in the \"Products\" table: Definition and Usage The MAX() function returns the maximum value in a set of values. Note: Also look at the MIN() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server MIN() Function Example Find the price of the cheapest product in the \"Products\" table: Definition and Usage The MIN() function returns the minimum value in a set of values. Note: Also look at the MAX() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server PI() Function Example Return the value of PI: Definition and Usage The PI() function returns the value of PI. Note: Also look at the DEGREES() and RADIANS() functions. Syntax Technical Details"
  },
  {
    "document": "SQL Server POWER() Function Example Return 4 raised to the second power: Definition and Usage The POWER() function returns the value of a number raised to the power of another number. Syntax Parameter Values Technical Details More Examples Example Return 8 raised to the third power:"
  },
  {
    "document": "SQL Server RADIANS() Function Example Convert a degree value into radians: Definition and Usage The RADIANS() function converts a degree value into radians. Syntax Parameter Values Technical Details More Examples Example Convert a degree value into radians:"
  },
  {
    "document": "SQL Server RAND() Function Example Return a random decimal number (no seed value - so it returns a completely random number >= 0 and <1): Definition and Usage The RAND() function returns a random number between 0 (inclusive) and 1 (exclusive). Syntax Parameter Values Technical Details More Examples Example Return a random decimal number (with seed value of 6): Example Return a random decimal number >= 5 and <10: Example Return a random number >= 5 and <=10:"
  },
  {
    "document": "SQL Server ROUND() Function Example Round the number to 2 decimal places: Definition and Usage The ROUND() function rounds a number to a specified number of decimal places. Tip: Also look at the FLOOR() and CEILING() functions. Syntax Parameter Values Technical Details More Examples Example Round the number to 2 decimal places, and also use the operation parameter: Example Round the number to -1 decimal place:"
  },
  {
    "document": "SQL Server SIGN() Function Example Return the sign of a number: Definition and Usage The SIGN() function returns the sign of a number. This function will return one of the following: Syntax Parameter Values Technical Details More Examples Example Return the sign of a number:"
  },
  {
    "document": "SQL Server SIN() Function Example Return the sine of a number: Definition and Usage The SIN() function returns the sine of a number. Syntax Parameter Values Technical Details More Examples Example Return the sine of a number:"
  },
  {
    "document": "SQL Server SQRT() Function Example Return the square root of a number: Definition and Usage The SQRT() function returns the square root of a number. Syntax Parameter Values Technical Details More Examples Example Return the square root of a number:"
  },
  {
    "document": "SQL Server SQUARE() Function Example Return the square of a number: Definition and Usage The SQUARE() function returns the square of a number. Syntax Parameter Values Technical Details More Examples Example Return the square of a number:"
  },
  {
    "document": "SQL Server SUM() Function Example Return the sum of the \"Quantity\" field in the \"OrderDetails\" table: Definition and Usage The SUM() function calculates the sum of a set of values. Note: NULL values are ignored. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server TAN() Function Example Return the tangent of a number: Definition and Usage The TAN() function returns the tangent of a number. Syntax Parameter Values Technical Details More Examples Example Return the tangent of a number:"
  },
  {
    "document": "SQL Server CURRENT_TIMESTAMP Function Example Return the current date and time: Definition and Usage The CURRENT_TIMESTAMP function returns the current date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format. Tip: Also look at the GETDATE() function. Syntax Technical Details"
  },
  {
    "document": "SQL Server DATEADD() Function Example Add one year to a date, then return the date: Definition and Usage The DATEADD() function adds a time/date interval to a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Add two months to a date, then return the date: Example Subtract two months from a date, then return the date: Example Add 18 years to the date in the BirthDate column, then return the date:"
  },
  {
    "document": "SQL Server DATEDIFF() Function Example Return the difference between two date values, in years: Definition and Usage The DATEDIFF() function returns the difference between two dates, as an integer. Syntax Parameter Values Technical Details More Examples Example Return the difference between two date values, in months: Example Return the difference between two date values, in hours:"
  },
  {
    "document": "SQL Server DATEFROMPARTS() Function Example Return a date from its parts: Definition and Usage The DATEFROMPARTS() function returns a date from the specified parts (year, month, and day values). Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server DATENAME() Function Example Return a specified part of a date: Definition and Usage The DATENAME() function returns a specified part of a date. This function returns the result as a string value. Syntax Parameter Values Technical Details More Examples Example Return a specified part of a date: Example Return a specified part of a date: Example Return a specified part of a date: Example Return a specified part of a date:"
  },
  {
    "document": "SQL Server DATEPART() Function Example Return a specified part of a date: Definition and Usage The DATEPART() function returns a specified part of a date. This function returns the result as an integer value. Syntax Parameter Values Technical Details More Examples Example Return a specified part of a date: Example Return a specified part of a date: Example Return a specified part of a date: Example Return a specified part of a date:"
  },
  {
    "document": "SQL Server DAY() Function Example Return the day of the month for a date: Definition and Usage The DAY() function returns the day of the month (from 1 to 31) for a specified date. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for a date:"
  },
  {
    "document": "SQL Server GETDATE() Function Example Return the current database system date and time: Definition and Usage The GETDATE() function returns the current database system date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format. Tip: Also look at the CURRENT_TIMESTAMP function. Syntax Technical Details"
  },
  {
    "document": "SQL Server GETUTCDATE() Function Example Return the current UTC date and time: Definition and Usage The GETUTCDATE() function returns the current database system UTC date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format. Syntax Technical Details"
  },
  {
    "document": "SQL Server ISDATE() Function Example Check if the expression is a valid date: Definition and Usage The ISDATE() function checks an expression and returns 1 if it is a valid date, otherwise 0. Syntax Parameter Values Technical Details More Examples Example Check if the expression is a valid date: Example Check if the expression is a valid date:"
  },
  {
    "document": "SQL Server MONTH() Function Example Return the month part of a date: Definition and Usage The MONTH() function returns the month part for a specified date (a number from 1 to 12). Syntax Parameter Values Technical Details More Examples Example Return the month part of a date:"
  },
  {
    "document": "SQL Server SYSDATETIME() Function Example Return the date and time of the SQL Server: Definition and Usage The SYSDATETIME() function returns the date and time of the computer where the SQL Server is running. Syntax Technical Details"
  },
  {
    "document": "SQL Server YEAR() Function Example Return the year part of a date: Definition and Usage The YEAR() function returns the year part for a specified date. Syntax Parameter Values Technical Details More Examples Example Return the year part of a date:"
  },
  {
    "document": "SQL Server CAST() Function Example Convert a value to an int datatype: Definition and Usage The CAST() function converts a value (of any type) into a specified datatype. Tip: Also look at the CONVERT() function. Syntax Parameter Values Technical Details More Examples Example Convert a value to a varchar datatype: Example Convert a value to a datetime datatype:"
  },
  {
    "document": "SQL Server COALESCE() Function Example Return the first non-null value in a list: Definition and Usage The COALESCE() function returns the first non-null value in a list. Syntax Parameter Values Technical Details More Examples Example Return the first non-null value in a list:"
  },
  {
    "document": "SQL Server CONVERT() Function Example Convert an expression to int: Definition and Usage The CONVERT() function converts a value (of any type) into a specified datatype. Tip: Also look at the CAST() function. Syntax Parameter Values Technical Details More Examples Example Convert an expression from one data type to another (varchar): Example Convert an expression from one data type to another (datetime): Example Convert an expression from one data type to another (varchar):"
  },
  {
    "document": "SQL Server CURRENT_USER Function Example Return the name of the current user in the SQL Server database: Definition and Usage The CURRENT_USER function returns the name of the current user in the SQL Server database. Syntax Technical Details"
  },
  {
    "document": "SQL Server IIF() Function Example Return \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE: Definition and Usage The IIF() function returns a value if a condition is TRUE, or another value if a condition is FALSE. Syntax Parameter Values Technical Details More Examples Example Return 5 if the condition is TRUE, or 10 if the condition is FALSE: Example Test whether two strings are the same and return \"YES\" if they are, or \"NO\" if not: Example Return \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE:"
  },
  {
    "document": "SQL Server ISNULL() Function Example Return the specified value IF the expression is NULL, otherwise return the expression: Definition and Usage The ISNULL() function returns a specified value if the expression is NULL. If the expression is NOT NULL, this function returns the expression. Syntax Parameter Values Technical Details More Examples Example Return the specified value IF the expression is NULL, otherwise return the expression: Example Return the specified value IF the expression is NULL, otherwise return the expression:"
  },
  {
    "document": "SQL Server ISNUMERIC() Function Example Tests whether the expression is numeric: Definition and Usage The ISNUMERIC() function tests whether an expression is numeric. This function returns 1 if the expression is numeric, otherwise it returns 0. Syntax Parameter Values Technical Details More Examples Example Tests whether the expression is numeric: Example Tests whether the expression is numeric: Example Tests whether the expression is numeric: Example Tests whether the expression is numeric:"
  },
  {
    "document": "SQL Server NULLIF() Function Example Compare two expressions: Definition and Usage The NULLIF() function returns NULL if two expressions are equal, otherwise it returns the first expression. Syntax Parameter Values Technical Details More Examples Example Compare two expressions: Example Compare two expressions: Example Compare two expressions:"
  },
  {
    "document": "SQL Server SESSION_USER Function Example Return the user name of the current user: Definition and Usage The SESSION_USER function returns the name of the current user in the SQL Server database. Syntax Technical Details"
  },
  {
    "document": "SQL Server SESSIONPROPERTY() Function Example Return the session settings for a specified option: Definition and Usage The SESSIONPROPERTY() function returns the session settings for a specified option. Syntax Parameter Values Technical Details"
  },
  {
    "document": "SQL Server SYSTEM_USER Function Example Return the login name information for the current user: Definition and Usage The SYSTEM_USER function returns the login name for the current user. Syntax Technical Details"
  },
  {
    "document": "SQL Server USER_NAME() Function Example Return the database user name (will return the current user since no id is specified): Definition and Usage The USER_NAME() function returns the database user name based on the specified id. If no id is specified, this function will return the name of the current user. Syntax Parameter Values Technical Details More Examples Example Return the database user name with id 1:"
  },
  {
    "document": "MS Access Functions MS Access has many built-in functions. This reference contains the string, numeric, and date functions in MS Access. MS Access String Functions MS Access Numeric Functions MS Access Date Functions MS Access Some Other Functions"
  },
  {
    "document": "MS Access Asc() Function Example Return the ASCII value of the first character in \"CustomerName\": Definition and Usage The Asc() function returns the ASCII value for the specific character. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Chr() Function Example Return the character based on the number code 65: Definition and Usage The Chr() function returns the character for the specified ASCII number code. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Concat With & Example Add 3 columns together into one \"Address\" column: Definition and Usage The & operator allows you to add two or more strings together. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access CurDir() Function Example Result: Definition and Usage The CurDir() function returns the full path for a specified drive. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Format() Function Example Format the \"Price\" column to Currency: Definition and Usage The Format() function formats a value with the specified format. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access InStr() Function Example Search for \"t\" in string \"Customer\", and return position: Definition and Usage The InStr() function gets the position of the first occurrence of a string in another. This function performs a case-insensitive search. Syntax Parameter Values Return Values Technical Details"
  },
  {
    "document": "MS Access InstrRev() Function Example Search for \"t\" in string \"Customer\" (start from the end of the string) and return position: Definition and Usage The InstrRev() function gets the position of the first occurrence of a string in another, from the end of string. This function performs a case-insensitive search. Syntax Parameter Values Return Values Technical Details"
  },
  {
    "document": "MS Access LCase() Function Example Convert the text in \"CustomerName\" to lower-case: Definition and Usage The LCase() function converts a string to lower-case. Tip: Also look at the UCase() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Left() Function Example Extract 3 characters from a string (starting from left): Definition and Usage The Left() function extracts a number of characters from a string (starting from left). Note: See also the Right() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from left):"
  },
  {
    "document": "MS Access Len() Function Example Return the length of a string: Definition and Usage The Len() function returns the length of a string. Syntax Parameter Values Technical Details More Examples Example Return the length of the text in the \"CustomerName\" column:"
  },
  {
    "document": "MS Access LTrim() Function Example Remove leading spaces from a string: Definition and Usage The LTrim() function removes leading spaces from a string. Note: See also the RTrim() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Mid() Function Example Extract characters from a string, starting at position 3: Definition and Usage The Mid() function extracts some characters from a string (starting at any position). Syntax Parameter Values Technical Details More Examples Example Extract characters from the text in a column (start at position 4, and extract 6 characters):"
  },
  {
    "document": "MS Access Replace() Function Example Replace \"i\" with \"a\" in the string: Definition and Usage The Replace() function replaces a substring within a string, with another substring, a specified number of times. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Right() Function Example Extract 4 characters from a string (starting from right): Definition and Usage The Right() function extracts a number of characters from a string (starting from right). Note: See also the Left() function. Syntax Parameter Values Technical Details More Examples Example Extract 5 characters from the text in the \"CustomerName\" column (starting from right):"
  },
  {
    "document": "MS Access RTrim() Function Example Remove trailing spaces from a string: Definition and Usage The RTrim() function removes trailing spaces from a string. Note: See also the LTrim() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Space() Function Example Return a string with 5 spaces: Definition and Usage The Space() function returns a string of the specified number of space characters. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Split() Function Example Split strings: Definition and Usage The Split() function splits a string into an array of strings. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Str() Function Example Return a number as a string: Definition and Usage The Str() function returns a number as a string. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access StrComp() Function Example Compare two strings: Definition and Usage The StrComp() function compares two strings. The result is returned as an integer based on the comparison: Syntax Parameter Values Technical Details More Examples Example Compare two strings: Example Compare two strings:"
  },
  {
    "document": "MS Access StrConv() Function Example Convert a string: Definition and Usage The StrConv() function returns a converted string. Syntax Parameter Values Technical Details More Examples Example Convert a string: Example Convert a string:"
  },
  {
    "document": "MS Access StrReverse() Function Example Reverse a string: Definition and Usage The StrReverse() function reverses a string and returns the result. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Trim() Function Example Remove leading and trailing spaces from a string: Definition and Usage The Trim() function removes both leading and trailing spaces from a string. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access UCase() Function Example Convert the text in \"CustomerName\" to upper-case: Definition and Usage The UCase() function converts a string to upper-case. Tip: Also look at the LCase() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Abs() Function Example Return the absolute value of a number: Definition and Usage The Abs() function returns the absolute (positive) value of a number. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Atn() Function Example Return the arc tangent of a number: Definition and Usage The Atn() function returns the arc tangent of a number. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Avg() Function Example Return the average value for the \"Price\" column in the \"Products\" table: Definition and Usage The Avg() function returns the average value of an expression. Note: NULL values are ignored. Syntax Parameter Values Technical Details More Examples Example Select all the products that have a price above the average price:"
  },
  {
    "document": "MS Access Cos() Function Example Return the cosine of an angle: Definition and Usage The Cos() function returns the cosine of an angle. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Count() Function Example Return the number of products in the \"Products\" table: Definition and Usage The Count() function returns the number of records returned by a select query. Note: NULL values are not counted. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Exp() Function Example Return e raised to the 5th power: Definition and Usage The Exp() function returns e raised to the power of a specified number. The constant e (2.718281ï¿½), is the base of natural logarithms. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Fix() Function Example Return the integer part of a number: Definition and Usage The Fix() function returns the integer part of a number. Syntax Parameter Values Technical Details More Examples Example Return the integer part of the \"Price\" column:"
  },
  {
    "document": "MS Access Format() Function Example Format a numeric expression to percent: Definition and Usage The Format() function formats a numeric value with the specified format. Syntax Parameter Values Technical Details More Examples Example Format the \"Price\" column to currency:"
  },
  {
    "document": "MS Access Int() Function Example Return the integer part of a number: Definition and Usage The Int() function returns the integer part of a number. Note: If number is negative, this function returns the first negative integer less than or equal to number. Syntax Parameter Values Technical Details More Examples Example Return the integer part of the \"Price\" column:"
  },
  {
    "document": "MS Access Max() Function Example Find the price of the most expensive product in the \"Products\" table: Definition and Usage The Max() function returns the maximum value in a set of values. Note: See also the Min() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Min() Function Example Find the price of the cheapest product in the \"Products\" table: Definition and Usage The Min() function returns the minimum value in a set of values. Note: See also the Max() function. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Randomize() Function Definition and Usage The Randomize() function initializes the random number generator (used by Rnd()) with a seed. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Rnd Function Example Return one random number between 1 and 10, and another random number between 100 and 499: Definition and Usage The Rnd function returns a random number. Note: If you do not call the Randomize() function before calling the Rnd function, the Rnd function may return the same random number each time! Syntax To return a random integer less than 1, but greater than or equal to zero: To return a random integer in a given range, use this formula: Parameter Values Technical Details"
  },
  {
    "document": "MS Access Round() Function Example Round the Price column to 1 decimal in the \"Products\" table: Definition and Usage The Round() function rounds a number to a specified number of decimal places. Note: If the expression ends with a 5, this function rounds so that the last digit is an even number. Here are some examples: Round(34.55, 1) - Result: 34.6 (rounds up)Round(34.65, 1) - Result: 34.6 (rounds down) Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Sgn() Function Example Return the sign of a number: Definition and Usage The Sgn() function returns the sign of a number. This function will return one of the following: Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Sqr() Function Example Return the square root of a number: Definition and Usage The Sqr() function returns the square root of a number. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Sum() Function Example Return the sum of the \"Quantity\" field in the \"OrderDetails\" table: Definition and Usage The Sum() function calculates the sum of a set of values. Note: NULL values are ignored. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Val() Function Example Read a string and return the numbers found in the string: Definition and Usage The Val() function reads a string and returns the numbers found in the string. Note: This function stops reading once it encounters a NON-numeric character. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Date() Function Example Return the current system date: Definition and Usage The Date() function returns the current system date. Syntax Parameter Values None. Technical Details"
  },
  {
    "document": "MS Access DateAdd() Function Example Add two years to a specified date: Definition and Usage The DateAdd() function adds a time/date interval to a date and then returns the date. Syntax Parameter Values Technical Details More Examples Example Add one year to the current system date: Example Add 6 months to the employees' birth date:"
  },
  {
    "document": "MS Access DateDiff() Function Example Return the difference between two dates, in years: Definition and Usage The DateDiff() function returns the difference between two dates. Syntax Parameter Values Technical Details More Examples Example Return the difference between two dates, in months: Example Return the difference between a specified date and today's date, in days:"
  },
  {
    "document": "MS Access DatePart() Function Example Return the year part of the specified date: Definition and Usage The DatePart() function returns a specified part of a date, as an integer. Syntax Parameter Values Technical Details More Examples Example Return the month part of the specified date: Example Return the weekday of today's date:"
  },
  {
    "document": "MS Access DateSerial() Function Example Return a date from it's parts: Definition and Usage The DateSerial() function returns a date from the specified parts (year, month, and day values). Syntax Parameter Values Technical Details More Examples Example Return a date from it's parts:"
  },
  {
    "document": "MS Access DateValue() Function Example Return a date based on the given string: Definition and Usage The DateValue() function returns a date based on a string. Note: If the given string does not include a year component, this function will use the current year. Syntax Parameter Values Technical Details More Examples Example Return a date based on the given string (without year component):"
  },
  {
    "document": "MS Access Day() Function Example Return the day of the month for the date: Definition and Usage The Day() function returns the day of the month for a given date. This function returns an integer between 1 and 31. Syntax Parameter Values Technical Details More Examples Example Return the day of the month for today's date: Example Return the day of the month for the \"BirthDay\" column in \"Employees\":"
  },
  {
    "document": "MS Access Format() Function Example Format the \"BirthDate\" column to a long date: Definition and Usage The Format() function formats a date value with the specified format. Syntax Parameter Values Technical Details"
  },
  {
    "document": "MS Access Hour() Function Example Return the hour for a specified time: Definition and Usage The Hour() function returns the hour part of a time/datetime. This function returns an integer between 0 and 23. Syntax Parameter Values Technical Details More Examples Example Return the hour for the current time: Example Return the hour for a specified datetime:"
  },
  {
    "document": "MS Access Minute() Function Example Return the minute part of a specified time: Definition and Usage The Minute() function returns the minute part of a time/datetime. This function returns an integer between 0 and 59. Syntax Parameter Values Technical Details More Examples Example Return the minute part of the current time: Example Return the minute part of a specified datetime:"
  },
  {
    "document": "MS Access Month() Function Example Return the month part for a specified date: Definition and Usage The Month() function returns the month part for a given date. This function returns an integer between 1 and 12. Syntax Parameter Values Technical Details More Examples Example Return the month part of today's date: Example Return the month part of the \"BirthDay\" column in \"Employees\":"
  },
  {
    "document": "MS Access MonthName() Function Example Return the name of the month based on a number: Definition and Usage The MonthName() function returns the name of the month based on a number. Syntax Parameter Values Technical Details More Examples Example Return the abbreviated name of the month based on a number:"
  },
  {
    "document": "MS Access Now() Function Example Return the computer system's current date and time: Definition and Usage The Now() function returns the current date and time based on the computer's system date and time. Syntax Parameter Values None. Technical Details"
  },
  {
    "document": "MS Access Second() Function Example Return the seconds part of a specified time: Definition and Usage The Second() function returns the seconds part of a time/datetime. This function returns an integer between 0 and 59. Syntax Parameter Values Technical Details More Examples Example Return the seconds part of the current time: Example Return the seconds part of a specified datetime:"
  },
  {
    "document": "MS Access Time() Function Example Return the current system time: Definition and Usage The Time() function returns the current system time. Syntax Parameter Values None. Technical Details"
  },
  {
    "document": "MS Access TimeSerial() Function Example Return a time from it's parts: Definition and Usage The TimeSerial() function returns a time from the specified parts (hour, minute, and second value). Syntax Parameter Values Technical Details More Examples Example Return a time from it's parts:"
  },
  {
    "document": "MS Access TimeValue() Function Example Return a time based on the given string: Definition and Usage The TimeValue() function returns a time based on a string. Syntax Parameter Values Technical Details More Examples Example Return a time based on the given string:"
  },
  {
    "document": "MS Access Weekday() Function Example Return the weekday number for a date: Definition and Usage The Weekday() function returns the weekday number for a given date. This function returns an integer between 1 and 7. Syntax Parameter Values Technical Details More Examples Example Return the weekday number for the current date: Example Return the weekday number for the specified date, setting Monday as the first day of week:"
  },
  {
    "document": "MS Access WeekdayName() Function Example Return the weekday name based on a number: Definition and Usage The WeekdayName() function returns the weekday name based on a number. Syntax Parameter Values Technical Details More Examples Example Return the abbreviated weekday name based on a number: Example Return the abbreviated weekday name based on a number, and let Monday be the first day of week:"
  },
  {
    "document": "MS Access Year() Function Example Return the year part of a specified date: Definition and Usage The Year() function returns the year part of a given date. This function returns an integer between 100 and 9999. Syntax Parameter Values Technical Details More Examples Example Return the year part of today's date: Example Return the year part of the \"BirthDate\" column in \"Employees\":"
  },
  {
    "document": "MS Access CurrentUser() Function Example Return the name of the current database user: Definition and Usage The CurrentUser() function returns the name of the current database user. Syntax Technical Details"
  },
  {
    "document": "MS Access Environ() Function Example Return a string that contains the value of an operating system environment variable: Definition and Usage The Environ() function returns a string that contains the value of an operating system environment variable. Syntax OR: Parameter Values Technical Details"
  },
  {
    "document": "MS Access IsDate() Function Example Check whether the expression can be converted to a date: Definition and Usage The IsDate() function checks whether an expression can be converted to a date. This function returns a Boolean value. TRUE (-1) indicates that the expression is a valid date, and FALSE (0) indicates that the expression is not a valid date. Syntax Parameter Values Technical Details More Examples Example Return TRUE if the expression is a valid date, otherwise FALSE: Example Return TRUE if the expression is a valid date, otherwise FALSE: Example Return TRUE if the expression is a valid date, otherwise FALSE:"
  },
  {
    "document": "MS Access IsNull() Function Example Check whether the expression is a Null value: Definition and Usage The IsNull() function checks whether an expression contains Null (no data). This function returns a Boolean value. TRUE (-1) indicates that the expression is a Null value, and FALSE (0) indicates that the expression is not a Null value. Syntax Parameter Values Technical Details More Examples Example Return TRUE if the expression is a null value, otherwise FALSE: Example Return TRUE if the expression is a null value, otherwise FALSE:"
  },
  {
    "document": "MS Access IsNumeric() Function Example Check whether the expression is a valid number: Definition and Usage The IsNumeric() function checks whether an expression is a valid number. This function returns a Boolean value. TRUE (-1) indicates that the expression is a valid number, and FALSE (0) indicates that the expression is not a valid number. Syntax Parameter Values Technical Details More Examples Example Return TRUE if the expression is a valid number, otherwise FALSE: Example Return TRUE if the expression is a valid number, otherwise FALSE:"
  },
  {
    "document": "SQL Quick Reference from W3Schools or ALTER TABLE table_name DROP COLUMN column_name or SELECT column_name FROM table_name AS table_alias or CREATE UNIQUE INDEX index_name ON table_name (column_name) or DELETE FROM table_name (Note: Deletes the entire table!!) DELETE * FROM table_name (Note: Deletes the entire table!!) or INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,....) or SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_table_name Source : https://www.w3schools.com/sql/sql_quickref.asp"
  },
  {
    "document": "SQL Examples SQL Syntax Example Explained SQL SELECT Examples Explained SQL SELECT DISTINCT Examples Explained SQL WHERE Examples Explained SQL AND, OR and NOT Operators Examples Explained SQL ORDER BY Examples Explained SQL NULL Values Examples Explained Get Certified! SQL SELECT TOP Examples Explained SQL MIN() and MAX() Examples Explained SQL COUNT, AVG() and SUM() Examples Explained SQL LIKE Examples Explained SQL Wildcards Examples Explained SQL IN Examples Explained SQL BETWEEN Examples Explained SQL Aliases Examples Explained SQL Joins Examples Explained SQL UNION Examples Explained SQL GROUP BY Examples Explained SQL HAVING Examples Explained SQL EXISTS Example Explained SQL ANY and ALL Examples Explained SQL CASE Examples Explained SQL Comments Examples Explained SQL Database SQL Database tutorials can be found here: Kickstart your career Get certified by completing the course"
  },
  {
    "document": "SQL Online Editor (Compiler) SQL Editor With our online SQL editor, you can edit SQL statements, and view the result in your browser. Example Click on the \"Try it Yourself\" button to see how it works. Publish Your Code If you want to create your own website, or web applications with a SQL Database, check out W3Schools Spaces. W3Schools Spaces is a website-building tool that enables you to create and share your website. In addition to a server, you get a SQL Database where you can store and access your data. It's easy to use and doesn't require any setup. The code editor is packed with features to help you achieve more: Learn Faster Practice is key to mastering coding, and the best way to put your SQL knowledge into practice is by getting practical with code. Use W3Schools Spaces to build, test and deploy code. The code editor lets you write and practice different types of computer languages. New languages are added all the time: If you don't know SQL, we suggest that you read our SQL Tutorial from scratch. Easy Package Management Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation. Build Powerful Websites You can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch. Or you can use the 60+ templates available and save time: Create your Spaces account today and explore them all! Share Your Website With The World Host and publish your websites in no time with W3School Spaces. W3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online. Want a custom domain for your website? You can buy a domain or transfer an existing one and connect it to your space. How Does It Work? Get started in a few clicks with W3School Spaces."
  },
  {
    "document": "SQL Quiz You can test your SQL skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about SQL. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the SQL Quiz â¯ If you don't know SQL, we suggest that you read our SQL Tutorial from scratch. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "SQL Exercises Exercises Test your SQL skills with exercises from all categories: Syntax Select Select Distinct Where Order By And Or Not Insert Into Null Values Update Delete Select Top Min and Max Count Sum Avg Like Wildcards In Between Aliases Joins Inner Join Left Join Right Join Full Join Self Join Union Group By Having Exists Any, All Select Into Insert Into Select CASE Expression NULL Functions Stored Procedures Comments Operators Create Database Drop Database Backup Database Create Table Drop Table Alter Table Constraints Not Null Unique Primary Key Foreign Key Check Default Create Index Auto Increment Dates View Injection Hosting Data Types Log in to track your progress If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete. As a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more. The Exercise The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer. Kickstart your career Get certified by completing the course"
  },
  {
    "document": "SQL Server Create SQL Server Coding Skills AI Tutor Projects Securely Choose your Plan By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. $0 /Forever This is for you that are beginning to explore coding and web development $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. 25% OFF You can also buy a domain or connect an existing one. Powerful Code Editor Practice Makes Perfect Save Time with Templates kAI Just landed in Spaces Learn to code more effectively and intelligently with kAI - AI tutor Hi! I'm kAI, W3Schools AI Tutor... Feel free to ask me any coding-related questions, and I'll do my best to assist you. I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more... I can even create complete websites for you based on your input, so what are you waiting for? Super Simple to Share Included for free in all plans Want custom domains? How it works Coding Made Easy Cloud-based Terminal & Log How To Libraries Database File Navigator Package Manager Analytics Environment Manager Save Time & Money. All Your Files in One Place. Fix Your Code Faster. Get Full Data Visibility. Increased Control and Security. Find What You Need Quicker. Get Traffic Insights. Get Inspired Frequently Asked Questions With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites. Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django. Your subscription will be automatically renewed every month. Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically. To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
  },
  {
    "document": "SQL Syllabus Introduction The W3Schools SQL Tutorial is comprehensive and beginner-friendly. It will give you a fundamental knowledge of SQL. It is designed for beginners and requires no prior experience with programming. The content has been carefully made to be bite-sized, simple, and easy to understand. The content has been proven by millions of users over the years. It is updated and improved frequently. The syllabus outline and its sequence are structured so you can learn SQL step by step, from the introduction to creating your first application with SQL. Get Started With SQL Â» Learning Outcomes Note: Are you a teacher teaching SQL? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here. Which Subjects Are SQL Relevant For? Get Started Activities In this tutorial we offer different activities for you to learn SQL for free: Sign in to Track Progress You can also create a free account to track your progress. As a signed-in user, you get access to features such as: Sign Up - It's free Overview of the Modules Get Started Sandbox and Lab Environment SQL, like any other coding language, is best learned by working hands-on with code. With our online SQL editor, you can edit the SQL statements, and view the result in your browser: Example If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free. Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time. Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates. Spaces require no installation and run directly in the browser. Features include: Create a Spaces Account SQL Certification W3Schools offers an end-of-pathway certification program. Here you can take exams to get certified. The SQL exam is a test that summarizes the W3Schools SQL syllabus. After passing the exam you get the \"Certified SQL Developer\" Certification. There are two different types of certifications: The non-adaptive is pass or no pass. The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional. Buy Certificate Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach SQL? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "SQL Study Plan Introduction The SQL study plan helps you teach your students SQL step-by-step. Creating a study plan for SQL is easy. You can use a pre-built study plan or customize it. Students have different skill levels. The study plans can be customized to ensure that everyone is challenged. Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of SQL to the final exam. W3Schools Academy This study plan is a feature of W3Schools Academy. W3Schools Academy is a platform that has everything you need to teach coding, all in one place. It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom. You need to have an active subscription to access the study plan feature. There are two different subscription tiers: Learn More Â» Academy also offer other features such as: Get a free demo Â» Teacher Materials W3Schools has everything you need to teach SQL. The SQL training materials is available for you to include and use in your study plan: SQL Syllabus With the SQL Syllabus, your students will start with the basics, like understanding databases and writing simple queries, and move to more advanced topics, like joining tables, using aggregate functions, and managing database structures. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun. Read more about SQL Syllabus. Study Plan Overview The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level. Learn More Â» Sample Study Plan You choose the timeline and pace of your study plans. Schools have different preferences. Some would like more intensive pace, e.g. 4 weeks, others 12 or more weeks. It is completely up to you. For example, this is how a 4-week SQL study plan could look like: Image of Sample SQL study plan: Ready to get started? Start with SQL Study Plans today. Get Started Â» Are You a Teacher? Are you interested in learning how you can use W3Schools Academy to Teach SQL programming? Watch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging. Watch Demo Â»"
  },
  {
    "document": "W3Schools SQL Bootcamp SQL Bootcamp Learn More What You Will Learn Python SQL NumPy Pandas R Self-paced Data Analytics Program Start learning Data Analytics with the W3Schools program and lay the foundations of your programming skills. This program is a great foundation for you that wants to get started with Data Analytics. It covers Python, SQL, NumPy, Pandas, R, and Data Science. Python is a popular object oriented programming language. SQL is a standard language for storing, manipulating and retrieving data in databases. NumPy is a Python library for using arrays in statistics and math. Pandas is a Python library for data analysis. R is a language for statistical computing and graphics. It provides an environment for data manipulation, calculation and visualization. This is a structured and interactive version of the w3schools Python, SQL, NumPy, Pandas, R, and Data Science Tutorial together with the w3schools certification. The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification. What You Get 7x Certifications: The Certified Data Analyst certification is granted when all the above certifications are obtained! Certificate of Completion You get sharable certificates that can be added to your CV, Resume or LinkedIn. Check out what it looks like in this example! Three Reasons to Join the Program Learn More How it Works Step 1. Course enrollment Enroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content. Step 2. Complete the course learning modules The courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam. Step 3. Take the exams The exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count. Step 4: Become certified Pass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code. Learn More"
  },
  {
    "document": "W3Schools SQL Certificate W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» W3Schools offers an Online Certification Program. The perfect solution for busy professionals who need to balance work, family, and career building. More than 50 000 certificates already issued! Get Your Certificate Â» Who Should Consider Getting Certified? Any student or professional within the digital industry. Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market. W3Schools is Trusted by Top Companies W3Schools has over two decades of experience with teaching coding online. Our certificates are recognized and valued by companies looking to employ skilled developers. Save Time and Money Show the world your coding skills by getting a certification. The prices is a small fraction compared to the price of traditional education. Document and validate your competence by getting certified! Exam overview Fee: 95 USD Achievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%) Number of questions: Adaptive, 60 on average Requirement to pass: Minimum 40% - Intermediate level Time limit: 60 minutes Number of attempts to pass: 3 Exam deadline: None Certification Expiration: None Format: Online, multiple choice Register now Â» Advance Faster in Your Career Getting a certificate proves your commitment to upgrading your skills. The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on. It gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career or helps you to start a new one. How Does It Work? Get Your Certificate and Share It With The World Example certificate: Each certificate gets a unique link that can be shared with others. Validate your certification with the link or QR code. Check how it looks like in this Example. Share your certificate on Linked in the Certifications section in just one click! Document Your Skills Getting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary. Get Your Certificate Â» Looking to add multiple users? Are you an educator, manager or business owner looking for courses or certifications? We are working with schools, companies and organizations from all over the world. Get courses and/or certifications for your team here."
  },
  {
    "document": "SQL Training Introduction: SQL is a standard language for storing, manipulating and retrieving data in databases. W3Schools offers an SQL training course that covers SQL foundations and more. The course includes the W3Schools Certified SQL Developer certification. The SQL training is relevant for companies and schools that want to certify their employees or students. Organizations can track learner progress, get insights and manage everything from licenses to certificates with W3Schools Academy. Remember that you can always learn for free on W3Schools with the SQL Tutorial. *Academy is available for companies and schools only. Get analytics to track learner progress and results. Flexible timelines and pacing to match busy schedules. Certifications that are trusted by leading organizations worldwide SQL Training with W3Schools W3Schools has been training millions of learners since 1998. Governments, schools, and organizations worldwide trust W3Schools to train employees and students. W3Schools training materials and content have been well-proven over the years and are updated regularly. With the W3Schools Academy pricing model, it is now one of the worlds most affordable quality SQL training options there is. Learning Outcomes The Certificate Course includes all the training materials to pass the Certified SQL Developer certification exam. No prerequisites are required to take the course. The learners will be able to: If you are not a company or school, you can still buy the course for personal use. Read more about W3Schools courses here: W3Schools Courses Certified SQL Developer After completing the training modules the learner will take the end of pathway exam. When the learner passes the exam, the learner will get the Certified SQL Developer certification. The exam is a multiple choice exam with 60 questions and a duration of 60 minutes. Image of a SQL Certificate: The certificate does not expire and is valid for lifetime. It is shareable and can be added to your CV or LinkedIn profile. You can read more about the certificate here: SQL Certificate Track Learner Progress As an employer or a school you can track learner progress and results. Assign courses to learners with ease and get them started in no time. With W3Schools Academy you can manage everything from licenses to certificates. It will give you everything you need to train your employees or students in different technologies. Image of class overview in Academy: You can read more about the Academy here: W3Schools Academy Note: If you don't want to track progress, there is an option to give them access to the course without any management. Interactive Learning The course is designed to be interactive and fun to learn. The learner will engage with different learning activities to keep them engaged. This includes quizzes, code exercises, challenges, and a final exam. Stay engaged with hands-on coding challenges that help you practice and test what you've learned. Image of one of the activity types in the course, a SQL Challenge: SQL is best learned by doing, and this is why we have included a lot of challenges in the course."
  },
  {
    "document": "You can read more about the different types of activities here: Coding Exercises Training Course Overview How to Get Started Are you ready to start training your employees today? Buy Access to Academy Now Â»"
  }
]